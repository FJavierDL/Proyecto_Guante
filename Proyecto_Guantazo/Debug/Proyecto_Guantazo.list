
Proyecto_Guantazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b04  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08008d08  08008d08  00009d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009300  08009300  0000b320  2**0
                  CONTENTS
  4 .ARM          00000008  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009308  08009308  0000b320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009308  08009308  0000a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009310  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  080094f0  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08009590  0000b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000990  20000320  08009630  0000b320  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000cb0  08009630  0000bcb0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014f37  00000000  00000000  0000b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034d4  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013e8  00000000  00000000  00023760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f17  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf0f  00000000  00000000  00025a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016898  00000000  00000000  0005296e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001094ab  00000000  00000000  00069206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001726b1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006360  00000000  00000000  001726f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000aa  00000000  00000000  00178a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	08008cec 	.word	0x08008cec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	08008cec 	.word	0x08008cec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 fae8 	bl	8000bc4 <bno055_writeData>
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4619      	mov	r1, r3
 800060a:	203d      	movs	r0, #61	@ 0x3d
 800060c:	f000 fada 	bl	8000bc4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000616:	2013      	movs	r0, #19
 8000618:	f000 fac8 	bl	8000bac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800061c:	e002      	b.n	8000624 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800061e:	2007      	movs	r0, #7
 8000620:	f000 fac4 	bl	8000bac <bno055_delay>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffe3 	bl	80005fc <bno055_setOperationMode>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800063e:	200c      	movs	r0, #12
 8000640:	f7ff ffdc 	bl	80005fc <bno055_setOperationMode>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800064c:	2120      	movs	r1, #32
 800064e:	203f      	movs	r0, #63	@ 0x3f
 8000650:	f000 fab8 	bl	8000bc4 <bno055_writeData>
  bno055_delay(700);
 8000654:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000658:	f000 faa8 	bl	8000bac <bno055_delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  bno055_reset();
 8000666:	f7ff ffef 	bl	8000648 <bno055_reset>

  uint8_t id = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fb91 	bl	8000d9c <bno055_readData>
  if (id != BNO055_ID) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2ba0      	cmp	r3, #160	@ 0xa0
 800067e:	d004      	beq.n	800068a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <bno055_setup+0x4c>)
 8000686:	f006 f9ed 	bl	8006a64 <iprintf>
  }
  bno055_setPage(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffa8 	bl	80005e0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000690:	2100      	movs	r1, #0
 8000692:	203f      	movs	r0, #63	@ 0x3f
 8000694:	f000 fa96 	bl	8000bc4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000698:	f7ff ffc8 	bl	800062c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fa85 	bl	8000bac <bno055_delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08008d08 	.word	0x08008d08

080006b0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b09e      	sub	sp, #120	@ 0x78
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff8e 	bl	80005e0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d108      	bne.n	80006de <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006d4:	2208      	movs	r2, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fb60 	bl	8000d9c <bno055_readData>
 80006dc:	e007      	b.n	80006ee <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006de:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006e6:	2206      	movs	r2, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fb57 	bl	8000d9c <bno055_readData>

  double scale = 1;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	4b81      	ldr	r3, [pc, #516]	@ (80008f8 <bno055_getVector+0x248>)
 80006f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80006f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d108      	bne.n	8000712 <bno055_getVector+0x62>
    scale = magScale;
 8000700:	4b7e      	ldr	r3, [pc, #504]	@ (80008fc <bno055_getVector+0x24c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800070c:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000710:	e03a      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000716:	2b08      	cmp	r3, #8
 8000718:	d007      	beq.n	800072a <bno055_getVector+0x7a>
 800071a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800071e:	2b28      	cmp	r3, #40	@ 0x28
 8000720:	d003      	beq.n	800072a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000726:	2b2e      	cmp	r3, #46	@ 0x2e
 8000728:	d108      	bne.n	800073c <bno055_getVector+0x8c>
    scale = accelScale;
 800072a:	4b75      	ldr	r3, [pc, #468]	@ (8000900 <bno055_getVector+0x250>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000736:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800073a:	e025      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800073c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000740:	2b14      	cmp	r3, #20
 8000742:	d108      	bne.n	8000756 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000744:	4b6f      	ldr	r3, [pc, #444]	@ (8000904 <bno055_getVector+0x254>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000750:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000754:	e018      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800075a:	2b1a      	cmp	r3, #26
 800075c:	d108      	bne.n	8000770 <bno055_getVector+0xc0>
    scale = eulerScale;
 800075e:	4b6a      	ldr	r3, [pc, #424]	@ (8000908 <bno055_getVector+0x258>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800076a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800076e:	e00b      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000774:	2b20      	cmp	r3, #32
 8000776:	d107      	bne.n	8000788 <bno055_getVector+0xd8>
    scale = quaScale;
 8000778:	4b64      	ldr	r3, [pc, #400]	@ (800090c <bno055_getVector+0x25c>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000784:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000788:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f006 fae3 	bl	8006d5c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800079a:	2b20      	cmp	r3, #32
 800079c:	d14c      	bne.n	8000838 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800079e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007b8:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007c0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007de:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007e6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000804:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000808:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800080c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000810:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800082a:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800082e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000832:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000836:	e038      	b.n	80008aa <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000838:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b21a      	sxth	r2, r3
 8000840:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000852:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000856:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800085a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800085e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000878:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800087c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000880:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000884:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800089e:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80008a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008a6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 80008aa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80008ae:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80008c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80008c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80008ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80008ce:	ec49 8b14 	vmov	d4, r8, r9
 80008d2:	ec45 4b15 	vmov	d5, r4, r5
 80008d6:	ec41 0b16 	vmov	d6, r0, r1
 80008da:	ec43 2b17 	vmov	d7, r2, r3
}
 80008de:	eeb0 0b44 	vmov.f64	d0, d4
 80008e2:	eeb0 1b45 	vmov.f64	d1, d5
 80008e6:	eeb0 2b46 	vmov.f64	d2, d6
 80008ea:	eeb0 3b47 	vmov.f64	d3, d7
 80008ee:	3778      	adds	r7, #120	@ 0x78
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80008f6:	bf00      	nop
 80008f8:	3ff00000 	.word	0x3ff00000
 80008fc:	20000006 	.word	0x20000006
 8000900:	20000000 	.word	0x20000000
 8000904:	20000002 	.word	0x20000002
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008

08000910 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000914:	b090      	sub	sp, #64	@ 0x40
 8000916:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000918:	2020      	movs	r0, #32
 800091a:	f7ff fec9 	bl	80006b0 <bno055_getVector>
 800091e:	eeb0 4b40 	vmov.f64	d4, d0
 8000922:	eeb0 5b41 	vmov.f64	d5, d1
 8000926:	eeb0 6b42 	vmov.f64	d6, d2
 800092a:	eeb0 7b43 	vmov.f64	d7, d3
 800092e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000932:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000936:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800093a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800093e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000942:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000946:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800094a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800094e:	ec49 8b14 	vmov	d4, r8, r9
 8000952:	ec45 4b15 	vmov	d5, r4, r5
 8000956:	ec41 0b16 	vmov	d6, r0, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
}
 800095e:	eeb0 0b44 	vmov.f64	d0, d4
 8000962:	eeb0 1b45 	vmov.f64	d1, d5
 8000966:	eeb0 2b46 	vmov.f64	d2, d6
 800096a:	eeb0 3b47 	vmov.f64	d3, d7
 800096e:	3740      	adds	r7, #64	@ 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000976 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800097e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000982:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800098e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000992:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000996:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00b      	beq.n	80009b6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800099e:	e000      	b.n	80009a2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009a0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b6:	687b      	ldr	r3, [r7, #4]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	2b80      	cmp	r3, #128	@ 0x80
 8000a22:	d101      	bne.n	8000a28 <LL_USART_IsActiveFlag_TXE+0x18>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a4a:	d101      	bne.n	8000a50 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a72:	d101      	bne.n	8000a78 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <LL_USART_IsActiveFlag_REACK+0x1c>
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b089      	sub	sp, #36	@ 0x24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	e853 3f00 	ldrex	r3, [r3]
 8000a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	61ba      	str	r2, [r7, #24]
 8000aa8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	e841 2300 	strex	r3, r2, [r1]
 8000ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1e9      	bne.n	8000a8e <LL_USART_EnableIT_RXNE+0x8>
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3724      	adds	r7, #36	@ 0x24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	e853 3f00 	ldrex	r3, [r3]
 8000adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	61ba      	str	r2, [r7, #24]
 8000aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	e841 2300 	strex	r3, r2, [r1]
 8000af8:	613b      	str	r3, [r7, #16]
   return(result);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1e7      	bne.n	8000ad0 <LL_USART_EnableIT_ERROR+0x8>
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000b1a:	78fa      	ldrb	r2, [r7, #3]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800

08000b5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <bno055_assignI2C+0x1c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000033c 	.word	0x2000033c

08000bac <bno055_delay>:

void bno055_delay(int time) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f84a 	bl	8001c50 <HAL_Delay>
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	733b      	strb	r3, [r7, #12]
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d48 <bno055_writeData+0x184>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f107 020c 	add.w	r2, r7, #12
 8000be4:	230a      	movs	r3, #10
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	2150      	movs	r1, #80	@ 0x50
 8000bec:	f002 f9e6 	bl	8002fbc <HAL_I2C_Master_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80a0 	beq.w	8000d3c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d103      	bne.n	8000c0a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000c02:	4852      	ldr	r0, [pc, #328]	@ (8000d4c <bno055_writeData+0x188>)
 8000c04:	f005 ff96 	bl	8006b34 <puts>
 8000c08:	e012      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d103      	bne.n	8000c18 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000c10:	484f      	ldr	r0, [pc, #316]	@ (8000d50 <bno055_writeData+0x18c>)
 8000c12:	f005 ff8f 	bl	8006b34 <puts>
 8000c16:	e00b      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d103      	bne.n	8000c26 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000c1e:	484d      	ldr	r0, [pc, #308]	@ (8000d54 <bno055_writeData+0x190>)
 8000c20:	f005 ff88 	bl	8006b34 <puts>
 8000c24:	e004      	b.n	8000c30 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484b      	ldr	r0, [pc, #300]	@ (8000d58 <bno055_writeData+0x194>)
 8000c2c:	f005 ff1a 	bl	8006a64 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000c30:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <bno055_writeData+0x184>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fbb9 	bl	80033ac <HAL_I2C_GetError>
 8000c3a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d07e      	beq.n	8000d40 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d103      	bne.n	8000c50 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000c48:	4844      	ldr	r0, [pc, #272]	@ (8000d5c <bno055_writeData+0x198>)
 8000c4a:	f005 ff73 	bl	8006b34 <puts>
 8000c4e:	e021      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d103      	bne.n	8000c5e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000c56:	4842      	ldr	r0, [pc, #264]	@ (8000d60 <bno055_writeData+0x19c>)
 8000c58:	f005 ff6c 	bl	8006b34 <puts>
 8000c5c:	e01a      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d103      	bne.n	8000c6c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000c64:	483f      	ldr	r0, [pc, #252]	@ (8000d64 <bno055_writeData+0x1a0>)
 8000c66:	f005 ff65 	bl	8006b34 <puts>
 8000c6a:	e013      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d103      	bne.n	8000c7a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000c72:	483d      	ldr	r0, [pc, #244]	@ (8000d68 <bno055_writeData+0x1a4>)
 8000c74:	f005 ff5e 	bl	8006b34 <puts>
 8000c78:	e00c      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d103      	bne.n	8000c88 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000c80:	483a      	ldr	r0, [pc, #232]	@ (8000d6c <bno055_writeData+0x1a8>)
 8000c82:	f005 ff57 	bl	8006b34 <puts>
 8000c86:	e005      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	d102      	bne.n	8000c94 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000c8e:	4838      	ldr	r0, [pc, #224]	@ (8000d70 <bno055_writeData+0x1ac>)
 8000c90:	f005 ff50 	bl	8006b34 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <bno055_writeData+0x184>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fb79 	bl	8003390 <HAL_I2C_GetState>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ca8:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000caa:	f005 ff43 	bl	8006b34 <puts>
 8000cae:	e048      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d103      	bne.n	8000cbe <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000cb6:	482f      	ldr	r0, [pc, #188]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000cb8:	f005 ff3c 	bl	8006b34 <puts>
 8000cbc:	e041      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b24      	cmp	r3, #36	@ 0x24
 8000cc2:	d103      	bne.n	8000ccc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <bno055_writeData+0x1b4>)
 8000cc6:	f005 ff35 	bl	8006b34 <puts>
 8000cca:	e03a      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b21      	cmp	r3, #33	@ 0x21
 8000cd0:	d103      	bne.n	8000cda <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000cd2:	482a      	ldr	r0, [pc, #168]	@ (8000d7c <bno055_writeData+0x1b8>)
 8000cd4:	f005 ff2e 	bl	8006b34 <puts>
 8000cd8:	e033      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b22      	cmp	r3, #34	@ 0x22
 8000cde:	d103      	bne.n	8000ce8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ce0:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <bno055_writeData+0x1bc>)
 8000ce2:	f005 ff27 	bl	8006b34 <puts>
 8000ce6:	e02c      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b28      	cmp	r3, #40	@ 0x28
 8000cec:	d103      	bne.n	8000cf6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <bno055_writeData+0x1c0>)
 8000cf0:	f005 ff20 	bl	8006b34 <puts>
 8000cf4:	e025      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b29      	cmp	r3, #41	@ 0x29
 8000cfa:	d103      	bne.n	8000d04 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000cfc:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <bno055_writeData+0x1c4>)
 8000cfe:	f005 ff19 	bl	8006b34 <puts>
 8000d02:	e01e      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d08:	d103      	bne.n	8000d12 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000d0a:	4820      	ldr	r0, [pc, #128]	@ (8000d8c <bno055_writeData+0x1c8>)
 8000d0c:	f005 ff12 	bl	8006b34 <puts>
 8000d10:	e017      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b60      	cmp	r3, #96	@ 0x60
 8000d16:	d103      	bne.n	8000d20 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000d18:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <bno055_writeData+0x1cc>)
 8000d1a:	f005 ff0b 	bl	8006b34 <puts>
 8000d1e:	e010      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8000d24:	d103      	bne.n	8000d2e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <bno055_writeData+0x1d0>)
 8000d28:	f005 ff04 	bl	8006b34 <puts>
 8000d2c:	e009      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2be0      	cmp	r3, #224	@ 0xe0
 8000d32:	d106      	bne.n	8000d42 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000d34:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <bno055_writeData+0x1d4>)
 8000d36:	f005 fefd 	bl	8006b34 <puts>
 8000d3a:	e002      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d3c:	bf00      	nop
 8000d3e:	e000      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d40:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000033c 	.word	0x2000033c
 8000d4c:	08008d44 	.word	0x08008d44
 8000d50:	08008d68 	.word	0x08008d68
 8000d54:	08008d90 	.word	0x08008d90
 8000d58:	08008db4 	.word	0x08008db4
 8000d5c:	08008dcc 	.word	0x08008dcc
 8000d60:	08008de0 	.word	0x08008de0
 8000d64:	08008df4 	.word	0x08008df4
 8000d68:	08008e08 	.word	0x08008e08
 8000d6c:	08008e1c 	.word	0x08008e1c
 8000d70:	08008e30 	.word	0x08008e30
 8000d74:	08008e48 	.word	0x08008e48
 8000d78:	08008e60 	.word	0x08008e60
 8000d7c:	08008e74 	.word	0x08008e74
 8000d80:	08008e8c 	.word	0x08008e8c
 8000d84:	08008ea4 	.word	0x08008ea4
 8000d88:	08008ebc 	.word	0x08008ebc
 8000d8c:	08008edc 	.word	0x08008edc
 8000d90:	08008efc 	.word	0x08008efc
 8000d94:	08008f14 	.word	0x08008f14
 8000d98:	08008f2c 	.word	0x08008f2c

08000d9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <bno055_readData+0x40>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	1dfa      	adds	r2, r7, #7
 8000db2:	2364      	movs	r3, #100	@ 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	2150      	movs	r1, #80	@ 0x50
 8000dba:	f002 f8ff 	bl	8002fbc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <bno055_readData+0x40>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2264      	movs	r2, #100	@ 0x64
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	2150      	movs	r1, #80	@ 0x50
 8000dce:	f002 f9e9 	bl	80031a4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000033c 	.word	0x2000033c

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	@ 0x48
 8000de4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fed6 	bl	8001b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f8eb 	bl	8000fc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000dee:	4b6a      	ldr	r3, [pc, #424]	@ (8000f98 <main+0x1b8>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 fac8 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df8:	f000 faa0 	bl	800133c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dfc:	f000 f9e2 	bl	80011c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e00:	f000 fa6e 	bl	80012e0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e04:	f000 f99e 	bl	8001144 <MX_I2C1_Init>
  MX_ETH_Init();
 8000e08:	f000 f94e 	bl	80010a8 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  ITM_Port32(31) = 2;
 8000e0c:	4b62      	ldr	r3, [pc, #392]	@ (8000f98 <main+0x1b8>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	601a      	str	r2, [r3, #0]

  bno055_assignI2C(&hi2c1);
 8000e12:	4862      	ldr	r0, [pc, #392]	@ (8000f9c <main+0x1bc>)
 8000e14:	f7ff feba 	bl	8000b8c <bno055_assignI2C>
  bno055_setup();
 8000e18:	f7ff fc22 	bl	8000660 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000e1c:	f7ff fc0d 	bl	800063a <bno055_setOperationModeNDOF>


  /* Polling USART initialisation */
    while ((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3)))){
 8000e20:	bf00      	nop
 8000e22:	485f      	ldr	r0, [pc, #380]	@ (8000fa0 <main+0x1c0>)
 8000e24:	f7ff fe07 	bl	8000a36 <LL_USART_IsActiveFlag_TEACK>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <main+0x42>
 8000e2e:	485c      	ldr	r0, [pc, #368]	@ (8000fa0 <main+0x1c0>)
 8000e30:	f7ff fe15 	bl	8000a5e <LL_USART_IsActiveFlag_REACK>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f3      	beq.n	8000e22 <main+0x42>
    }

    /* Enable RXNE and Error interrupts */
    LL_USART_EnableIT_RXNE(USART3);
 8000e3a:	4859      	ldr	r0, [pc, #356]	@ (8000fa0 <main+0x1c0>)
 8000e3c:	f7ff fe23 	bl	8000a86 <LL_USART_EnableIT_RXNE>
    LL_USART_EnableIT_ERROR(USART3);
 8000e40:	4857      	ldr	r0, [pc, #348]	@ (8000fa0 <main+0x1c0>)
 8000e42:	f7ff fe41 	bl	8000ac8 <LL_USART_EnableIT_ERROR>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  snprintf((char *)aStringToSend, sizeof(aStringToSend), "W: %.6f, X: %.6f, Y: %.6f, Z: %.6f\r\n", w, x, y, z);
 8000e46:	4b57      	ldr	r3, [pc, #348]	@ (8000fa4 <main+0x1c4>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e50:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <main+0x1c8>)
 8000e52:	edd3 6a00 	vldr	s13, [r3]
 8000e56:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000e5a:	4b54      	ldr	r3, [pc, #336]	@ (8000fac <main+0x1cc>)
 8000e5c:	edd3 5a00 	vldr	s11, [r3]
 8000e60:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <main+0x1d0>)
 8000e66:	edd3 4a00 	vldr	s9, [r3]
 8000e6a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000e6e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e72:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e76:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e7a:	ed8d 7b00 	vstr	d7, [sp]
 8000e7e:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb4 <main+0x1d4>)
 8000e80:	21ff      	movs	r1, #255	@ 0xff
 8000e82:	484d      	ldr	r0, [pc, #308]	@ (8000fb8 <main+0x1d8>)
 8000e84:	f005 fe5e 	bl	8006b44 <sniprintf>
	  	  ubSizeToSend = strlen((char *)aStringToSend);
 8000e88:	484b      	ldr	r0, [pc, #300]	@ (8000fb8 <main+0x1d8>)
 8000e8a:	f7ff fa29 	bl	80002e0 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b4a      	ldr	r3, [pc, #296]	@ (8000fbc <main+0x1dc>)
 8000e94:	701a      	strb	r2, [r3, #0]
	  	  {
	  		LL_USART_TransmitData8(USART3,  aStringToSend[i]);
	  		while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
	  	  }*/

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	4849      	ldr	r0, [pc, #292]	@ (8000fc0 <main+0x1e0>)
 8000e9a:	f001 ffe4 	bl	8002e66 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	@ 0x64
 8000ea0:	f000 fed6 	bl	8001c50 <HAL_Delay>
	  bno055_vector_t v = bno055_getVectorQuaternion();
 8000ea4:	f7ff fd34 	bl	8000910 <bno055_getVectorQuaternion>
 8000ea8:	eeb0 4b40 	vmov.f64	d4, d0
 8000eac:	eeb0 5b41 	vmov.f64	d5, d1
 8000eb0:	eeb0 6b42 	vmov.f64	d6, d2
 8000eb4:	eeb0 7b43 	vmov.f64	d7, d3
 8000eb8:	ed87 4b00 	vstr	d4, [r7]
 8000ebc:	ed87 5b02 	vstr	d5, [r7, #8]
 8000ec0:	ed87 6b04 	vstr	d6, [r7, #16]
 8000ec4:	ed87 7b06 	vstr	d7, [r7, #24]
	  w = v.w;
 8000ec8:	ed97 7b00 	vldr	d7, [r7]
 8000ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed0:	4b34      	ldr	r3, [pc, #208]	@ (8000fa4 <main+0x1c4>)
 8000ed2:	edc3 7a00 	vstr	s15, [r3]
	  x = v.x;
 8000ed6:	ed97 7b02 	vldr	d7, [r7, #8]
 8000eda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <main+0x1c8>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]
	  y = v.y;
 8000ee4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ee8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <main+0x1cc>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
	  z = v.z;
 8000ef2:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ef6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <main+0x1d0>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
	  //printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);



	  snprintf((char *)aStringToSend, sizeof(aStringToSend), "W: %.6f, X: %.6f, Y: %.6f, Z: %.6f\r\n", w, x, y, z);
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <main+0x1c4>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <main+0x1c8>)
 8000f0c:	edd3 6a00 	vldr	s13, [r3]
 8000f10:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f14:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <main+0x1cc>)
 8000f16:	edd3 5a00 	vldr	s11, [r3]
 8000f1a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <main+0x1d0>)
 8000f20:	edd3 4a00 	vldr	s9, [r3]
 8000f24:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000f28:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000f2c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000f30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f34:	ed8d 7b00 	vstr	d7, [sp]
 8000f38:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb4 <main+0x1d4>)
 8000f3a:	21ff      	movs	r1, #255	@ 0xff
 8000f3c:	481e      	ldr	r0, [pc, #120]	@ (8000fb8 <main+0x1d8>)
 8000f3e:	f005 fe01 	bl	8006b44 <sniprintf>
	  ubSizeToSend = strlen((char *)aStringToSend);
 8000f42:	481d      	ldr	r0, [pc, #116]	@ (8000fb8 <main+0x1d8>)
 8000f44:	f7ff f9cc 	bl	80002e0 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <main+0x1dc>)
 8000f4e:	701a      	strb	r2, [r3, #0]
		  snprintf((char *)aStringToSend, sizeof(aStringToSend), "X: %.6f, Contador: %d\r\n", xPrueba, cont);
		  ubSizeToSend = strlen((char *)aStringToSend);
	   */

	  // Enviar el mensaje byte por byte
	  for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f56:	e013      	b.n	8000f80 <main+0x1a0>
		LL_USART_TransmitData8(USART3,  aStringToSend[i]);
 8000f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f5c:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <main+0x1d8>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	4619      	mov	r1, r3
 8000f62:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <main+0x1c0>)
 8000f64:	f7ff fdd3 	bl	8000b0e <LL_USART_TransmitData8>
		 while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
 8000f68:	bf00      	nop
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <main+0x1c0>)
 8000f6c:	f7ff fd50 	bl	8000a10 <LL_USART_IsActiveFlag_TXE>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <main+0x18a>
	  for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <main+0x1dc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3e5      	bcc.n	8000f58 <main+0x178>
	  }
	 HAL_Delay(400);
 8000f8c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000f90:	f000 fe5e 	bl	8001c50 <HAL_Delay>
  {
 8000f94:	e757      	b.n	8000e46 <main+0x66>
 8000f96:	bf00      	nop
 8000f98:	e000007c 	.word	0xe000007c
 8000f9c:	20000428 	.word	0x20000428
 8000fa0:	40004800 	.word	0x40004800
 8000fa4:	20000b44 	.word	0x20000b44
 8000fa8:	20000b48 	.word	0x20000b48
 8000fac:	20000b4c 	.word	0x20000b4c
 8000fb0:	20000b50 	.word	0x20000b50
 8000fb4:	08008f44 	.word	0x08008f44
 8000fb8:	20000a44 	.word	0x20000a44
 8000fbc:	20000b43 	.word	0x20000b43
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2234      	movs	r2, #52	@ 0x34
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fec2 	bl	8006d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fe8:	f002 fe38 	bl	8003c5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <SystemClock_Config+0xdc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80010a0 <SystemClock_Config+0xdc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <SystemClock_Config+0xdc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <SystemClock_Config+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800100c:	4a25      	ldr	r2, [pc, #148]	@ (80010a4 <SystemClock_Config+0xe0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <SystemClock_Config+0xe0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001024:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001028:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001038:	2360      	movs	r3, #96	@ 0x60
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe65 	bl	8003d1c <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001058:	f000 fa54 	bl	8001504 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800105c:	f002 fe0e 	bl	8003c7c <HAL_PWREx_EnableOverDrive>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001066:	f000 fa4d 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2103      	movs	r1, #3
 8001086:	4618      	mov	r0, r3
 8001088:	f003 f8f6 	bl	8004278 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001092:	f000 fa37 	bl	8001504 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	@ 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_ETH_Init+0x84>)
 80010ae:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <MX_ETH_Init+0x88>)
 80010b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010c0:	22e1      	movs	r2, #225	@ 0xe1
 80010c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_ETH_Init+0x84>)
 80010d8:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <MX_ETH_Init+0x8c>)
 80010da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_ETH_Init+0x84>)
 80010de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_ETH_Init+0x84>)
 80010e6:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <MX_ETH_Init+0x90>)
 80010e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_ETH_Init+0x84>)
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <MX_ETH_Init+0x94>)
 80010ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_ETH_Init+0x84>)
 80010f2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80010f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <MX_ETH_Init+0x84>)
 80010fa:	f001 f9c9 	bl	8002490 <HAL_ETH_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001104:	f000 f9fe 	bl	8001504 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001108:	2238      	movs	r2, #56	@ 0x38
 800110a:	2100      	movs	r1, #0
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <MX_ETH_Init+0x98>)
 800110e:	f005 fe25 	bl	8006d5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_ETH_Init+0x98>)
 8001114:	2221      	movs	r2, #33	@ 0x21
 8001116:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_ETH_Init+0x98>)
 800111a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800111e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <MX_ETH_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000378 	.word	0x20000378
 8001130:	40028000 	.word	0x40028000
 8001134:	20000b54 	.word	0x20000b54
 8001138:	20000280 	.word	0x20000280
 800113c:	200001e0 	.word	0x200001e0
 8001140:	20000340 	.word	0x20000340

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <MX_I2C1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <MX_I2C1_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001180:	f001 fe8c 	bl	8002e9c <HAL_I2C_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800118a:	f000 f9bb 	bl	8001504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001192:	f002 fb83 	bl	800389c <HAL_I2CEx_ConfigAnalogFilter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800119c:	f000 f9b2 	bl	8001504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_I2C1_Init+0x74>)
 80011a4:	f002 fbc5 	bl	8003932 <HAL_I2CEx_ConfigDigitalFilter>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f9a9 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000428 	.word	0x20000428
 80011bc:	40005400 	.word	0x40005400
 80011c0:	20303e5d 	.word	0x20303e5d

080011c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0b2      	sub	sp, #200	@ 0xc8
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80011ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2290      	movs	r2, #144	@ 0x90
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fdb0 	bl	8006d5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001200:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fa27 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8001214:	f000 f976 	bl	8001504 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001218:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800121c:	f7ff fc9e 	bl	8000b5c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001220:	2008      	movs	r0, #8
 8001222:	f7ff fc83 	bl	8000b2c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001246:	2307      	movs	r3, #7
 8001248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001250:	4619      	mov	r1, r3
 8001252:	4821      	ldr	r0, [pc, #132]	@ (80012d8 <MX_USART3_UART_Init+0x114>)
 8001254:	f003 ff2f 	bl	80050b6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800125c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001282:	4619      	mov	r1, r3
 8001284:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_USART3_UART_Init+0x114>)
 8001286:	f003 ff16 	bl	80050b6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800128a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800128e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012a4:	230c      	movs	r3, #12
 80012a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  LL_USART_Init(USART3, &USART_InitStruct);
 80012b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012ba:	4619      	mov	r1, r3
 80012bc:	4807      	ldr	r0, [pc, #28]	@ (80012dc <MX_USART3_UART_Init+0x118>)
 80012be:	f004 fb45 	bl	800594c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <MX_USART3_UART_Init+0x118>)
 80012c4:	f7ff fb8e 	bl	80009e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_USART3_UART_Init+0x118>)
 80012ca:	f7ff fb7b 	bl	80009c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	37c8      	adds	r7, #200	@ 0xc8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40004800 	.word	0x40004800

080012e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ee:	2206      	movs	r2, #6
 80012f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001300:	2202      	movs	r2, #2
 8001302:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001306:	2201      	movs	r2, #1
 8001308:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001318:	2201      	movs	r2, #1
 800131a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001324:	f002 fb51 	bl	80039ca <HAL_PCD_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800132e:	f000 f8e9 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000053c 	.word	0x2000053c

0800133c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <MX_DMA_Init+0x48>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <MX_DMA_Init+0x48>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <MX_DMA_Init+0x48>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	200b      	movs	r0, #11
 8001360:	f000 fd75 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001364:	200b      	movs	r0, #11
 8001366:	f000 fd8e 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2011      	movs	r0, #17
 8001370:	f000 fd6d 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001374:	2011      	movs	r0, #17
 8001376:	f000 fd86 	bl	8001e86 <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b47      	ldr	r3, [pc, #284]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a46      	ldr	r2, [pc, #280]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a40      	ldr	r2, [pc, #256]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b3e      	ldr	r3, [pc, #248]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a3a      	ldr	r2, [pc, #232]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a34      	ldr	r2, [pc, #208]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <MX_GPIO_Init+0x134>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <MX_GPIO_Init+0x134>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <MX_GPIO_Init+0x134>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <MX_GPIO_Init+0x134>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <MX_GPIO_Init+0x134>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <MX_GPIO_Init+0x134>)
 800141c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_GPIO_Init+0x134>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001434:	4822      	ldr	r0, [pc, #136]	@ (80014c0 <MX_GPIO_Init+0x138>)
 8001436:	f001 fcfd 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2140      	movs	r1, #64	@ 0x40
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 8001440:	f001 fcf8 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	481b      	ldr	r0, [pc, #108]	@ (80014c8 <MX_GPIO_Init+0x140>)
 800145c:	f001 fb3e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001460:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_GPIO_Init+0x138>)
 800147a:	f001 fb2f 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 8001496:	f001 fb21 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 80014ae:	f001 fb15 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40020800 	.word	0x40020800

080014cc <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e009      	b.n	80014f2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fa45 	bl	8000976 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbf1      	blt.n	80014de <_write+0x12>
	}
	return len;
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <Error_Handler+0x8>

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_MspInit+0x44>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x44>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x44>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x44>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	@ 0x38
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <HAL_ETH_MspInit+0x158>)
 8001576:	4293      	cmp	r3, r2
 8001578:	f040 8096 	bne.w	80016a8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800157c:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	4a4c      	ldr	r2, [pc, #304]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 8001582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001586:	6313      	str	r3, [r2, #48]	@ 0x30
 8001588:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	623b      	str	r3, [r7, #32]
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a46      	ldr	r2, [pc, #280]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 800159a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b44      	ldr	r3, [pc, #272]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	4a40      	ldr	r2, [pc, #256]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b8:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c8:	4a3a      	ldr	r2, [pc, #232]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d0:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	4a34      	ldr	r2, [pc, #208]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e8:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	4a2e      	ldr	r2, [pc, #184]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 8001612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001616:	6313      	str	r3, [r2, #48]	@ 0x30
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_ETH_MspInit+0x15c>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001624:	2332      	movs	r3, #50	@ 0x32
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001634:	230b      	movs	r3, #11
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	481e      	ldr	r0, [pc, #120]	@ (80016b8 <HAL_ETH_MspInit+0x160>)
 8001640:	f001 fa4c 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001644:	2386      	movs	r3, #134	@ 0x86
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001654:	230b      	movs	r3, #11
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	4817      	ldr	r0, [pc, #92]	@ (80016bc <HAL_ETH_MspInit+0x164>)
 8001660:	f001 fa3c 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001664:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001676:	230b      	movs	r3, #11
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <HAL_ETH_MspInit+0x168>)
 8001682:	f001 fa2b 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001686:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001698:	230b      	movs	r3, #11
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <HAL_ETH_MspInit+0x16c>)
 80016a4:	f001 fa1a 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	@ 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40028000 	.word	0x40028000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40021800 	.word	0x40021800

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ae      	sub	sp, #184	@ 0xb8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2290      	movs	r2, #144	@ 0x90
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fb37 	bl	8006d5c <memset>
  if(hi2c->Instance==I2C1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a50      	ldr	r2, [pc, #320]	@ (8001834 <HAL_I2C_MspInit+0x16c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	f040 8099 	bne.w	800182c <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001700:	2300      	movs	r3, #0
 8001702:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ffa7 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001714:	f7ff fef6 	bl	8001504 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a46      	ldr	r2, [pc, #280]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
 8001724:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001730:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174a:	2304      	movs	r3, #4
 800174c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001754:	4619      	mov	r1, r3
 8001756:	4839      	ldr	r0, [pc, #228]	@ (800183c <HAL_I2C_MspInit+0x174>)
 8001758:	f001 f9c0 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	4a35      	ldr	r2, [pc, #212]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 8001762:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_I2C_MspInit+0x170>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 8001776:	4a33      	ldr	r2, [pc, #204]	@ (8001844 <HAL_I2C_MspInit+0x17c>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 800177c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001780:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 8001790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001794:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017b4:	4822      	ldr	r0, [pc, #136]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017b6:	f000 fb81 	bl	8001ebc <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80017c0:	f7ff fea0 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001840 <HAL_I2C_MspInit+0x178>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017d2:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HAL_I2C_MspInit+0x184>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017de:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017e0:	2240      	movs	r2, #64	@ 0x40
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 8001812:	f000 fb53 	bl	8001ebc <HAL_DMA_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800181c:	f7ff fe72 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 8001824:	639a      	str	r2, [r3, #56]	@ 0x38
 8001826:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_I2C_MspInit+0x180>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	37b8      	adds	r7, #184	@ 0xb8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400
 8001840:	2000047c 	.word	0x2000047c
 8001844:	40026010 	.word	0x40026010
 8001848:	200004dc 	.word	0x200004dc
 800184c:	400260a0 	.word	0x400260a0

08001850 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ae      	sub	sp, #184	@ 0xb8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2290      	movs	r2, #144	@ 0x90
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f005 fa73 	bl	8006d5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800187e:	d159      	bne.n	8001934 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001880:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001884:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fee3 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800189c:	f7ff fe32 	bl	8001504 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b26      	ldr	r3, [pc, #152]	@ (800193c <HAL_PCD_MspInit+0xec>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a4:	4a25      	ldr	r2, [pc, #148]	@ (800193c <HAL_PCD_MspInit+0xec>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ac:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_PCD_MspInit+0xec>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d2:	230a      	movs	r3, #10
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018dc:	4619      	mov	r1, r3
 80018de:	4818      	ldr	r0, [pc, #96]	@ (8001940 <HAL_PCD_MspInit+0xf0>)
 80018e0:	f001 f8fc 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4810      	ldr	r0, [pc, #64]	@ (8001940 <HAL_PCD_MspInit+0xf0>)
 8001900:	f001 f8ec 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_PCD_MspInit+0xec>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_PCD_MspInit+0xec>)
 800190a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_PCD_MspInit+0xec>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <HAL_PCD_MspInit+0xec>)
 800191e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_PCD_MspInit+0xec>)
 8001922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001926:	6453      	str	r3, [r2, #68]	@ 0x44
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HAL_PCD_MspInit+0xec>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	37b8      	adds	r7, #184	@ 0xb8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 f939 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA1_Stream0_IRQHandler+0x10>)
 80019aa:	f000 fb35 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000047c 	.word	0x2000047c

080019b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA1_Stream6_IRQHandler+0x10>)
 80019be:	f000 fb2b 	bl	8002018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004dc 	.word	0x200004dc

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f005 fa0b 	bl	8006e00 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <_exit+0x12>

08001a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00a      	b.n	8001a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	4601      	mov	r1, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf0      	blt.n	8001a24 <_read+0x12>
  }

  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a74:	605a      	str	r2, [r3, #4]
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_isatty>:

int _isatty(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f005 f98c 	bl	8006e00 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20080000 	.word	0x20080000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	20000b5c 	.word	0x20000b5c
 8001b1c:	20000cb0 	.word	0x20000cb0

08001b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b4a:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b60:	4c0b      	ldr	r4, [pc, #44]	@ (8001b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ffd7 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f005 f94b 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff f933 	bl	8000de0 <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b88:	08009310 	.word	0x08009310
  ldr r2, =_sbss
 8001b8c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001b90:	20000cb0 	.word	0x20000cb0

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>

08001b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f000 f94c 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f805 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7ff fcb3 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f967 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f92f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000014 	.word	0x20000014
 8001c0c:	20000010 	.word	0x20000010

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000014 	.word	0x20000014
 8001c34:	20000b60 	.word	0x20000b60

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000b60 	.word	0x20000b60

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000014 	.word	0x20000014

08001c98 <__NVIC_SetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00
 8001cdc:	05fa0000 	.word	0x05fa0000

08001ce0 <__NVIC_GetPriorityGrouping>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff feb6 	bl	8001c38 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e099      	b.n	800200c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef8:	e00f      	b.n	8001f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efa:	f7ff fe9d 	bl	8001c38 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d908      	bls.n	8001f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2203      	movs	r2, #3
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e078      	b.n	800200c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e8      	bne.n	8001efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4b38      	ldr	r3, [pc, #224]	@ (8002014 <HAL_DMA_Init+0x158>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f023 0307 	bic.w	r3, r3, #7
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d117      	bne.n	8001fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f9e9 	bl	8002398 <DMA_CheckFifoParam>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2240      	movs	r2, #64	@ 0x40
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e016      	b.n	800200c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f9a0 	bl	800232c <DMA_CalcBaseAndBitshift>
 8001fec:	4603      	mov	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	223f      	movs	r2, #63	@ 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	e010803f 	.word	0xe010803f

08002018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002024:	4b8e      	ldr	r3, [pc, #568]	@ (8002260 <HAL_DMA_IRQHandler+0x248>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a8e      	ldr	r2, [pc, #568]	@ (8002264 <HAL_DMA_IRQHandler+0x24c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2208      	movs	r2, #8
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2208      	movs	r2, #8
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d012      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2210      	movs	r2, #16
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d043      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	2210      	movs	r2, #16
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d018      	beq.n	800215a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
 8002146:	e01f      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e016      	b.n	8002188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2220      	movs	r2, #32
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 808f 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8087 	beq.w	80022b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	2220      	movs	r2, #32
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d136      	bne.n	8002230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0216 	bic.w	r2, r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x1da>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	223f      	movs	r2, #63	@ 0x3f
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07e      	beq.n	8002324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
        }
        return;
 800222e:	e079      	b.n	8002324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01d      	beq.n	800227a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e02c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c
 8002264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e01e      	b.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0210 	bic.w	r2, r2, #16
 8002296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d032      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2205      	movs	r2, #5
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d307      	bcc.n	8002300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f2      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x2cc>
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e000      	b.n	8002326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3b10      	subs	r3, #16
 800233c:	4a13      	ldr	r2, [pc, #76]	@ (800238c <DMA_CalcBaseAndBitshift+0x60>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <DMA_CalcBaseAndBitshift+0x64>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d908      	bls.n	800236c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <DMA_CalcBaseAndBitshift+0x68>)
 8002362:	4013      	ands	r3, r2
 8002364:	1d1a      	adds	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	659a      	str	r2, [r3, #88]	@ 0x58
 800236a:	e006      	b.n	800237a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <DMA_CalcBaseAndBitshift+0x68>)
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	aaaaaaab 	.word	0xaaaaaaab
 8002390:	08008f84 	.word	0x08008f84
 8002394:	fffffc00 	.word	0xfffffc00

08002398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d856      	bhi.n	8002466 <DMA_CheckFifoParam+0xce>
 80023b8:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <DMA_CheckFifoParam+0x28>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023e3 	.word	0x080023e3
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	08002467 	.word	0x08002467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d046      	beq.n	800246a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e043      	b.n	800246a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ea:	d140      	bne.n	800246e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e03d      	b.n	800246e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fa:	d121      	bne.n	8002440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d837      	bhi.n	8002472 <DMA_CheckFifoParam+0xda>
 8002402:	a201      	add	r2, pc, #4	@ (adr r2, 8002408 <DMA_CheckFifoParam+0x70>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	0800241f 	.word	0x0800241f
 8002410:	08002419 	.word	0x08002419
 8002414:	08002431 	.word	0x08002431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e030      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d025      	beq.n	8002476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242e:	e022      	b.n	8002476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800243e:	e01c      	b.n	800247a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d903      	bls.n	800244e <DMA_CheckFifoParam+0xb6>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d003      	beq.n	8002454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800244c:	e018      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e015      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e00b      	b.n	800247e <DMA_CheckFifoParam+0xe6>
      break;
 8002466:	bf00      	nop
 8002468:	e00a      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e008      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e006      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e004      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;   
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
    }
  } 
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06a      	b.n	8002578 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2223      	movs	r2, #35	@ 0x23
 80024b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f84f 	bl	8001558 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_ETH_Init+0xf0>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <HAL_ETH_Init+0xf0>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_ETH_Init+0xf0>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <HAL_ETH_Init+0xf4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002584 <HAL_ETH_Init+0xf4>)
 80024d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024de:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <HAL_ETH_Init+0xf4>)
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4927      	ldr	r1, [pc, #156]	@ (8002584 <HAL_ETH_Init+0xf4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <HAL_ETH_Init+0xf4>)
 80024ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff fb96 	bl	8001c38 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800250e:	e011      	b.n	8002534 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002510:	f7ff fb92 	bl	8001c38 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800251e:	d909      	bls.n	8002534 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	22e0      	movs	r2, #224	@ 0xe0
 800252c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e021      	b.n	8002578 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e4      	bne.n	8002510 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f958 	bl	80027fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f9ff 	bl	8002950 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa55 	bl	8002a02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	461a      	mov	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9bd 	bl	80028e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2210      	movs	r2, #16
 8002572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800

08002588 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <ETH_SetMACConfig+0x15c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7c1b      	ldrb	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <ETH_SetMACConfig+0x28>
 80025aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025ae:	e000      	b.n	80025b2 <ETH_SetMACConfig+0x2a>
 80025b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7c5b      	ldrb	r3, [r3, #17]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <ETH_SetMACConfig+0x38>
 80025ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025be:	e000      	b.n	80025c2 <ETH_SetMACConfig+0x3a>
 80025c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7fdb      	ldrb	r3, [r3, #31]
 80025ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	7f92      	ldrb	r2, [r2, #30]
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d102      	bne.n	80025e6 <ETH_SetMACConfig+0x5e>
 80025e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x60>
 80025e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80025e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7f1b      	ldrb	r3, [r3, #28]
 80025ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d102      	bne.n	8002610 <ETH_SetMACConfig+0x88>
 800260a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260e:	e000      	b.n	8002612 <ETH_SetMACConfig+0x8a>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7bdb      	ldrb	r3, [r3, #15]
 8002618:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800261a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002628:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800262a:	4313      	orrs	r3, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff fb04 	bl	8001c50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002666:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800266e:	2a00      	cmp	r2, #0
 8002670:	d101      	bne.n	8002676 <ETH_SetMACConfig+0xee>
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	e000      	b.n	8002678 <ETH_SetMACConfig+0xf0>
 8002676:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002678:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002686:	2a01      	cmp	r2, #1
 8002688:	d101      	bne.n	800268e <ETH_SetMACConfig+0x106>
 800268a:	2208      	movs	r2, #8
 800268c:	e000      	b.n	8002690 <ETH_SetMACConfig+0x108>
 800268e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002690:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002698:	2a01      	cmp	r2, #1
 800269a:	d101      	bne.n	80026a0 <ETH_SetMACConfig+0x118>
 800269c:	2204      	movs	r2, #4
 800269e:	e000      	b.n	80026a2 <ETH_SetMACConfig+0x11a>
 80026a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	d101      	bne.n	80026b2 <ETH_SetMACConfig+0x12a>
 80026ae:	2202      	movs	r2, #2
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0x12c>
 80026b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b4:	4313      	orrs	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7ff fabf 	bl	8001c50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	ff20810f 	.word	0xff20810f

080026e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <ETH_SetDMAConfig+0x110>)
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <ETH_SetDMAConfig+0x2c>
 800270e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002712:	e000      	b.n	8002716 <ETH_SetDMAConfig+0x2e>
 8002714:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	7b5b      	ldrb	r3, [r3, #13]
 800271a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800271c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	7f52      	ldrb	r2, [r2, #29]
 8002722:	2a00      	cmp	r2, #0
 8002724:	d102      	bne.n	800272c <ETH_SetDMAConfig+0x44>
 8002726:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800272a:	e000      	b.n	800272e <ETH_SetDMAConfig+0x46>
 800272c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7b9b      	ldrb	r3, [r3, #14]
 8002734:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002736:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800273c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7f1b      	ldrb	r3, [r3, #28]
 8002742:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002744:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7f9b      	ldrb	r3, [r3, #30]
 800274a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800274c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002752:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800275a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800275c:	4313      	orrs	r3, r2
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff fa66 	bl	8001c50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800279c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027dc:	2001      	movs	r0, #1
 80027de:	f7ff fa37 	bl	8001c50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	f8de3f23 	.word	0xf8de3f23

080027fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a6      	sub	sp, #152	@ 0x98
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002838:	2300      	movs	r3, #0
 800283a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002842:	2300      	movs	r3, #0
 8002844:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800285e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002862:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002864:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002870:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fe86 	bl	8002588 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800287c:	2301      	movs	r3, #1
 800287e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002880:	2301      	movs	r3, #1
 8002882:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800288a:	2301      	movs	r3, #1
 800288c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff08 	bl	80026e8 <ETH_SetDMAConfig>
}
 80028d8:	bf00      	nop
 80028da:	3798      	adds	r7, #152	@ 0x98
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3305      	adds	r3, #5
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	3204      	adds	r2, #4
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <ETH_MACAddressConfig+0x68>)
 8002902:	4413      	add	r3, r2
 8002904:	461a      	mov	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3303      	adds	r3, #3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3302      	adds	r3, #2
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4313      	orrs	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <ETH_MACAddressConfig+0x6c>)
 8002932:	4413      	add	r3, r2
 8002934:	461a      	mov	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6013      	str	r3, [r2, #0]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40028040 	.word	0x40028040
 800294c:	40028044 	.word	0x40028044

08002950 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e03e      	b.n	80029dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	3206      	adds	r2, #6
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d80c      	bhi.n	80029c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e004      	b.n	80029ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d9bd      	bls.n	800295e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e046      	b.n	8002a9e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002a54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	3212      	adds	r2, #18
 8002a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d80c      	bhi.n	8002a8e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e004      	b.n	8002a98 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d9b5      	bls.n	8002a10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e175      	b.n	8002de8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 8164 	bne.w	8002de2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d005      	beq.n	8002b32 <HAL_GPIO_Init+0x56>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d130      	bne.n	8002b94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80be 	beq.w	8002de2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a65      	ldr	r2, [pc, #404]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7e:	4a61      	ldr	r2, [pc, #388]	@ (8002e04 <HAL_GPIO_Init+0x328>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	@ (8002e08 <HAL_GPIO_Init+0x32c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d037      	beq.n	8002d1a <HAL_GPIO_Init+0x23e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a57      	ldr	r2, [pc, #348]	@ (8002e0c <HAL_GPIO_Init+0x330>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d031      	beq.n	8002d16 <HAL_GPIO_Init+0x23a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a56      	ldr	r2, [pc, #344]	@ (8002e10 <HAL_GPIO_Init+0x334>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <HAL_GPIO_Init+0x236>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	@ (8002e14 <HAL_GPIO_Init+0x338>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d025      	beq.n	8002d0e <HAL_GPIO_Init+0x232>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a54      	ldr	r2, [pc, #336]	@ (8002e18 <HAL_GPIO_Init+0x33c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x22e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a53      	ldr	r2, [pc, #332]	@ (8002e1c <HAL_GPIO_Init+0x340>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x22a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	@ (8002e20 <HAL_GPIO_Init+0x344>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	@ (8002e24 <HAL_GPIO_Init+0x348>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	@ (8002e28 <HAL_GPIO_Init+0x34c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	@ (8002e2c <HAL_GPIO_Init+0x350>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cf2:	2309      	movs	r3, #9
 8002cf4:	e012      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cf6:	230a      	movs	r3, #10
 8002cf8:	e010      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	e00e      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e00c      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d02:	2306      	movs	r3, #6
 8002d04:	e00a      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d06:	2305      	movs	r3, #5
 8002d08:	e008      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e004      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f002 0203 	and.w	r2, r2, #3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4093      	lsls	r3, r2
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d2c:	4935      	ldr	r1, [pc, #212]	@ (8002e04 <HAL_GPIO_Init+0x328>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5e:	4a34      	ldr	r2, [pc, #208]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d64:	4b32      	ldr	r3, [pc, #200]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d88:	4a29      	ldr	r2, [pc, #164]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8e:	4b28      	ldr	r3, [pc, #160]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <HAL_GPIO_Init+0x354>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	f67f ae86 	bls.w	8002afc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021400 	.word	0x40021400
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40021c00 	.word	0x40021c00
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40022400 	.word	0x40022400
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e50:	e003      	b.n	8002e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	041a      	lsls	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	400b      	ands	r3, r1
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	619a      	str	r2, [r3, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07f      	b.n	8002fae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fc00 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	@ 0x24
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002efc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	e006      	b.n	8002f24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d104      	bne.n	8002f36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HAL_I2C_Init+0x11c>)
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	02008000 	.word	0x02008000

08002fbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 80da 	bne.w	8003192 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x30>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0d3      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fe20 	bl	8001c38 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2319      	movs	r3, #25
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa00 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0be      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	@ 0x21
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2210      	movs	r2, #16
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	893a      	ldrh	r2, [r7, #8]
 8003036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2bff      	cmp	r3, #255	@ 0xff
 8003046:	d90e      	bls.n	8003066 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	22ff      	movs	r2, #255	@ 0xff
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	4b51      	ldr	r3, [pc, #324]	@ (800319c <HAL_I2C_Master_Transmit+0x1e0>)
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fbea 	bl	8003838 <I2C_TransferConfig>
 8003064:	e06c      	b.n	8003140 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	b2da      	uxtb	r2, r3
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	4b48      	ldr	r3, [pc, #288]	@ (800319c <HAL_I2C_Master_Transmit+0x1e0>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fbd9 	bl	8003838 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003086:	e05b      	b.n	8003140 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9fd 	bl	800348c <I2C_WaitOnTXISFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e07b      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d034      	beq.n	8003140 <HAL_I2C_Master_Transmit+0x184>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d130      	bne.n	8003140 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f98f 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04d      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2bff      	cmp	r3, #255	@ 0xff
 8003100:	d90e      	bls.n	8003120 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22ff      	movs	r2, #255	@ 0xff
 8003106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310c:	b2da      	uxtb	r2, r3
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fb8d 	bl	8003838 <I2C_TransferConfig>
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb7c 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d19e      	bne.n	8003088 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f9dc 	bl	800350c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01a      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003172:	400b      	ands	r3, r1
 8003174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	80002000 	.word	0x80002000
 80031a0:	fe00e800 	.word	0xfe00e800

080031a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
 80031b4:	4613      	mov	r3, r2
 80031b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	f040 80db 	bne.w	800337c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x30>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e0d4      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031dc:	f7fe fd2c 	bl	8001c38 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2319      	movs	r3, #25
 80031e8:	2201      	movs	r2, #1
 80031ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f90c 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0bf      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2222      	movs	r2, #34	@ 0x22
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2210      	movs	r2, #16
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	893a      	ldrh	r2, [r7, #8]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2bff      	cmp	r3, #255	@ 0xff
 800322e:	d90e      	bls.n	800324e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	22ff      	movs	r2, #255	@ 0xff
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	b2da      	uxtb	r2, r3
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	4b52      	ldr	r3, [pc, #328]	@ (8003388 <HAL_I2C_Master_Receive+0x1e4>)
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 faf6 	bl	8003838 <I2C_TransferConfig>
 800324c:	e06d      	b.n	800332a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325c:	b2da      	uxtb	r2, r3
 800325e:	8979      	ldrh	r1, [r7, #10]
 8003260:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <HAL_I2C_Master_Receive+0x1e4>)
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fae5 	bl	8003838 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800326e:	e05c      	b.n	800332a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	6a39      	ldr	r1, [r7, #32]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f985 	bl	8003584 <I2C_WaitOnRXNEFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e07c      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d034      	beq.n	800332a <HAL_I2C_Master_Receive+0x186>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d130      	bne.n	800332a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	2200      	movs	r2, #0
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f89a 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e04d      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2bff      	cmp	r3, #255	@ 0xff
 80032ea:	d90e      	bls.n	800330a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	22ff      	movs	r2, #255	@ 0xff
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	8979      	ldrh	r1, [r7, #10]
 80032fa:	2300      	movs	r3, #0
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa98 	bl	8003838 <I2C_TransferConfig>
 8003308:	e00f      	b.n	800332a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa87 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d19d      	bne.n	8003270 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	6a39      	ldr	r1, [r7, #32]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f8e7 	bl	800350c <I2C_WaitOnSTOPFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e01a      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2220      	movs	r2, #32
 800334e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <HAL_I2C_Master_Receive+0x1e8>)
 800335c:	400b      	ands	r3, r1
 800335e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	80002400 	.word	0x80002400
 800338c:	fe00e800 	.word	0xfe00e800

08003390 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339e:	b2db      	uxtb	r3, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d007      	beq.n	8003400 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	619a      	str	r2, [r3, #24]
  }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341c:	e022      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d01e      	beq.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe fc07 	bl	8001c38 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e00f      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d0cd      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003498:	e02c      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8ea 	bl	8003678 <I2C_IsErrorOccurred>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02a      	b.n	8003504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d01e      	beq.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fe fbbf 	bl	8001c38 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d113      	bne.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d1cb      	bne.n	800349a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003518:	e028      	b.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8aa 	bl	8003678 <I2C_IsErrorOccurred>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e026      	b.n	800357c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fb83 	bl	8001c38 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d113      	bne.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d1cf      	bne.n	800351a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003590:	e064      	b.n	800365c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f86e 	bl	8003678 <I2C_IsErrorOccurred>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e062      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d138      	bne.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d105      	bne.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e04e      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d107      	bne.n	80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2210      	movs	r2, #16
 80035e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2204      	movs	r2, #4
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80035ea:	e002      	b.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2220      	movs	r2, #32
 80035f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003606:	400b      	ands	r3, r1
 8003608:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e022      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fb07 	bl	8001c38 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d193      	bne.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d068      	beq.n	8003776 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2210      	movs	r2, #16
 80036aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ac:	e049      	b.n	8003742 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d045      	beq.n	8003742 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fabf 	bl	8001c38 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_IsErrorOccurred+0x54>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d13a      	bne.n	8003742 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ee:	d121      	bne.n	8003734 <I2C_IsErrorOccurred+0xbc>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f6:	d01d      	beq.n	8003734 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d01a      	beq.n	8003734 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800370c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800370e:	f7fe fa93 	bl	8001c38 <HAL_GetTick>
 8003712:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003714:	e00e      	b.n	8003734 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003716:	f7fe fa8f 	bl	8001c38 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b19      	cmp	r3, #25
 8003722:	d907      	bls.n	8003734 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f043 0320 	orr.w	r3, r3, #32
 800372a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003732:	e006      	b.n	8003742 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d1e9      	bne.n	8003716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d003      	beq.n	8003758 <I2C_IsErrorOccurred+0xe0>
 8003750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0aa      	beq.n	80036ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2220      	movs	r2, #32
 8003766:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f043 0308 	orr.w	r3, r3, #8
 80037b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80037e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01c      	beq.n	8003826 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff fde9 	bl	80033c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <I2C_IsErrorOccurred+0x1bc>)
 80037fe:	400b      	ands	r3, r1
 8003800:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800382a:	4618      	mov	r0, r3
 800382c:	3728      	adds	r7, #40	@ 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	fe00e800 	.word	0xfe00e800

08003838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	4613      	mov	r3, r2
 8003848:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003850:	7a7b      	ldrb	r3, [r7, #9]
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003858:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	4313      	orrs	r3, r2
 8003862:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003866:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	0d5b      	lsrs	r3, r3, #21
 8003872:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003876:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <I2C_TransferConfig+0x60>)
 8003878:	430b      	orrs	r3, r1
 800387a:	43db      	mvns	r3, r3
 800387c:	ea02 0103 	and.w	r1, r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	03ff63ff 	.word	0x03ff63ff

0800389c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d138      	bne.n	8003924 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038bc:	2302      	movs	r3, #2
 80038be:	e032      	b.n	8003926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	@ 0x24
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	d139      	bne.n	80039bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003952:	2302      	movs	r3, #2
 8003954:	e033      	b.n	80039be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	@ 0x24
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003984:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039cc:	b08f      	sub	sp, #60	@ 0x3c
 80039ce:	af0a      	add	r7, sp, #40	@ 0x28
 80039d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e116      	b.n	8003c0a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd ff2a 	bl	8001850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 f88e 	bl	8005b3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	687e      	ldr	r6, [r7, #4]
 8003a28:	466d      	mov	r5, sp
 8003a2a:	f106 0410 	add.w	r4, r6, #16
 8003a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a3e:	1d33      	adds	r3, r6, #4
 8003a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a42:	6838      	ldr	r0, [r7, #0]
 8003a44:	f002 f822 	bl	8005a8c <USB_CoreInit>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0d7      	b.n	8003c0a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f002 f87c 	bl	8005b5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e04a      	b.n	8003b02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	333d      	adds	r3, #61	@ 0x3d
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	333c      	adds	r3, #60	@ 0x3c
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	b298      	uxth	r0, r3
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3344      	adds	r3, #68	@ 0x44
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3340      	adds	r3, #64	@ 0x40
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3348      	adds	r3, #72	@ 0x48
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334c      	adds	r3, #76	@ 0x4c
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3354      	adds	r3, #84	@ 0x54
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	3301      	adds	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3af      	bcc.n	8003a6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e044      	b.n	8003b9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b5      	bcc.n	8003b12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	687e      	ldr	r6, [r7, #4]
 8003bae:	466d      	mov	r5, sp
 8003bb0:	f106 0410 	add.w	r4, r6, #16
 8003bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bc4:	1d33      	adds	r3, r6, #4
 8003bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc8:	6838      	ldr	r0, [r7, #0]
 8003bca:	f002 f815 	bl	8005bf8 <USB_DevInit>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e014      	b.n	8003c0a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f80b 	bl	8003c14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 f9d3 	bl	8005fae <USB_DevDisconnect>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	10000003 	.word	0x10000003

08003c5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4b23      	ldr	r3, [pc, #140]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	4a22      	ldr	r2, [pc, #136]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003caa:	f7fd ffc5 	bl	8001c38 <HAL_GetTick>
 8003cae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cb0:	e009      	b.n	8003cc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cb2:	f7fd ffc1 	bl	8001c38 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cc0:	d901      	bls.n	8003cc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e022      	b.n	8003d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cc6:	4b14      	ldr	r3, [pc, #80]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce0:	f7fd ffaa 	bl	8001c38 <HAL_GetTick>
 8003ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ce6:	e009      	b.n	8003cfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ce8:	f7fd ffa6 	bl	8001c38 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cf6:	d901      	bls.n	8003cfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e007      	b.n	8003d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d08:	d1ee      	bne.n	8003ce8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d24:	2300      	movs	r3, #0
 8003d26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e29b      	b.n	800426a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8087 	beq.w	8003e4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d40:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d00c      	beq.n	8003d66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4c:	4b93      	ldr	r3, [pc, #588]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d112      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62>
 8003d58:	4b90      	ldr	r3, [pc, #576]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d66:	4b8d      	ldr	r3, [pc, #564]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d06c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x130>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d168      	bne.n	8003e4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e275      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x7a>
 8003d88:	4b84      	ldr	r3, [pc, #528]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a83      	ldr	r2, [pc, #524]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e02e      	b.n	8003df4 <HAL_RCC_OscConfig+0xd8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x9c>
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7e      	ldr	r2, [pc, #504]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7b      	ldr	r2, [pc, #492]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xd8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0xc0>
 8003dc2:	4b76      	ldr	r3, [pc, #472]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a75      	ldr	r2, [pc, #468]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b73      	ldr	r3, [pc, #460]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a72      	ldr	r2, [pc, #456]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xd8>
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6b      	ldr	r2, [pc, #428]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd ff1c 	bl	8001c38 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd ff18 	bl	8001c38 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e229      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b61      	ldr	r3, [pc, #388]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe8>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd ff08 	bl	8001c38 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fd ff04 	bl	8001c38 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	@ 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e215      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b57      	ldr	r3, [pc, #348]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x110>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d069      	beq.n	8003f2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e5a:	4b50      	ldr	r3, [pc, #320]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b4d      	ldr	r3, [pc, #308]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x190>
 8003e72:	4b4a      	ldr	r3, [pc, #296]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1e9      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	493d      	ldr	r1, [pc, #244]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e040      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b39      	ldr	r3, [pc, #228]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a38      	ldr	r2, [pc, #224]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd feba 	bl	8001c38 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd feb6 	bl	8001c38 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1c7      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4929      	ldr	r1, [pc, #164]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
 8003efa:	e018      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efc:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a26      	ldr	r2, [pc, #152]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fe96 	bl	8001c38 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd fe92 	bl	8001c38 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1a3      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d038      	beq.n	8003fac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f46:	4a15      	ldr	r2, [pc, #84]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fe73 	bl	8001c38 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd fe6f 	bl	8001c38 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e180      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x23a>
 8003f74:	e01a      	b.n	8003fac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	4a08      	ldr	r2, [pc, #32]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fd fe59 	bl	8001c38 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7fd fe55 	bl	8001c38 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d903      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e166      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
 8003f9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b92      	ldr	r3, [pc, #584]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ee      	bne.n	8003f8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a4 	beq.w	8004102 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b8c      	ldr	r3, [pc, #560]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	4b89      	ldr	r3, [pc, #548]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	4a88      	ldr	r2, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd2:	4b86      	ldr	r3, [pc, #536]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe2:	4b83      	ldr	r3, [pc, #524]	@ (80041f0 <HAL_RCC_OscConfig+0x4d4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d118      	bne.n	8004020 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fee:	4b80      	ldr	r3, [pc, #512]	@ (80041f0 <HAL_RCC_OscConfig+0x4d4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80041f0 <HAL_RCC_OscConfig+0x4d4>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fe1d 	bl	8001c38 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004002:	f7fd fe19 	bl	8001c38 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b64      	cmp	r3, #100	@ 0x64
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e12a      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004014:	4b76      	ldr	r3, [pc, #472]	@ (80041f0 <HAL_RCC_OscConfig+0x4d4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x31a>
 8004028:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	4a6f      	ldr	r2, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	@ 0x70
 8004034:	e02d      	b.n	8004092 <HAL_RCC_OscConfig+0x376>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x33c>
 800403e:	4b6b      	ldr	r3, [pc, #428]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	4a6a      	ldr	r2, [pc, #424]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	@ 0x70
 800404a:	4b68      	ldr	r3, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	4a67      	ldr	r2, [pc, #412]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	@ 0x70
 8004056:	e01c      	b.n	8004092 <HAL_RCC_OscConfig+0x376>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d10c      	bne.n	800407a <HAL_RCC_OscConfig+0x35e>
 8004060:	4b62      	ldr	r3, [pc, #392]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	4a61      	ldr	r2, [pc, #388]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	6713      	str	r3, [r2, #112]	@ 0x70
 800406c:	4b5f      	ldr	r3, [pc, #380]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	4a5e      	ldr	r2, [pc, #376]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
 8004078:	e00b      	b.n	8004092 <HAL_RCC_OscConfig+0x376>
 800407a:	4b5c      	ldr	r3, [pc, #368]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	4a5b      	ldr	r2, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	@ 0x70
 8004086:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a58      	ldr	r2, [pc, #352]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d015      	beq.n	80040c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fd fdcd 	bl	8001c38 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fdc9 	bl	8001c38 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e0d8      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b8:	4b4c      	ldr	r3, [pc, #304]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RCC_OscConfig+0x386>
 80040c4:	e014      	b.n	80040f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd fdb7 	bl	8001c38 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd fdb3 	bl	8001c38 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0c2      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e4:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	4a3c      	ldr	r2, [pc, #240]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004100:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80ae 	beq.w	8004268 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410c:	4b37      	ldr	r3, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	d06d      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d14b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004120:	4b32      	ldr	r3, [pc, #200]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a31      	ldr	r2, [pc, #196]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fd84 	bl	8001c38 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd fd80 	bl	8001c38 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e091      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	4b29      	ldr	r3, [pc, #164]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	3b01      	subs	r3, #1
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	491b      	ldr	r1, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fd52 	bl	8001c38 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fd fd4e 	bl	8001c38 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e05f      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x47c>
 80041b6:	e057      	b.n	8004268 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd fd38 	bl	8001c38 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd fd34 	bl	8001c38 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e045      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x4b0>
 80041ea:	e03d      	b.n	8004268 <HAL_RCC_OscConfig+0x54c>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <HAL_RCC_OscConfig+0x558>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d030      	beq.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d129      	bne.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d122      	bne.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800422a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422c:	4293      	cmp	r3, r2
 800422e:	d119      	bne.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	3b01      	subs	r3, #1
 800423e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d10f      	bne.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0d0      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b67      	ldr	r3, [pc, #412]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 020f 	bic.w	r2, r3, #15
 80042a6:	4965      	ldr	r1, [pc, #404]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a58      	ldr	r2, [pc, #352]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80042de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a52      	ldr	r2, [pc, #328]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80042f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d040      	beq.n	800439c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d115      	bne.n	800435a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e073      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3d      	ldr	r3, [pc, #244]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06b      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b39      	ldr	r3, [pc, #228]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4936      	ldr	r1, [pc, #216]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fd fc64 	bl	8001c38 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fd fc60 	bl	8001c38 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e053      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2d      	ldr	r3, [pc, #180]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b27      	ldr	r3, [pc, #156]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d210      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	4922      	ldr	r1, [pc, #136]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490a      	ldr	r1, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x1cc>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x1d0>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_RCC_ClockConfig+0x1d4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fbc0 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00
 8004440:	40023800 	.word	0x40023800
 8004444:	08008f6c 	.word	0x08008f6c
 8004448:	2000000c 	.word	0x2000000c
 800444c:	20000010 	.word	0x20000010

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004454:	b094      	sub	sp, #80	@ 0x50
 8004456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
 800445c:	2300      	movs	r3, #0
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	2300      	movs	r3, #0
 8004462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004468:	4b79      	ldr	r3, [pc, #484]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d00d      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x40>
 8004474:	2b08      	cmp	r3, #8
 8004476:	f200 80e1 	bhi.w	800463c <HAL_RCC_GetSysClockFreq+0x1ec>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 800447e:	2b04      	cmp	r3, #4
 8004480:	d003      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x3a>
 8004482:	e0db      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b73      	ldr	r3, [pc, #460]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004488:	e0db      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800448a:	4b73      	ldr	r3, [pc, #460]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x208>)
 800448c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800448e:	e0d8      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004490:	4b6f      	ldr	r3, [pc, #444]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004498:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800449a:	4b6d      	ldr	r3, [pc, #436]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	099b      	lsrs	r3, r3, #6
 80044ac:	2200      	movs	r2, #0
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d4:	0150      	lsls	r0, r2, #5
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4621      	mov	r1, r4
 80044dc:	1a51      	subs	r1, r2, r1
 80044de:	6139      	str	r1, [r7, #16]
 80044e0:	4629      	mov	r1, r5
 80044e2:	eb63 0301 	sbc.w	r3, r3, r1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f4:	4659      	mov	r1, fp
 80044f6:	018b      	lsls	r3, r1, #6
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044fe:	4651      	mov	r1, sl
 8004500:	018a      	lsls	r2, r1, #6
 8004502:	4651      	mov	r1, sl
 8004504:	ebb2 0801 	subs.w	r8, r2, r1
 8004508:	4659      	mov	r1, fp
 800450a:	eb63 0901 	sbc.w	r9, r3, r1
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800451a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800451e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004522:	4690      	mov	r8, r2
 8004524:	4699      	mov	r9, r3
 8004526:	4623      	mov	r3, r4
 8004528:	eb18 0303 	adds.w	r3, r8, r3
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	462b      	mov	r3, r5
 8004530:	eb49 0303 	adc.w	r3, r9, r3
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004542:	4629      	mov	r1, r5
 8004544:	024b      	lsls	r3, r1, #9
 8004546:	4621      	mov	r1, r4
 8004548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800454c:	4621      	mov	r1, r4
 800454e:	024a      	lsls	r2, r1, #9
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004556:	2200      	movs	r2, #0
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800455c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004560:	f7fb fec6 	bl	80002f0 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800456c:	e058      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	2200      	movs	r2, #0
 8004576:	4618      	mov	r0, r3
 8004578:	4611      	mov	r1, r2
 800457a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
 8004584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	f04f 0000 	mov.w	r0, #0
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	0159      	lsls	r1, r3, #5
 8004596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800459a:	0150      	lsls	r0, r2, #5
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4641      	mov	r1, r8
 80045a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045a6:	4649      	mov	r1, r9
 80045a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045c0:	ebb2 040a 	subs.w	r4, r2, sl
 80045c4:	eb63 050b 	sbc.w	r5, r3, fp
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	00eb      	lsls	r3, r5, #3
 80045d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d6:	00e2      	lsls	r2, r4, #3
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	4643      	mov	r3, r8
 80045de:	18e3      	adds	r3, r4, r3
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	464b      	mov	r3, r9
 80045e4:	eb45 0303 	adc.w	r3, r5, r3
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045f6:	4629      	mov	r1, r5
 80045f8:	028b      	lsls	r3, r1, #10
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004600:	4621      	mov	r1, r4
 8004602:	028a      	lsls	r2, r1, #10
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460a:	2200      	movs	r2, #0
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	61fa      	str	r2, [r7, #28]
 8004610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004614:	f7fb fe6c 	bl	80002f0 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4613      	mov	r3, r2
 800461e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800463a:	e002      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004644:	4618      	mov	r0, r3
 8004646:	3750      	adds	r7, #80	@ 0x50
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	00f42400 	.word	0x00f42400
 8004658:	007a1200 	.word	0x007a1200

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d012      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004684:	4b69      	ldr	r3, [pc, #420]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a68      	ldr	r2, [pc, #416]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800468e:	6093      	str	r3, [r2, #8]
 8004690:	4b66      	ldr	r3, [pc, #408]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004698:	4964      	ldr	r1, [pc, #400]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d017      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b6:	4b5d      	ldr	r3, [pc, #372]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	4959      	ldr	r1, [pc, #356]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f2:	4b4e      	ldr	r3, [pc, #312]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	494a      	ldr	r1, [pc, #296]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800472e:	2301      	movs	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808b 	beq.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004740:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	4a39      	ldr	r2, [pc, #228]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474a:	6413      	str	r3, [r2, #64]	@ 0x40
 800474c:	4b37      	ldr	r3, [pc, #220]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004758:	4b35      	ldr	r3, [pc, #212]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a34      	ldr	r2, [pc, #208]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fd fa68 	bl	8001c38 <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fd fa64 	bl	8001c38 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e38f      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800477e:	4b2c      	ldr	r3, [pc, #176]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800478a:	4b28      	ldr	r3, [pc, #160]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d035      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d02e      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a8:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a1d      	ldr	r2, [pc, #116]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047be:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d114      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd fa2c 	bl	8001c38 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	e00a      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fd fa28 	bl	8001c38 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e351      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004812:	d111      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004822:	400b      	ands	r3, r1
 8004824:	4901      	ldr	r1, [pc, #4]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
 800482a:	e00b      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800482c:	40023800 	.word	0x40023800
 8004830:	40007000 	.word	0x40007000
 8004834:	0ffffcff 	.word	0x0ffffcff
 8004838:	4bac      	ldr	r3, [pc, #688]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4aab      	ldr	r2, [pc, #684]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004842:	6093      	str	r3, [r2, #8]
 8004844:	4ba9      	ldr	r3, [pc, #676]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	49a6      	ldr	r1, [pc, #664]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	4313      	orrs	r3, r2
 8004854:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004862:	4ba2      	ldr	r3, [pc, #648]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004868:	4aa0      	ldr	r2, [pc, #640]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004872:	4b9e      	ldr	r3, [pc, #632]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004874:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	499b      	ldr	r1, [pc, #620]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004890:	4b96      	ldr	r3, [pc, #600]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800489e:	4993      	ldr	r1, [pc, #588]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b2:	4b8e      	ldr	r3, [pc, #568]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c0:	498a      	ldr	r1, [pc, #552]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d4:	4b85      	ldr	r3, [pc, #532]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e2:	4982      	ldr	r1, [pc, #520]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048f6:	4b7d      	ldr	r3, [pc, #500]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4979      	ldr	r1, [pc, #484]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004918:	4b74      	ldr	r3, [pc, #464]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	4971      	ldr	r1, [pc, #452]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800493a:	4b6c      	ldr	r3, [pc, #432]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f023 020c 	bic.w	r2, r3, #12
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004948:	4968      	ldr	r1, [pc, #416]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800495c:	4b63      	ldr	r3, [pc, #396]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496a:	4960      	ldr	r1, [pc, #384]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800497e:	4b5b      	ldr	r3, [pc, #364]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498c:	4957      	ldr	r1, [pc, #348]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a0:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	494f      	ldr	r1, [pc, #316]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049c2:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	4946      	ldr	r1, [pc, #280]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	493e      	ldr	r1, [pc, #248]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a06:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	4935      	ldr	r1, [pc, #212]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a28:	4b30      	ldr	r3, [pc, #192]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a36:	492d      	ldr	r1, [pc, #180]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a4a:	4b28      	ldr	r3, [pc, #160]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a58:	4924      	ldr	r1, [pc, #144]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a8a:	4b18      	ldr	r3, [pc, #96]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a90:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a98:	4914      	ldr	r1, [pc, #80]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abc:	490b      	ldr	r1, [pc, #44]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae0:	4902      	ldr	r1, [pc, #8]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004afc:	4b8a      	ldr	r3, [pc, #552]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	4986      	ldr	r1, [pc, #536]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b20:	4b81      	ldr	r3, [pc, #516]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b26:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b30:	497d      	ldr	r1, [pc, #500]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d006      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80d6 	beq.w	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b4c:	4b76      	ldr	r3, [pc, #472]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a75      	ldr	r2, [pc, #468]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fd f86e 	bl	8001c38 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b60:	f7fd f86a 	bl	8001c38 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e195      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d021      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11d      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b92:	4b65      	ldr	r3, [pc, #404]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ba0:	4b61      	ldr	r3, [pc, #388]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba6:	0e1b      	lsrs	r3, r3, #24
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4958      	ldr	r1, [pc, #352]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02e      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf8:	d129      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c08:	4b47      	ldr	r3, [pc, #284]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0e:	0f1b      	lsrs	r3, r3, #28
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	019a      	lsls	r2, r3, #6
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	493e      	ldr	r1, [pc, #248]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c36:	4b3c      	ldr	r3, [pc, #240]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c3c:	f023 021f 	bic.w	r2, r3, #31
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	3b01      	subs	r3, #1
 8004c46:	4938      	ldr	r1, [pc, #224]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01d      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c5a:	4b33      	ldr	r3, [pc, #204]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c68:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6e:	0f1b      	lsrs	r3, r3, #28
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	019a      	lsls	r2, r3, #6
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	431a      	orrs	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	4926      	ldr	r1, [pc, #152]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	019a      	lsls	r2, r3, #6
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	491a      	ldr	r1, [pc, #104]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc6:	4b18      	ldr	r3, [pc, #96]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd2:	f7fc ffb1 	bl	8001c38 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cda:	f7fc ffad 	bl	8001c38 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	@ 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0d8      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cec:	4b0e      	ldr	r3, [pc, #56]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 80ce 	bne.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d00:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fc ff94 	bl	8001c38 <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d12:	e00b      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d14:	f7fc ff90 	bl	8001c38 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d904      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0bb      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d38:	d0ec      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02e      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d12a      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d62:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	0f1b      	lsrs	r3, r3, #28
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4944      	ldr	r1, [pc, #272]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004da4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	493d      	ldr	r1, [pc, #244]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d022      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dcc:	d11d      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dce:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ddc:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	0f1b      	lsrs	r3, r3, #28
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	019a      	lsls	r2, r3, #6
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	431a      	orrs	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	061b      	lsls	r3, r3, #24
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	071b      	lsls	r3, r3, #28
 8004e02:	4929      	ldr	r1, [pc, #164]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d028      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e24:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	019a      	lsls	r2, r3, #6
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	071b      	lsls	r3, r3, #28
 8004e4a:	4917      	ldr	r1, [pc, #92]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e52:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	4911      	ldr	r1, [pc, #68]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fc fee0 	bl	8001c38 <HAL_GetTick>
 8004e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e7c:	f7fc fedc 	bl	8001c38 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e007      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9a:	d1ef      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800

08004eac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	613b      	str	r3, [r7, #16]
  return result;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	2103      	movs	r1, #3
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	401a      	ands	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  return result;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	fab3 f383 	clz	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	3724      	adds	r7, #36	@ 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	401a      	ands	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b089      	sub	sp, #36	@ 0x24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	fa93 f3a3 	rbit	r3, r3
 8004f54:	613b      	str	r3, [r7, #16]
  return result;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	2103      	movs	r1, #3
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	401a      	ands	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	61bb      	str	r3, [r7, #24]
  return result;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	431a      	orrs	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004f8c:	bf00      	nop
 8004f8e:	3724      	adds	r7, #36	@ 0x24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	@ 0x24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	613b      	str	r3, [r7, #16]
  return result;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2103      	movs	r1, #3
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	61bb      	str	r3, [r7, #24]
  return result;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60da      	str	r2, [r3, #12]
}
 8004fea:	bf00      	nop
 8004fec:	3724      	adds	r7, #36	@ 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b089      	sub	sp, #36	@ 0x24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	613b      	str	r3, [r7, #16]
  return result;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	fab3 f383 	clz	r3, r3
 8005018:	b2db      	uxtb	r3, r3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	210f      	movs	r1, #15
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	401a      	ands	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	fa93 f3a3 	rbit	r3, r3
 8005030:	61bb      	str	r3, [r7, #24]
  return result;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	431a      	orrs	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005048:	bf00      	nop
 800504a:	3724      	adds	r7, #36	@ 0x24
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	613b      	str	r3, [r7, #16]
  return result;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	210f      	movs	r1, #15
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	401a      	ands	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	61bb      	str	r3, [r7, #24]
  return result;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80050aa:	bf00      	nop
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b088      	sub	sp, #32
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	613b      	str	r3, [r7, #16]
  return result;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	fab3 f383 	clz	r3, r3
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80050e0:	e051      	b.n	8005186 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2101      	movs	r1, #1
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d043      	beq.n	8005180 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d003      	beq.n	8005108 <LL_GPIO_Init+0x52>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d10e      	bne.n	8005126 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	461a      	mov	r2, r3
 800510e:	69b9      	ldr	r1, [r7, #24]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff12 	bl	8004f3a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	461a      	mov	r2, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fef2 	bl	8004f0a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	461a      	mov	r2, r3
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff32 	bl	8004f98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d11a      	bne.n	8005172 <LL_GPIO_Init+0xbc>
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	60bb      	str	r3, [r7, #8]
  return result;
 8005148:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b07      	cmp	r3, #7
 8005152:	d807      	bhi.n	8005164 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	461a      	mov	r2, r3
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff4a 	bl	8004ff6 <LL_GPIO_SetAFPin_0_7>
 8005162:	e006      	b.n	8005172 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	461a      	mov	r2, r3
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff ff71 	bl	8005054 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	461a      	mov	r2, r3
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe96 	bl	8004eac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1a6      	bne.n	80050e2 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <LL_RCC_HSI_IsReady+0x20>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40023800 	.word	0x40023800

080051c4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <LL_RCC_LSE_IsReady+0x20>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
}
 80051da:	4618      	mov	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40023800 	.word	0x40023800

080051e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051ec:	4b04      	ldr	r3, [pc, #16]	@ (8005200 <LL_RCC_GetSysClkSource+0x18>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800

08005204 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <LL_RCC_GetAHBPrescaler+0x18>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800

08005220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005240:	4b04      	ldr	r3, [pc, #16]	@ (8005254 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005248:	4618      	mov	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <LL_RCC_GetUSARTClockSource+0x24>)
 8005262:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	401a      	ands	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	4313      	orrs	r3, r2
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40023800 	.word	0x40023800

08005280 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <LL_RCC_GetUARTClockSource+0x24>)
 800528a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	401a      	ands	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	4313      	orrs	r3, r2
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40023800 	.word	0x40023800

080052a8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052ac:	4b04      	ldr	r3, [pc, #16]	@ (80052c0 <LL_RCC_PLL_GetMainSource+0x18>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800

080052c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <LL_RCC_PLL_GetN+0x18>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40023800 	.word	0x40023800

080052e0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80052e4:	4b04      	ldr	r3, [pc, #16]	@ (80052f8 <LL_RCC_PLL_GetP+0x18>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005300:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <LL_RCC_PLL_GetDivider+0x18>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40023800 	.word	0x40023800

08005318 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d133      	bne.n	8005392 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ff94 	bl	8005258 <LL_RCC_GetUSARTClockSource>
 8005330:	4603      	mov	r3, r0
 8005332:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005336:	d016      	beq.n	8005366 <LL_RCC_GetUSARTClockFreq+0x4e>
 8005338:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800533c:	d81d      	bhi.n	800537a <LL_RCC_GetUSARTClockFreq+0x62>
 800533e:	4a70      	ldr	r2, [pc, #448]	@ (8005500 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <LL_RCC_GetUSARTClockFreq+0x34>
 8005344:	4a6f      	ldr	r2, [pc, #444]	@ (8005504 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <LL_RCC_GetUSARTClockFreq+0x3c>
 800534a:	e016      	b.n	800537a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800534c:	f000 f9f2 	bl	8005734 <RCC_GetSystemClockFreq>
 8005350:	60f8      	str	r0, [r7, #12]
        break;
 8005352:	e0cf      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005354:	f7ff ff24 	bl	80051a0 <LL_RCC_HSI_IsReady>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80bb 	beq.w	80054d6 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8005360:	4b69      	ldr	r3, [pc, #420]	@ (8005508 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005362:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005364:	e0b7      	b.n	80054d6 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005366:	f7ff ff2d 	bl	80051c4 <LL_RCC_LSE_IsReady>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80b4 	beq.w	80054da <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005376:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005378:	e0af      	b.n	80054da <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800537a:	f000 f9db 	bl	8005734 <RCC_GetSystemClockFreq>
 800537e:	4603      	mov	r3, r0
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f9ff 	bl	8005784 <RCC_GetHCLKClockFreq>
 8005386:	4603      	mov	r3, r0
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fa25 	bl	80057d8 <RCC_GetPCLK2ClockFreq>
 800538e:	60f8      	str	r0, [r7, #12]
        break;
 8005390:	e0b0      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d133      	bne.n	8005400 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ff5d 	bl	8005258 <LL_RCC_GetUSARTClockSource>
 800539e:	4603      	mov	r3, r0
 80053a0:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 80053a4:	d016      	beq.n	80053d4 <LL_RCC_GetUSARTClockFreq+0xbc>
 80053a6:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 80053aa:	d81d      	bhi.n	80053e8 <LL_RCC_GetUSARTClockFreq+0xd0>
 80053ac:	4a57      	ldr	r2, [pc, #348]	@ (800550c <LL_RCC_GetUSARTClockFreq+0x1f4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <LL_RCC_GetUSARTClockFreq+0xa2>
 80053b2:	4a57      	ldr	r2, [pc, #348]	@ (8005510 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <LL_RCC_GetUSARTClockFreq+0xaa>
 80053b8:	e016      	b.n	80053e8 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80053ba:	f000 f9bb 	bl	8005734 <RCC_GetSystemClockFreq>
 80053be:	60f8      	str	r0, [r7, #12]
        break;
 80053c0:	e098      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80053c2:	f7ff feed 	bl	80051a0 <LL_RCC_HSI_IsReady>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8088 	beq.w	80054de <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 80053ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005508 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80053d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053d2:	e084      	b.n	80054de <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80053d4:	f7ff fef6 	bl	80051c4 <LL_RCC_LSE_IsReady>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8081 	beq.w	80054e2 <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 80053e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80053e6:	e07c      	b.n	80054e2 <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80053e8:	f000 f9a4 	bl	8005734 <RCC_GetSystemClockFreq>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f9c8 	bl	8005784 <RCC_GetHCLKClockFreq>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f9da 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 80053fc:	60f8      	str	r0, [r7, #12]
        break;
 80053fe:	e079      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005406:	d131      	bne.n	800546c <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff25 	bl	8005258 <LL_RCC_GetUSARTClockSource>
 800540e:	4603      	mov	r3, r0
 8005410:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005414:	d015      	beq.n	8005442 <LL_RCC_GetUSARTClockFreq+0x12a>
 8005416:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800541a:	d81b      	bhi.n	8005454 <LL_RCC_GetUSARTClockFreq+0x13c>
 800541c:	4a3d      	ldr	r2, [pc, #244]	@ (8005514 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <LL_RCC_GetUSARTClockFreq+0x112>
 8005422:	4a3d      	ldr	r2, [pc, #244]	@ (8005518 <LL_RCC_GetUSARTClockFreq+0x200>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <LL_RCC_GetUSARTClockFreq+0x11a>
 8005428:	e014      	b.n	8005454 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800542a:	f000 f983 	bl	8005734 <RCC_GetSystemClockFreq>
 800542e:	60f8      	str	r0, [r7, #12]
        break;
 8005430:	e060      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005432:	f7ff feb5 	bl	80051a0 <LL_RCC_HSI_IsReady>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d054      	beq.n	80054e6 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 800543c:	4b32      	ldr	r3, [pc, #200]	@ (8005508 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800543e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005440:	e051      	b.n	80054e6 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005442:	f7ff febf 	bl	80051c4 <LL_RCC_LSE_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d04e      	beq.n	80054ea <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 800544c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005450:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005452:	e04a      	b.n	80054ea <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005454:	f000 f96e 	bl	8005734 <RCC_GetSystemClockFreq>
 8005458:	4603      	mov	r3, r0
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f992 	bl	8005784 <RCC_GetHCLKClockFreq>
 8005460:	4603      	mov	r3, r0
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f9b8 	bl	80057d8 <RCC_GetPCLK2ClockFreq>
 8005468:	60f8      	str	r0, [r7, #12]
        break;
 800546a:	e043      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b30      	cmp	r3, #48	@ 0x30
 8005470:	d140      	bne.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fef0 	bl	8005258 <LL_RCC_GetUSARTClockSource>
 8005478:	4603      	mov	r3, r0
 800547a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800547e:	d015      	beq.n	80054ac <LL_RCC_GetUSARTClockFreq+0x194>
 8005480:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005484:	d81b      	bhi.n	80054be <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005486:	4a25      	ldr	r2, [pc, #148]	@ (800551c <LL_RCC_GetUSARTClockFreq+0x204>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <LL_RCC_GetUSARTClockFreq+0x17c>
 800548c:	4a24      	ldr	r2, [pc, #144]	@ (8005520 <LL_RCC_GetUSARTClockFreq+0x208>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <LL_RCC_GetUSARTClockFreq+0x184>
 8005492:	e014      	b.n	80054be <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005494:	f000 f94e 	bl	8005734 <RCC_GetSystemClockFreq>
 8005498:	60f8      	str	r0, [r7, #12]
          break;
 800549a:	e02b      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800549c:	f7ff fe80 	bl	80051a0 <LL_RCC_HSI_IsReady>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d023      	beq.n	80054ee <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 80054a6:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80054a8:	60fb      	str	r3, [r7, #12]
          }
          break;
 80054aa:	e020      	b.n	80054ee <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 80054ac:	f7ff fe8a 	bl	80051c4 <LL_RCC_LSE_IsReady>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01d      	beq.n	80054f2 <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ba:	60fb      	str	r3, [r7, #12]
          }
          break;
 80054bc:	e019      	b.n	80054f2 <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80054be:	f000 f939 	bl	8005734 <RCC_GetSystemClockFreq>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f95d 	bl	8005784 <RCC_GetHCLKClockFreq>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f96f 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 80054d2:	60f8      	str	r0, [r7, #12]
          break;
 80054d4:	e00e      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054d6:	bf00      	nop
 80054d8:	e00c      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054da:	bf00      	nop
 80054dc:	e00a      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054de:	bf00      	nop
 80054e0:	e008      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054e2:	bf00      	nop
 80054e4:	e006      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054e6:	bf00      	nop
 80054e8:	e004      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 80054f2:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 80054f4:	68fb      	ldr	r3, [r7, #12]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	00030001 	.word	0x00030001
 8005504:	00030002 	.word	0x00030002
 8005508:	00f42400 	.word	0x00f42400
 800550c:	000c0004 	.word	0x000c0004
 8005510:	000c0008 	.word	0x000c0008
 8005514:	0c000400 	.word	0x0c000400
 8005518:	0c000800 	.word	0x0c000800
 800551c:	00300010 	.word	0x00300010
 8005520:	00300020 	.word	0x00300020

08005524 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2bc0      	cmp	r3, #192	@ 0xc0
 8005534:	d133      	bne.n	800559e <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fea2 	bl	8005280 <LL_RCC_GetUARTClockSource>
 800553c:	4603      	mov	r3, r0
 800553e:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005542:	d016      	beq.n	8005572 <LL_RCC_GetUARTClockFreq+0x4e>
 8005544:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005548:	d81d      	bhi.n	8005586 <LL_RCC_GetUARTClockFreq+0x62>
 800554a:	4a71      	ldr	r2, [pc, #452]	@ (8005710 <LL_RCC_GetUARTClockFreq+0x1ec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <LL_RCC_GetUARTClockFreq+0x34>
 8005550:	4a70      	ldr	r2, [pc, #448]	@ (8005714 <LL_RCC_GetUARTClockFreq+0x1f0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <LL_RCC_GetUARTClockFreq+0x3c>
 8005556:	e016      	b.n	8005586 <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005558:	f000 f8ec 	bl	8005734 <RCC_GetSystemClockFreq>
 800555c:	60f8      	str	r0, [r7, #12]
        break;
 800555e:	e0d1      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005560:	f7ff fe1e 	bl	80051a0 <LL_RCC_HSI_IsReady>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80bd 	beq.w	80056e6 <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 800556c:	4b6a      	ldr	r3, [pc, #424]	@ (8005718 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800556e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005570:	e0b9      	b.n	80056e6 <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005572:	f7ff fe27 	bl	80051c4 <LL_RCC_LSE_IsReady>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80b6 	beq.w	80056ea <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005582:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005584:	e0b1      	b.n	80056ea <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005586:	f000 f8d5 	bl	8005734 <RCC_GetSystemClockFreq>
 800558a:	4603      	mov	r3, r0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f8f9 	bl	8005784 <RCC_GetHCLKClockFreq>
 8005592:	4603      	mov	r3, r0
 8005594:	4618      	mov	r0, r3
 8005596:	f000 f90b 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 800559a:	60f8      	str	r0, [r7, #12]
        break;
 800559c:	e0b2      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a4:	d133      	bne.n	800560e <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe6a 	bl	8005280 <LL_RCC_GetUARTClockSource>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80055b2:	d016      	beq.n	80055e2 <LL_RCC_GetUARTClockFreq+0xbe>
 80055b4:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80055b8:	d81d      	bhi.n	80055f6 <LL_RCC_GetUARTClockFreq+0xd2>
 80055ba:	4a58      	ldr	r2, [pc, #352]	@ (800571c <LL_RCC_GetUARTClockFreq+0x1f8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <LL_RCC_GetUARTClockFreq+0xa4>
 80055c0:	4a57      	ldr	r2, [pc, #348]	@ (8005720 <LL_RCC_GetUARTClockFreq+0x1fc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <LL_RCC_GetUARTClockFreq+0xac>
 80055c6:	e016      	b.n	80055f6 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80055c8:	f000 f8b4 	bl	8005734 <RCC_GetSystemClockFreq>
 80055cc:	60f8      	str	r0, [r7, #12]
        break;
 80055ce:	e099      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80055d0:	f7ff fde6 	bl	80051a0 <LL_RCC_HSI_IsReady>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8089 	beq.w	80056ee <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 80055dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005718 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80055de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80055e0:	e085      	b.n	80056ee <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80055e2:	f7ff fdef 	bl	80051c4 <LL_RCC_LSE_IsReady>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8082 	beq.w	80056f2 <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80055f4:	e07d      	b.n	80056f2 <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80055f6:	f000 f89d 	bl	8005734 <RCC_GetSystemClockFreq>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f8c1 	bl	8005784 <RCC_GetHCLKClockFreq>
 8005602:	4603      	mov	r3, r0
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f8d3 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 800560a:	60f8      	str	r0, [r7, #12]
        break;
 800560c:	e07a      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005614:	d131      	bne.n	800567a <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fe32 	bl	8005280 <LL_RCC_GetUARTClockSource>
 800561c:	4603      	mov	r3, r0
 800561e:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005622:	d015      	beq.n	8005650 <LL_RCC_GetUARTClockFreq+0x12c>
 8005624:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005628:	d81b      	bhi.n	8005662 <LL_RCC_GetUARTClockFreq+0x13e>
 800562a:	4a3e      	ldr	r2, [pc, #248]	@ (8005724 <LL_RCC_GetUARTClockFreq+0x200>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <LL_RCC_GetUARTClockFreq+0x114>
 8005630:	4a3d      	ldr	r2, [pc, #244]	@ (8005728 <LL_RCC_GetUARTClockFreq+0x204>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <LL_RCC_GetUARTClockFreq+0x11c>
 8005636:	e014      	b.n	8005662 <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005638:	f000 f87c 	bl	8005734 <RCC_GetSystemClockFreq>
 800563c:	60f8      	str	r0, [r7, #12]
        break;
 800563e:	e061      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005640:	f7ff fdae 	bl	80051a0 <LL_RCC_HSI_IsReady>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d055      	beq.n	80056f6 <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 800564a:	4b33      	ldr	r3, [pc, #204]	@ (8005718 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800564c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800564e:	e052      	b.n	80056f6 <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005650:	f7ff fdb8 	bl	80051c4 <LL_RCC_LSE_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d04f      	beq.n	80056fa <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 800565a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005660:	e04b      	b.n	80056fa <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005662:	f000 f867 	bl	8005734 <RCC_GetSystemClockFreq>
 8005666:	4603      	mov	r3, r0
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f88b 	bl	8005784 <RCC_GetHCLKClockFreq>
 800566e:	4603      	mov	r3, r0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f89d 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 8005676:	60f8      	str	r0, [r7, #12]
        break;
 8005678:	e044      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005680:	d140      	bne.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fdfc 	bl	8005280 <LL_RCC_GetUARTClockSource>
 8005688:	4603      	mov	r3, r0
 800568a:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800568e:	d015      	beq.n	80056bc <LL_RCC_GetUARTClockFreq+0x198>
 8005690:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005694:	d81b      	bhi.n	80056ce <LL_RCC_GetUARTClockFreq+0x1aa>
 8005696:	4a25      	ldr	r2, [pc, #148]	@ (800572c <LL_RCC_GetUARTClockFreq+0x208>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <LL_RCC_GetUARTClockFreq+0x180>
 800569c:	4a24      	ldr	r2, [pc, #144]	@ (8005730 <LL_RCC_GetUARTClockFreq+0x20c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <LL_RCC_GetUARTClockFreq+0x188>
 80056a2:	e014      	b.n	80056ce <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 80056a4:	f000 f846 	bl	8005734 <RCC_GetSystemClockFreq>
 80056a8:	60f8      	str	r0, [r7, #12]
          break;
 80056aa:	e02b      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 80056ac:	f7ff fd78 	bl	80051a0 <LL_RCC_HSI_IsReady>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d023      	beq.n	80056fe <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 80056b6:	4b18      	ldr	r3, [pc, #96]	@ (8005718 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80056b8:	60fb      	str	r3, [r7, #12]
          }
          break;
 80056ba:	e020      	b.n	80056fe <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 80056bc:	f7ff fd82 	bl	80051c4 <LL_RCC_LSE_IsReady>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01d      	beq.n	8005702 <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 80056c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ca:	60fb      	str	r3, [r7, #12]
          }
          break;
 80056cc:	e019      	b.n	8005702 <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80056ce:	f000 f831 	bl	8005734 <RCC_GetSystemClockFreq>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f855 	bl	8005784 <RCC_GetHCLKClockFreq>
 80056da:	4603      	mov	r3, r0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f867 	bl	80057b0 <RCC_GetPCLK1ClockFreq>
 80056e2:	60f8      	str	r0, [r7, #12]
          break;
 80056e4:	e00e      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056e6:	bf00      	nop
 80056e8:	e00c      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056ea:	bf00      	nop
 80056ec:	e00a      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056ee:	bf00      	nop
 80056f0:	e008      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056f2:	bf00      	nop
 80056f4:	e006      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056f6:	bf00      	nop
 80056f8:	e004      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005702:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	00c00040 	.word	0x00c00040
 8005714:	00c00080 	.word	0x00c00080
 8005718:	00f42400 	.word	0x00f42400
 800571c:	03000100 	.word	0x03000100
 8005720:	03000200 	.word	0x03000200
 8005724:	30001000 	.word	0x30001000
 8005728:	30002000 	.word	0x30002000
 800572c:	c0004000 	.word	0xc0004000
 8005730:	c0008000 	.word	0xc0008000

08005734 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800573e:	f7ff fd53 	bl	80051e8 <LL_RCC_GetSysClkSource>
 8005742:	4603      	mov	r3, r0
 8005744:	2b08      	cmp	r3, #8
 8005746:	d00c      	beq.n	8005762 <RCC_GetSystemClockFreq+0x2e>
 8005748:	2b08      	cmp	r3, #8
 800574a:	d80e      	bhi.n	800576a <RCC_GetSystemClockFreq+0x36>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <RCC_GetSystemClockFreq+0x22>
 8005750:	2b04      	cmp	r3, #4
 8005752:	d003      	beq.n	800575c <RCC_GetSystemClockFreq+0x28>
 8005754:	e009      	b.n	800576a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005756:	4b09      	ldr	r3, [pc, #36]	@ (800577c <RCC_GetSystemClockFreq+0x48>)
 8005758:	607b      	str	r3, [r7, #4]
      break;
 800575a:	e009      	b.n	8005770 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800575c:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <RCC_GetSystemClockFreq+0x4c>)
 800575e:	607b      	str	r3, [r7, #4]
      break;
 8005760:	e006      	b.n	8005770 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005762:	f000 f84d 	bl	8005800 <RCC_PLL_GetFreqDomain_SYS>
 8005766:	6078      	str	r0, [r7, #4]
      break;
 8005768:	e002      	b.n	8005770 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800576a:	4b04      	ldr	r3, [pc, #16]	@ (800577c <RCC_GetSystemClockFreq+0x48>)
 800576c:	607b      	str	r3, [r7, #4]
      break;
 800576e:	bf00      	nop
  }

  return frequency;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	00f42400 	.word	0x00f42400
 8005780:	007a1200 	.word	0x007a1200

08005784 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800578c:	f7ff fd3a 	bl	8005204 <LL_RCC_GetAHBPrescaler>
 8005790:	4603      	mov	r3, r0
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <RCC_GetHCLKClockFreq+0x28>)
 800579a:	5cd3      	ldrb	r3, [r2, r3]
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	40d3      	lsrs	r3, r2
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	08008f6c 	.word	0x08008f6c

080057b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80057b8:	f7ff fd32 	bl	8005220 <LL_RCC_GetAPB1Prescaler>
 80057bc:	4603      	mov	r3, r0
 80057be:	0a9b      	lsrs	r3, r3, #10
 80057c0:	4a04      	ldr	r2, [pc, #16]	@ (80057d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80057c2:	5cd3      	ldrb	r3, [r2, r3]
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	40d3      	lsrs	r3, r2
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	08008f7c 	.word	0x08008f7c

080057d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80057e0:	f7ff fd2c 	bl	800523c <LL_RCC_GetAPB2Prescaler>
 80057e4:	4603      	mov	r3, r0
 80057e6:	0b5b      	lsrs	r3, r3, #13
 80057e8:	4a04      	ldr	r2, [pc, #16]	@ (80057fc <RCC_GetPCLK2ClockFreq+0x24>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	40d3      	lsrs	r3, r2
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	08008f7c 	.word	0x08008f7c

08005800 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	2300      	movs	r3, #0
 800580c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800580e:	f7ff fd4b 	bl	80052a8 <LL_RCC_PLL_GetMainSource>
 8005812:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005820:	d003      	beq.n	800582a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005822:	e005      	b.n	8005830 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005824:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005826:	607b      	str	r3, [r7, #4]
      break;
 8005828:	e005      	b.n	8005836 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800582a:	4b0f      	ldr	r3, [pc, #60]	@ (8005868 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800582c:	607b      	str	r3, [r7, #4]
      break;
 800582e:	e002      	b.n	8005836 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8005830:	4b0c      	ldr	r3, [pc, #48]	@ (8005864 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005832:	607b      	str	r3, [r7, #4]
      break;
 8005834:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005836:	f7ff fd61 	bl	80052fc <LL_RCC_PLL_GetDivider>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	fbb3 f4f2 	udiv	r4, r3, r2
 8005842:	f7ff fd3f 	bl	80052c4 <LL_RCC_PLL_GetN>
 8005846:	4603      	mov	r3, r0
 8005848:	fb03 f404 	mul.w	r4, r3, r4
 800584c:	f7ff fd48 	bl	80052e0 <LL_RCC_PLL_GetP>
 8005850:	4603      	mov	r3, r0
 8005852:	0c1b      	lsrs	r3, r3, #16
 8005854:	3301      	adds	r3, #1
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	00f42400 	.word	0x00f42400
 8005868:	007a1200 	.word	0x007a1200

0800586c <LL_USART_IsEnabled>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <LL_USART_IsEnabled+0x18>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <LL_USART_IsEnabled+0x1a>
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LL_USART_SetStopBitsLength>:
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_USART_SetHWFlowCtrl>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_USART_SetBaudRate>:
{
 80058de:	b480      	push	{r7}
 80058e0:	b087      	sub	sp, #28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f2:	d11a      	bne.n	800592a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	005a      	lsls	r2, r3, #1
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	441a      	add	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	b29b      	uxth	r3, r3
 8005906:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	60da      	str	r2, [r3, #12]
}
 8005928:	e00a      	b.n	8005940 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	085a      	lsrs	r2, r3, #1
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	441a      	add	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	b29b      	uxth	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	60da      	str	r2, [r3, #12]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff84 	bl	800586c <LL_USART_IsEnabled>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d179      	bne.n	8005a5e <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <LL_USART_Init+0x11c>)
 8005970:	4013      	ands	r3, r2
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6851      	ldr	r1, [r2, #4]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	68d2      	ldr	r2, [r2, #12]
 800597a:	4311      	orrs	r1, r2
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	6912      	ldr	r2, [r2, #16]
 8005980:	4311      	orrs	r1, r2
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	6992      	ldr	r2, [r2, #24]
 8005986:	430a      	orrs	r2, r1
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff7c 	bl	8005892 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ff89 	bl	80058b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a30      	ldr	r2, [pc, #192]	@ (8005a6c <LL_USART_Init+0x120>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d104      	bne.n	80059b8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80059ae:	2003      	movs	r0, #3
 80059b0:	f7ff fcb2 	bl	8005318 <LL_RCC_GetUSARTClockFreq>
 80059b4:	60b8      	str	r0, [r7, #8]
 80059b6:	e041      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005a70 <LL_USART_Init+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d104      	bne.n	80059ca <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80059c0:	200c      	movs	r0, #12
 80059c2:	f7ff fca9 	bl	8005318 <LL_RCC_GetUSARTClockFreq>
 80059c6:	60b8      	str	r0, [r7, #8]
 80059c8:	e038      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a29      	ldr	r2, [pc, #164]	@ (8005a74 <LL_USART_Init+0x128>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d104      	bne.n	80059dc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80059d2:	2030      	movs	r0, #48	@ 0x30
 80059d4:	f7ff fca0 	bl	8005318 <LL_RCC_GetUSARTClockFreq>
 80059d8:	60b8      	str	r0, [r7, #8]
 80059da:	e02f      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a26      	ldr	r2, [pc, #152]	@ (8005a78 <LL_USART_Init+0x12c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d104      	bne.n	80059ee <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80059e4:	20c0      	movs	r0, #192	@ 0xc0
 80059e6:	f7ff fd9d 	bl	8005524 <LL_RCC_GetUARTClockFreq>
 80059ea:	60b8      	str	r0, [r7, #8]
 80059ec:	e026      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <LL_USART_Init+0x130>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d105      	bne.n	8005a02 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80059f6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80059fa:	f7ff fd93 	bl	8005524 <LL_RCC_GetUARTClockFreq>
 80059fe:	60b8      	str	r0, [r7, #8]
 8005a00:	e01c      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <LL_USART_Init+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d105      	bne.n	8005a16 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8005a0a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005a0e:	f7ff fc83 	bl	8005318 <LL_RCC_GetUSARTClockFreq>
 8005a12:	60b8      	str	r0, [r7, #8]
 8005a14:	e012      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1a      	ldr	r2, [pc, #104]	@ (8005a84 <LL_USART_Init+0x138>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d105      	bne.n	8005a2a <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8005a1e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8005a22:	f7ff fd7f 	bl	8005524 <LL_RCC_GetUARTClockFreq>
 8005a26:	60b8      	str	r0, [r7, #8]
 8005a28:	e008      	b.n	8005a3c <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	@ (8005a88 <LL_USART_Init+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d104      	bne.n	8005a3c <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8005a32:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8005a36:	f7ff fd75 	bl	8005524 <LL_RCC_GetUARTClockFreq>
 8005a3a:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff40 	bl	80058de <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	efff69f3 	.word	0xefff69f3
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	40004400 	.word	0x40004400
 8005a74:	40004800 	.word	0x40004800
 8005a78:	40004c00 	.word	0x40004c00
 8005a7c:	40005000 	.word	0x40005000
 8005a80:	40011400 	.word	0x40011400
 8005a84:	40007800 	.word	0x40007800
 8005a88:	40007c00 	.word	0x40007c00

08005a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	f107 001c 	add.w	r0, r7, #28
 8005a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d120      	bne.n	8005ae6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b20      	ldr	r3, [pc, #128]	@ (8005b38 <USB_CoreInit+0xac>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa96 	bl	800600c <USB_CoreReset>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
 8005ae4:	e010      	b.n	8005b08 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa8a 	bl	800600c <USB_CoreReset>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d10b      	bne.n	8005b26 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f043 0206 	orr.w	r2, r3, #6
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b32:	b004      	add	sp, #16
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	ffbdffbf 	.word	0xffbdffbf

08005b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 0201 	bic.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d115      	bne.n	8005bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fc f85f 	bl	8001c50 <HAL_Delay>
      ms++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa29 	bl	8005ff0 <USB_GetMode>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d01e      	beq.n	8005be2 <USB_SetCurrentMode+0x84>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b31      	cmp	r3, #49	@ 0x31
 8005ba8:	d9f0      	bls.n	8005b8c <USB_SetCurrentMode+0x2e>
 8005baa:	e01a      	b.n	8005be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d115      	bne.n	8005bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7fc f846 	bl	8001c50 <HAL_Delay>
      ms++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa10 	bl	8005ff0 <USB_GetMode>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <USB_SetCurrentMode+0x84>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b31      	cmp	r3, #49	@ 0x31
 8005bda:	d9f0      	bls.n	8005bbe <USB_SetCurrentMode+0x60>
 8005bdc:	e001      	b.n	8005be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e005      	b.n	8005bee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b32      	cmp	r3, #50	@ 0x32
 8005be6:	d101      	bne.n	8005bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e009      	b.n	8005c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3340      	adds	r3, #64	@ 0x40
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	2200      	movs	r2, #0
 8005c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b0e      	cmp	r3, #14
 8005c30:	d9f2      	bls.n	8005c18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11c      	bne.n	8005c72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e005      	b.n	8005c7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c84:	461a      	mov	r2, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c90:	4619      	mov	r1, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c98:	461a      	mov	r2, r3
 8005c9a:	680b      	ldr	r3, [r1, #0]
 8005c9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10c      	bne.n	8005cbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005caa:	2100      	movs	r1, #0
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f965 	bl	8005f7c <USB_SetDevSpeed>
 8005cb2:	e008      	b.n	8005cc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f960 	bl	8005f7c <USB_SetDevSpeed>
 8005cbc:	e003      	b.n	8005cc6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cbe:	2103      	movs	r1, #3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f95b 	bl	8005f7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cc6:	2110      	movs	r1, #16
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f8f3 	bl	8005eb4 <USB_FlushTxFifo>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f91f 	bl	8005f1c <USB_FlushRxFifo>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d06:	461a      	mov	r2, r3
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e043      	b.n	8005d9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d28:	d118      	bne.n	8005d5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e013      	b.n	8005d6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d52:	461a      	mov	r2, r3
 8005d54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e008      	b.n	8005d6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	3301      	adds	r3, #1
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3b7      	bcc.n	8005d12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e043      	b.n	8005e30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dbe:	d118      	bne.n	8005df2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e013      	b.n	8005e04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e008      	b.n	8005e04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2300      	movs	r3, #0
 8005e02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	461a      	mov	r2, r3
 8005e12:	2300      	movs	r3, #0
 8005e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e22:	461a      	mov	r2, r3
 8005e24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d3b7      	bcc.n	8005da8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f043 0210 	orr.w	r2, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <USB_DevInit+0x2b4>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f043 0208 	orr.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <USB_DevInit+0x2b8>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	803c3800 	.word	0x803c3800
 8005eb0:	40000004 	.word	0x40000004

08005eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <USB_FlushTxFifo+0x64>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e01b      	b.n	8005f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	daf2      	bge.n	8005ec2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	019b      	lsls	r3, r3, #6
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a08      	ldr	r2, [pc, #32]	@ (8005f18 <USB_FlushTxFifo+0x64>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e006      	b.n	8005f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d0f0      	beq.n	8005eec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	00030d40 	.word	0x00030d40

08005f1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <USB_FlushRxFifo+0x5c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e018      	b.n	8005f6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	daf2      	bge.n	8005f28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a08      	ldr	r2, [pc, #32]	@ (8005f78 <USB_FlushRxFifo+0x5c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e006      	b.n	8005f6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d0f0      	beq.n	8005f4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	00030d40 	.word	0x00030d40

08005f7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fc8:	f023 0303 	bic.w	r3, r3, #3
 8005fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a13      	ldr	r2, [pc, #76]	@ (8006070 <USB_CoreReset+0x64>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e01b      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	daf2      	bge.n	8006018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a09      	ldr	r2, [pc, #36]	@ (8006070 <USB_CoreReset+0x64>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e006      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d0f0      	beq.n	8006042 <USB_CoreReset+0x36>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	00030d40 	.word	0x00030d40

08006074 <__cvt>:
 8006074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006076:	ed2d 8b02 	vpush	{d8}
 800607a:	eeb0 8b40 	vmov.f64	d8, d0
 800607e:	b085      	sub	sp, #20
 8006080:	4617      	mov	r7, r2
 8006082:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006084:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006086:	ee18 2a90 	vmov	r2, s17
 800608a:	f025 0520 	bic.w	r5, r5, #32
 800608e:	2a00      	cmp	r2, #0
 8006090:	bfb6      	itet	lt
 8006092:	222d      	movlt	r2, #45	@ 0x2d
 8006094:	2200      	movge	r2, #0
 8006096:	eeb1 8b40 	vneglt.f64	d8, d0
 800609a:	2d46      	cmp	r5, #70	@ 0x46
 800609c:	460c      	mov	r4, r1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	d004      	beq.n	80060ac <__cvt+0x38>
 80060a2:	2d45      	cmp	r5, #69	@ 0x45
 80060a4:	d100      	bne.n	80060a8 <__cvt+0x34>
 80060a6:	3401      	adds	r4, #1
 80060a8:	2102      	movs	r1, #2
 80060aa:	e000      	b.n	80060ae <__cvt+0x3a>
 80060ac:	2103      	movs	r1, #3
 80060ae:	ab03      	add	r3, sp, #12
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	ab02      	add	r3, sp, #8
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	4622      	mov	r2, r4
 80060b8:	4633      	mov	r3, r6
 80060ba:	eeb0 0b48 	vmov.f64	d0, d8
 80060be:	f000 ff63 	bl	8006f88 <_dtoa_r>
 80060c2:	2d47      	cmp	r5, #71	@ 0x47
 80060c4:	d114      	bne.n	80060f0 <__cvt+0x7c>
 80060c6:	07fb      	lsls	r3, r7, #31
 80060c8:	d50a      	bpl.n	80060e0 <__cvt+0x6c>
 80060ca:	1902      	adds	r2, r0, r4
 80060cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d4:	bf08      	it	eq
 80060d6:	9203      	streq	r2, [sp, #12]
 80060d8:	2130      	movs	r1, #48	@ 0x30
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	4293      	cmp	r3, r2
 80060de:	d319      	bcc.n	8006114 <__cvt+0xa0>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060e4:	1a1b      	subs	r3, r3, r0
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	b005      	add	sp, #20
 80060ea:	ecbd 8b02 	vpop	{d8}
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	2d46      	cmp	r5, #70	@ 0x46
 80060f2:	eb00 0204 	add.w	r2, r0, r4
 80060f6:	d1e9      	bne.n	80060cc <__cvt+0x58>
 80060f8:	7803      	ldrb	r3, [r0, #0]
 80060fa:	2b30      	cmp	r3, #48	@ 0x30
 80060fc:	d107      	bne.n	800610e <__cvt+0x9a>
 80060fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	bf1c      	itt	ne
 8006108:	f1c4 0401 	rsbne	r4, r4, #1
 800610c:	6034      	strne	r4, [r6, #0]
 800610e:	6833      	ldr	r3, [r6, #0]
 8006110:	441a      	add	r2, r3
 8006112:	e7db      	b.n	80060cc <__cvt+0x58>
 8006114:	1c5c      	adds	r4, r3, #1
 8006116:	9403      	str	r4, [sp, #12]
 8006118:	7019      	strb	r1, [r3, #0]
 800611a:	e7de      	b.n	80060da <__cvt+0x66>

0800611c <__exponent>:
 800611c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800611e:	2900      	cmp	r1, #0
 8006120:	bfba      	itte	lt
 8006122:	4249      	neglt	r1, r1
 8006124:	232d      	movlt	r3, #45	@ 0x2d
 8006126:	232b      	movge	r3, #43	@ 0x2b
 8006128:	2909      	cmp	r1, #9
 800612a:	7002      	strb	r2, [r0, #0]
 800612c:	7043      	strb	r3, [r0, #1]
 800612e:	dd29      	ble.n	8006184 <__exponent+0x68>
 8006130:	f10d 0307 	add.w	r3, sp, #7
 8006134:	461d      	mov	r5, r3
 8006136:	270a      	movs	r7, #10
 8006138:	461a      	mov	r2, r3
 800613a:	fbb1 f6f7 	udiv	r6, r1, r7
 800613e:	fb07 1416 	mls	r4, r7, r6, r1
 8006142:	3430      	adds	r4, #48	@ 0x30
 8006144:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006148:	460c      	mov	r4, r1
 800614a:	2c63      	cmp	r4, #99	@ 0x63
 800614c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006150:	4631      	mov	r1, r6
 8006152:	dcf1      	bgt.n	8006138 <__exponent+0x1c>
 8006154:	3130      	adds	r1, #48	@ 0x30
 8006156:	1e94      	subs	r4, r2, #2
 8006158:	f803 1c01 	strb.w	r1, [r3, #-1]
 800615c:	1c41      	adds	r1, r0, #1
 800615e:	4623      	mov	r3, r4
 8006160:	42ab      	cmp	r3, r5
 8006162:	d30a      	bcc.n	800617a <__exponent+0x5e>
 8006164:	f10d 0309 	add.w	r3, sp, #9
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	42ac      	cmp	r4, r5
 800616c:	bf88      	it	hi
 800616e:	2300      	movhi	r3, #0
 8006170:	3302      	adds	r3, #2
 8006172:	4403      	add	r3, r0
 8006174:	1a18      	subs	r0, r3, r0
 8006176:	b003      	add	sp, #12
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800617e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006182:	e7ed      	b.n	8006160 <__exponent+0x44>
 8006184:	2330      	movs	r3, #48	@ 0x30
 8006186:	3130      	adds	r1, #48	@ 0x30
 8006188:	7083      	strb	r3, [r0, #2]
 800618a:	70c1      	strb	r1, [r0, #3]
 800618c:	1d03      	adds	r3, r0, #4
 800618e:	e7f1      	b.n	8006174 <__exponent+0x58>

08006190 <_printf_float>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	b08d      	sub	sp, #52	@ 0x34
 8006196:	460c      	mov	r4, r1
 8006198:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800619c:	4616      	mov	r6, r2
 800619e:	461f      	mov	r7, r3
 80061a0:	4605      	mov	r5, r0
 80061a2:	f000 fde3 	bl	8006d6c <_localeconv_r>
 80061a6:	f8d0 b000 	ldr.w	fp, [r0]
 80061aa:	4658      	mov	r0, fp
 80061ac:	f7fa f898 	bl	80002e0 <strlen>
 80061b0:	2300      	movs	r3, #0
 80061b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b4:	f8d8 3000 	ldr.w	r3, [r8]
 80061b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	9005      	str	r0, [sp, #20]
 80061c0:	3307      	adds	r3, #7
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	f103 0108 	add.w	r1, r3, #8
 80061ca:	f8c8 1000 	str.w	r1, [r8]
 80061ce:	ed93 0b00 	vldr	d0, [r3]
 80061d2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006430 <_printf_float+0x2a0>
 80061d6:	eeb0 7bc0 	vabs.f64	d7, d0
 80061da:	eeb4 7b46 	vcmp.f64	d7, d6
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80061e6:	dd24      	ble.n	8006232 <_printf_float+0xa2>
 80061e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	d502      	bpl.n	80061f8 <_printf_float+0x68>
 80061f2:	232d      	movs	r3, #45	@ 0x2d
 80061f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061f8:	498f      	ldr	r1, [pc, #572]	@ (8006438 <_printf_float+0x2a8>)
 80061fa:	4b90      	ldr	r3, [pc, #576]	@ (800643c <_printf_float+0x2ac>)
 80061fc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006200:	bf94      	ite	ls
 8006202:	4688      	movls	r8, r1
 8006204:	4698      	movhi	r8, r3
 8006206:	f022 0204 	bic.w	r2, r2, #4
 800620a:	2303      	movs	r3, #3
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	f04f 0a00 	mov.w	sl, #0
 8006214:	9700      	str	r7, [sp, #0]
 8006216:	4633      	mov	r3, r6
 8006218:	aa0b      	add	r2, sp, #44	@ 0x2c
 800621a:	4621      	mov	r1, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f000 f9d1 	bl	80065c4 <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	f040 8089 	bne.w	800633a <_printf_float+0x1aa>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	b00d      	add	sp, #52	@ 0x34
 800622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006232:	eeb4 0b40 	vcmp.f64	d0, d0
 8006236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623a:	d709      	bvc.n	8006250 <_printf_float+0xc0>
 800623c:	ee10 3a90 	vmov	r3, s1
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfbc      	itt	lt
 8006244:	232d      	movlt	r3, #45	@ 0x2d
 8006246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800624a:	497d      	ldr	r1, [pc, #500]	@ (8006440 <_printf_float+0x2b0>)
 800624c:	4b7d      	ldr	r3, [pc, #500]	@ (8006444 <_printf_float+0x2b4>)
 800624e:	e7d5      	b.n	80061fc <_printf_float+0x6c>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006258:	d139      	bne.n	80062ce <_printf_float+0x13e>
 800625a:	2306      	movs	r3, #6
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006262:	2300      	movs	r3, #0
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	ab0a      	add	r3, sp, #40	@ 0x28
 800626a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800626e:	ab09      	add	r3, sp, #36	@ 0x24
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	6861      	ldr	r1, [r4, #4]
 8006274:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006278:	4628      	mov	r0, r5
 800627a:	f7ff fefb 	bl	8006074 <__cvt>
 800627e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006284:	4680      	mov	r8, r0
 8006286:	d129      	bne.n	80062dc <_printf_float+0x14c>
 8006288:	1cc8      	adds	r0, r1, #3
 800628a:	db02      	blt.n	8006292 <_printf_float+0x102>
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	4299      	cmp	r1, r3
 8006290:	dd41      	ble.n	8006316 <_printf_float+0x186>
 8006292:	f1a9 0902 	sub.w	r9, r9, #2
 8006296:	fa5f f989 	uxtb.w	r9, r9
 800629a:	3901      	subs	r1, #1
 800629c:	464a      	mov	r2, r9
 800629e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80062a4:	f7ff ff3a 	bl	800611c <__exponent>
 80062a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062aa:	1813      	adds	r3, r2, r0
 80062ac:	2a01      	cmp	r2, #1
 80062ae:	4682      	mov	sl, r0
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	dc02      	bgt.n	80062ba <_printf_float+0x12a>
 80062b4:	6822      	ldr	r2, [r4, #0]
 80062b6:	07d2      	lsls	r2, r2, #31
 80062b8:	d501      	bpl.n	80062be <_printf_float+0x12e>
 80062ba:	3301      	adds	r3, #1
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0a6      	beq.n	8006214 <_printf_float+0x84>
 80062c6:	232d      	movs	r3, #45	@ 0x2d
 80062c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062cc:	e7a2      	b.n	8006214 <_printf_float+0x84>
 80062ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062d2:	d1c4      	bne.n	800625e <_printf_float+0xce>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1c2      	bne.n	800625e <_printf_float+0xce>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7bf      	b.n	800625c <_printf_float+0xcc>
 80062dc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80062e0:	d9db      	bls.n	800629a <_printf_float+0x10a>
 80062e2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80062e6:	d118      	bne.n	800631a <_printf_float+0x18a>
 80062e8:	2900      	cmp	r1, #0
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	dd0b      	ble.n	8006306 <_printf_float+0x176>
 80062ee:	6121      	str	r1, [r4, #16]
 80062f0:	b913      	cbnz	r3, 80062f8 <_printf_float+0x168>
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	07d0      	lsls	r0, r2, #31
 80062f6:	d502      	bpl.n	80062fe <_printf_float+0x16e>
 80062f8:	3301      	adds	r3, #1
 80062fa:	440b      	add	r3, r1
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006300:	f04f 0a00 	mov.w	sl, #0
 8006304:	e7db      	b.n	80062be <_printf_float+0x12e>
 8006306:	b913      	cbnz	r3, 800630e <_printf_float+0x17e>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	07d2      	lsls	r2, r2, #31
 800630c:	d501      	bpl.n	8006312 <_printf_float+0x182>
 800630e:	3302      	adds	r3, #2
 8006310:	e7f4      	b.n	80062fc <_printf_float+0x16c>
 8006312:	2301      	movs	r3, #1
 8006314:	e7f2      	b.n	80062fc <_printf_float+0x16c>
 8006316:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800631a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631c:	4299      	cmp	r1, r3
 800631e:	db05      	blt.n	800632c <_printf_float+0x19c>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	6121      	str	r1, [r4, #16]
 8006324:	07d8      	lsls	r0, r3, #31
 8006326:	d5ea      	bpl.n	80062fe <_printf_float+0x16e>
 8006328:	1c4b      	adds	r3, r1, #1
 800632a:	e7e7      	b.n	80062fc <_printf_float+0x16c>
 800632c:	2900      	cmp	r1, #0
 800632e:	bfd4      	ite	le
 8006330:	f1c1 0202 	rsble	r2, r1, #2
 8006334:	2201      	movgt	r2, #1
 8006336:	4413      	add	r3, r2
 8006338:	e7e0      	b.n	80062fc <_printf_float+0x16c>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	055a      	lsls	r2, r3, #21
 800633e:	d407      	bmi.n	8006350 <_printf_float+0x1c0>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	4642      	mov	r2, r8
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	d12a      	bne.n	80063a4 <_printf_float+0x214>
 800634e:	e76b      	b.n	8006228 <_printf_float+0x98>
 8006350:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006354:	f240 80e0 	bls.w	8006518 <_printf_float+0x388>
 8006358:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800635c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006364:	d133      	bne.n	80063ce <_printf_float+0x23e>
 8006366:	4a38      	ldr	r2, [pc, #224]	@ (8006448 <_printf_float+0x2b8>)
 8006368:	2301      	movs	r3, #1
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f af59 	beq.w	8006228 <_printf_float+0x98>
 8006376:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800637a:	4543      	cmp	r3, r8
 800637c:	db02      	blt.n	8006384 <_printf_float+0x1f4>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	07d8      	lsls	r0, r3, #31
 8006382:	d50f      	bpl.n	80063a4 <_printf_float+0x214>
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	465a      	mov	r2, fp
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af4a 	beq.w	8006228 <_printf_float+0x98>
 8006394:	f04f 0900 	mov.w	r9, #0
 8006398:	f108 38ff 	add.w	r8, r8, #4294967295
 800639c:	f104 0a1a 	add.w	sl, r4, #26
 80063a0:	45c8      	cmp	r8, r9
 80063a2:	dc09      	bgt.n	80063b8 <_printf_float+0x228>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	f100 8107 	bmi.w	80065ba <_printf_float+0x42a>
 80063ac:	68e0      	ldr	r0, [r4, #12]
 80063ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063b0:	4298      	cmp	r0, r3
 80063b2:	bfb8      	it	lt
 80063b4:	4618      	movlt	r0, r3
 80063b6:	e739      	b.n	800622c <_printf_float+0x9c>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4652      	mov	r2, sl
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af30 	beq.w	8006228 <_printf_float+0x98>
 80063c8:	f109 0901 	add.w	r9, r9, #1
 80063cc:	e7e8      	b.n	80063a0 <_printf_float+0x210>
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc3b      	bgt.n	800644c <_printf_float+0x2bc>
 80063d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006448 <_printf_float+0x2b8>)
 80063d6:	2301      	movs	r3, #1
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af22 	beq.w	8006228 <_printf_float+0x98>
 80063e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063e8:	ea59 0303 	orrs.w	r3, r9, r3
 80063ec:	d102      	bne.n	80063f4 <_printf_float+0x264>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d5d7      	bpl.n	80063a4 <_printf_float+0x214>
 80063f4:	9b05      	ldr	r3, [sp, #20]
 80063f6:	465a      	mov	r2, fp
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af12 	beq.w	8006228 <_printf_float+0x98>
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	f104 0b1a 	add.w	fp, r4, #26
 800640c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640e:	425b      	negs	r3, r3
 8006410:	4553      	cmp	r3, sl
 8006412:	dc01      	bgt.n	8006418 <_printf_float+0x288>
 8006414:	464b      	mov	r3, r9
 8006416:	e794      	b.n	8006342 <_printf_float+0x1b2>
 8006418:	2301      	movs	r3, #1
 800641a:	465a      	mov	r2, fp
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f af00 	beq.w	8006228 <_printf_float+0x98>
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	e7ee      	b.n	800640c <_printf_float+0x27c>
 800642e:	bf00      	nop
 8006430:	ffffffff 	.word	0xffffffff
 8006434:	7fefffff 	.word	0x7fefffff
 8006438:	08008f8c 	.word	0x08008f8c
 800643c:	08008f90 	.word	0x08008f90
 8006440:	08008f94 	.word	0x08008f94
 8006444:	08008f98 	.word	0x08008f98
 8006448:	08008f9c 	.word	0x08008f9c
 800644c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800644e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006452:	4553      	cmp	r3, sl
 8006454:	bfa8      	it	ge
 8006456:	4653      	movge	r3, sl
 8006458:	2b00      	cmp	r3, #0
 800645a:	4699      	mov	r9, r3
 800645c:	dc37      	bgt.n	80064ce <_printf_float+0x33e>
 800645e:	2300      	movs	r3, #0
 8006460:	9307      	str	r3, [sp, #28]
 8006462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006466:	f104 021a 	add.w	r2, r4, #26
 800646a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800646c:	9907      	ldr	r1, [sp, #28]
 800646e:	9306      	str	r3, [sp, #24]
 8006470:	eba3 0309 	sub.w	r3, r3, r9
 8006474:	428b      	cmp	r3, r1
 8006476:	dc31      	bgt.n	80064dc <_printf_float+0x34c>
 8006478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647a:	459a      	cmp	sl, r3
 800647c:	dc3b      	bgt.n	80064f6 <_printf_float+0x366>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	07da      	lsls	r2, r3, #31
 8006482:	d438      	bmi.n	80064f6 <_printf_float+0x366>
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	ebaa 0903 	sub.w	r9, sl, r3
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	ebaa 0303 	sub.w	r3, sl, r3
 8006490:	4599      	cmp	r9, r3
 8006492:	bfa8      	it	ge
 8006494:	4699      	movge	r9, r3
 8006496:	f1b9 0f00 	cmp.w	r9, #0
 800649a:	dc34      	bgt.n	8006506 <_printf_float+0x376>
 800649c:	f04f 0800 	mov.w	r8, #0
 80064a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064a4:	f104 0b1a 	add.w	fp, r4, #26
 80064a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064aa:	ebaa 0303 	sub.w	r3, sl, r3
 80064ae:	eba3 0309 	sub.w	r3, r3, r9
 80064b2:	4543      	cmp	r3, r8
 80064b4:	f77f af76 	ble.w	80063a4 <_printf_float+0x214>
 80064b8:	2301      	movs	r3, #1
 80064ba:	465a      	mov	r2, fp
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f aeb0 	beq.w	8006228 <_printf_float+0x98>
 80064c8:	f108 0801 	add.w	r8, r8, #1
 80064cc:	e7ec      	b.n	80064a8 <_printf_float+0x318>
 80064ce:	4642      	mov	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d1c1      	bne.n	800645e <_printf_float+0x2ce>
 80064da:	e6a5      	b.n	8006228 <_printf_float+0x98>
 80064dc:	2301      	movs	r3, #1
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	9206      	str	r2, [sp, #24]
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f ae9e 	beq.w	8006228 <_printf_float+0x98>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	9a06      	ldr	r2, [sp, #24]
 80064f0:	3301      	adds	r3, #1
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	e7b9      	b.n	800646a <_printf_float+0x2da>
 80064f6:	9b05      	ldr	r3, [sp, #20]
 80064f8:	465a      	mov	r2, fp
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	d1bf      	bne.n	8006484 <_printf_float+0x2f4>
 8006504:	e690      	b.n	8006228 <_printf_float+0x98>
 8006506:	9a06      	ldr	r2, [sp, #24]
 8006508:	464b      	mov	r3, r9
 800650a:	4442      	add	r2, r8
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	d1c2      	bne.n	800649c <_printf_float+0x30c>
 8006516:	e687      	b.n	8006228 <_printf_float+0x98>
 8006518:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800651c:	f1b9 0f01 	cmp.w	r9, #1
 8006520:	dc01      	bgt.n	8006526 <_printf_float+0x396>
 8006522:	07db      	lsls	r3, r3, #31
 8006524:	d536      	bpl.n	8006594 <_printf_float+0x404>
 8006526:	2301      	movs	r3, #1
 8006528:	4642      	mov	r2, r8
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f ae79 	beq.w	8006228 <_printf_float+0x98>
 8006536:	9b05      	ldr	r3, [sp, #20]
 8006538:	465a      	mov	r2, fp
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae71 	beq.w	8006228 <_printf_float+0x98>
 8006546:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800654a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	f109 39ff 	add.w	r9, r9, #4294967295
 8006556:	d018      	beq.n	800658a <_printf_float+0x3fa>
 8006558:	464b      	mov	r3, r9
 800655a:	f108 0201 	add.w	r2, r8, #1
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	d10c      	bne.n	8006582 <_printf_float+0x3f2>
 8006568:	e65e      	b.n	8006228 <_printf_float+0x98>
 800656a:	2301      	movs	r3, #1
 800656c:	465a      	mov	r2, fp
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f ae57 	beq.w	8006228 <_printf_float+0x98>
 800657a:	f108 0801 	add.w	r8, r8, #1
 800657e:	45c8      	cmp	r8, r9
 8006580:	dbf3      	blt.n	800656a <_printf_float+0x3da>
 8006582:	4653      	mov	r3, sl
 8006584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006588:	e6dc      	b.n	8006344 <_printf_float+0x1b4>
 800658a:	f04f 0800 	mov.w	r8, #0
 800658e:	f104 0b1a 	add.w	fp, r4, #26
 8006592:	e7f4      	b.n	800657e <_printf_float+0x3ee>
 8006594:	2301      	movs	r3, #1
 8006596:	4642      	mov	r2, r8
 8006598:	e7e1      	b.n	800655e <_printf_float+0x3ce>
 800659a:	2301      	movs	r3, #1
 800659c:	464a      	mov	r2, r9
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	f43f ae3f 	beq.w	8006228 <_printf_float+0x98>
 80065aa:	f108 0801 	add.w	r8, r8, #1
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	4543      	cmp	r3, r8
 80065b6:	dcf0      	bgt.n	800659a <_printf_float+0x40a>
 80065b8:	e6f8      	b.n	80063ac <_printf_float+0x21c>
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	f104 0919 	add.w	r9, r4, #25
 80065c2:	e7f4      	b.n	80065ae <_printf_float+0x41e>

080065c4 <_printf_common>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4616      	mov	r6, r2
 80065ca:	4698      	mov	r8, r3
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	690b      	ldr	r3, [r1, #16]
 80065d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	bfb8      	it	lt
 80065d8:	4613      	movlt	r3, r2
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065e0:	4607      	mov	r7, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b10a      	cbz	r2, 80065ea <_printf_common+0x26>
 80065e6:	3301      	adds	r3, #1
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0699      	lsls	r1, r3, #26
 80065ee:	bf42      	ittt	mi
 80065f0:	6833      	ldrmi	r3, [r6, #0]
 80065f2:	3302      	addmi	r3, #2
 80065f4:	6033      	strmi	r3, [r6, #0]
 80065f6:	6825      	ldr	r5, [r4, #0]
 80065f8:	f015 0506 	ands.w	r5, r5, #6
 80065fc:	d106      	bne.n	800660c <_printf_common+0x48>
 80065fe:	f104 0a19 	add.w	sl, r4, #25
 8006602:	68e3      	ldr	r3, [r4, #12]
 8006604:	6832      	ldr	r2, [r6, #0]
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	42ab      	cmp	r3, r5
 800660a:	dc26      	bgt.n	800665a <_printf_common+0x96>
 800660c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	3b00      	subs	r3, #0
 8006614:	bf18      	it	ne
 8006616:	2301      	movne	r3, #1
 8006618:	0692      	lsls	r2, r2, #26
 800661a:	d42b      	bmi.n	8006674 <_printf_common+0xb0>
 800661c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006620:	4641      	mov	r1, r8
 8006622:	4638      	mov	r0, r7
 8006624:	47c8      	blx	r9
 8006626:	3001      	adds	r0, #1
 8006628:	d01e      	beq.n	8006668 <_printf_common+0xa4>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	f003 0306 	and.w	r3, r3, #6
 8006632:	2b04      	cmp	r3, #4
 8006634:	bf02      	ittt	eq
 8006636:	68e5      	ldreq	r5, [r4, #12]
 8006638:	6833      	ldreq	r3, [r6, #0]
 800663a:	1aed      	subeq	r5, r5, r3
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	bf0c      	ite	eq
 8006640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006644:	2500      	movne	r5, #0
 8006646:	4293      	cmp	r3, r2
 8006648:	bfc4      	itt	gt
 800664a:	1a9b      	subgt	r3, r3, r2
 800664c:	18ed      	addgt	r5, r5, r3
 800664e:	2600      	movs	r6, #0
 8006650:	341a      	adds	r4, #26
 8006652:	42b5      	cmp	r5, r6
 8006654:	d11a      	bne.n	800668c <_printf_common+0xc8>
 8006656:	2000      	movs	r0, #0
 8006658:	e008      	b.n	800666c <_printf_common+0xa8>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4641      	mov	r1, r8
 8006660:	4638      	mov	r0, r7
 8006662:	47c8      	blx	r9
 8006664:	3001      	adds	r0, #1
 8006666:	d103      	bne.n	8006670 <_printf_common+0xac>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	3501      	adds	r5, #1
 8006672:	e7c6      	b.n	8006602 <_printf_common+0x3e>
 8006674:	18e1      	adds	r1, r4, r3
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	2030      	movs	r0, #48	@ 0x30
 800667a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800667e:	4422      	add	r2, r4
 8006680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006688:	3302      	adds	r3, #2
 800668a:	e7c7      	b.n	800661c <_printf_common+0x58>
 800668c:	2301      	movs	r3, #1
 800668e:	4622      	mov	r2, r4
 8006690:	4641      	mov	r1, r8
 8006692:	4638      	mov	r0, r7
 8006694:	47c8      	blx	r9
 8006696:	3001      	adds	r0, #1
 8006698:	d0e6      	beq.n	8006668 <_printf_common+0xa4>
 800669a:	3601      	adds	r6, #1
 800669c:	e7d9      	b.n	8006652 <_printf_common+0x8e>
	...

080066a0 <_printf_i>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	7e0f      	ldrb	r7, [r1, #24]
 80066a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066a8:	2f78      	cmp	r7, #120	@ 0x78
 80066aa:	4691      	mov	r9, r2
 80066ac:	4680      	mov	r8, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	469a      	mov	sl, r3
 80066b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066b6:	d807      	bhi.n	80066c8 <_printf_i+0x28>
 80066b8:	2f62      	cmp	r7, #98	@ 0x62
 80066ba:	d80a      	bhi.n	80066d2 <_printf_i+0x32>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	f000 80d2 	beq.w	8006866 <_printf_i+0x1c6>
 80066c2:	2f58      	cmp	r7, #88	@ 0x58
 80066c4:	f000 80b9 	beq.w	800683a <_printf_i+0x19a>
 80066c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066d0:	e03a      	b.n	8006748 <_printf_i+0xa8>
 80066d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066d6:	2b15      	cmp	r3, #21
 80066d8:	d8f6      	bhi.n	80066c8 <_printf_i+0x28>
 80066da:	a101      	add	r1, pc, #4	@ (adr r1, 80066e0 <_printf_i+0x40>)
 80066dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e0:	08006739 	.word	0x08006739
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	080066c9 	.word	0x080066c9
 80066ec:	080066c9 	.word	0x080066c9
 80066f0:	080066c9 	.word	0x080066c9
 80066f4:	080066c9 	.word	0x080066c9
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	080066c9 	.word	0x080066c9
 8006700:	080066c9 	.word	0x080066c9
 8006704:	080066c9 	.word	0x080066c9
 8006708:	080066c9 	.word	0x080066c9
 800670c:	0800684d 	.word	0x0800684d
 8006710:	08006777 	.word	0x08006777
 8006714:	08006807 	.word	0x08006807
 8006718:	080066c9 	.word	0x080066c9
 800671c:	080066c9 	.word	0x080066c9
 8006720:	0800686f 	.word	0x0800686f
 8006724:	080066c9 	.word	0x080066c9
 8006728:	08006777 	.word	0x08006777
 800672c:	080066c9 	.word	0x080066c9
 8006730:	080066c9 	.word	0x080066c9
 8006734:	0800680f 	.word	0x0800680f
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006748:	2301      	movs	r3, #1
 800674a:	e09d      	b.n	8006888 <_printf_i+0x1e8>
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	1d19      	adds	r1, r3, #4
 8006752:	6031      	str	r1, [r6, #0]
 8006754:	0606      	lsls	r6, r0, #24
 8006756:	d501      	bpl.n	800675c <_printf_i+0xbc>
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	e003      	b.n	8006764 <_printf_i+0xc4>
 800675c:	0645      	lsls	r5, r0, #25
 800675e:	d5fb      	bpl.n	8006758 <_printf_i+0xb8>
 8006760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006764:	2d00      	cmp	r5, #0
 8006766:	da03      	bge.n	8006770 <_printf_i+0xd0>
 8006768:	232d      	movs	r3, #45	@ 0x2d
 800676a:	426d      	negs	r5, r5
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006770:	4859      	ldr	r0, [pc, #356]	@ (80068d8 <_printf_i+0x238>)
 8006772:	230a      	movs	r3, #10
 8006774:	e011      	b.n	800679a <_printf_i+0xfa>
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	0608      	lsls	r0, r1, #24
 800677c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006780:	d402      	bmi.n	8006788 <_printf_i+0xe8>
 8006782:	0649      	lsls	r1, r1, #25
 8006784:	bf48      	it	mi
 8006786:	b2ad      	uxthmi	r5, r5
 8006788:	2f6f      	cmp	r7, #111	@ 0x6f
 800678a:	4853      	ldr	r0, [pc, #332]	@ (80068d8 <_printf_i+0x238>)
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	bf14      	ite	ne
 8006790:	230a      	movne	r3, #10
 8006792:	2308      	moveq	r3, #8
 8006794:	2100      	movs	r1, #0
 8006796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800679a:	6866      	ldr	r6, [r4, #4]
 800679c:	60a6      	str	r6, [r4, #8]
 800679e:	2e00      	cmp	r6, #0
 80067a0:	bfa2      	ittt	ge
 80067a2:	6821      	ldrge	r1, [r4, #0]
 80067a4:	f021 0104 	bicge.w	r1, r1, #4
 80067a8:	6021      	strge	r1, [r4, #0]
 80067aa:	b90d      	cbnz	r5, 80067b0 <_printf_i+0x110>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	d04b      	beq.n	8006848 <_printf_i+0x1a8>
 80067b0:	4616      	mov	r6, r2
 80067b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80067b6:	fb03 5711 	mls	r7, r3, r1, r5
 80067ba:	5dc7      	ldrb	r7, [r0, r7]
 80067bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067c0:	462f      	mov	r7, r5
 80067c2:	42bb      	cmp	r3, r7
 80067c4:	460d      	mov	r5, r1
 80067c6:	d9f4      	bls.n	80067b2 <_printf_i+0x112>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10b      	bne.n	80067e4 <_printf_i+0x144>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07df      	lsls	r7, r3, #31
 80067d0:	d508      	bpl.n	80067e4 <_printf_i+0x144>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	6861      	ldr	r1, [r4, #4]
 80067d6:	4299      	cmp	r1, r3
 80067d8:	bfde      	ittt	le
 80067da:	2330      	movle	r3, #48	@ 0x30
 80067dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067e4:	1b92      	subs	r2, r2, r6
 80067e6:	6122      	str	r2, [r4, #16]
 80067e8:	f8cd a000 	str.w	sl, [sp]
 80067ec:	464b      	mov	r3, r9
 80067ee:	aa03      	add	r2, sp, #12
 80067f0:	4621      	mov	r1, r4
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7ff fee6 	bl	80065c4 <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d14a      	bne.n	8006892 <_printf_i+0x1f2>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	b004      	add	sp, #16
 8006802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	4833      	ldr	r0, [pc, #204]	@ (80068dc <_printf_i+0x23c>)
 8006810:	2778      	movs	r7, #120	@ 0x78
 8006812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	6831      	ldr	r1, [r6, #0]
 800681a:	061f      	lsls	r7, r3, #24
 800681c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006820:	d402      	bmi.n	8006828 <_printf_i+0x188>
 8006822:	065f      	lsls	r7, r3, #25
 8006824:	bf48      	it	mi
 8006826:	b2ad      	uxthmi	r5, r5
 8006828:	6031      	str	r1, [r6, #0]
 800682a:	07d9      	lsls	r1, r3, #31
 800682c:	bf44      	itt	mi
 800682e:	f043 0320 	orrmi.w	r3, r3, #32
 8006832:	6023      	strmi	r3, [r4, #0]
 8006834:	b11d      	cbz	r5, 800683e <_printf_i+0x19e>
 8006836:	2310      	movs	r3, #16
 8006838:	e7ac      	b.n	8006794 <_printf_i+0xf4>
 800683a:	4827      	ldr	r0, [pc, #156]	@ (80068d8 <_printf_i+0x238>)
 800683c:	e7e9      	b.n	8006812 <_printf_i+0x172>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f023 0320 	bic.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	e7f6      	b.n	8006836 <_printf_i+0x196>
 8006848:	4616      	mov	r6, r2
 800684a:	e7bd      	b.n	80067c8 <_printf_i+0x128>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	6961      	ldr	r1, [r4, #20]
 8006852:	1d18      	adds	r0, r3, #4
 8006854:	6030      	str	r0, [r6, #0]
 8006856:	062e      	lsls	r6, r5, #24
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	d501      	bpl.n	8006860 <_printf_i+0x1c0>
 800685c:	6019      	str	r1, [r3, #0]
 800685e:	e002      	b.n	8006866 <_printf_i+0x1c6>
 8006860:	0668      	lsls	r0, r5, #25
 8006862:	d5fb      	bpl.n	800685c <_printf_i+0x1bc>
 8006864:	8019      	strh	r1, [r3, #0]
 8006866:	2300      	movs	r3, #0
 8006868:	6123      	str	r3, [r4, #16]
 800686a:	4616      	mov	r6, r2
 800686c:	e7bc      	b.n	80067e8 <_printf_i+0x148>
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	6032      	str	r2, [r6, #0]
 8006874:	681e      	ldr	r6, [r3, #0]
 8006876:	6862      	ldr	r2, [r4, #4]
 8006878:	2100      	movs	r1, #0
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 fce0 	bl	8000240 <memchr>
 8006880:	b108      	cbz	r0, 8006886 <_printf_i+0x1e6>
 8006882:	1b80      	subs	r0, r0, r6
 8006884:	6060      	str	r0, [r4, #4]
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	2300      	movs	r3, #0
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006890:	e7aa      	b.n	80067e8 <_printf_i+0x148>
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	4632      	mov	r2, r6
 8006896:	4649      	mov	r1, r9
 8006898:	4640      	mov	r0, r8
 800689a:	47d0      	blx	sl
 800689c:	3001      	adds	r0, #1
 800689e:	d0ad      	beq.n	80067fc <_printf_i+0x15c>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	079b      	lsls	r3, r3, #30
 80068a4:	d413      	bmi.n	80068ce <_printf_i+0x22e>
 80068a6:	68e0      	ldr	r0, [r4, #12]
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	4298      	cmp	r0, r3
 80068ac:	bfb8      	it	lt
 80068ae:	4618      	movlt	r0, r3
 80068b0:	e7a6      	b.n	8006800 <_printf_i+0x160>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4632      	mov	r2, r6
 80068b6:	4649      	mov	r1, r9
 80068b8:	4640      	mov	r0, r8
 80068ba:	47d0      	blx	sl
 80068bc:	3001      	adds	r0, #1
 80068be:	d09d      	beq.n	80067fc <_printf_i+0x15c>
 80068c0:	3501      	adds	r5, #1
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	9903      	ldr	r1, [sp, #12]
 80068c6:	1a5b      	subs	r3, r3, r1
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dcf2      	bgt.n	80068b2 <_printf_i+0x212>
 80068cc:	e7eb      	b.n	80068a6 <_printf_i+0x206>
 80068ce:	2500      	movs	r5, #0
 80068d0:	f104 0619 	add.w	r6, r4, #25
 80068d4:	e7f5      	b.n	80068c2 <_printf_i+0x222>
 80068d6:	bf00      	nop
 80068d8:	08008f9e 	.word	0x08008f9e
 80068dc:	08008faf 	.word	0x08008faf

080068e0 <std>:
 80068e0:	2300      	movs	r3, #0
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ee:	6083      	str	r3, [r0, #8]
 80068f0:	8181      	strh	r1, [r0, #12]
 80068f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80068f4:	81c2      	strh	r2, [r0, #14]
 80068f6:	6183      	str	r3, [r0, #24]
 80068f8:	4619      	mov	r1, r3
 80068fa:	2208      	movs	r2, #8
 80068fc:	305c      	adds	r0, #92	@ 0x5c
 80068fe:	f000 fa2d 	bl	8006d5c <memset>
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <std+0x58>)
 8006904:	6263      	str	r3, [r4, #36]	@ 0x24
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <std+0x5c>)
 8006908:	62a3      	str	r3, [r4, #40]	@ 0x28
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <std+0x60>)
 800690c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <std+0x64>)
 8006910:	6323      	str	r3, [r4, #48]	@ 0x30
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <std+0x68>)
 8006914:	6224      	str	r4, [r4, #32]
 8006916:	429c      	cmp	r4, r3
 8006918:	d006      	beq.n	8006928 <std+0x48>
 800691a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800691e:	4294      	cmp	r4, r2
 8006920:	d002      	beq.n	8006928 <std+0x48>
 8006922:	33d0      	adds	r3, #208	@ 0xd0
 8006924:	429c      	cmp	r4, r3
 8006926:	d105      	bne.n	8006934 <std+0x54>
 8006928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006930:	f000 ba90 	b.w	8006e54 <__retarget_lock_init_recursive>
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	08006bad 	.word	0x08006bad
 800693c:	08006bcf 	.word	0x08006bcf
 8006940:	08006c07 	.word	0x08006c07
 8006944:	08006c2b 	.word	0x08006c2b
 8006948:	20000b64 	.word	0x20000b64

0800694c <stdio_exit_handler>:
 800694c:	4a02      	ldr	r2, [pc, #8]	@ (8006958 <stdio_exit_handler+0xc>)
 800694e:	4903      	ldr	r1, [pc, #12]	@ (800695c <stdio_exit_handler+0x10>)
 8006950:	4803      	ldr	r0, [pc, #12]	@ (8006960 <stdio_exit_handler+0x14>)
 8006952:	f000 b869 	b.w	8006a28 <_fwalk_sglue>
 8006956:	bf00      	nop
 8006958:	20000018 	.word	0x20000018
 800695c:	08008975 	.word	0x08008975
 8006960:	20000028 	.word	0x20000028

08006964 <cleanup_stdio>:
 8006964:	6841      	ldr	r1, [r0, #4]
 8006966:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <cleanup_stdio+0x34>)
 8006968:	4299      	cmp	r1, r3
 800696a:	b510      	push	{r4, lr}
 800696c:	4604      	mov	r4, r0
 800696e:	d001      	beq.n	8006974 <cleanup_stdio+0x10>
 8006970:	f002 f800 	bl	8008974 <_fflush_r>
 8006974:	68a1      	ldr	r1, [r4, #8]
 8006976:	4b09      	ldr	r3, [pc, #36]	@ (800699c <cleanup_stdio+0x38>)
 8006978:	4299      	cmp	r1, r3
 800697a:	d002      	beq.n	8006982 <cleanup_stdio+0x1e>
 800697c:	4620      	mov	r0, r4
 800697e:	f001 fff9 	bl	8008974 <_fflush_r>
 8006982:	68e1      	ldr	r1, [r4, #12]
 8006984:	4b06      	ldr	r3, [pc, #24]	@ (80069a0 <cleanup_stdio+0x3c>)
 8006986:	4299      	cmp	r1, r3
 8006988:	d004      	beq.n	8006994 <cleanup_stdio+0x30>
 800698a:	4620      	mov	r0, r4
 800698c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006990:	f001 bff0 	b.w	8008974 <_fflush_r>
 8006994:	bd10      	pop	{r4, pc}
 8006996:	bf00      	nop
 8006998:	20000b64 	.word	0x20000b64
 800699c:	20000bcc 	.word	0x20000bcc
 80069a0:	20000c34 	.word	0x20000c34

080069a4 <global_stdio_init.part.0>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <global_stdio_init.part.0+0x30>)
 80069a8:	4c0b      	ldr	r4, [pc, #44]	@ (80069d8 <global_stdio_init.part.0+0x34>)
 80069aa:	4a0c      	ldr	r2, [pc, #48]	@ (80069dc <global_stdio_init.part.0+0x38>)
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	4620      	mov	r0, r4
 80069b0:	2200      	movs	r2, #0
 80069b2:	2104      	movs	r1, #4
 80069b4:	f7ff ff94 	bl	80068e0 <std>
 80069b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069bc:	2201      	movs	r2, #1
 80069be:	2109      	movs	r1, #9
 80069c0:	f7ff ff8e 	bl	80068e0 <std>
 80069c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069c8:	2202      	movs	r2, #2
 80069ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ce:	2112      	movs	r1, #18
 80069d0:	f7ff bf86 	b.w	80068e0 <std>
 80069d4:	20000c9c 	.word	0x20000c9c
 80069d8:	20000b64 	.word	0x20000b64
 80069dc:	0800694d 	.word	0x0800694d

080069e0 <__sfp_lock_acquire>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__sfp_lock_acquire+0x8>)
 80069e2:	f000 ba38 	b.w	8006e56 <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000ca5 	.word	0x20000ca5

080069ec <__sfp_lock_release>:
 80069ec:	4801      	ldr	r0, [pc, #4]	@ (80069f4 <__sfp_lock_release+0x8>)
 80069ee:	f000 ba33 	b.w	8006e58 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20000ca5 	.word	0x20000ca5

080069f8 <__sinit>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4604      	mov	r4, r0
 80069fc:	f7ff fff0 	bl	80069e0 <__sfp_lock_acquire>
 8006a00:	6a23      	ldr	r3, [r4, #32]
 8006a02:	b11b      	cbz	r3, 8006a0c <__sinit+0x14>
 8006a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a08:	f7ff bff0 	b.w	80069ec <__sfp_lock_release>
 8006a0c:	4b04      	ldr	r3, [pc, #16]	@ (8006a20 <__sinit+0x28>)
 8006a0e:	6223      	str	r3, [r4, #32]
 8006a10:	4b04      	ldr	r3, [pc, #16]	@ (8006a24 <__sinit+0x2c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f5      	bne.n	8006a04 <__sinit+0xc>
 8006a18:	f7ff ffc4 	bl	80069a4 <global_stdio_init.part.0>
 8006a1c:	e7f2      	b.n	8006a04 <__sinit+0xc>
 8006a1e:	bf00      	nop
 8006a20:	08006965 	.word	0x08006965
 8006a24:	20000c9c 	.word	0x20000c9c

08006a28 <_fwalk_sglue>:
 8006a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	4688      	mov	r8, r1
 8006a30:	4614      	mov	r4, r2
 8006a32:	2600      	movs	r6, #0
 8006a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a38:	f1b9 0901 	subs.w	r9, r9, #1
 8006a3c:	d505      	bpl.n	8006a4a <_fwalk_sglue+0x22>
 8006a3e:	6824      	ldr	r4, [r4, #0]
 8006a40:	2c00      	cmp	r4, #0
 8006a42:	d1f7      	bne.n	8006a34 <_fwalk_sglue+0xc>
 8006a44:	4630      	mov	r0, r6
 8006a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d907      	bls.n	8006a60 <_fwalk_sglue+0x38>
 8006a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a54:	3301      	adds	r3, #1
 8006a56:	d003      	beq.n	8006a60 <_fwalk_sglue+0x38>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	4306      	orrs	r6, r0
 8006a60:	3568      	adds	r5, #104	@ 0x68
 8006a62:	e7e9      	b.n	8006a38 <_fwalk_sglue+0x10>

08006a64 <iprintf>:
 8006a64:	b40f      	push	{r0, r1, r2, r3}
 8006a66:	b507      	push	{r0, r1, r2, lr}
 8006a68:	4906      	ldr	r1, [pc, #24]	@ (8006a84 <iprintf+0x20>)
 8006a6a:	ab04      	add	r3, sp, #16
 8006a6c:	6808      	ldr	r0, [r1, #0]
 8006a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a72:	6881      	ldr	r1, [r0, #8]
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	f001 fde1 	bl	800863c <_vfiprintf_r>
 8006a7a:	b003      	add	sp, #12
 8006a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a80:	b004      	add	sp, #16
 8006a82:	4770      	bx	lr
 8006a84:	20000024 	.word	0x20000024

08006a88 <_puts_r>:
 8006a88:	6a03      	ldr	r3, [r0, #32]
 8006a8a:	b570      	push	{r4, r5, r6, lr}
 8006a8c:	6884      	ldr	r4, [r0, #8]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	460e      	mov	r6, r1
 8006a92:	b90b      	cbnz	r3, 8006a98 <_puts_r+0x10>
 8006a94:	f7ff ffb0 	bl	80069f8 <__sinit>
 8006a98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a9a:	07db      	lsls	r3, r3, #31
 8006a9c:	d405      	bmi.n	8006aaa <_puts_r+0x22>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	0598      	lsls	r0, r3, #22
 8006aa2:	d402      	bmi.n	8006aaa <_puts_r+0x22>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aa6:	f000 f9d6 	bl	8006e56 <__retarget_lock_acquire_recursive>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	0719      	lsls	r1, r3, #28
 8006aae:	d502      	bpl.n	8006ab6 <_puts_r+0x2e>
 8006ab0:	6923      	ldr	r3, [r4, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d135      	bne.n	8006b22 <_puts_r+0x9a>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 f8f9 	bl	8006cb0 <__swsetup_r>
 8006abe:	b380      	cbz	r0, 8006b22 <_puts_r+0x9a>
 8006ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ac6:	07da      	lsls	r2, r3, #31
 8006ac8:	d405      	bmi.n	8006ad6 <_puts_r+0x4e>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	059b      	lsls	r3, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_puts_r+0x4e>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ad2:	f000 f9c1 	bl	8006e58 <__retarget_lock_release_recursive>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da04      	bge.n	8006ae8 <_puts_r+0x60>
 8006ade:	69a2      	ldr	r2, [r4, #24]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	dc17      	bgt.n	8006b14 <_puts_r+0x8c>
 8006ae4:	290a      	cmp	r1, #10
 8006ae6:	d015      	beq.n	8006b14 <_puts_r+0x8c>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	6022      	str	r2, [r4, #0]
 8006aee:	7019      	strb	r1, [r3, #0]
 8006af0:	68a3      	ldr	r3, [r4, #8]
 8006af2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006af6:	3b01      	subs	r3, #1
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	2900      	cmp	r1, #0
 8006afc:	d1ed      	bne.n	8006ada <_puts_r+0x52>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da11      	bge.n	8006b26 <_puts_r+0x9e>
 8006b02:	4622      	mov	r2, r4
 8006b04:	210a      	movs	r1, #10
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 f893 	bl	8006c32 <__swbuf_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0d7      	beq.n	8006ac0 <_puts_r+0x38>
 8006b10:	250a      	movs	r5, #10
 8006b12:	e7d7      	b.n	8006ac4 <_puts_r+0x3c>
 8006b14:	4622      	mov	r2, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f88b 	bl	8006c32 <__swbuf_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1e7      	bne.n	8006af0 <_puts_r+0x68>
 8006b20:	e7ce      	b.n	8006ac0 <_puts_r+0x38>
 8006b22:	3e01      	subs	r6, #1
 8006b24:	e7e4      	b.n	8006af0 <_puts_r+0x68>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e7ee      	b.n	8006b10 <_puts_r+0x88>
	...

08006b34 <puts>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	@ (8006b40 <puts+0xc>)
 8006b36:	4601      	mov	r1, r0
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f7ff bfa5 	b.w	8006a88 <_puts_r>
 8006b3e:	bf00      	nop
 8006b40:	20000024 	.word	0x20000024

08006b44 <sniprintf>:
 8006b44:	b40c      	push	{r2, r3}
 8006b46:	b530      	push	{r4, r5, lr}
 8006b48:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <sniprintf+0x64>)
 8006b4a:	1e0c      	subs	r4, r1, #0
 8006b4c:	681d      	ldr	r5, [r3, #0]
 8006b4e:	b09d      	sub	sp, #116	@ 0x74
 8006b50:	da08      	bge.n	8006b64 <sniprintf+0x20>
 8006b52:	238b      	movs	r3, #139	@ 0x8b
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	b01d      	add	sp, #116	@ 0x74
 8006b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b60:	b002      	add	sp, #8
 8006b62:	4770      	bx	lr
 8006b64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b6c:	bf14      	ite	ne
 8006b6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b72:	4623      	moveq	r3, r4
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	9307      	str	r3, [sp, #28]
 8006b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	9006      	str	r0, [sp, #24]
 8006b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b86:	ab21      	add	r3, sp, #132	@ 0x84
 8006b88:	a902      	add	r1, sp, #8
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f001 fc2f 	bl	80083f0 <_svfiprintf_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	bfbc      	itt	lt
 8006b96:	238b      	movlt	r3, #139	@ 0x8b
 8006b98:	602b      	strlt	r3, [r5, #0]
 8006b9a:	2c00      	cmp	r4, #0
 8006b9c:	d0dd      	beq.n	8006b5a <sniprintf+0x16>
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e7d9      	b.n	8006b5a <sniprintf+0x16>
 8006ba6:	bf00      	nop
 8006ba8:	20000024 	.word	0x20000024

08006bac <__sread>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	460c      	mov	r4, r1
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	f000 f900 	bl	8006db8 <_read_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	bfab      	itete	ge
 8006bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc0:	181b      	addge	r3, r3, r0
 8006bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bc6:	bfac      	ite	ge
 8006bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bca:	81a3      	strhlt	r3, [r4, #12]
 8006bcc:	bd10      	pop	{r4, pc}

08006bce <__swrite>:
 8006bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	461f      	mov	r7, r3
 8006bd4:	898b      	ldrh	r3, [r1, #12]
 8006bd6:	05db      	lsls	r3, r3, #23
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	4616      	mov	r6, r2
 8006bde:	d505      	bpl.n	8006bec <__swrite+0x1e>
 8006be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be4:	2302      	movs	r3, #2
 8006be6:	2200      	movs	r2, #0
 8006be8:	f000 f8d4 	bl	8006d94 <_lseek_r>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c02:	f000 b8eb 	b.w	8006ddc <_write_r>

08006c06 <__sseek>:
 8006c06:	b510      	push	{r4, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0e:	f000 f8c1 	bl	8006d94 <_lseek_r>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	bf15      	itete	ne
 8006c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c22:	81a3      	strheq	r3, [r4, #12]
 8006c24:	bf18      	it	ne
 8006c26:	81a3      	strhne	r3, [r4, #12]
 8006c28:	bd10      	pop	{r4, pc}

08006c2a <__sclose>:
 8006c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2e:	f000 b8a1 	b.w	8006d74 <_close_r>

08006c32 <__swbuf_r>:
 8006c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c34:	460e      	mov	r6, r1
 8006c36:	4614      	mov	r4, r2
 8006c38:	4605      	mov	r5, r0
 8006c3a:	b118      	cbz	r0, 8006c44 <__swbuf_r+0x12>
 8006c3c:	6a03      	ldr	r3, [r0, #32]
 8006c3e:	b90b      	cbnz	r3, 8006c44 <__swbuf_r+0x12>
 8006c40:	f7ff feda 	bl	80069f8 <__sinit>
 8006c44:	69a3      	ldr	r3, [r4, #24]
 8006c46:	60a3      	str	r3, [r4, #8]
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	071a      	lsls	r2, r3, #28
 8006c4c:	d501      	bpl.n	8006c52 <__swbuf_r+0x20>
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	b943      	cbnz	r3, 8006c64 <__swbuf_r+0x32>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f82b 	bl	8006cb0 <__swsetup_r>
 8006c5a:	b118      	cbz	r0, 8006c64 <__swbuf_r+0x32>
 8006c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c60:	4638      	mov	r0, r7
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	6922      	ldr	r2, [r4, #16]
 8006c68:	1a98      	subs	r0, r3, r2
 8006c6a:	6963      	ldr	r3, [r4, #20]
 8006c6c:	b2f6      	uxtb	r6, r6
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	4637      	mov	r7, r6
 8006c72:	dc05      	bgt.n	8006c80 <__swbuf_r+0x4e>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f001 fe7c 	bl	8008974 <_fflush_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d1ed      	bne.n	8006c5c <__swbuf_r+0x2a>
 8006c80:	68a3      	ldr	r3, [r4, #8]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	701e      	strb	r6, [r3, #0]
 8006c8e:	6962      	ldr	r2, [r4, #20]
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d004      	beq.n	8006ca0 <__swbuf_r+0x6e>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	07db      	lsls	r3, r3, #31
 8006c9a:	d5e1      	bpl.n	8006c60 <__swbuf_r+0x2e>
 8006c9c:	2e0a      	cmp	r6, #10
 8006c9e:	d1df      	bne.n	8006c60 <__swbuf_r+0x2e>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f001 fe66 	bl	8008974 <_fflush_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d0d9      	beq.n	8006c60 <__swbuf_r+0x2e>
 8006cac:	e7d6      	b.n	8006c5c <__swbuf_r+0x2a>
	...

08006cb0 <__swsetup_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <__swsetup_r+0xa8>)
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	460c      	mov	r4, r1
 8006cba:	b118      	cbz	r0, 8006cc4 <__swsetup_r+0x14>
 8006cbc:	6a03      	ldr	r3, [r0, #32]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <__swsetup_r+0x14>
 8006cc0:	f7ff fe9a 	bl	80069f8 <__sinit>
 8006cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc8:	0719      	lsls	r1, r3, #28
 8006cca:	d422      	bmi.n	8006d12 <__swsetup_r+0x62>
 8006ccc:	06da      	lsls	r2, r3, #27
 8006cce:	d407      	bmi.n	8006ce0 <__swsetup_r+0x30>
 8006cd0:	2209      	movs	r2, #9
 8006cd2:	602a      	str	r2, [r5, #0]
 8006cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	e033      	b.n	8006d48 <__swsetup_r+0x98>
 8006ce0:	0758      	lsls	r0, r3, #29
 8006ce2:	d512      	bpl.n	8006d0a <__swsetup_r+0x5a>
 8006ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ce6:	b141      	cbz	r1, 8006cfa <__swsetup_r+0x4a>
 8006ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d002      	beq.n	8006cf6 <__swsetup_r+0x46>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f000 fe9f 	bl	8007a34 <_free_r>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	b94b      	cbnz	r3, 8006d2a <__swsetup_r+0x7a>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d003      	beq.n	8006d2a <__swsetup_r+0x7a>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f001 fe73 	bl	8008a10 <__smakebuf_r>
 8006d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2e:	f013 0201 	ands.w	r2, r3, #1
 8006d32:	d00a      	beq.n	8006d4a <__swsetup_r+0x9a>
 8006d34:	2200      	movs	r2, #0
 8006d36:	60a2      	str	r2, [r4, #8]
 8006d38:	6962      	ldr	r2, [r4, #20]
 8006d3a:	4252      	negs	r2, r2
 8006d3c:	61a2      	str	r2, [r4, #24]
 8006d3e:	6922      	ldr	r2, [r4, #16]
 8006d40:	b942      	cbnz	r2, 8006d54 <__swsetup_r+0xa4>
 8006d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d46:	d1c5      	bne.n	8006cd4 <__swsetup_r+0x24>
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	0799      	lsls	r1, r3, #30
 8006d4c:	bf58      	it	pl
 8006d4e:	6962      	ldrpl	r2, [r4, #20]
 8006d50:	60a2      	str	r2, [r4, #8]
 8006d52:	e7f4      	b.n	8006d3e <__swsetup_r+0x8e>
 8006d54:	2000      	movs	r0, #0
 8006d56:	e7f7      	b.n	8006d48 <__swsetup_r+0x98>
 8006d58:	20000024 	.word	0x20000024

08006d5c <memset>:
 8006d5c:	4402      	add	r2, r0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d100      	bne.n	8006d66 <memset+0xa>
 8006d64:	4770      	bx	lr
 8006d66:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6a:	e7f9      	b.n	8006d60 <memset+0x4>

08006d6c <_localeconv_r>:
 8006d6c:	4800      	ldr	r0, [pc, #0]	@ (8006d70 <_localeconv_r+0x4>)
 8006d6e:	4770      	bx	lr
 8006d70:	20000164 	.word	0x20000164

08006d74 <_close_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	@ (8006d90 <_close_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fa fe64 	bl	8001a4c <_close>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_close_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_close_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20000ca0 	.word	0x20000ca0

08006d94 <_lseek_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	@ (8006db4 <_lseek_r+0x20>)
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7fa fe79 	bl	8001a9a <_lseek>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_lseek_r+0x1e>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_lseek_r+0x1e>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000ca0 	.word	0x20000ca0

08006db8 <_read_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	@ (8006dd8 <_read_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fa fe23 	bl	8001a12 <_read>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_read_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_read_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000ca0 	.word	0x20000ca0

08006ddc <_write_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	@ (8006dfc <_write_r+0x20>)
 8006de0:	4604      	mov	r4, r0
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	602a      	str	r2, [r5, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f7fa fb6e 	bl	80014cc <_write>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_write_r+0x1e>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_write_r+0x1e>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000ca0 	.word	0x20000ca0

08006e00 <__errno>:
 8006e00:	4b01      	ldr	r3, [pc, #4]	@ (8006e08 <__errno+0x8>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000024 	.word	0x20000024

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	@ (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2600      	movs	r6, #0
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e50 <__libc_init_array+0x44>)
 8006e20:	f001 ff64 	bl	8008cec <_init>
 8006e24:	1b64      	subs	r4, r4, r5
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2600      	movs	r6, #0
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	4798      	blx	r3
 8006e36:	3601      	adds	r6, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	4798      	blx	r3
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08009308 	.word	0x08009308
 8006e48:	08009308 	.word	0x08009308
 8006e4c:	08009308 	.word	0x08009308
 8006e50:	0800930c 	.word	0x0800930c

08006e54 <__retarget_lock_init_recursive>:
 8006e54:	4770      	bx	lr

08006e56 <__retarget_lock_acquire_recursive>:
 8006e56:	4770      	bx	lr

08006e58 <__retarget_lock_release_recursive>:
 8006e58:	4770      	bx	lr

08006e5a <memcpy>:
 8006e5a:	440a      	add	r2, r1
 8006e5c:	4291      	cmp	r1, r2
 8006e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e62:	d100      	bne.n	8006e66 <memcpy+0xc>
 8006e64:	4770      	bx	lr
 8006e66:	b510      	push	{r4, lr}
 8006e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e70:	4291      	cmp	r1, r2
 8006e72:	d1f9      	bne.n	8006e68 <memcpy+0xe>
 8006e74:	bd10      	pop	{r4, pc}

08006e76 <quorem>:
 8006e76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	6903      	ldr	r3, [r0, #16]
 8006e7c:	690c      	ldr	r4, [r1, #16]
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	4607      	mov	r7, r0
 8006e82:	db7e      	blt.n	8006f82 <quorem+0x10c>
 8006e84:	3c01      	subs	r4, #1
 8006e86:	f101 0814 	add.w	r8, r1, #20
 8006e8a:	00a3      	lsls	r3, r4, #2
 8006e8c:	f100 0514 	add.w	r5, r0, #20
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ea8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eac:	d32e      	bcc.n	8006f0c <quorem+0x96>
 8006eae:	f04f 0a00 	mov.w	sl, #0
 8006eb2:	46c4      	mov	ip, r8
 8006eb4:	46ae      	mov	lr, r5
 8006eb6:	46d3      	mov	fp, sl
 8006eb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ebc:	b298      	uxth	r0, r3
 8006ebe:	fb06 a000 	mla	r0, r6, r0, sl
 8006ec2:	0c02      	lsrs	r2, r0, #16
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	fb06 2303 	mla	r3, r6, r3, r2
 8006eca:	f8de 2000 	ldr.w	r2, [lr]
 8006ece:	b280      	uxth	r0, r0
 8006ed0:	b292      	uxth	r2, r2
 8006ed2:	1a12      	subs	r2, r2, r0
 8006ed4:	445a      	add	r2, fp
 8006ed6:	f8de 0000 	ldr.w	r0, [lr]
 8006eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ee4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ee8:	b292      	uxth	r2, r2
 8006eea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006eee:	45e1      	cmp	r9, ip
 8006ef0:	f84e 2b04 	str.w	r2, [lr], #4
 8006ef4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ef8:	d2de      	bcs.n	8006eb8 <quorem+0x42>
 8006efa:	9b00      	ldr	r3, [sp, #0]
 8006efc:	58eb      	ldr	r3, [r5, r3]
 8006efe:	b92b      	cbnz	r3, 8006f0c <quorem+0x96>
 8006f00:	9b01      	ldr	r3, [sp, #4]
 8006f02:	3b04      	subs	r3, #4
 8006f04:	429d      	cmp	r5, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	d32f      	bcc.n	8006f6a <quorem+0xf4>
 8006f0a:	613c      	str	r4, [r7, #16]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f001 f90b 	bl	8008128 <__mcmp>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	db25      	blt.n	8006f62 <quorem+0xec>
 8006f16:	4629      	mov	r1, r5
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f1e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f22:	fa1f fe82 	uxth.w	lr, r2
 8006f26:	fa1f f38c 	uxth.w	r3, ip
 8006f2a:	eba3 030e 	sub.w	r3, r3, lr
 8006f2e:	4403      	add	r3, r0
 8006f30:	0c12      	lsrs	r2, r2, #16
 8006f32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f40:	45c1      	cmp	r9, r8
 8006f42:	f841 3b04 	str.w	r3, [r1], #4
 8006f46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f4a:	d2e6      	bcs.n	8006f1a <quorem+0xa4>
 8006f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f54:	b922      	cbnz	r2, 8006f60 <quorem+0xea>
 8006f56:	3b04      	subs	r3, #4
 8006f58:	429d      	cmp	r5, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	d30b      	bcc.n	8006f76 <quorem+0x100>
 8006f5e:	613c      	str	r4, [r7, #16]
 8006f60:	3601      	adds	r6, #1
 8006f62:	4630      	mov	r0, r6
 8006f64:	b003      	add	sp, #12
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d1cb      	bne.n	8006f0a <quorem+0x94>
 8006f72:	3c01      	subs	r4, #1
 8006f74:	e7c6      	b.n	8006f04 <quorem+0x8e>
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	3b04      	subs	r3, #4
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d1ef      	bne.n	8006f5e <quorem+0xe8>
 8006f7e:	3c01      	subs	r4, #1
 8006f80:	e7ea      	b.n	8006f58 <quorem+0xe2>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e7ee      	b.n	8006f64 <quorem+0xee>
	...

08006f88 <_dtoa_r>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	ed2d 8b02 	vpush	{d8}
 8006f90:	69c7      	ldr	r7, [r0, #28]
 8006f92:	b091      	sub	sp, #68	@ 0x44
 8006f94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f98:	ec55 4b10 	vmov	r4, r5, d0
 8006f9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006f9e:	9107      	str	r1, [sp, #28]
 8006fa0:	4681      	mov	r9, r0
 8006fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fa4:	930d      	str	r3, [sp, #52]	@ 0x34
 8006fa6:	b97f      	cbnz	r7, 8006fc8 <_dtoa_r+0x40>
 8006fa8:	2010      	movs	r0, #16
 8006faa:	f000 fd8d 	bl	8007ac8 <malloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f8c9 001c 	str.w	r0, [r9, #28]
 8006fb4:	b920      	cbnz	r0, 8006fc0 <_dtoa_r+0x38>
 8006fb6:	4ba0      	ldr	r3, [pc, #640]	@ (8007238 <_dtoa_r+0x2b0>)
 8006fb8:	21ef      	movs	r1, #239	@ 0xef
 8006fba:	48a0      	ldr	r0, [pc, #640]	@ (800723c <_dtoa_r+0x2b4>)
 8006fbc:	f001 fdb0 	bl	8008b20 <__assert_func>
 8006fc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fc4:	6007      	str	r7, [r0, #0]
 8006fc6:	60c7      	str	r7, [r0, #12]
 8006fc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006fcc:	6819      	ldr	r1, [r3, #0]
 8006fce:	b159      	cbz	r1, 8006fe8 <_dtoa_r+0x60>
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	604a      	str	r2, [r1, #4]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4093      	lsls	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
 8006fda:	4648      	mov	r0, r9
 8006fdc:	f000 fe6a 	bl	8007cb4 <_Bfree>
 8006fe0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	1e2b      	subs	r3, r5, #0
 8006fea:	bfbb      	ittet	lt
 8006fec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ff0:	9303      	strlt	r3, [sp, #12]
 8006ff2:	2300      	movge	r3, #0
 8006ff4:	2201      	movlt	r2, #1
 8006ff6:	bfac      	ite	ge
 8006ff8:	6033      	strge	r3, [r6, #0]
 8006ffa:	6032      	strlt	r2, [r6, #0]
 8006ffc:	4b90      	ldr	r3, [pc, #576]	@ (8007240 <_dtoa_r+0x2b8>)
 8006ffe:	9e03      	ldr	r6, [sp, #12]
 8007000:	43b3      	bics	r3, r6
 8007002:	d110      	bne.n	8007026 <_dtoa_r+0x9e>
 8007004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007006:	f242 730f 	movw	r3, #9999	@ 0x270f
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007010:	4323      	orrs	r3, r4
 8007012:	f000 84de 	beq.w	80079d2 <_dtoa_r+0xa4a>
 8007016:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007018:	4f8a      	ldr	r7, [pc, #552]	@ (8007244 <_dtoa_r+0x2bc>)
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 84e0 	beq.w	80079e0 <_dtoa_r+0xa58>
 8007020:	1cfb      	adds	r3, r7, #3
 8007022:	f000 bcdb 	b.w	80079dc <_dtoa_r+0xa54>
 8007026:	ed9d 8b02 	vldr	d8, [sp, #8]
 800702a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007032:	d10a      	bne.n	800704a <_dtoa_r+0xc2>
 8007034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007036:	2301      	movs	r3, #1
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800703c:	b113      	cbz	r3, 8007044 <_dtoa_r+0xbc>
 800703e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007040:	4b81      	ldr	r3, [pc, #516]	@ (8007248 <_dtoa_r+0x2c0>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4f81      	ldr	r7, [pc, #516]	@ (800724c <_dtoa_r+0x2c4>)
 8007046:	f000 bccb 	b.w	80079e0 <_dtoa_r+0xa58>
 800704a:	aa0e      	add	r2, sp, #56	@ 0x38
 800704c:	a90f      	add	r1, sp, #60	@ 0x3c
 800704e:	4648      	mov	r0, r9
 8007050:	eeb0 0b48 	vmov.f64	d0, d8
 8007054:	f001 f918 	bl	8008288 <__d2b>
 8007058:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800705c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800705e:	9001      	str	r0, [sp, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d045      	beq.n	80070f0 <_dtoa_r+0x168>
 8007064:	eeb0 7b48 	vmov.f64	d7, d8
 8007068:	ee18 1a90 	vmov	r1, s17
 800706c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007070:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007074:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007078:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800707c:	2500      	movs	r5, #0
 800707e:	ee07 1a90 	vmov	s15, r1
 8007082:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007086:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007220 <_dtoa_r+0x298>
 800708a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800708e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007228 <_dtoa_r+0x2a0>
 8007092:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007096:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007230 <_dtoa_r+0x2a8>
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80070a2:	eeb0 7b46 	vmov.f64	d7, d6
 80070a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80070aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80070ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	ee16 8a90 	vmov	r8, s13
 80070ba:	d508      	bpl.n	80070ce <_dtoa_r+0x146>
 80070bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80070c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	bf18      	it	ne
 80070ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80070ce:	f1b8 0f16 	cmp.w	r8, #22
 80070d2:	d82b      	bhi.n	800712c <_dtoa_r+0x1a4>
 80070d4:	495e      	ldr	r1, [pc, #376]	@ (8007250 <_dtoa_r+0x2c8>)
 80070d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80070da:	ed91 7b00 	vldr	d7, [r1]
 80070de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80070e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e6:	d501      	bpl.n	80070ec <_dtoa_r+0x164>
 80070e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070ec:	2100      	movs	r1, #0
 80070ee:	e01e      	b.n	800712e <_dtoa_r+0x1a6>
 80070f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f2:	4413      	add	r3, r2
 80070f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80070f8:	2920      	cmp	r1, #32
 80070fa:	bfc1      	itttt	gt
 80070fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007100:	408e      	lslgt	r6, r1
 8007102:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007106:	fa24 f101 	lsrgt.w	r1, r4, r1
 800710a:	bfd6      	itet	le
 800710c:	f1c1 0120 	rsble	r1, r1, #32
 8007110:	4331      	orrgt	r1, r6
 8007112:	fa04 f101 	lslle.w	r1, r4, r1
 8007116:	ee07 1a90 	vmov	s15, r1
 800711a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800711e:	3b01      	subs	r3, #1
 8007120:	ee17 1a90 	vmov	r1, s15
 8007124:	2501      	movs	r5, #1
 8007126:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800712a:	e7a8      	b.n	800707e <_dtoa_r+0xf6>
 800712c:	2101      	movs	r1, #1
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	1e53      	subs	r3, r2, #1
 8007132:	9306      	str	r3, [sp, #24]
 8007134:	bf45      	ittet	mi
 8007136:	f1c2 0301 	rsbmi	r3, r2, #1
 800713a:	9305      	strmi	r3, [sp, #20]
 800713c:	2300      	movpl	r3, #0
 800713e:	2300      	movmi	r3, #0
 8007140:	bf4c      	ite	mi
 8007142:	9306      	strmi	r3, [sp, #24]
 8007144:	9305      	strpl	r3, [sp, #20]
 8007146:	f1b8 0f00 	cmp.w	r8, #0
 800714a:	910c      	str	r1, [sp, #48]	@ 0x30
 800714c:	db18      	blt.n	8007180 <_dtoa_r+0x1f8>
 800714e:	9b06      	ldr	r3, [sp, #24]
 8007150:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007154:	4443      	add	r3, r8
 8007156:	9306      	str	r3, [sp, #24]
 8007158:	2300      	movs	r3, #0
 800715a:	9a07      	ldr	r2, [sp, #28]
 800715c:	2a09      	cmp	r2, #9
 800715e:	d849      	bhi.n	80071f4 <_dtoa_r+0x26c>
 8007160:	2a05      	cmp	r2, #5
 8007162:	bfc4      	itt	gt
 8007164:	3a04      	subgt	r2, #4
 8007166:	9207      	strgt	r2, [sp, #28]
 8007168:	9a07      	ldr	r2, [sp, #28]
 800716a:	f1a2 0202 	sub.w	r2, r2, #2
 800716e:	bfcc      	ite	gt
 8007170:	2400      	movgt	r4, #0
 8007172:	2401      	movle	r4, #1
 8007174:	2a03      	cmp	r2, #3
 8007176:	d848      	bhi.n	800720a <_dtoa_r+0x282>
 8007178:	e8df f002 	tbb	[pc, r2]
 800717c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	eba3 0308 	sub.w	r3, r3, r8
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	920a      	str	r2, [sp, #40]	@ 0x28
 800718c:	f1c8 0300 	rsb	r3, r8, #0
 8007190:	e7e3      	b.n	800715a <_dtoa_r+0x1d2>
 8007192:	2200      	movs	r2, #0
 8007194:	9208      	str	r2, [sp, #32]
 8007196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007198:	2a00      	cmp	r2, #0
 800719a:	dc39      	bgt.n	8007210 <_dtoa_r+0x288>
 800719c:	f04f 0b01 	mov.w	fp, #1
 80071a0:	46da      	mov	sl, fp
 80071a2:	465a      	mov	r2, fp
 80071a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80071a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80071ac:	2100      	movs	r1, #0
 80071ae:	2004      	movs	r0, #4
 80071b0:	f100 0614 	add.w	r6, r0, #20
 80071b4:	4296      	cmp	r6, r2
 80071b6:	d930      	bls.n	800721a <_dtoa_r+0x292>
 80071b8:	6079      	str	r1, [r7, #4]
 80071ba:	4648      	mov	r0, r9
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	f000 fd39 	bl	8007c34 <_Balloc>
 80071c2:	9b04      	ldr	r3, [sp, #16]
 80071c4:	4607      	mov	r7, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d146      	bne.n	8007258 <_dtoa_r+0x2d0>
 80071ca:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <_dtoa_r+0x2cc>)
 80071cc:	4602      	mov	r2, r0
 80071ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80071d2:	e6f2      	b.n	8006fba <_dtoa_r+0x32>
 80071d4:	2201      	movs	r2, #1
 80071d6:	e7dd      	b.n	8007194 <_dtoa_r+0x20c>
 80071d8:	2200      	movs	r2, #0
 80071da:	9208      	str	r2, [sp, #32]
 80071dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071de:	eb08 0b02 	add.w	fp, r8, r2
 80071e2:	f10b 0a01 	add.w	sl, fp, #1
 80071e6:	4652      	mov	r2, sl
 80071e8:	2a01      	cmp	r2, #1
 80071ea:	bfb8      	it	lt
 80071ec:	2201      	movlt	r2, #1
 80071ee:	e7db      	b.n	80071a8 <_dtoa_r+0x220>
 80071f0:	2201      	movs	r2, #1
 80071f2:	e7f2      	b.n	80071da <_dtoa_r+0x252>
 80071f4:	2401      	movs	r4, #1
 80071f6:	2200      	movs	r2, #0
 80071f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80071fc:	f04f 3bff 	mov.w	fp, #4294967295
 8007200:	2100      	movs	r1, #0
 8007202:	46da      	mov	sl, fp
 8007204:	2212      	movs	r2, #18
 8007206:	9109      	str	r1, [sp, #36]	@ 0x24
 8007208:	e7ce      	b.n	80071a8 <_dtoa_r+0x220>
 800720a:	2201      	movs	r2, #1
 800720c:	9208      	str	r2, [sp, #32]
 800720e:	e7f5      	b.n	80071fc <_dtoa_r+0x274>
 8007210:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007214:	46da      	mov	sl, fp
 8007216:	465a      	mov	r2, fp
 8007218:	e7c6      	b.n	80071a8 <_dtoa_r+0x220>
 800721a:	3101      	adds	r1, #1
 800721c:	0040      	lsls	r0, r0, #1
 800721e:	e7c7      	b.n	80071b0 <_dtoa_r+0x228>
 8007220:	636f4361 	.word	0x636f4361
 8007224:	3fd287a7 	.word	0x3fd287a7
 8007228:	8b60c8b3 	.word	0x8b60c8b3
 800722c:	3fc68a28 	.word	0x3fc68a28
 8007230:	509f79fb 	.word	0x509f79fb
 8007234:	3fd34413 	.word	0x3fd34413
 8007238:	08008fcd 	.word	0x08008fcd
 800723c:	08008fe4 	.word	0x08008fe4
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	08008fc9 	.word	0x08008fc9
 8007248:	08008f9d 	.word	0x08008f9d
 800724c:	08008f9c 	.word	0x08008f9c
 8007250:	080090e0 	.word	0x080090e0
 8007254:	0800903c 	.word	0x0800903c
 8007258:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800725c:	f1ba 0f0e 	cmp.w	sl, #14
 8007260:	6010      	str	r0, [r2, #0]
 8007262:	d86f      	bhi.n	8007344 <_dtoa_r+0x3bc>
 8007264:	2c00      	cmp	r4, #0
 8007266:	d06d      	beq.n	8007344 <_dtoa_r+0x3bc>
 8007268:	f1b8 0f00 	cmp.w	r8, #0
 800726c:	f340 80c2 	ble.w	80073f4 <_dtoa_r+0x46c>
 8007270:	4aca      	ldr	r2, [pc, #808]	@ (800759c <_dtoa_r+0x614>)
 8007272:	f008 010f 	and.w	r1, r8, #15
 8007276:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800727a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800727e:	ed92 7b00 	vldr	d7, [r2]
 8007282:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007286:	f000 80a9 	beq.w	80073dc <_dtoa_r+0x454>
 800728a:	4ac5      	ldr	r2, [pc, #788]	@ (80075a0 <_dtoa_r+0x618>)
 800728c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007290:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007294:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007298:	f001 010f 	and.w	r1, r1, #15
 800729c:	2203      	movs	r2, #3
 800729e:	48c0      	ldr	r0, [pc, #768]	@ (80075a0 <_dtoa_r+0x618>)
 80072a0:	2900      	cmp	r1, #0
 80072a2:	f040 809d 	bne.w	80073e0 <_dtoa_r+0x458>
 80072a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80072aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80072ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80072b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	f000 80c1 	beq.w	8007440 <_dtoa_r+0x4b8>
 80072be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80072c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	f140 80b9 	bpl.w	8007440 <_dtoa_r+0x4b8>
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	f000 80b5 	beq.w	8007440 <_dtoa_r+0x4b8>
 80072d6:	f1bb 0f00 	cmp.w	fp, #0
 80072da:	dd31      	ble.n	8007340 <_dtoa_r+0x3b8>
 80072dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80072e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80072ec:	9104      	str	r1, [sp, #16]
 80072ee:	3201      	adds	r2, #1
 80072f0:	465c      	mov	r4, fp
 80072f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80072f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80072fa:	ee07 2a90 	vmov	s15, r2
 80072fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007302:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007306:	ee15 2a90 	vmov	r2, s11
 800730a:	ec51 0b15 	vmov	r0, r1, d5
 800730e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007312:	2c00      	cmp	r4, #0
 8007314:	f040 8098 	bne.w	8007448 <_dtoa_r+0x4c0>
 8007318:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800731c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007320:	ec41 0b17 	vmov	d7, r0, r1
 8007324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732c:	f300 8261 	bgt.w	80077f2 <_dtoa_r+0x86a>
 8007330:	eeb1 7b47 	vneg.f64	d7, d7
 8007334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	f100 80f5 	bmi.w	800752a <_dtoa_r+0x5a2>
 8007340:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007344:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007346:	2a00      	cmp	r2, #0
 8007348:	f2c0 812c 	blt.w	80075a4 <_dtoa_r+0x61c>
 800734c:	f1b8 0f0e 	cmp.w	r8, #14
 8007350:	f300 8128 	bgt.w	80075a4 <_dtoa_r+0x61c>
 8007354:	4b91      	ldr	r3, [pc, #580]	@ (800759c <_dtoa_r+0x614>)
 8007356:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800735a:	ed93 6b00 	vldr	d6, [r3]
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	da03      	bge.n	800736c <_dtoa_r+0x3e4>
 8007364:	f1ba 0f00 	cmp.w	sl, #0
 8007368:	f340 80d2 	ble.w	8007510 <_dtoa_r+0x588>
 800736c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007370:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007374:	463e      	mov	r6, r7
 8007376:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800737a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800737e:	ee15 3a10 	vmov	r3, s10
 8007382:	3330      	adds	r3, #48	@ 0x30
 8007384:	f806 3b01 	strb.w	r3, [r6], #1
 8007388:	1bf3      	subs	r3, r6, r7
 800738a:	459a      	cmp	sl, r3
 800738c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007390:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007394:	f040 80f8 	bne.w	8007588 <_dtoa_r+0x600>
 8007398:	ee37 7b07 	vadd.f64	d7, d7, d7
 800739c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	f300 80dd 	bgt.w	8007562 <_dtoa_r+0x5da>
 80073a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	d104      	bne.n	80073bc <_dtoa_r+0x434>
 80073b2:	ee15 3a10 	vmov	r3, s10
 80073b6:	07db      	lsls	r3, r3, #31
 80073b8:	f100 80d3 	bmi.w	8007562 <_dtoa_r+0x5da>
 80073bc:	9901      	ldr	r1, [sp, #4]
 80073be:	4648      	mov	r0, r9
 80073c0:	f000 fc78 	bl	8007cb4 <_Bfree>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073c8:	7033      	strb	r3, [r6, #0]
 80073ca:	f108 0301 	add.w	r3, r8, #1
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 8304 	beq.w	80079e0 <_dtoa_r+0xa58>
 80073d8:	601e      	str	r6, [r3, #0]
 80073da:	e301      	b.n	80079e0 <_dtoa_r+0xa58>
 80073dc:	2202      	movs	r2, #2
 80073de:	e75e      	b.n	800729e <_dtoa_r+0x316>
 80073e0:	07cc      	lsls	r4, r1, #31
 80073e2:	d504      	bpl.n	80073ee <_dtoa_r+0x466>
 80073e4:	ed90 6b00 	vldr	d6, [r0]
 80073e8:	3201      	adds	r2, #1
 80073ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073ee:	1049      	asrs	r1, r1, #1
 80073f0:	3008      	adds	r0, #8
 80073f2:	e755      	b.n	80072a0 <_dtoa_r+0x318>
 80073f4:	d022      	beq.n	800743c <_dtoa_r+0x4b4>
 80073f6:	f1c8 0100 	rsb	r1, r8, #0
 80073fa:	4a68      	ldr	r2, [pc, #416]	@ (800759c <_dtoa_r+0x614>)
 80073fc:	f001 000f 	and.w	r0, r1, #15
 8007400:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007404:	ed92 7b00 	vldr	d7, [r2]
 8007408:	ee28 7b07 	vmul.f64	d7, d8, d7
 800740c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007410:	4863      	ldr	r0, [pc, #396]	@ (80075a0 <_dtoa_r+0x618>)
 8007412:	1109      	asrs	r1, r1, #4
 8007414:	2400      	movs	r4, #0
 8007416:	2202      	movs	r2, #2
 8007418:	b929      	cbnz	r1, 8007426 <_dtoa_r+0x49e>
 800741a:	2c00      	cmp	r4, #0
 800741c:	f43f af49 	beq.w	80072b2 <_dtoa_r+0x32a>
 8007420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007424:	e745      	b.n	80072b2 <_dtoa_r+0x32a>
 8007426:	07ce      	lsls	r6, r1, #31
 8007428:	d505      	bpl.n	8007436 <_dtoa_r+0x4ae>
 800742a:	ed90 6b00 	vldr	d6, [r0]
 800742e:	3201      	adds	r2, #1
 8007430:	2401      	movs	r4, #1
 8007432:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007436:	1049      	asrs	r1, r1, #1
 8007438:	3008      	adds	r0, #8
 800743a:	e7ed      	b.n	8007418 <_dtoa_r+0x490>
 800743c:	2202      	movs	r2, #2
 800743e:	e738      	b.n	80072b2 <_dtoa_r+0x32a>
 8007440:	f8cd 8010 	str.w	r8, [sp, #16]
 8007444:	4654      	mov	r4, sl
 8007446:	e754      	b.n	80072f2 <_dtoa_r+0x36a>
 8007448:	4a54      	ldr	r2, [pc, #336]	@ (800759c <_dtoa_r+0x614>)
 800744a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800744e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007452:	9a08      	ldr	r2, [sp, #32]
 8007454:	ec41 0b17 	vmov	d7, r0, r1
 8007458:	443c      	add	r4, r7
 800745a:	b34a      	cbz	r2, 80074b0 <_dtoa_r+0x528>
 800745c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007460:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007464:	463e      	mov	r6, r7
 8007466:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800746a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800746e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007472:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007476:	ee14 2a90 	vmov	r2, s9
 800747a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800747e:	3230      	adds	r2, #48	@ 0x30
 8007480:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748c:	f806 2b01 	strb.w	r2, [r6], #1
 8007490:	d438      	bmi.n	8007504 <_dtoa_r+0x57c>
 8007492:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007496:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	d462      	bmi.n	8007566 <_dtoa_r+0x5de>
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	f43f af4d 	beq.w	8007340 <_dtoa_r+0x3b8>
 80074a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80074aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074ae:	e7e0      	b.n	8007472 <_dtoa_r+0x4ea>
 80074b0:	4621      	mov	r1, r4
 80074b2:	463e      	mov	r6, r7
 80074b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80074bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074c0:	ee14 2a90 	vmov	r2, s9
 80074c4:	3230      	adds	r2, #48	@ 0x30
 80074c6:	f806 2b01 	strb.w	r2, [r6], #1
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074d4:	d119      	bne.n	800750a <_dtoa_r+0x582>
 80074d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80074da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80074de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	dc3e      	bgt.n	8007566 <_dtoa_r+0x5de>
 80074e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80074ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	f57f af24 	bpl.w	8007340 <_dtoa_r+0x3b8>
 80074f8:	460e      	mov	r6, r1
 80074fa:	3901      	subs	r1, #1
 80074fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007500:	2b30      	cmp	r3, #48	@ 0x30
 8007502:	d0f9      	beq.n	80074f8 <_dtoa_r+0x570>
 8007504:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007508:	e758      	b.n	80073bc <_dtoa_r+0x434>
 800750a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800750e:	e7d5      	b.n	80074bc <_dtoa_r+0x534>
 8007510:	d10b      	bne.n	800752a <_dtoa_r+0x5a2>
 8007512:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007516:	ee26 6b07 	vmul.f64	d6, d6, d7
 800751a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800751e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007526:	f2c0 8161 	blt.w	80077ec <_dtoa_r+0x864>
 800752a:	2400      	movs	r4, #0
 800752c:	4625      	mov	r5, r4
 800752e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007530:	43db      	mvns	r3, r3
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	463e      	mov	r6, r7
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	4621      	mov	r1, r4
 800753c:	4648      	mov	r0, r9
 800753e:	f000 fbb9 	bl	8007cb4 <_Bfree>
 8007542:	2d00      	cmp	r5, #0
 8007544:	d0de      	beq.n	8007504 <_dtoa_r+0x57c>
 8007546:	f1b8 0f00 	cmp.w	r8, #0
 800754a:	d005      	beq.n	8007558 <_dtoa_r+0x5d0>
 800754c:	45a8      	cmp	r8, r5
 800754e:	d003      	beq.n	8007558 <_dtoa_r+0x5d0>
 8007550:	4641      	mov	r1, r8
 8007552:	4648      	mov	r0, r9
 8007554:	f000 fbae 	bl	8007cb4 <_Bfree>
 8007558:	4629      	mov	r1, r5
 800755a:	4648      	mov	r0, r9
 800755c:	f000 fbaa 	bl	8007cb4 <_Bfree>
 8007560:	e7d0      	b.n	8007504 <_dtoa_r+0x57c>
 8007562:	f8cd 8010 	str.w	r8, [sp, #16]
 8007566:	4633      	mov	r3, r6
 8007568:	461e      	mov	r6, r3
 800756a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800756e:	2a39      	cmp	r2, #57	@ 0x39
 8007570:	d106      	bne.n	8007580 <_dtoa_r+0x5f8>
 8007572:	429f      	cmp	r7, r3
 8007574:	d1f8      	bne.n	8007568 <_dtoa_r+0x5e0>
 8007576:	9a04      	ldr	r2, [sp, #16]
 8007578:	3201      	adds	r2, #1
 800757a:	9204      	str	r2, [sp, #16]
 800757c:	2230      	movs	r2, #48	@ 0x30
 800757e:	703a      	strb	r2, [r7, #0]
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	3201      	adds	r2, #1
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e7bd      	b.n	8007504 <_dtoa_r+0x57c>
 8007588:	ee27 7b04 	vmul.f64	d7, d7, d4
 800758c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007594:	f47f aeef 	bne.w	8007376 <_dtoa_r+0x3ee>
 8007598:	e710      	b.n	80073bc <_dtoa_r+0x434>
 800759a:	bf00      	nop
 800759c:	080090e0 	.word	0x080090e0
 80075a0:	080090b8 	.word	0x080090b8
 80075a4:	9908      	ldr	r1, [sp, #32]
 80075a6:	2900      	cmp	r1, #0
 80075a8:	f000 80e3 	beq.w	8007772 <_dtoa_r+0x7ea>
 80075ac:	9907      	ldr	r1, [sp, #28]
 80075ae:	2901      	cmp	r1, #1
 80075b0:	f300 80c8 	bgt.w	8007744 <_dtoa_r+0x7bc>
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	f000 80c1 	beq.w	800773c <_dtoa_r+0x7b4>
 80075ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075be:	9e05      	ldr	r6, [sp, #20]
 80075c0:	461c      	mov	r4, r3
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	9305      	str	r3, [sp, #20]
 80075ca:	9b06      	ldr	r3, [sp, #24]
 80075cc:	2101      	movs	r1, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	4648      	mov	r0, r9
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	f000 fc22 	bl	8007e1c <__i2b>
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	4605      	mov	r5, r0
 80075dc:	b166      	cbz	r6, 80075f8 <_dtoa_r+0x670>
 80075de:	9a06      	ldr	r2, [sp, #24]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	dd09      	ble.n	80075f8 <_dtoa_r+0x670>
 80075e4:	42b2      	cmp	r2, r6
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	bfa8      	it	ge
 80075ea:	4632      	movge	r2, r6
 80075ec:	1a89      	subs	r1, r1, r2
 80075ee:	9105      	str	r1, [sp, #20]
 80075f0:	9906      	ldr	r1, [sp, #24]
 80075f2:	1ab6      	subs	r6, r6, r2
 80075f4:	1a8a      	subs	r2, r1, r2
 80075f6:	9206      	str	r2, [sp, #24]
 80075f8:	b1fb      	cbz	r3, 800763a <_dtoa_r+0x6b2>
 80075fa:	9a08      	ldr	r2, [sp, #32]
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	f000 80bc 	beq.w	800777a <_dtoa_r+0x7f2>
 8007602:	b19c      	cbz	r4, 800762c <_dtoa_r+0x6a4>
 8007604:	4629      	mov	r1, r5
 8007606:	4622      	mov	r2, r4
 8007608:	4648      	mov	r0, r9
 800760a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800760c:	f000 fcc6 	bl	8007f9c <__pow5mult>
 8007610:	9a01      	ldr	r2, [sp, #4]
 8007612:	4601      	mov	r1, r0
 8007614:	4605      	mov	r5, r0
 8007616:	4648      	mov	r0, r9
 8007618:	f000 fc16 	bl	8007e48 <__multiply>
 800761c:	9901      	ldr	r1, [sp, #4]
 800761e:	9004      	str	r0, [sp, #16]
 8007620:	4648      	mov	r0, r9
 8007622:	f000 fb47 	bl	8007cb4 <_Bfree>
 8007626:	9a04      	ldr	r2, [sp, #16]
 8007628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800762a:	9201      	str	r2, [sp, #4]
 800762c:	1b1a      	subs	r2, r3, r4
 800762e:	d004      	beq.n	800763a <_dtoa_r+0x6b2>
 8007630:	9901      	ldr	r1, [sp, #4]
 8007632:	4648      	mov	r0, r9
 8007634:	f000 fcb2 	bl	8007f9c <__pow5mult>
 8007638:	9001      	str	r0, [sp, #4]
 800763a:	2101      	movs	r1, #1
 800763c:	4648      	mov	r0, r9
 800763e:	f000 fbed 	bl	8007e1c <__i2b>
 8007642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007644:	4604      	mov	r4, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 81d0 	beq.w	80079ec <_dtoa_r+0xa64>
 800764c:	461a      	mov	r2, r3
 800764e:	4601      	mov	r1, r0
 8007650:	4648      	mov	r0, r9
 8007652:	f000 fca3 	bl	8007f9c <__pow5mult>
 8007656:	9b07      	ldr	r3, [sp, #28]
 8007658:	2b01      	cmp	r3, #1
 800765a:	4604      	mov	r4, r0
 800765c:	f300 8095 	bgt.w	800778a <_dtoa_r+0x802>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 808b 	bne.w	800777e <_dtoa_r+0x7f6>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800766e:	2a00      	cmp	r2, #0
 8007670:	f040 8087 	bne.w	8007782 <_dtoa_r+0x7fa>
 8007674:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007678:	0d12      	lsrs	r2, r2, #20
 800767a:	0512      	lsls	r2, r2, #20
 800767c:	2a00      	cmp	r2, #0
 800767e:	f000 8082 	beq.w	8007786 <_dtoa_r+0x7fe>
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	3301      	adds	r3, #1
 8007686:	9305      	str	r3, [sp, #20]
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	3301      	adds	r3, #1
 800768c:	9306      	str	r3, [sp, #24]
 800768e:	2301      	movs	r3, #1
 8007690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 81af 	beq.w	80079f8 <_dtoa_r+0xa70>
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80076a0:	6910      	ldr	r0, [r2, #16]
 80076a2:	f000 fb6f 	bl	8007d84 <__hi0bits>
 80076a6:	f1c0 0020 	rsb	r0, r0, #32
 80076aa:	9b06      	ldr	r3, [sp, #24]
 80076ac:	4418      	add	r0, r3
 80076ae:	f010 001f 	ands.w	r0, r0, #31
 80076b2:	d076      	beq.n	80077a2 <_dtoa_r+0x81a>
 80076b4:	f1c0 0220 	rsb	r2, r0, #32
 80076b8:	2a04      	cmp	r2, #4
 80076ba:	dd69      	ble.n	8007790 <_dtoa_r+0x808>
 80076bc:	9b05      	ldr	r3, [sp, #20]
 80076be:	f1c0 001c 	rsb	r0, r0, #28
 80076c2:	4403      	add	r3, r0
 80076c4:	9305      	str	r3, [sp, #20]
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	4406      	add	r6, r0
 80076ca:	4403      	add	r3, r0
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	9b05      	ldr	r3, [sp, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dd05      	ble.n	80076e0 <_dtoa_r+0x758>
 80076d4:	9901      	ldr	r1, [sp, #4]
 80076d6:	461a      	mov	r2, r3
 80076d8:	4648      	mov	r0, r9
 80076da:	f000 fcb9 	bl	8008050 <__lshift>
 80076de:	9001      	str	r0, [sp, #4]
 80076e0:	9b06      	ldr	r3, [sp, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dd05      	ble.n	80076f2 <_dtoa_r+0x76a>
 80076e6:	4621      	mov	r1, r4
 80076e8:	461a      	mov	r2, r3
 80076ea:	4648      	mov	r0, r9
 80076ec:	f000 fcb0 	bl	8008050 <__lshift>
 80076f0:	4604      	mov	r4, r0
 80076f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d056      	beq.n	80077a6 <_dtoa_r+0x81e>
 80076f8:	9801      	ldr	r0, [sp, #4]
 80076fa:	4621      	mov	r1, r4
 80076fc:	f000 fd14 	bl	8008128 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	da50      	bge.n	80077a6 <_dtoa_r+0x81e>
 8007704:	f108 33ff 	add.w	r3, r8, #4294967295
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	9901      	ldr	r1, [sp, #4]
 800770c:	2300      	movs	r3, #0
 800770e:	220a      	movs	r2, #10
 8007710:	4648      	mov	r0, r9
 8007712:	f000 faf1 	bl	8007cf8 <__multadd>
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	9001      	str	r0, [sp, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 816e 	beq.w	80079fc <_dtoa_r+0xa74>
 8007720:	4629      	mov	r1, r5
 8007722:	2300      	movs	r3, #0
 8007724:	220a      	movs	r2, #10
 8007726:	4648      	mov	r0, r9
 8007728:	f000 fae6 	bl	8007cf8 <__multadd>
 800772c:	f1bb 0f00 	cmp.w	fp, #0
 8007730:	4605      	mov	r5, r0
 8007732:	dc64      	bgt.n	80077fe <_dtoa_r+0x876>
 8007734:	9b07      	ldr	r3, [sp, #28]
 8007736:	2b02      	cmp	r3, #2
 8007738:	dc3e      	bgt.n	80077b8 <_dtoa_r+0x830>
 800773a:	e060      	b.n	80077fe <_dtoa_r+0x876>
 800773c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007742:	e73c      	b.n	80075be <_dtoa_r+0x636>
 8007744:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007748:	42a3      	cmp	r3, r4
 800774a:	bfbf      	itttt	lt
 800774c:	1ae2      	sublt	r2, r4, r3
 800774e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007750:	189b      	addlt	r3, r3, r2
 8007752:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007754:	bfae      	itee	ge
 8007756:	1b1c      	subge	r4, r3, r4
 8007758:	4623      	movlt	r3, r4
 800775a:	2400      	movlt	r4, #0
 800775c:	f1ba 0f00 	cmp.w	sl, #0
 8007760:	bfb5      	itete	lt
 8007762:	9a05      	ldrlt	r2, [sp, #20]
 8007764:	9e05      	ldrge	r6, [sp, #20]
 8007766:	eba2 060a 	sublt.w	r6, r2, sl
 800776a:	4652      	movge	r2, sl
 800776c:	bfb8      	it	lt
 800776e:	2200      	movlt	r2, #0
 8007770:	e727      	b.n	80075c2 <_dtoa_r+0x63a>
 8007772:	9e05      	ldr	r6, [sp, #20]
 8007774:	9d08      	ldr	r5, [sp, #32]
 8007776:	461c      	mov	r4, r3
 8007778:	e730      	b.n	80075dc <_dtoa_r+0x654>
 800777a:	461a      	mov	r2, r3
 800777c:	e758      	b.n	8007630 <_dtoa_r+0x6a8>
 800777e:	2300      	movs	r3, #0
 8007780:	e786      	b.n	8007690 <_dtoa_r+0x708>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	e784      	b.n	8007690 <_dtoa_r+0x708>
 8007786:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007788:	e783      	b.n	8007692 <_dtoa_r+0x70a>
 800778a:	2300      	movs	r3, #0
 800778c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800778e:	e784      	b.n	800769a <_dtoa_r+0x712>
 8007790:	d09d      	beq.n	80076ce <_dtoa_r+0x746>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	321c      	adds	r2, #28
 8007796:	4413      	add	r3, r2
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	4416      	add	r6, r2
 800779e:	4413      	add	r3, r2
 80077a0:	e794      	b.n	80076cc <_dtoa_r+0x744>
 80077a2:	4602      	mov	r2, r0
 80077a4:	e7f5      	b.n	8007792 <_dtoa_r+0x80a>
 80077a6:	f1ba 0f00 	cmp.w	sl, #0
 80077aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80077ae:	46d3      	mov	fp, sl
 80077b0:	dc21      	bgt.n	80077f6 <_dtoa_r+0x86e>
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dd1e      	ble.n	80077f6 <_dtoa_r+0x86e>
 80077b8:	f1bb 0f00 	cmp.w	fp, #0
 80077bc:	f47f aeb7 	bne.w	800752e <_dtoa_r+0x5a6>
 80077c0:	4621      	mov	r1, r4
 80077c2:	465b      	mov	r3, fp
 80077c4:	2205      	movs	r2, #5
 80077c6:	4648      	mov	r0, r9
 80077c8:	f000 fa96 	bl	8007cf8 <__multadd>
 80077cc:	4601      	mov	r1, r0
 80077ce:	4604      	mov	r4, r0
 80077d0:	9801      	ldr	r0, [sp, #4]
 80077d2:	f000 fca9 	bl	8008128 <__mcmp>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f77f aea9 	ble.w	800752e <_dtoa_r+0x5a6>
 80077dc:	463e      	mov	r6, r7
 80077de:	2331      	movs	r3, #49	@ 0x31
 80077e0:	f806 3b01 	strb.w	r3, [r6], #1
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	3301      	adds	r3, #1
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	e6a4      	b.n	8007536 <_dtoa_r+0x5ae>
 80077ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80077f0:	4654      	mov	r4, sl
 80077f2:	4625      	mov	r5, r4
 80077f4:	e7f2      	b.n	80077dc <_dtoa_r+0x854>
 80077f6:	9b08      	ldr	r3, [sp, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8103 	beq.w	8007a04 <_dtoa_r+0xa7c>
 80077fe:	2e00      	cmp	r6, #0
 8007800:	dd05      	ble.n	800780e <_dtoa_r+0x886>
 8007802:	4629      	mov	r1, r5
 8007804:	4632      	mov	r2, r6
 8007806:	4648      	mov	r0, r9
 8007808:	f000 fc22 	bl	8008050 <__lshift>
 800780c:	4605      	mov	r5, r0
 800780e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d058      	beq.n	80078c6 <_dtoa_r+0x93e>
 8007814:	6869      	ldr	r1, [r5, #4]
 8007816:	4648      	mov	r0, r9
 8007818:	f000 fa0c 	bl	8007c34 <_Balloc>
 800781c:	4606      	mov	r6, r0
 800781e:	b928      	cbnz	r0, 800782c <_dtoa_r+0x8a4>
 8007820:	4b82      	ldr	r3, [pc, #520]	@ (8007a2c <_dtoa_r+0xaa4>)
 8007822:	4602      	mov	r2, r0
 8007824:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007828:	f7ff bbc7 	b.w	8006fba <_dtoa_r+0x32>
 800782c:	692a      	ldr	r2, [r5, #16]
 800782e:	3202      	adds	r2, #2
 8007830:	0092      	lsls	r2, r2, #2
 8007832:	f105 010c 	add.w	r1, r5, #12
 8007836:	300c      	adds	r0, #12
 8007838:	f7ff fb0f 	bl	8006e5a <memcpy>
 800783c:	2201      	movs	r2, #1
 800783e:	4631      	mov	r1, r6
 8007840:	4648      	mov	r0, r9
 8007842:	f000 fc05 	bl	8008050 <__lshift>
 8007846:	1c7b      	adds	r3, r7, #1
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	eb07 030b 	add.w	r3, r7, fp
 800784e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007850:	9b02      	ldr	r3, [sp, #8]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	46a8      	mov	r8, r5
 8007858:	9308      	str	r3, [sp, #32]
 800785a:	4605      	mov	r5, r0
 800785c:	9b05      	ldr	r3, [sp, #20]
 800785e:	9801      	ldr	r0, [sp, #4]
 8007860:	4621      	mov	r1, r4
 8007862:	f103 3bff 	add.w	fp, r3, #4294967295
 8007866:	f7ff fb06 	bl	8006e76 <quorem>
 800786a:	4641      	mov	r1, r8
 800786c:	9002      	str	r0, [sp, #8]
 800786e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007872:	9801      	ldr	r0, [sp, #4]
 8007874:	f000 fc58 	bl	8008128 <__mcmp>
 8007878:	462a      	mov	r2, r5
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	4621      	mov	r1, r4
 800787e:	4648      	mov	r0, r9
 8007880:	f000 fc6e 	bl	8008160 <__mdiff>
 8007884:	68c2      	ldr	r2, [r0, #12]
 8007886:	4606      	mov	r6, r0
 8007888:	b9fa      	cbnz	r2, 80078ca <_dtoa_r+0x942>
 800788a:	4601      	mov	r1, r0
 800788c:	9801      	ldr	r0, [sp, #4]
 800788e:	f000 fc4b 	bl	8008128 <__mcmp>
 8007892:	4602      	mov	r2, r0
 8007894:	4631      	mov	r1, r6
 8007896:	4648      	mov	r0, r9
 8007898:	920a      	str	r2, [sp, #40]	@ 0x28
 800789a:	f000 fa0b 	bl	8007cb4 <_Bfree>
 800789e:	9b07      	ldr	r3, [sp, #28]
 80078a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078a2:	9e05      	ldr	r6, [sp, #20]
 80078a4:	ea43 0102 	orr.w	r1, r3, r2
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	4319      	orrs	r1, r3
 80078ac:	d10f      	bne.n	80078ce <_dtoa_r+0x946>
 80078ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80078b2:	d028      	beq.n	8007906 <_dtoa_r+0x97e>
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dd02      	ble.n	80078c0 <_dtoa_r+0x938>
 80078ba:	9b02      	ldr	r3, [sp, #8]
 80078bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80078c0:	f88b a000 	strb.w	sl, [fp]
 80078c4:	e639      	b.n	800753a <_dtoa_r+0x5b2>
 80078c6:	4628      	mov	r0, r5
 80078c8:	e7bd      	b.n	8007846 <_dtoa_r+0x8be>
 80078ca:	2201      	movs	r2, #1
 80078cc:	e7e2      	b.n	8007894 <_dtoa_r+0x90c>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	db04      	blt.n	80078de <_dtoa_r+0x956>
 80078d4:	9907      	ldr	r1, [sp, #28]
 80078d6:	430b      	orrs	r3, r1
 80078d8:	9908      	ldr	r1, [sp, #32]
 80078da:	430b      	orrs	r3, r1
 80078dc:	d120      	bne.n	8007920 <_dtoa_r+0x998>
 80078de:	2a00      	cmp	r2, #0
 80078e0:	ddee      	ble.n	80078c0 <_dtoa_r+0x938>
 80078e2:	9901      	ldr	r1, [sp, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	4648      	mov	r0, r9
 80078e8:	f000 fbb2 	bl	8008050 <__lshift>
 80078ec:	4621      	mov	r1, r4
 80078ee:	9001      	str	r0, [sp, #4]
 80078f0:	f000 fc1a 	bl	8008128 <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	dc03      	bgt.n	8007900 <_dtoa_r+0x978>
 80078f8:	d1e2      	bne.n	80078c0 <_dtoa_r+0x938>
 80078fa:	f01a 0f01 	tst.w	sl, #1
 80078fe:	d0df      	beq.n	80078c0 <_dtoa_r+0x938>
 8007900:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007904:	d1d9      	bne.n	80078ba <_dtoa_r+0x932>
 8007906:	2339      	movs	r3, #57	@ 0x39
 8007908:	f88b 3000 	strb.w	r3, [fp]
 800790c:	4633      	mov	r3, r6
 800790e:	461e      	mov	r6, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007916:	2a39      	cmp	r2, #57	@ 0x39
 8007918:	d053      	beq.n	80079c2 <_dtoa_r+0xa3a>
 800791a:	3201      	adds	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e60c      	b.n	800753a <_dtoa_r+0x5b2>
 8007920:	2a00      	cmp	r2, #0
 8007922:	dd07      	ble.n	8007934 <_dtoa_r+0x9ac>
 8007924:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007928:	d0ed      	beq.n	8007906 <_dtoa_r+0x97e>
 800792a:	f10a 0301 	add.w	r3, sl, #1
 800792e:	f88b 3000 	strb.w	r3, [fp]
 8007932:	e602      	b.n	800753a <_dtoa_r+0x5b2>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	9a05      	ldr	r2, [sp, #20]
 8007938:	f803 ac01 	strb.w	sl, [r3, #-1]
 800793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793e:	4293      	cmp	r3, r2
 8007940:	d029      	beq.n	8007996 <_dtoa_r+0xa0e>
 8007942:	9901      	ldr	r1, [sp, #4]
 8007944:	2300      	movs	r3, #0
 8007946:	220a      	movs	r2, #10
 8007948:	4648      	mov	r0, r9
 800794a:	f000 f9d5 	bl	8007cf8 <__multadd>
 800794e:	45a8      	cmp	r8, r5
 8007950:	9001      	str	r0, [sp, #4]
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	f04f 020a 	mov.w	r2, #10
 800795a:	4641      	mov	r1, r8
 800795c:	4648      	mov	r0, r9
 800795e:	d107      	bne.n	8007970 <_dtoa_r+0x9e8>
 8007960:	f000 f9ca 	bl	8007cf8 <__multadd>
 8007964:	4680      	mov	r8, r0
 8007966:	4605      	mov	r5, r0
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	3301      	adds	r3, #1
 800796c:	9305      	str	r3, [sp, #20]
 800796e:	e775      	b.n	800785c <_dtoa_r+0x8d4>
 8007970:	f000 f9c2 	bl	8007cf8 <__multadd>
 8007974:	4629      	mov	r1, r5
 8007976:	4680      	mov	r8, r0
 8007978:	2300      	movs	r3, #0
 800797a:	220a      	movs	r2, #10
 800797c:	4648      	mov	r0, r9
 800797e:	f000 f9bb 	bl	8007cf8 <__multadd>
 8007982:	4605      	mov	r5, r0
 8007984:	e7f0      	b.n	8007968 <_dtoa_r+0x9e0>
 8007986:	f1bb 0f00 	cmp.w	fp, #0
 800798a:	bfcc      	ite	gt
 800798c:	465e      	movgt	r6, fp
 800798e:	2601      	movle	r6, #1
 8007990:	443e      	add	r6, r7
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	9901      	ldr	r1, [sp, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	4648      	mov	r0, r9
 800799c:	f000 fb58 	bl	8008050 <__lshift>
 80079a0:	4621      	mov	r1, r4
 80079a2:	9001      	str	r0, [sp, #4]
 80079a4:	f000 fbc0 	bl	8008128 <__mcmp>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dcaf      	bgt.n	800790c <_dtoa_r+0x984>
 80079ac:	d102      	bne.n	80079b4 <_dtoa_r+0xa2c>
 80079ae:	f01a 0f01 	tst.w	sl, #1
 80079b2:	d1ab      	bne.n	800790c <_dtoa_r+0x984>
 80079b4:	4633      	mov	r3, r6
 80079b6:	461e      	mov	r6, r3
 80079b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079bc:	2a30      	cmp	r2, #48	@ 0x30
 80079be:	d0fa      	beq.n	80079b6 <_dtoa_r+0xa2e>
 80079c0:	e5bb      	b.n	800753a <_dtoa_r+0x5b2>
 80079c2:	429f      	cmp	r7, r3
 80079c4:	d1a3      	bne.n	800790e <_dtoa_r+0x986>
 80079c6:	9b04      	ldr	r3, [sp, #16]
 80079c8:	3301      	adds	r3, #1
 80079ca:	9304      	str	r3, [sp, #16]
 80079cc:	2331      	movs	r3, #49	@ 0x31
 80079ce:	703b      	strb	r3, [r7, #0]
 80079d0:	e5b3      	b.n	800753a <_dtoa_r+0x5b2>
 80079d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079d4:	4f16      	ldr	r7, [pc, #88]	@ (8007a30 <_dtoa_r+0xaa8>)
 80079d6:	b11b      	cbz	r3, 80079e0 <_dtoa_r+0xa58>
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4638      	mov	r0, r7
 80079e2:	b011      	add	sp, #68	@ 0x44
 80079e4:	ecbd 8b02 	vpop	{d8}
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	9b07      	ldr	r3, [sp, #28]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	f77f ae36 	ble.w	8007660 <_dtoa_r+0x6d8>
 80079f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079f8:	2001      	movs	r0, #1
 80079fa:	e656      	b.n	80076aa <_dtoa_r+0x722>
 80079fc:	f1bb 0f00 	cmp.w	fp, #0
 8007a00:	f77f aed7 	ble.w	80077b2 <_dtoa_r+0x82a>
 8007a04:	463e      	mov	r6, r7
 8007a06:	9801      	ldr	r0, [sp, #4]
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f7ff fa34 	bl	8006e76 <quorem>
 8007a0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007a12:	f806 ab01 	strb.w	sl, [r6], #1
 8007a16:	1bf2      	subs	r2, r6, r7
 8007a18:	4593      	cmp	fp, r2
 8007a1a:	ddb4      	ble.n	8007986 <_dtoa_r+0x9fe>
 8007a1c:	9901      	ldr	r1, [sp, #4]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	220a      	movs	r2, #10
 8007a22:	4648      	mov	r0, r9
 8007a24:	f000 f968 	bl	8007cf8 <__multadd>
 8007a28:	9001      	str	r0, [sp, #4]
 8007a2a:	e7ec      	b.n	8007a06 <_dtoa_r+0xa7e>
 8007a2c:	0800903c 	.word	0x0800903c
 8007a30:	08008fc0 	.word	0x08008fc0

08007a34 <_free_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4605      	mov	r5, r0
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	d041      	beq.n	8007ac0 <_free_r+0x8c>
 8007a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a40:	1f0c      	subs	r4, r1, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfb8      	it	lt
 8007a46:	18e4      	addlt	r4, r4, r3
 8007a48:	f000 f8e8 	bl	8007c1c <__malloc_lock>
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <_free_r+0x90>)
 8007a4e:	6813      	ldr	r3, [r2, #0]
 8007a50:	b933      	cbnz	r3, 8007a60 <_free_r+0x2c>
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	6014      	str	r4, [r2, #0]
 8007a56:	4628      	mov	r0, r5
 8007a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a5c:	f000 b8e4 	b.w	8007c28 <__malloc_unlock>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d908      	bls.n	8007a76 <_free_r+0x42>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	1821      	adds	r1, r4, r0
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf01      	itttt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	1809      	addeq	r1, r1, r0
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	e7ed      	b.n	8007a52 <_free_r+0x1e>
 8007a76:	461a      	mov	r2, r3
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	b10b      	cbz	r3, 8007a80 <_free_r+0x4c>
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d9fa      	bls.n	8007a76 <_free_r+0x42>
 8007a80:	6811      	ldr	r1, [r2, #0]
 8007a82:	1850      	adds	r0, r2, r1
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d10b      	bne.n	8007aa0 <_free_r+0x6c>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	4401      	add	r1, r0
 8007a8c:	1850      	adds	r0, r2, r1
 8007a8e:	4283      	cmp	r3, r0
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	d1e0      	bne.n	8007a56 <_free_r+0x22>
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	6053      	str	r3, [r2, #4]
 8007a9a:	4408      	add	r0, r1
 8007a9c:	6010      	str	r0, [r2, #0]
 8007a9e:	e7da      	b.n	8007a56 <_free_r+0x22>
 8007aa0:	d902      	bls.n	8007aa8 <_free_r+0x74>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	e7d6      	b.n	8007a56 <_free_r+0x22>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	1821      	adds	r1, r4, r0
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf04      	itt	eq
 8007ab0:	6819      	ldreq	r1, [r3, #0]
 8007ab2:	685b      	ldreq	r3, [r3, #4]
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	bf04      	itt	eq
 8007ab8:	1809      	addeq	r1, r1, r0
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	6054      	str	r4, [r2, #4]
 8007abe:	e7ca      	b.n	8007a56 <_free_r+0x22>
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000cac 	.word	0x20000cac

08007ac8 <malloc>:
 8007ac8:	4b02      	ldr	r3, [pc, #8]	@ (8007ad4 <malloc+0xc>)
 8007aca:	4601      	mov	r1, r0
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	f000 b825 	b.w	8007b1c <_malloc_r>
 8007ad2:	bf00      	nop
 8007ad4:	20000024 	.word	0x20000024

08007ad8 <sbrk_aligned>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4e0f      	ldr	r6, [pc, #60]	@ (8007b18 <sbrk_aligned+0x40>)
 8007adc:	460c      	mov	r4, r1
 8007ade:	6831      	ldr	r1, [r6, #0]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	b911      	cbnz	r1, 8007aea <sbrk_aligned+0x12>
 8007ae4:	f001 f80c 	bl	8008b00 <_sbrk_r>
 8007ae8:	6030      	str	r0, [r6, #0]
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f001 f807 	bl	8008b00 <_sbrk_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d103      	bne.n	8007afe <sbrk_aligned+0x26>
 8007af6:	f04f 34ff 	mov.w	r4, #4294967295
 8007afa:	4620      	mov	r0, r4
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	1cc4      	adds	r4, r0, #3
 8007b00:	f024 0403 	bic.w	r4, r4, #3
 8007b04:	42a0      	cmp	r0, r4
 8007b06:	d0f8      	beq.n	8007afa <sbrk_aligned+0x22>
 8007b08:	1a21      	subs	r1, r4, r0
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 fff8 	bl	8008b00 <_sbrk_r>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1f2      	bne.n	8007afa <sbrk_aligned+0x22>
 8007b14:	e7ef      	b.n	8007af6 <sbrk_aligned+0x1e>
 8007b16:	bf00      	nop
 8007b18:	20000ca8 	.word	0x20000ca8

08007b1c <_malloc_r>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	1ccd      	adds	r5, r1, #3
 8007b22:	f025 0503 	bic.w	r5, r5, #3
 8007b26:	3508      	adds	r5, #8
 8007b28:	2d0c      	cmp	r5, #12
 8007b2a:	bf38      	it	cc
 8007b2c:	250c      	movcc	r5, #12
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	4606      	mov	r6, r0
 8007b32:	db01      	blt.n	8007b38 <_malloc_r+0x1c>
 8007b34:	42a9      	cmp	r1, r5
 8007b36:	d904      	bls.n	8007b42 <_malloc_r+0x26>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c18 <_malloc_r+0xfc>
 8007b46:	f000 f869 	bl	8007c1c <__malloc_lock>
 8007b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4e:	461c      	mov	r4, r3
 8007b50:	bb44      	cbnz	r4, 8007ba4 <_malloc_r+0x88>
 8007b52:	4629      	mov	r1, r5
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff ffbf 	bl	8007ad8 <sbrk_aligned>
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	d158      	bne.n	8007c12 <_malloc_r+0xf6>
 8007b60:	f8d8 4000 	ldr.w	r4, [r8]
 8007b64:	4627      	mov	r7, r4
 8007b66:	2f00      	cmp	r7, #0
 8007b68:	d143      	bne.n	8007bf2 <_malloc_r+0xd6>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d04b      	beq.n	8007c06 <_malloc_r+0xea>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	4639      	mov	r1, r7
 8007b72:	4630      	mov	r0, r6
 8007b74:	eb04 0903 	add.w	r9, r4, r3
 8007b78:	f000 ffc2 	bl	8008b00 <_sbrk_r>
 8007b7c:	4581      	cmp	r9, r0
 8007b7e:	d142      	bne.n	8007c06 <_malloc_r+0xea>
 8007b80:	6821      	ldr	r1, [r4, #0]
 8007b82:	1a6d      	subs	r5, r5, r1
 8007b84:	4629      	mov	r1, r5
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7ff ffa6 	bl	8007ad8 <sbrk_aligned>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d03a      	beq.n	8007c06 <_malloc_r+0xea>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	442b      	add	r3, r5
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	bb62      	cbnz	r2, 8007bf8 <_malloc_r+0xdc>
 8007b9e:	f8c8 7000 	str.w	r7, [r8]
 8007ba2:	e00f      	b.n	8007bc4 <_malloc_r+0xa8>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	d420      	bmi.n	8007bec <_malloc_r+0xd0>
 8007baa:	2a0b      	cmp	r2, #11
 8007bac:	d917      	bls.n	8007bde <_malloc_r+0xc2>
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	6025      	str	r5, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	6059      	strne	r1, [r3, #4]
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	bf08      	it	eq
 8007bbc:	f8c8 1000 	streq.w	r1, [r8]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f82f 	bl	8007c28 <__malloc_unlock>
 8007bca:	f104 000b 	add.w	r0, r4, #11
 8007bce:	1d23      	adds	r3, r4, #4
 8007bd0:	f020 0007 	bic.w	r0, r0, #7
 8007bd4:	1ac2      	subs	r2, r0, r3
 8007bd6:	bf1c      	itt	ne
 8007bd8:	1a1b      	subne	r3, r3, r0
 8007bda:	50a3      	strne	r3, [r4, r2]
 8007bdc:	e7af      	b.n	8007b3e <_malloc_r+0x22>
 8007bde:	6862      	ldr	r2, [r4, #4]
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	bf0c      	ite	eq
 8007be4:	f8c8 2000 	streq.w	r2, [r8]
 8007be8:	605a      	strne	r2, [r3, #4]
 8007bea:	e7eb      	b.n	8007bc4 <_malloc_r+0xa8>
 8007bec:	4623      	mov	r3, r4
 8007bee:	6864      	ldr	r4, [r4, #4]
 8007bf0:	e7ae      	b.n	8007b50 <_malloc_r+0x34>
 8007bf2:	463c      	mov	r4, r7
 8007bf4:	687f      	ldr	r7, [r7, #4]
 8007bf6:	e7b6      	b.n	8007b66 <_malloc_r+0x4a>
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d1fb      	bne.n	8007bf8 <_malloc_r+0xdc>
 8007c00:	2300      	movs	r3, #0
 8007c02:	6053      	str	r3, [r2, #4]
 8007c04:	e7de      	b.n	8007bc4 <_malloc_r+0xa8>
 8007c06:	230c      	movs	r3, #12
 8007c08:	6033      	str	r3, [r6, #0]
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f000 f80c 	bl	8007c28 <__malloc_unlock>
 8007c10:	e794      	b.n	8007b3c <_malloc_r+0x20>
 8007c12:	6005      	str	r5, [r0, #0]
 8007c14:	e7d6      	b.n	8007bc4 <_malloc_r+0xa8>
 8007c16:	bf00      	nop
 8007c18:	20000cac 	.word	0x20000cac

08007c1c <__malloc_lock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	@ (8007c24 <__malloc_lock+0x8>)
 8007c1e:	f7ff b91a 	b.w	8006e56 <__retarget_lock_acquire_recursive>
 8007c22:	bf00      	nop
 8007c24:	20000ca4 	.word	0x20000ca4

08007c28 <__malloc_unlock>:
 8007c28:	4801      	ldr	r0, [pc, #4]	@ (8007c30 <__malloc_unlock+0x8>)
 8007c2a:	f7ff b915 	b.w	8006e58 <__retarget_lock_release_recursive>
 8007c2e:	bf00      	nop
 8007c30:	20000ca4 	.word	0x20000ca4

08007c34 <_Balloc>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	69c6      	ldr	r6, [r0, #28]
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	b976      	cbnz	r6, 8007c5c <_Balloc+0x28>
 8007c3e:	2010      	movs	r0, #16
 8007c40:	f7ff ff42 	bl	8007ac8 <malloc>
 8007c44:	4602      	mov	r2, r0
 8007c46:	61e0      	str	r0, [r4, #28]
 8007c48:	b920      	cbnz	r0, 8007c54 <_Balloc+0x20>
 8007c4a:	4b18      	ldr	r3, [pc, #96]	@ (8007cac <_Balloc+0x78>)
 8007c4c:	4818      	ldr	r0, [pc, #96]	@ (8007cb0 <_Balloc+0x7c>)
 8007c4e:	216b      	movs	r1, #107	@ 0x6b
 8007c50:	f000 ff66 	bl	8008b20 <__assert_func>
 8007c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c58:	6006      	str	r6, [r0, #0]
 8007c5a:	60c6      	str	r6, [r0, #12]
 8007c5c:	69e6      	ldr	r6, [r4, #28]
 8007c5e:	68f3      	ldr	r3, [r6, #12]
 8007c60:	b183      	cbz	r3, 8007c84 <_Balloc+0x50>
 8007c62:	69e3      	ldr	r3, [r4, #28]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c6a:	b9b8      	cbnz	r0, 8007c9c <_Balloc+0x68>
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c72:	1d72      	adds	r2, r6, #5
 8007c74:	0092      	lsls	r2, r2, #2
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 ff70 	bl	8008b5c <_calloc_r>
 8007c7c:	b160      	cbz	r0, 8007c98 <_Balloc+0x64>
 8007c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c82:	e00e      	b.n	8007ca2 <_Balloc+0x6e>
 8007c84:	2221      	movs	r2, #33	@ 0x21
 8007c86:	2104      	movs	r1, #4
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 ff67 	bl	8008b5c <_calloc_r>
 8007c8e:	69e3      	ldr	r3, [r4, #28]
 8007c90:	60f0      	str	r0, [r6, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <_Balloc+0x2e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	6802      	ldr	r2, [r0, #0]
 8007c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca8:	e7f7      	b.n	8007c9a <_Balloc+0x66>
 8007caa:	bf00      	nop
 8007cac:	08008fcd 	.word	0x08008fcd
 8007cb0:	0800904d 	.word	0x0800904d

08007cb4 <_Bfree>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	69c6      	ldr	r6, [r0, #28]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b976      	cbnz	r6, 8007cdc <_Bfree+0x28>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	f7ff ff02 	bl	8007ac8 <malloc>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	61e8      	str	r0, [r5, #28]
 8007cc8:	b920      	cbnz	r0, 8007cd4 <_Bfree+0x20>
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <_Bfree+0x3c>)
 8007ccc:	4809      	ldr	r0, [pc, #36]	@ (8007cf4 <_Bfree+0x40>)
 8007cce:	218f      	movs	r1, #143	@ 0x8f
 8007cd0:	f000 ff26 	bl	8008b20 <__assert_func>
 8007cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd8:	6006      	str	r6, [r0, #0]
 8007cda:	60c6      	str	r6, [r0, #12]
 8007cdc:	b13c      	cbz	r4, 8007cee <_Bfree+0x3a>
 8007cde:	69eb      	ldr	r3, [r5, #28]
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce8:	6021      	str	r1, [r4, #0]
 8007cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	08008fcd 	.word	0x08008fcd
 8007cf4:	0800904d 	.word	0x0800904d

08007cf8 <__multadd>:
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfc:	690d      	ldr	r5, [r1, #16]
 8007cfe:	4607      	mov	r7, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	461e      	mov	r6, r3
 8007d04:	f101 0c14 	add.w	ip, r1, #20
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d0e:	b299      	uxth	r1, r3
 8007d10:	fb02 6101 	mla	r1, r2, r1, r6
 8007d14:	0c1e      	lsrs	r6, r3, #16
 8007d16:	0c0b      	lsrs	r3, r1, #16
 8007d18:	fb02 3306 	mla	r3, r2, r6, r3
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	3001      	adds	r0, #1
 8007d20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d24:	4285      	cmp	r5, r0
 8007d26:	f84c 1b04 	str.w	r1, [ip], #4
 8007d2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d2e:	dcec      	bgt.n	8007d0a <__multadd+0x12>
 8007d30:	b30e      	cbz	r6, 8007d76 <__multadd+0x7e>
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dc19      	bgt.n	8007d6c <__multadd+0x74>
 8007d38:	6861      	ldr	r1, [r4, #4]
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	3101      	adds	r1, #1
 8007d3e:	f7ff ff79 	bl	8007c34 <_Balloc>
 8007d42:	4680      	mov	r8, r0
 8007d44:	b928      	cbnz	r0, 8007d52 <__multadd+0x5a>
 8007d46:	4602      	mov	r2, r0
 8007d48:	4b0c      	ldr	r3, [pc, #48]	@ (8007d7c <__multadd+0x84>)
 8007d4a:	480d      	ldr	r0, [pc, #52]	@ (8007d80 <__multadd+0x88>)
 8007d4c:	21ba      	movs	r1, #186	@ 0xba
 8007d4e:	f000 fee7 	bl	8008b20 <__assert_func>
 8007d52:	6922      	ldr	r2, [r4, #16]
 8007d54:	3202      	adds	r2, #2
 8007d56:	f104 010c 	add.w	r1, r4, #12
 8007d5a:	0092      	lsls	r2, r2, #2
 8007d5c:	300c      	adds	r0, #12
 8007d5e:	f7ff f87c 	bl	8006e5a <memcpy>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff ffa5 	bl	8007cb4 <_Bfree>
 8007d6a:	4644      	mov	r4, r8
 8007d6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d70:	3501      	adds	r5, #1
 8007d72:	615e      	str	r6, [r3, #20]
 8007d74:	6125      	str	r5, [r4, #16]
 8007d76:	4620      	mov	r0, r4
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d7c:	0800903c 	.word	0x0800903c
 8007d80:	0800904d 	.word	0x0800904d

08007d84 <__hi0bits>:
 8007d84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d88:	4603      	mov	r3, r0
 8007d8a:	bf36      	itet	cc
 8007d8c:	0403      	lslcc	r3, r0, #16
 8007d8e:	2000      	movcs	r0, #0
 8007d90:	2010      	movcc	r0, #16
 8007d92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d96:	bf3c      	itt	cc
 8007d98:	021b      	lslcc	r3, r3, #8
 8007d9a:	3008      	addcc	r0, #8
 8007d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da0:	bf3c      	itt	cc
 8007da2:	011b      	lslcc	r3, r3, #4
 8007da4:	3004      	addcc	r0, #4
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007daa:	bf3c      	itt	cc
 8007dac:	009b      	lslcc	r3, r3, #2
 8007dae:	3002      	addcc	r0, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db05      	blt.n	8007dc0 <__hi0bits+0x3c>
 8007db4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007db8:	f100 0001 	add.w	r0, r0, #1
 8007dbc:	bf08      	it	eq
 8007dbe:	2020      	moveq	r0, #32
 8007dc0:	4770      	bx	lr

08007dc2 <__lo0bits>:
 8007dc2:	6803      	ldr	r3, [r0, #0]
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f013 0007 	ands.w	r0, r3, #7
 8007dca:	d00b      	beq.n	8007de4 <__lo0bits+0x22>
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d421      	bmi.n	8007e14 <__lo0bits+0x52>
 8007dd0:	0798      	lsls	r0, r3, #30
 8007dd2:	bf49      	itett	mi
 8007dd4:	085b      	lsrmi	r3, r3, #1
 8007dd6:	089b      	lsrpl	r3, r3, #2
 8007dd8:	2001      	movmi	r0, #1
 8007dda:	6013      	strmi	r3, [r2, #0]
 8007ddc:	bf5c      	itt	pl
 8007dde:	6013      	strpl	r3, [r2, #0]
 8007de0:	2002      	movpl	r0, #2
 8007de2:	4770      	bx	lr
 8007de4:	b299      	uxth	r1, r3
 8007de6:	b909      	cbnz	r1, 8007dec <__lo0bits+0x2a>
 8007de8:	0c1b      	lsrs	r3, r3, #16
 8007dea:	2010      	movs	r0, #16
 8007dec:	b2d9      	uxtb	r1, r3
 8007dee:	b909      	cbnz	r1, 8007df4 <__lo0bits+0x32>
 8007df0:	3008      	adds	r0, #8
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	0719      	lsls	r1, r3, #28
 8007df6:	bf04      	itt	eq
 8007df8:	091b      	lsreq	r3, r3, #4
 8007dfa:	3004      	addeq	r0, #4
 8007dfc:	0799      	lsls	r1, r3, #30
 8007dfe:	bf04      	itt	eq
 8007e00:	089b      	lsreq	r3, r3, #2
 8007e02:	3002      	addeq	r0, #2
 8007e04:	07d9      	lsls	r1, r3, #31
 8007e06:	d403      	bmi.n	8007e10 <__lo0bits+0x4e>
 8007e08:	085b      	lsrs	r3, r3, #1
 8007e0a:	f100 0001 	add.w	r0, r0, #1
 8007e0e:	d003      	beq.n	8007e18 <__lo0bits+0x56>
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	4770      	bx	lr
 8007e14:	2000      	movs	r0, #0
 8007e16:	4770      	bx	lr
 8007e18:	2020      	movs	r0, #32
 8007e1a:	4770      	bx	lr

08007e1c <__i2b>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2101      	movs	r1, #1
 8007e22:	f7ff ff07 	bl	8007c34 <_Balloc>
 8007e26:	4602      	mov	r2, r0
 8007e28:	b928      	cbnz	r0, 8007e36 <__i2b+0x1a>
 8007e2a:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <__i2b+0x24>)
 8007e2c:	4805      	ldr	r0, [pc, #20]	@ (8007e44 <__i2b+0x28>)
 8007e2e:	f240 1145 	movw	r1, #325	@ 0x145
 8007e32:	f000 fe75 	bl	8008b20 <__assert_func>
 8007e36:	2301      	movs	r3, #1
 8007e38:	6144      	str	r4, [r0, #20]
 8007e3a:	6103      	str	r3, [r0, #16]
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	bf00      	nop
 8007e40:	0800903c 	.word	0x0800903c
 8007e44:	0800904d 	.word	0x0800904d

08007e48 <__multiply>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	4614      	mov	r4, r2
 8007e4e:	690a      	ldr	r2, [r1, #16]
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	bfa8      	it	ge
 8007e56:	4623      	movge	r3, r4
 8007e58:	460f      	mov	r7, r1
 8007e5a:	bfa4      	itt	ge
 8007e5c:	460c      	movge	r4, r1
 8007e5e:	461f      	movge	r7, r3
 8007e60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	6861      	ldr	r1, [r4, #4]
 8007e6c:	eb0a 0609 	add.w	r6, sl, r9
 8007e70:	42b3      	cmp	r3, r6
 8007e72:	b085      	sub	sp, #20
 8007e74:	bfb8      	it	lt
 8007e76:	3101      	addlt	r1, #1
 8007e78:	f7ff fedc 	bl	8007c34 <_Balloc>
 8007e7c:	b930      	cbnz	r0, 8007e8c <__multiply+0x44>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	4b44      	ldr	r3, [pc, #272]	@ (8007f94 <__multiply+0x14c>)
 8007e82:	4845      	ldr	r0, [pc, #276]	@ (8007f98 <__multiply+0x150>)
 8007e84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e88:	f000 fe4a 	bl	8008b20 <__assert_func>
 8007e8c:	f100 0514 	add.w	r5, r0, #20
 8007e90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e94:	462b      	mov	r3, r5
 8007e96:	2200      	movs	r2, #0
 8007e98:	4543      	cmp	r3, r8
 8007e9a:	d321      	bcc.n	8007ee0 <__multiply+0x98>
 8007e9c:	f107 0114 	add.w	r1, r7, #20
 8007ea0:	f104 0214 	add.w	r2, r4, #20
 8007ea4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ea8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007eac:	9302      	str	r3, [sp, #8]
 8007eae:	1b13      	subs	r3, r2, r4
 8007eb0:	3b15      	subs	r3, #21
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	f104 0715 	add.w	r7, r4, #21
 8007ebc:	42ba      	cmp	r2, r7
 8007ebe:	bf38      	it	cc
 8007ec0:	2304      	movcc	r3, #4
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	9103      	str	r1, [sp, #12]
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	d80c      	bhi.n	8007ee6 <__multiply+0x9e>
 8007ecc:	2e00      	cmp	r6, #0
 8007ece:	dd03      	ble.n	8007ed8 <__multiply+0x90>
 8007ed0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05b      	beq.n	8007f90 <__multiply+0x148>
 8007ed8:	6106      	str	r6, [r0, #16]
 8007eda:	b005      	add	sp, #20
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	f843 2b04 	str.w	r2, [r3], #4
 8007ee4:	e7d8      	b.n	8007e98 <__multiply+0x50>
 8007ee6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007eea:	f1ba 0f00 	cmp.w	sl, #0
 8007eee:	d024      	beq.n	8007f3a <__multiply+0xf2>
 8007ef0:	f104 0e14 	add.w	lr, r4, #20
 8007ef4:	46a9      	mov	r9, r5
 8007ef6:	f04f 0c00 	mov.w	ip, #0
 8007efa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007efe:	f8d9 3000 	ldr.w	r3, [r9]
 8007f02:	fa1f fb87 	uxth.w	fp, r7
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f10:	f8d9 7000 	ldr.w	r7, [r9]
 8007f14:	4463      	add	r3, ip
 8007f16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f1a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f28:	4572      	cmp	r2, lr
 8007f2a:	f849 3b04 	str.w	r3, [r9], #4
 8007f2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f32:	d8e2      	bhi.n	8007efa <__multiply+0xb2>
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	f845 c003 	str.w	ip, [r5, r3]
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f40:	3104      	adds	r1, #4
 8007f42:	f1b9 0f00 	cmp.w	r9, #0
 8007f46:	d021      	beq.n	8007f8c <__multiply+0x144>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	f104 0c14 	add.w	ip, r4, #20
 8007f4e:	46ae      	mov	lr, r5
 8007f50:	f04f 0a00 	mov.w	sl, #0
 8007f54:	f8bc b000 	ldrh.w	fp, [ip]
 8007f58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f5c:	fb09 770b 	mla	r7, r9, fp, r7
 8007f60:	4457      	add	r7, sl
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f68:	f84e 3b04 	str.w	r3, [lr], #4
 8007f6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f74:	f8be 3000 	ldrh.w	r3, [lr]
 8007f78:	fb09 330a 	mla	r3, r9, sl, r3
 8007f7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f80:	4562      	cmp	r2, ip
 8007f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f86:	d8e5      	bhi.n	8007f54 <__multiply+0x10c>
 8007f88:	9f01      	ldr	r7, [sp, #4]
 8007f8a:	51eb      	str	r3, [r5, r7]
 8007f8c:	3504      	adds	r5, #4
 8007f8e:	e799      	b.n	8007ec4 <__multiply+0x7c>
 8007f90:	3e01      	subs	r6, #1
 8007f92:	e79b      	b.n	8007ecc <__multiply+0x84>
 8007f94:	0800903c 	.word	0x0800903c
 8007f98:	0800904d 	.word	0x0800904d

08007f9c <__pow5mult>:
 8007f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	f012 0203 	ands.w	r2, r2, #3
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	460e      	mov	r6, r1
 8007faa:	d007      	beq.n	8007fbc <__pow5mult+0x20>
 8007fac:	4c25      	ldr	r4, [pc, #148]	@ (8008044 <__pow5mult+0xa8>)
 8007fae:	3a01      	subs	r2, #1
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fb6:	f7ff fe9f 	bl	8007cf8 <__multadd>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	10ad      	asrs	r5, r5, #2
 8007fbe:	d03d      	beq.n	800803c <__pow5mult+0xa0>
 8007fc0:	69fc      	ldr	r4, [r7, #28]
 8007fc2:	b97c      	cbnz	r4, 8007fe4 <__pow5mult+0x48>
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f7ff fd7f 	bl	8007ac8 <malloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	61f8      	str	r0, [r7, #28]
 8007fce:	b928      	cbnz	r0, 8007fdc <__pow5mult+0x40>
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008048 <__pow5mult+0xac>)
 8007fd2:	481e      	ldr	r0, [pc, #120]	@ (800804c <__pow5mult+0xb0>)
 8007fd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fd8:	f000 fda2 	bl	8008b20 <__assert_func>
 8007fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe0:	6004      	str	r4, [r0, #0]
 8007fe2:	60c4      	str	r4, [r0, #12]
 8007fe4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fec:	b94c      	cbnz	r4, 8008002 <__pow5mult+0x66>
 8007fee:	f240 2171 	movw	r1, #625	@ 0x271
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff ff12 	bl	8007e1c <__i2b>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ffe:	4604      	mov	r4, r0
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	07eb      	lsls	r3, r5, #31
 8008008:	d50a      	bpl.n	8008020 <__pow5mult+0x84>
 800800a:	4631      	mov	r1, r6
 800800c:	4622      	mov	r2, r4
 800800e:	4638      	mov	r0, r7
 8008010:	f7ff ff1a 	bl	8007e48 <__multiply>
 8008014:	4631      	mov	r1, r6
 8008016:	4680      	mov	r8, r0
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff fe4b 	bl	8007cb4 <_Bfree>
 800801e:	4646      	mov	r6, r8
 8008020:	106d      	asrs	r5, r5, #1
 8008022:	d00b      	beq.n	800803c <__pow5mult+0xa0>
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	b938      	cbnz	r0, 8008038 <__pow5mult+0x9c>
 8008028:	4622      	mov	r2, r4
 800802a:	4621      	mov	r1, r4
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff ff0b 	bl	8007e48 <__multiply>
 8008032:	6020      	str	r0, [r4, #0]
 8008034:	f8c0 9000 	str.w	r9, [r0]
 8008038:	4604      	mov	r4, r0
 800803a:	e7e4      	b.n	8008006 <__pow5mult+0x6a>
 800803c:	4630      	mov	r0, r6
 800803e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008042:	bf00      	nop
 8008044:	080090a8 	.word	0x080090a8
 8008048:	08008fcd 	.word	0x08008fcd
 800804c:	0800904d 	.word	0x0800904d

08008050 <__lshift>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	460c      	mov	r4, r1
 8008056:	6849      	ldr	r1, [r1, #4]
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	4607      	mov	r7, r0
 8008062:	4691      	mov	r9, r2
 8008064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008068:	f108 0601 	add.w	r6, r8, #1
 800806c:	42b3      	cmp	r3, r6
 800806e:	db0b      	blt.n	8008088 <__lshift+0x38>
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff fddf 	bl	8007c34 <_Balloc>
 8008076:	4605      	mov	r5, r0
 8008078:	b948      	cbnz	r0, 800808e <__lshift+0x3e>
 800807a:	4602      	mov	r2, r0
 800807c:	4b28      	ldr	r3, [pc, #160]	@ (8008120 <__lshift+0xd0>)
 800807e:	4829      	ldr	r0, [pc, #164]	@ (8008124 <__lshift+0xd4>)
 8008080:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008084:	f000 fd4c 	bl	8008b20 <__assert_func>
 8008088:	3101      	adds	r1, #1
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	e7ee      	b.n	800806c <__lshift+0x1c>
 800808e:	2300      	movs	r3, #0
 8008090:	f100 0114 	add.w	r1, r0, #20
 8008094:	f100 0210 	add.w	r2, r0, #16
 8008098:	4618      	mov	r0, r3
 800809a:	4553      	cmp	r3, sl
 800809c:	db33      	blt.n	8008106 <__lshift+0xb6>
 800809e:	6920      	ldr	r0, [r4, #16]
 80080a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080a4:	f104 0314 	add.w	r3, r4, #20
 80080a8:	f019 091f 	ands.w	r9, r9, #31
 80080ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080b4:	d02b      	beq.n	800810e <__lshift+0xbe>
 80080b6:	f1c9 0e20 	rsb	lr, r9, #32
 80080ba:	468a      	mov	sl, r1
 80080bc:	2200      	movs	r2, #0
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	fa00 f009 	lsl.w	r0, r0, r9
 80080c4:	4310      	orrs	r0, r2
 80080c6:	f84a 0b04 	str.w	r0, [sl], #4
 80080ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ce:	459c      	cmp	ip, r3
 80080d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80080d4:	d8f3      	bhi.n	80080be <__lshift+0x6e>
 80080d6:	ebac 0304 	sub.w	r3, ip, r4
 80080da:	3b15      	subs	r3, #21
 80080dc:	f023 0303 	bic.w	r3, r3, #3
 80080e0:	3304      	adds	r3, #4
 80080e2:	f104 0015 	add.w	r0, r4, #21
 80080e6:	4584      	cmp	ip, r0
 80080e8:	bf38      	it	cc
 80080ea:	2304      	movcc	r3, #4
 80080ec:	50ca      	str	r2, [r1, r3]
 80080ee:	b10a      	cbz	r2, 80080f4 <__lshift+0xa4>
 80080f0:	f108 0602 	add.w	r6, r8, #2
 80080f4:	3e01      	subs	r6, #1
 80080f6:	4638      	mov	r0, r7
 80080f8:	612e      	str	r6, [r5, #16]
 80080fa:	4621      	mov	r1, r4
 80080fc:	f7ff fdda 	bl	8007cb4 <_Bfree>
 8008100:	4628      	mov	r0, r5
 8008102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008106:	f842 0f04 	str.w	r0, [r2, #4]!
 800810a:	3301      	adds	r3, #1
 800810c:	e7c5      	b.n	800809a <__lshift+0x4a>
 800810e:	3904      	subs	r1, #4
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	f841 2f04 	str.w	r2, [r1, #4]!
 8008118:	459c      	cmp	ip, r3
 800811a:	d8f9      	bhi.n	8008110 <__lshift+0xc0>
 800811c:	e7ea      	b.n	80080f4 <__lshift+0xa4>
 800811e:	bf00      	nop
 8008120:	0800903c 	.word	0x0800903c
 8008124:	0800904d 	.word	0x0800904d

08008128 <__mcmp>:
 8008128:	690a      	ldr	r2, [r1, #16]
 800812a:	4603      	mov	r3, r0
 800812c:	6900      	ldr	r0, [r0, #16]
 800812e:	1a80      	subs	r0, r0, r2
 8008130:	b530      	push	{r4, r5, lr}
 8008132:	d10e      	bne.n	8008152 <__mcmp+0x2a>
 8008134:	3314      	adds	r3, #20
 8008136:	3114      	adds	r1, #20
 8008138:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800813c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008140:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008144:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008148:	4295      	cmp	r5, r2
 800814a:	d003      	beq.n	8008154 <__mcmp+0x2c>
 800814c:	d205      	bcs.n	800815a <__mcmp+0x32>
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	bd30      	pop	{r4, r5, pc}
 8008154:	42a3      	cmp	r3, r4
 8008156:	d3f3      	bcc.n	8008140 <__mcmp+0x18>
 8008158:	e7fb      	b.n	8008152 <__mcmp+0x2a>
 800815a:	2001      	movs	r0, #1
 800815c:	e7f9      	b.n	8008152 <__mcmp+0x2a>
	...

08008160 <__mdiff>:
 8008160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	4689      	mov	r9, r1
 8008166:	4606      	mov	r6, r0
 8008168:	4611      	mov	r1, r2
 800816a:	4648      	mov	r0, r9
 800816c:	4614      	mov	r4, r2
 800816e:	f7ff ffdb 	bl	8008128 <__mcmp>
 8008172:	1e05      	subs	r5, r0, #0
 8008174:	d112      	bne.n	800819c <__mdiff+0x3c>
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff fd5b 	bl	8007c34 <_Balloc>
 800817e:	4602      	mov	r2, r0
 8008180:	b928      	cbnz	r0, 800818e <__mdiff+0x2e>
 8008182:	4b3f      	ldr	r3, [pc, #252]	@ (8008280 <__mdiff+0x120>)
 8008184:	f240 2137 	movw	r1, #567	@ 0x237
 8008188:	483e      	ldr	r0, [pc, #248]	@ (8008284 <__mdiff+0x124>)
 800818a:	f000 fcc9 	bl	8008b20 <__assert_func>
 800818e:	2301      	movs	r3, #1
 8008190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008194:	4610      	mov	r0, r2
 8008196:	b003      	add	sp, #12
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819c:	bfbc      	itt	lt
 800819e:	464b      	movlt	r3, r9
 80081a0:	46a1      	movlt	r9, r4
 80081a2:	4630      	mov	r0, r6
 80081a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081a8:	bfba      	itte	lt
 80081aa:	461c      	movlt	r4, r3
 80081ac:	2501      	movlt	r5, #1
 80081ae:	2500      	movge	r5, #0
 80081b0:	f7ff fd40 	bl	8007c34 <_Balloc>
 80081b4:	4602      	mov	r2, r0
 80081b6:	b918      	cbnz	r0, 80081c0 <__mdiff+0x60>
 80081b8:	4b31      	ldr	r3, [pc, #196]	@ (8008280 <__mdiff+0x120>)
 80081ba:	f240 2145 	movw	r1, #581	@ 0x245
 80081be:	e7e3      	b.n	8008188 <__mdiff+0x28>
 80081c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081c4:	6926      	ldr	r6, [r4, #16]
 80081c6:	60c5      	str	r5, [r0, #12]
 80081c8:	f109 0310 	add.w	r3, r9, #16
 80081cc:	f109 0514 	add.w	r5, r9, #20
 80081d0:	f104 0e14 	add.w	lr, r4, #20
 80081d4:	f100 0b14 	add.w	fp, r0, #20
 80081d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	46d9      	mov	r9, fp
 80081e4:	f04f 0c00 	mov.w	ip, #0
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	fa1f f38a 	uxth.w	r3, sl
 80081f8:	4619      	mov	r1, r3
 80081fa:	b283      	uxth	r3, r0
 80081fc:	1acb      	subs	r3, r1, r3
 80081fe:	0c00      	lsrs	r0, r0, #16
 8008200:	4463      	add	r3, ip
 8008202:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008206:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800820a:	b29b      	uxth	r3, r3
 800820c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008210:	4576      	cmp	r6, lr
 8008212:	f849 3b04 	str.w	r3, [r9], #4
 8008216:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800821a:	d8e5      	bhi.n	80081e8 <__mdiff+0x88>
 800821c:	1b33      	subs	r3, r6, r4
 800821e:	3b15      	subs	r3, #21
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3415      	adds	r4, #21
 8008226:	3304      	adds	r3, #4
 8008228:	42a6      	cmp	r6, r4
 800822a:	bf38      	it	cc
 800822c:	2304      	movcc	r3, #4
 800822e:	441d      	add	r5, r3
 8008230:	445b      	add	r3, fp
 8008232:	461e      	mov	r6, r3
 8008234:	462c      	mov	r4, r5
 8008236:	4544      	cmp	r4, r8
 8008238:	d30e      	bcc.n	8008258 <__mdiff+0xf8>
 800823a:	f108 0103 	add.w	r1, r8, #3
 800823e:	1b49      	subs	r1, r1, r5
 8008240:	f021 0103 	bic.w	r1, r1, #3
 8008244:	3d03      	subs	r5, #3
 8008246:	45a8      	cmp	r8, r5
 8008248:	bf38      	it	cc
 800824a:	2100      	movcc	r1, #0
 800824c:	440b      	add	r3, r1
 800824e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008252:	b191      	cbz	r1, 800827a <__mdiff+0x11a>
 8008254:	6117      	str	r7, [r2, #16]
 8008256:	e79d      	b.n	8008194 <__mdiff+0x34>
 8008258:	f854 1b04 	ldr.w	r1, [r4], #4
 800825c:	46e6      	mov	lr, ip
 800825e:	0c08      	lsrs	r0, r1, #16
 8008260:	fa1c fc81 	uxtah	ip, ip, r1
 8008264:	4471      	add	r1, lr
 8008266:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800826a:	b289      	uxth	r1, r1
 800826c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008270:	f846 1b04 	str.w	r1, [r6], #4
 8008274:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008278:	e7dd      	b.n	8008236 <__mdiff+0xd6>
 800827a:	3f01      	subs	r7, #1
 800827c:	e7e7      	b.n	800824e <__mdiff+0xee>
 800827e:	bf00      	nop
 8008280:	0800903c 	.word	0x0800903c
 8008284:	0800904d 	.word	0x0800904d

08008288 <__d2b>:
 8008288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800828c:	460f      	mov	r7, r1
 800828e:	2101      	movs	r1, #1
 8008290:	ec59 8b10 	vmov	r8, r9, d0
 8008294:	4616      	mov	r6, r2
 8008296:	f7ff fccd 	bl	8007c34 <_Balloc>
 800829a:	4604      	mov	r4, r0
 800829c:	b930      	cbnz	r0, 80082ac <__d2b+0x24>
 800829e:	4602      	mov	r2, r0
 80082a0:	4b23      	ldr	r3, [pc, #140]	@ (8008330 <__d2b+0xa8>)
 80082a2:	4824      	ldr	r0, [pc, #144]	@ (8008334 <__d2b+0xac>)
 80082a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80082a8:	f000 fc3a 	bl	8008b20 <__assert_func>
 80082ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082b4:	b10d      	cbz	r5, 80082ba <__d2b+0x32>
 80082b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	f1b8 0300 	subs.w	r3, r8, #0
 80082c0:	d023      	beq.n	800830a <__d2b+0x82>
 80082c2:	4668      	mov	r0, sp
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	f7ff fd7c 	bl	8007dc2 <__lo0bits>
 80082ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082ce:	b1d0      	cbz	r0, 8008306 <__d2b+0x7e>
 80082d0:	f1c0 0320 	rsb	r3, r0, #32
 80082d4:	fa02 f303 	lsl.w	r3, r2, r3
 80082d8:	430b      	orrs	r3, r1
 80082da:	40c2      	lsrs	r2, r0
 80082dc:	6163      	str	r3, [r4, #20]
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	61a3      	str	r3, [r4, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf0c      	ite	eq
 80082e8:	2201      	moveq	r2, #1
 80082ea:	2202      	movne	r2, #2
 80082ec:	6122      	str	r2, [r4, #16]
 80082ee:	b1a5      	cbz	r5, 800831a <__d2b+0x92>
 80082f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082f4:	4405      	add	r5, r0
 80082f6:	603d      	str	r5, [r7, #0]
 80082f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082fc:	6030      	str	r0, [r6, #0]
 80082fe:	4620      	mov	r0, r4
 8008300:	b003      	add	sp, #12
 8008302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008306:	6161      	str	r1, [r4, #20]
 8008308:	e7ea      	b.n	80082e0 <__d2b+0x58>
 800830a:	a801      	add	r0, sp, #4
 800830c:	f7ff fd59 	bl	8007dc2 <__lo0bits>
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	3020      	adds	r0, #32
 8008316:	2201      	movs	r2, #1
 8008318:	e7e8      	b.n	80082ec <__d2b+0x64>
 800831a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800831e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008322:	6038      	str	r0, [r7, #0]
 8008324:	6918      	ldr	r0, [r3, #16]
 8008326:	f7ff fd2d 	bl	8007d84 <__hi0bits>
 800832a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800832e:	e7e5      	b.n	80082fc <__d2b+0x74>
 8008330:	0800903c 	.word	0x0800903c
 8008334:	0800904d 	.word	0x0800904d

08008338 <__ssputs_r>:
 8008338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	688e      	ldr	r6, [r1, #8]
 800833e:	461f      	mov	r7, r3
 8008340:	42be      	cmp	r6, r7
 8008342:	680b      	ldr	r3, [r1, #0]
 8008344:	4682      	mov	sl, r0
 8008346:	460c      	mov	r4, r1
 8008348:	4690      	mov	r8, r2
 800834a:	d82d      	bhi.n	80083a8 <__ssputs_r+0x70>
 800834c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008350:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008354:	d026      	beq.n	80083a4 <__ssputs_r+0x6c>
 8008356:	6965      	ldr	r5, [r4, #20]
 8008358:	6909      	ldr	r1, [r1, #16]
 800835a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800835e:	eba3 0901 	sub.w	r9, r3, r1
 8008362:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008366:	1c7b      	adds	r3, r7, #1
 8008368:	444b      	add	r3, r9
 800836a:	106d      	asrs	r5, r5, #1
 800836c:	429d      	cmp	r5, r3
 800836e:	bf38      	it	cc
 8008370:	461d      	movcc	r5, r3
 8008372:	0553      	lsls	r3, r2, #21
 8008374:	d527      	bpl.n	80083c6 <__ssputs_r+0x8e>
 8008376:	4629      	mov	r1, r5
 8008378:	f7ff fbd0 	bl	8007b1c <_malloc_r>
 800837c:	4606      	mov	r6, r0
 800837e:	b360      	cbz	r0, 80083da <__ssputs_r+0xa2>
 8008380:	6921      	ldr	r1, [r4, #16]
 8008382:	464a      	mov	r2, r9
 8008384:	f7fe fd69 	bl	8006e5a <memcpy>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800838e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	6126      	str	r6, [r4, #16]
 8008396:	6165      	str	r5, [r4, #20]
 8008398:	444e      	add	r6, r9
 800839a:	eba5 0509 	sub.w	r5, r5, r9
 800839e:	6026      	str	r6, [r4, #0]
 80083a0:	60a5      	str	r5, [r4, #8]
 80083a2:	463e      	mov	r6, r7
 80083a4:	42be      	cmp	r6, r7
 80083a6:	d900      	bls.n	80083aa <__ssputs_r+0x72>
 80083a8:	463e      	mov	r6, r7
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	4632      	mov	r2, r6
 80083ae:	4641      	mov	r1, r8
 80083b0:	f000 fb6a 	bl	8008a88 <memmove>
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	1b9b      	subs	r3, r3, r6
 80083b8:	60a3      	str	r3, [r4, #8]
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	4433      	add	r3, r6
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	2000      	movs	r0, #0
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	462a      	mov	r2, r5
 80083c8:	f000 fbee 	bl	8008ba8 <_realloc_r>
 80083cc:	4606      	mov	r6, r0
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d1e0      	bne.n	8008394 <__ssputs_r+0x5c>
 80083d2:	6921      	ldr	r1, [r4, #16]
 80083d4:	4650      	mov	r0, sl
 80083d6:	f7ff fb2d 	bl	8007a34 <_free_r>
 80083da:	230c      	movs	r3, #12
 80083dc:	f8ca 3000 	str.w	r3, [sl]
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	e7e9      	b.n	80083c2 <__ssputs_r+0x8a>
	...

080083f0 <_svfiprintf_r>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	4698      	mov	r8, r3
 80083f6:	898b      	ldrh	r3, [r1, #12]
 80083f8:	061b      	lsls	r3, r3, #24
 80083fa:	b09d      	sub	sp, #116	@ 0x74
 80083fc:	4607      	mov	r7, r0
 80083fe:	460d      	mov	r5, r1
 8008400:	4614      	mov	r4, r2
 8008402:	d510      	bpl.n	8008426 <_svfiprintf_r+0x36>
 8008404:	690b      	ldr	r3, [r1, #16]
 8008406:	b973      	cbnz	r3, 8008426 <_svfiprintf_r+0x36>
 8008408:	2140      	movs	r1, #64	@ 0x40
 800840a:	f7ff fb87 	bl	8007b1c <_malloc_r>
 800840e:	6028      	str	r0, [r5, #0]
 8008410:	6128      	str	r0, [r5, #16]
 8008412:	b930      	cbnz	r0, 8008422 <_svfiprintf_r+0x32>
 8008414:	230c      	movs	r3, #12
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	b01d      	add	sp, #116	@ 0x74
 800841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008422:	2340      	movs	r3, #64	@ 0x40
 8008424:	616b      	str	r3, [r5, #20]
 8008426:	2300      	movs	r3, #0
 8008428:	9309      	str	r3, [sp, #36]	@ 0x24
 800842a:	2320      	movs	r3, #32
 800842c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008430:	f8cd 800c 	str.w	r8, [sp, #12]
 8008434:	2330      	movs	r3, #48	@ 0x30
 8008436:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085d4 <_svfiprintf_r+0x1e4>
 800843a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800843e:	f04f 0901 	mov.w	r9, #1
 8008442:	4623      	mov	r3, r4
 8008444:	469a      	mov	sl, r3
 8008446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844a:	b10a      	cbz	r2, 8008450 <_svfiprintf_r+0x60>
 800844c:	2a25      	cmp	r2, #37	@ 0x25
 800844e:	d1f9      	bne.n	8008444 <_svfiprintf_r+0x54>
 8008450:	ebba 0b04 	subs.w	fp, sl, r4
 8008454:	d00b      	beq.n	800846e <_svfiprintf_r+0x7e>
 8008456:	465b      	mov	r3, fp
 8008458:	4622      	mov	r2, r4
 800845a:	4629      	mov	r1, r5
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ff6b 	bl	8008338 <__ssputs_r>
 8008462:	3001      	adds	r0, #1
 8008464:	f000 80a7 	beq.w	80085b6 <_svfiprintf_r+0x1c6>
 8008468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800846a:	445a      	add	r2, fp
 800846c:	9209      	str	r2, [sp, #36]	@ 0x24
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 809f 	beq.w	80085b6 <_svfiprintf_r+0x1c6>
 8008478:	2300      	movs	r3, #0
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008482:	f10a 0a01 	add.w	sl, sl, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800848e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008490:	4654      	mov	r4, sl
 8008492:	2205      	movs	r2, #5
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	484e      	ldr	r0, [pc, #312]	@ (80085d4 <_svfiprintf_r+0x1e4>)
 800849a:	f7f7 fed1 	bl	8000240 <memchr>
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	b9d8      	cbnz	r0, 80084da <_svfiprintf_r+0xea>
 80084a2:	06d0      	lsls	r0, r2, #27
 80084a4:	bf44      	itt	mi
 80084a6:	2320      	movmi	r3, #32
 80084a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ac:	0711      	lsls	r1, r2, #28
 80084ae:	bf44      	itt	mi
 80084b0:	232b      	movmi	r3, #43	@ 0x2b
 80084b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80084bc:	d015      	beq.n	80084ea <_svfiprintf_r+0xfa>
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	4654      	mov	r4, sl
 80084c2:	2000      	movs	r0, #0
 80084c4:	f04f 0c0a 	mov.w	ip, #10
 80084c8:	4621      	mov	r1, r4
 80084ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ce:	3b30      	subs	r3, #48	@ 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d94b      	bls.n	800856c <_svfiprintf_r+0x17c>
 80084d4:	b1b0      	cbz	r0, 8008504 <_svfiprintf_r+0x114>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e014      	b.n	8008504 <_svfiprintf_r+0x114>
 80084da:	eba0 0308 	sub.w	r3, r0, r8
 80084de:	fa09 f303 	lsl.w	r3, r9, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	46a2      	mov	sl, r4
 80084e8:	e7d2      	b.n	8008490 <_svfiprintf_r+0xa0>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	9103      	str	r1, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfbb      	ittet	lt
 80084f6:	425b      	neglt	r3, r3
 80084f8:	f042 0202 	orrlt.w	r2, r2, #2
 80084fc:	9307      	strge	r3, [sp, #28]
 80084fe:	9307      	strlt	r3, [sp, #28]
 8008500:	bfb8      	it	lt
 8008502:	9204      	strlt	r2, [sp, #16]
 8008504:	7823      	ldrb	r3, [r4, #0]
 8008506:	2b2e      	cmp	r3, #46	@ 0x2e
 8008508:	d10a      	bne.n	8008520 <_svfiprintf_r+0x130>
 800850a:	7863      	ldrb	r3, [r4, #1]
 800850c:	2b2a      	cmp	r3, #42	@ 0x2a
 800850e:	d132      	bne.n	8008576 <_svfiprintf_r+0x186>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	9203      	str	r2, [sp, #12]
 8008518:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800851c:	3402      	adds	r4, #2
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085e4 <_svfiprintf_r+0x1f4>
 8008524:	7821      	ldrb	r1, [r4, #0]
 8008526:	2203      	movs	r2, #3
 8008528:	4650      	mov	r0, sl
 800852a:	f7f7 fe89 	bl	8000240 <memchr>
 800852e:	b138      	cbz	r0, 8008540 <_svfiprintf_r+0x150>
 8008530:	9b04      	ldr	r3, [sp, #16]
 8008532:	eba0 000a 	sub.w	r0, r0, sl
 8008536:	2240      	movs	r2, #64	@ 0x40
 8008538:	4082      	lsls	r2, r0
 800853a:	4313      	orrs	r3, r2
 800853c:	3401      	adds	r4, #1
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008544:	4824      	ldr	r0, [pc, #144]	@ (80085d8 <_svfiprintf_r+0x1e8>)
 8008546:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800854a:	2206      	movs	r2, #6
 800854c:	f7f7 fe78 	bl	8000240 <memchr>
 8008550:	2800      	cmp	r0, #0
 8008552:	d036      	beq.n	80085c2 <_svfiprintf_r+0x1d2>
 8008554:	4b21      	ldr	r3, [pc, #132]	@ (80085dc <_svfiprintf_r+0x1ec>)
 8008556:	bb1b      	cbnz	r3, 80085a0 <_svfiprintf_r+0x1b0>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	3307      	adds	r3, #7
 800855c:	f023 0307 	bic.w	r3, r3, #7
 8008560:	3308      	adds	r3, #8
 8008562:	9303      	str	r3, [sp, #12]
 8008564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008566:	4433      	add	r3, r6
 8008568:	9309      	str	r3, [sp, #36]	@ 0x24
 800856a:	e76a      	b.n	8008442 <_svfiprintf_r+0x52>
 800856c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008570:	460c      	mov	r4, r1
 8008572:	2001      	movs	r0, #1
 8008574:	e7a8      	b.n	80084c8 <_svfiprintf_r+0xd8>
 8008576:	2300      	movs	r3, #0
 8008578:	3401      	adds	r4, #1
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	4619      	mov	r1, r3
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008588:	3a30      	subs	r2, #48	@ 0x30
 800858a:	2a09      	cmp	r2, #9
 800858c:	d903      	bls.n	8008596 <_svfiprintf_r+0x1a6>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0c6      	beq.n	8008520 <_svfiprintf_r+0x130>
 8008592:	9105      	str	r1, [sp, #20]
 8008594:	e7c4      	b.n	8008520 <_svfiprintf_r+0x130>
 8008596:	fb0c 2101 	mla	r1, ip, r1, r2
 800859a:	4604      	mov	r4, r0
 800859c:	2301      	movs	r3, #1
 800859e:	e7f0      	b.n	8008582 <_svfiprintf_r+0x192>
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	462a      	mov	r2, r5
 80085a6:	4b0e      	ldr	r3, [pc, #56]	@ (80085e0 <_svfiprintf_r+0x1f0>)
 80085a8:	a904      	add	r1, sp, #16
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7fd fdf0 	bl	8006190 <_printf_float>
 80085b0:	1c42      	adds	r2, r0, #1
 80085b2:	4606      	mov	r6, r0
 80085b4:	d1d6      	bne.n	8008564 <_svfiprintf_r+0x174>
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	065b      	lsls	r3, r3, #25
 80085ba:	f53f af2d 	bmi.w	8008418 <_svfiprintf_r+0x28>
 80085be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085c0:	e72c      	b.n	800841c <_svfiprintf_r+0x2c>
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	462a      	mov	r2, r5
 80085c8:	4b05      	ldr	r3, [pc, #20]	@ (80085e0 <_svfiprintf_r+0x1f0>)
 80085ca:	a904      	add	r1, sp, #16
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7fe f867 	bl	80066a0 <_printf_i>
 80085d2:	e7ed      	b.n	80085b0 <_svfiprintf_r+0x1c0>
 80085d4:	080091a8 	.word	0x080091a8
 80085d8:	080091b2 	.word	0x080091b2
 80085dc:	08006191 	.word	0x08006191
 80085e0:	08008339 	.word	0x08008339
 80085e4:	080091ae 	.word	0x080091ae

080085e8 <__sfputc_r>:
 80085e8:	6893      	ldr	r3, [r2, #8]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	b410      	push	{r4}
 80085f0:	6093      	str	r3, [r2, #8]
 80085f2:	da08      	bge.n	8008606 <__sfputc_r+0x1e>
 80085f4:	6994      	ldr	r4, [r2, #24]
 80085f6:	42a3      	cmp	r3, r4
 80085f8:	db01      	blt.n	80085fe <__sfputc_r+0x16>
 80085fa:	290a      	cmp	r1, #10
 80085fc:	d103      	bne.n	8008606 <__sfputc_r+0x1e>
 80085fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008602:	f7fe bb16 	b.w	8006c32 <__swbuf_r>
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	1c58      	adds	r0, r3, #1
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	7019      	strb	r1, [r3, #0]
 800860e:	4608      	mov	r0, r1
 8008610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008614:	4770      	bx	lr

08008616 <__sfputs_r>:
 8008616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008618:	4606      	mov	r6, r0
 800861a:	460f      	mov	r7, r1
 800861c:	4614      	mov	r4, r2
 800861e:	18d5      	adds	r5, r2, r3
 8008620:	42ac      	cmp	r4, r5
 8008622:	d101      	bne.n	8008628 <__sfputs_r+0x12>
 8008624:	2000      	movs	r0, #0
 8008626:	e007      	b.n	8008638 <__sfputs_r+0x22>
 8008628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862c:	463a      	mov	r2, r7
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ffda 	bl	80085e8 <__sfputc_r>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d1f3      	bne.n	8008620 <__sfputs_r+0xa>
 8008638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800863c <_vfiprintf_r>:
 800863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	460d      	mov	r5, r1
 8008642:	b09d      	sub	sp, #116	@ 0x74
 8008644:	4614      	mov	r4, r2
 8008646:	4698      	mov	r8, r3
 8008648:	4606      	mov	r6, r0
 800864a:	b118      	cbz	r0, 8008654 <_vfiprintf_r+0x18>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <_vfiprintf_r+0x18>
 8008650:	f7fe f9d2 	bl	80069f8 <__sinit>
 8008654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008656:	07d9      	lsls	r1, r3, #31
 8008658:	d405      	bmi.n	8008666 <_vfiprintf_r+0x2a>
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	059a      	lsls	r2, r3, #22
 800865e:	d402      	bmi.n	8008666 <_vfiprintf_r+0x2a>
 8008660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008662:	f7fe fbf8 	bl	8006e56 <__retarget_lock_acquire_recursive>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	071b      	lsls	r3, r3, #28
 800866a:	d501      	bpl.n	8008670 <_vfiprintf_r+0x34>
 800866c:	692b      	ldr	r3, [r5, #16]
 800866e:	b99b      	cbnz	r3, 8008698 <_vfiprintf_r+0x5c>
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f7fe fb1c 	bl	8006cb0 <__swsetup_r>
 8008678:	b170      	cbz	r0, 8008698 <_vfiprintf_r+0x5c>
 800867a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800867c:	07dc      	lsls	r4, r3, #31
 800867e:	d504      	bpl.n	800868a <_vfiprintf_r+0x4e>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	b01d      	add	sp, #116	@ 0x74
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	0598      	lsls	r0, r3, #22
 800868e:	d4f7      	bmi.n	8008680 <_vfiprintf_r+0x44>
 8008690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008692:	f7fe fbe1 	bl	8006e58 <__retarget_lock_release_recursive>
 8008696:	e7f3      	b.n	8008680 <_vfiprintf_r+0x44>
 8008698:	2300      	movs	r3, #0
 800869a:	9309      	str	r3, [sp, #36]	@ 0x24
 800869c:	2320      	movs	r3, #32
 800869e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a6:	2330      	movs	r3, #48	@ 0x30
 80086a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008858 <_vfiprintf_r+0x21c>
 80086ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086b0:	f04f 0901 	mov.w	r9, #1
 80086b4:	4623      	mov	r3, r4
 80086b6:	469a      	mov	sl, r3
 80086b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086bc:	b10a      	cbz	r2, 80086c2 <_vfiprintf_r+0x86>
 80086be:	2a25      	cmp	r2, #37	@ 0x25
 80086c0:	d1f9      	bne.n	80086b6 <_vfiprintf_r+0x7a>
 80086c2:	ebba 0b04 	subs.w	fp, sl, r4
 80086c6:	d00b      	beq.n	80086e0 <_vfiprintf_r+0xa4>
 80086c8:	465b      	mov	r3, fp
 80086ca:	4622      	mov	r2, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff ffa1 	bl	8008616 <__sfputs_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f000 80a7 	beq.w	8008828 <_vfiprintf_r+0x1ec>
 80086da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086dc:	445a      	add	r2, fp
 80086de:	9209      	str	r2, [sp, #36]	@ 0x24
 80086e0:	f89a 3000 	ldrb.w	r3, [sl]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 809f 	beq.w	8008828 <_vfiprintf_r+0x1ec>
 80086ea:	2300      	movs	r3, #0
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295
 80086f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f4:	f10a 0a01 	add.w	sl, sl, #1
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008700:	931a      	str	r3, [sp, #104]	@ 0x68
 8008702:	4654      	mov	r4, sl
 8008704:	2205      	movs	r2, #5
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	4853      	ldr	r0, [pc, #332]	@ (8008858 <_vfiprintf_r+0x21c>)
 800870c:	f7f7 fd98 	bl	8000240 <memchr>
 8008710:	9a04      	ldr	r2, [sp, #16]
 8008712:	b9d8      	cbnz	r0, 800874c <_vfiprintf_r+0x110>
 8008714:	06d1      	lsls	r1, r2, #27
 8008716:	bf44      	itt	mi
 8008718:	2320      	movmi	r3, #32
 800871a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800871e:	0713      	lsls	r3, r2, #28
 8008720:	bf44      	itt	mi
 8008722:	232b      	movmi	r3, #43	@ 0x2b
 8008724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008728:	f89a 3000 	ldrb.w	r3, [sl]
 800872c:	2b2a      	cmp	r3, #42	@ 0x2a
 800872e:	d015      	beq.n	800875c <_vfiprintf_r+0x120>
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	4654      	mov	r4, sl
 8008734:	2000      	movs	r0, #0
 8008736:	f04f 0c0a 	mov.w	ip, #10
 800873a:	4621      	mov	r1, r4
 800873c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008740:	3b30      	subs	r3, #48	@ 0x30
 8008742:	2b09      	cmp	r3, #9
 8008744:	d94b      	bls.n	80087de <_vfiprintf_r+0x1a2>
 8008746:	b1b0      	cbz	r0, 8008776 <_vfiprintf_r+0x13a>
 8008748:	9207      	str	r2, [sp, #28]
 800874a:	e014      	b.n	8008776 <_vfiprintf_r+0x13a>
 800874c:	eba0 0308 	sub.w	r3, r0, r8
 8008750:	fa09 f303 	lsl.w	r3, r9, r3
 8008754:	4313      	orrs	r3, r2
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	46a2      	mov	sl, r4
 800875a:	e7d2      	b.n	8008702 <_vfiprintf_r+0xc6>
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	1d19      	adds	r1, r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	9103      	str	r1, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfbb      	ittet	lt
 8008768:	425b      	neglt	r3, r3
 800876a:	f042 0202 	orrlt.w	r2, r2, #2
 800876e:	9307      	strge	r3, [sp, #28]
 8008770:	9307      	strlt	r3, [sp, #28]
 8008772:	bfb8      	it	lt
 8008774:	9204      	strlt	r2, [sp, #16]
 8008776:	7823      	ldrb	r3, [r4, #0]
 8008778:	2b2e      	cmp	r3, #46	@ 0x2e
 800877a:	d10a      	bne.n	8008792 <_vfiprintf_r+0x156>
 800877c:	7863      	ldrb	r3, [r4, #1]
 800877e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008780:	d132      	bne.n	80087e8 <_vfiprintf_r+0x1ac>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9203      	str	r2, [sp, #12]
 800878a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800878e:	3402      	adds	r4, #2
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008868 <_vfiprintf_r+0x22c>
 8008796:	7821      	ldrb	r1, [r4, #0]
 8008798:	2203      	movs	r2, #3
 800879a:	4650      	mov	r0, sl
 800879c:	f7f7 fd50 	bl	8000240 <memchr>
 80087a0:	b138      	cbz	r0, 80087b2 <_vfiprintf_r+0x176>
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	eba0 000a 	sub.w	r0, r0, sl
 80087a8:	2240      	movs	r2, #64	@ 0x40
 80087aa:	4082      	lsls	r2, r0
 80087ac:	4313      	orrs	r3, r2
 80087ae:	3401      	adds	r4, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b6:	4829      	ldr	r0, [pc, #164]	@ (800885c <_vfiprintf_r+0x220>)
 80087b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087bc:	2206      	movs	r2, #6
 80087be:	f7f7 fd3f 	bl	8000240 <memchr>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d03f      	beq.n	8008846 <_vfiprintf_r+0x20a>
 80087c6:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <_vfiprintf_r+0x224>)
 80087c8:	bb1b      	cbnz	r3, 8008812 <_vfiprintf_r+0x1d6>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	3307      	adds	r3, #7
 80087ce:	f023 0307 	bic.w	r3, r3, #7
 80087d2:	3308      	adds	r3, #8
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d8:	443b      	add	r3, r7
 80087da:	9309      	str	r3, [sp, #36]	@ 0x24
 80087dc:	e76a      	b.n	80086b4 <_vfiprintf_r+0x78>
 80087de:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e2:	460c      	mov	r4, r1
 80087e4:	2001      	movs	r0, #1
 80087e6:	e7a8      	b.n	800873a <_vfiprintf_r+0xfe>
 80087e8:	2300      	movs	r3, #0
 80087ea:	3401      	adds	r4, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	4619      	mov	r1, r3
 80087f0:	f04f 0c0a 	mov.w	ip, #10
 80087f4:	4620      	mov	r0, r4
 80087f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fa:	3a30      	subs	r2, #48	@ 0x30
 80087fc:	2a09      	cmp	r2, #9
 80087fe:	d903      	bls.n	8008808 <_vfiprintf_r+0x1cc>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c6      	beq.n	8008792 <_vfiprintf_r+0x156>
 8008804:	9105      	str	r1, [sp, #20]
 8008806:	e7c4      	b.n	8008792 <_vfiprintf_r+0x156>
 8008808:	fb0c 2101 	mla	r1, ip, r1, r2
 800880c:	4604      	mov	r4, r0
 800880e:	2301      	movs	r3, #1
 8008810:	e7f0      	b.n	80087f4 <_vfiprintf_r+0x1b8>
 8008812:	ab03      	add	r3, sp, #12
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	462a      	mov	r2, r5
 8008818:	4b12      	ldr	r3, [pc, #72]	@ (8008864 <_vfiprintf_r+0x228>)
 800881a:	a904      	add	r1, sp, #16
 800881c:	4630      	mov	r0, r6
 800881e:	f7fd fcb7 	bl	8006190 <_printf_float>
 8008822:	4607      	mov	r7, r0
 8008824:	1c78      	adds	r0, r7, #1
 8008826:	d1d6      	bne.n	80087d6 <_vfiprintf_r+0x19a>
 8008828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d405      	bmi.n	800883a <_vfiprintf_r+0x1fe>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	059a      	lsls	r2, r3, #22
 8008832:	d402      	bmi.n	800883a <_vfiprintf_r+0x1fe>
 8008834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008836:	f7fe fb0f 	bl	8006e58 <__retarget_lock_release_recursive>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	065b      	lsls	r3, r3, #25
 800883e:	f53f af1f 	bmi.w	8008680 <_vfiprintf_r+0x44>
 8008842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008844:	e71e      	b.n	8008684 <_vfiprintf_r+0x48>
 8008846:	ab03      	add	r3, sp, #12
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	462a      	mov	r2, r5
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <_vfiprintf_r+0x228>)
 800884e:	a904      	add	r1, sp, #16
 8008850:	4630      	mov	r0, r6
 8008852:	f7fd ff25 	bl	80066a0 <_printf_i>
 8008856:	e7e4      	b.n	8008822 <_vfiprintf_r+0x1e6>
 8008858:	080091a8 	.word	0x080091a8
 800885c:	080091b2 	.word	0x080091b2
 8008860:	08006191 	.word	0x08006191
 8008864:	08008617 	.word	0x08008617
 8008868:	080091ae 	.word	0x080091ae

0800886c <__sflush_r>:
 800886c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	0716      	lsls	r6, r2, #28
 8008876:	4605      	mov	r5, r0
 8008878:	460c      	mov	r4, r1
 800887a:	d454      	bmi.n	8008926 <__sflush_r+0xba>
 800887c:	684b      	ldr	r3, [r1, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dc02      	bgt.n	8008888 <__sflush_r+0x1c>
 8008882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd48      	ble.n	800891a <__sflush_r+0xae>
 8008888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800888a:	2e00      	cmp	r6, #0
 800888c:	d045      	beq.n	800891a <__sflush_r+0xae>
 800888e:	2300      	movs	r3, #0
 8008890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008894:	682f      	ldr	r7, [r5, #0]
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	d030      	beq.n	80088fe <__sflush_r+0x92>
 800889c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	0759      	lsls	r1, r3, #29
 80088a2:	d505      	bpl.n	80088b0 <__sflush_r+0x44>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088aa:	b10b      	cbz	r3, 80088b0 <__sflush_r+0x44>
 80088ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ae:	1ad2      	subs	r2, r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b4:	6a21      	ldr	r1, [r4, #32]
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b0      	blx	r6
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	d106      	bne.n	80088ce <__sflush_r+0x62>
 80088c0:	6829      	ldr	r1, [r5, #0]
 80088c2:	291d      	cmp	r1, #29
 80088c4:	d82b      	bhi.n	800891e <__sflush_r+0xb2>
 80088c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008970 <__sflush_r+0x104>)
 80088c8:	410a      	asrs	r2, r1
 80088ca:	07d6      	lsls	r6, r2, #31
 80088cc:	d427      	bmi.n	800891e <__sflush_r+0xb2>
 80088ce:	2200      	movs	r2, #0
 80088d0:	6062      	str	r2, [r4, #4]
 80088d2:	04d9      	lsls	r1, r3, #19
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	d504      	bpl.n	80088e4 <__sflush_r+0x78>
 80088da:	1c42      	adds	r2, r0, #1
 80088dc:	d101      	bne.n	80088e2 <__sflush_r+0x76>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	b903      	cbnz	r3, 80088e4 <__sflush_r+0x78>
 80088e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80088e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e6:	602f      	str	r7, [r5, #0]
 80088e8:	b1b9      	cbz	r1, 800891a <__sflush_r+0xae>
 80088ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d002      	beq.n	80088f8 <__sflush_r+0x8c>
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7ff f89e 	bl	8007a34 <_free_r>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088fc:	e00d      	b.n	800891a <__sflush_r+0xae>
 80088fe:	2301      	movs	r3, #1
 8008900:	4628      	mov	r0, r5
 8008902:	47b0      	blx	r6
 8008904:	4602      	mov	r2, r0
 8008906:	1c50      	adds	r0, r2, #1
 8008908:	d1c9      	bne.n	800889e <__sflush_r+0x32>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0c6      	beq.n	800889e <__sflush_r+0x32>
 8008910:	2b1d      	cmp	r3, #29
 8008912:	d001      	beq.n	8008918 <__sflush_r+0xac>
 8008914:	2b16      	cmp	r3, #22
 8008916:	d11e      	bne.n	8008956 <__sflush_r+0xea>
 8008918:	602f      	str	r7, [r5, #0]
 800891a:	2000      	movs	r0, #0
 800891c:	e022      	b.n	8008964 <__sflush_r+0xf8>
 800891e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008922:	b21b      	sxth	r3, r3
 8008924:	e01b      	b.n	800895e <__sflush_r+0xf2>
 8008926:	690f      	ldr	r7, [r1, #16]
 8008928:	2f00      	cmp	r7, #0
 800892a:	d0f6      	beq.n	800891a <__sflush_r+0xae>
 800892c:	0793      	lsls	r3, r2, #30
 800892e:	680e      	ldr	r6, [r1, #0]
 8008930:	bf08      	it	eq
 8008932:	694b      	ldreq	r3, [r1, #20]
 8008934:	600f      	str	r7, [r1, #0]
 8008936:	bf18      	it	ne
 8008938:	2300      	movne	r3, #0
 800893a:	eba6 0807 	sub.w	r8, r6, r7
 800893e:	608b      	str	r3, [r1, #8]
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	dde9      	ble.n	800891a <__sflush_r+0xae>
 8008946:	6a21      	ldr	r1, [r4, #32]
 8008948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800894a:	4643      	mov	r3, r8
 800894c:	463a      	mov	r2, r7
 800894e:	4628      	mov	r0, r5
 8008950:	47b0      	blx	r6
 8008952:	2800      	cmp	r0, #0
 8008954:	dc08      	bgt.n	8008968 <__sflush_r+0xfc>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	4407      	add	r7, r0
 800896a:	eba8 0800 	sub.w	r8, r8, r0
 800896e:	e7e7      	b.n	8008940 <__sflush_r+0xd4>
 8008970:	dfbffffe 	.word	0xdfbffffe

08008974 <_fflush_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	690b      	ldr	r3, [r1, #16]
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b913      	cbnz	r3, 8008984 <_fflush_r+0x10>
 800897e:	2500      	movs	r5, #0
 8008980:	4628      	mov	r0, r5
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	b118      	cbz	r0, 800898e <_fflush_r+0x1a>
 8008986:	6a03      	ldr	r3, [r0, #32]
 8008988:	b90b      	cbnz	r3, 800898e <_fflush_r+0x1a>
 800898a:	f7fe f835 	bl	80069f8 <__sinit>
 800898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f3      	beq.n	800897e <_fflush_r+0xa>
 8008996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d404      	bmi.n	80089a6 <_fflush_r+0x32>
 800899c:	0599      	lsls	r1, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_fflush_r+0x32>
 80089a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a2:	f7fe fa58 	bl	8006e56 <__retarget_lock_acquire_recursive>
 80089a6:	4628      	mov	r0, r5
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7ff ff5f 	bl	800886c <__sflush_r>
 80089ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089b0:	07da      	lsls	r2, r3, #31
 80089b2:	4605      	mov	r5, r0
 80089b4:	d4e4      	bmi.n	8008980 <_fflush_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	d4e1      	bmi.n	8008980 <_fflush_r+0xc>
 80089bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089be:	f7fe fa4b 	bl	8006e58 <__retarget_lock_release_recursive>
 80089c2:	e7dd      	b.n	8008980 <_fflush_r+0xc>

080089c4 <__swhatbuf_r>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	460c      	mov	r4, r1
 80089c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	b096      	sub	sp, #88	@ 0x58
 80089d0:	4615      	mov	r5, r2
 80089d2:	461e      	mov	r6, r3
 80089d4:	da0d      	bge.n	80089f2 <__swhatbuf_r+0x2e>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089dc:	f04f 0100 	mov.w	r1, #0
 80089e0:	bf14      	ite	ne
 80089e2:	2340      	movne	r3, #64	@ 0x40
 80089e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e8:	2000      	movs	r0, #0
 80089ea:	6031      	str	r1, [r6, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	b016      	add	sp, #88	@ 0x58
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	466a      	mov	r2, sp
 80089f4:	f000 f862 	bl	8008abc <_fstat_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dbec      	blt.n	80089d6 <__swhatbuf_r+0x12>
 80089fc:	9901      	ldr	r1, [sp, #4]
 80089fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a06:	4259      	negs	r1, r3
 8008a08:	4159      	adcs	r1, r3
 8008a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0e:	e7eb      	b.n	80089e8 <__swhatbuf_r+0x24>

08008a10 <__smakebuf_r>:
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a14:	079d      	lsls	r5, r3, #30
 8008a16:	4606      	mov	r6, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	d507      	bpl.n	8008a2c <__smakebuf_r+0x1c>
 8008a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	2301      	movs	r3, #1
 8008a26:	6163      	str	r3, [r4, #20]
 8008a28:	b003      	add	sp, #12
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2c:	ab01      	add	r3, sp, #4
 8008a2e:	466a      	mov	r2, sp
 8008a30:	f7ff ffc8 	bl	80089c4 <__swhatbuf_r>
 8008a34:	9f00      	ldr	r7, [sp, #0]
 8008a36:	4605      	mov	r5, r0
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7ff f86e 	bl	8007b1c <_malloc_r>
 8008a40:	b948      	cbnz	r0, 8008a56 <__smakebuf_r+0x46>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	059a      	lsls	r2, r3, #22
 8008a48:	d4ee      	bmi.n	8008a28 <__smakebuf_r+0x18>
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	f043 0302 	orr.w	r3, r3, #2
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	e7e2      	b.n	8008a1c <__smakebuf_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	6020      	str	r0, [r4, #0]
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a66:	b15b      	cbz	r3, 8008a80 <__smakebuf_r+0x70>
 8008a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f837 	bl	8008ae0 <_isatty_r>
 8008a72:	b128      	cbz	r0, 8008a80 <__smakebuf_r+0x70>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	431d      	orrs	r5, r3
 8008a84:	81a5      	strh	r5, [r4, #12]
 8008a86:	e7cf      	b.n	8008a28 <__smakebuf_r+0x18>

08008a88 <memmove>:
 8008a88:	4288      	cmp	r0, r1
 8008a8a:	b510      	push	{r4, lr}
 8008a8c:	eb01 0402 	add.w	r4, r1, r2
 8008a90:	d902      	bls.n	8008a98 <memmove+0x10>
 8008a92:	4284      	cmp	r4, r0
 8008a94:	4623      	mov	r3, r4
 8008a96:	d807      	bhi.n	8008aa8 <memmove+0x20>
 8008a98:	1e43      	subs	r3, r0, #1
 8008a9a:	42a1      	cmp	r1, r4
 8008a9c:	d008      	beq.n	8008ab0 <memmove+0x28>
 8008a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aa6:	e7f8      	b.n	8008a9a <memmove+0x12>
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4601      	mov	r1, r0
 8008aac:	428a      	cmp	r2, r1
 8008aae:	d100      	bne.n	8008ab2 <memmove+0x2a>
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aba:	e7f7      	b.n	8008aac <memmove+0x24>

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_fstat_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f8 ffcb 	bl	8001a64 <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	20000ca0 	.word	0x20000ca0

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	@ (8008afc <_isatty_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f8 ffca 	bl	8001a84 <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000ca0 	.word	0x20000ca0

08008b00 <_sbrk_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d06      	ldr	r5, [pc, #24]	@ (8008b1c <_sbrk_r+0x1c>)
 8008b04:	2300      	movs	r3, #0
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f8 ffd2 	bl	8001ab4 <_sbrk>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_sbrk_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_sbrk_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20000ca0 	.word	0x20000ca0

08008b20 <__assert_func>:
 8008b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b22:	4614      	mov	r4, r2
 8008b24:	461a      	mov	r2, r3
 8008b26:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <__assert_func+0x2c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	68d8      	ldr	r0, [r3, #12]
 8008b2e:	b954      	cbnz	r4, 8008b46 <__assert_func+0x26>
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <__assert_func+0x30>)
 8008b32:	461c      	mov	r4, r3
 8008b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b38:	9100      	str	r1, [sp, #0]
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	4905      	ldr	r1, [pc, #20]	@ (8008b54 <__assert_func+0x34>)
 8008b3e:	f000 f86f 	bl	8008c20 <fiprintf>
 8008b42:	f000 f87f 	bl	8008c44 <abort>
 8008b46:	4b04      	ldr	r3, [pc, #16]	@ (8008b58 <__assert_func+0x38>)
 8008b48:	e7f4      	b.n	8008b34 <__assert_func+0x14>
 8008b4a:	bf00      	nop
 8008b4c:	20000024 	.word	0x20000024
 8008b50:	080091fe 	.word	0x080091fe
 8008b54:	080091d0 	.word	0x080091d0
 8008b58:	080091c3 	.word	0x080091c3

08008b5c <_calloc_r>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8008b62:	b93c      	cbnz	r4, 8008b74 <_calloc_r+0x18>
 8008b64:	4629      	mov	r1, r5
 8008b66:	f7fe ffd9 	bl	8007b1c <_malloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <_calloc_r+0x1e>
 8008b6e:	2600      	movs	r6, #0
 8008b70:	4630      	mov	r0, r6
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	220c      	movs	r2, #12
 8008b76:	6002      	str	r2, [r0, #0]
 8008b78:	e7f9      	b.n	8008b6e <_calloc_r+0x12>
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	f7fe f8ed 	bl	8006d5c <memset>
 8008b82:	e7f5      	b.n	8008b70 <_calloc_r+0x14>

08008b84 <__ascii_mbtowc>:
 8008b84:	b082      	sub	sp, #8
 8008b86:	b901      	cbnz	r1, 8008b8a <__ascii_mbtowc+0x6>
 8008b88:	a901      	add	r1, sp, #4
 8008b8a:	b142      	cbz	r2, 8008b9e <__ascii_mbtowc+0x1a>
 8008b8c:	b14b      	cbz	r3, 8008ba2 <__ascii_mbtowc+0x1e>
 8008b8e:	7813      	ldrb	r3, [r2, #0]
 8008b90:	600b      	str	r3, [r1, #0]
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	1e10      	subs	r0, r2, #0
 8008b96:	bf18      	it	ne
 8008b98:	2001      	movne	r0, #1
 8008b9a:	b002      	add	sp, #8
 8008b9c:	4770      	bx	lr
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	e7fb      	b.n	8008b9a <__ascii_mbtowc+0x16>
 8008ba2:	f06f 0001 	mvn.w	r0, #1
 8008ba6:	e7f8      	b.n	8008b9a <__ascii_mbtowc+0x16>

08008ba8 <_realloc_r>:
 8008ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bac:	4680      	mov	r8, r0
 8008bae:	4615      	mov	r5, r2
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	b921      	cbnz	r1, 8008bbe <_realloc_r+0x16>
 8008bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	4611      	mov	r1, r2
 8008bba:	f7fe bfaf 	b.w	8007b1c <_malloc_r>
 8008bbe:	b92a      	cbnz	r2, 8008bcc <_realloc_r+0x24>
 8008bc0:	f7fe ff38 	bl	8007a34 <_free_r>
 8008bc4:	2400      	movs	r4, #0
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bcc:	f000 f841 	bl	8008c52 <_malloc_usable_size_r>
 8008bd0:	4285      	cmp	r5, r0
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	d802      	bhi.n	8008bdc <_realloc_r+0x34>
 8008bd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bda:	d8f4      	bhi.n	8008bc6 <_realloc_r+0x1e>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7fe ff9c 	bl	8007b1c <_malloc_r>
 8008be4:	4607      	mov	r7, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d0ec      	beq.n	8008bc4 <_realloc_r+0x1c>
 8008bea:	42b5      	cmp	r5, r6
 8008bec:	462a      	mov	r2, r5
 8008bee:	4621      	mov	r1, r4
 8008bf0:	bf28      	it	cs
 8008bf2:	4632      	movcs	r2, r6
 8008bf4:	f7fe f931 	bl	8006e5a <memcpy>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	f7fe ff1a 	bl	8007a34 <_free_r>
 8008c00:	463c      	mov	r4, r7
 8008c02:	e7e0      	b.n	8008bc6 <_realloc_r+0x1e>

08008c04 <__ascii_wctomb>:
 8008c04:	4603      	mov	r3, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	b141      	cbz	r1, 8008c1c <__ascii_wctomb+0x18>
 8008c0a:	2aff      	cmp	r2, #255	@ 0xff
 8008c0c:	d904      	bls.n	8008c18 <__ascii_wctomb+0x14>
 8008c0e:	228a      	movs	r2, #138	@ 0x8a
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	f04f 30ff 	mov.w	r0, #4294967295
 8008c16:	4770      	bx	lr
 8008c18:	700a      	strb	r2, [r1, #0]
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	4770      	bx	lr
	...

08008c20 <fiprintf>:
 8008c20:	b40e      	push	{r1, r2, r3}
 8008c22:	b503      	push	{r0, r1, lr}
 8008c24:	4601      	mov	r1, r0
 8008c26:	ab03      	add	r3, sp, #12
 8008c28:	4805      	ldr	r0, [pc, #20]	@ (8008c40 <fiprintf+0x20>)
 8008c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	f7ff fd03 	bl	800863c <_vfiprintf_r>
 8008c36:	b002      	add	sp, #8
 8008c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c3c:	b003      	add	sp, #12
 8008c3e:	4770      	bx	lr
 8008c40:	20000024 	.word	0x20000024

08008c44 <abort>:
 8008c44:	b508      	push	{r3, lr}
 8008c46:	2006      	movs	r0, #6
 8008c48:	f000 f834 	bl	8008cb4 <raise>
 8008c4c:	2001      	movs	r0, #1
 8008c4e:	f7f8 fed5 	bl	80019fc <_exit>

08008c52 <_malloc_usable_size_r>:
 8008c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c56:	1f18      	subs	r0, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfbc      	itt	lt
 8008c5c:	580b      	ldrlt	r3, [r1, r0]
 8008c5e:	18c0      	addlt	r0, r0, r3
 8008c60:	4770      	bx	lr

08008c62 <_raise_r>:
 8008c62:	291f      	cmp	r1, #31
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4605      	mov	r5, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	d904      	bls.n	8008c76 <_raise_r+0x14>
 8008c6c:	2316      	movs	r3, #22
 8008c6e:	6003      	str	r3, [r0, #0]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	bd38      	pop	{r3, r4, r5, pc}
 8008c76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c78:	b112      	cbz	r2, 8008c80 <_raise_r+0x1e>
 8008c7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c7e:	b94b      	cbnz	r3, 8008c94 <_raise_r+0x32>
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 f831 	bl	8008ce8 <_getpid_r>
 8008c86:	4622      	mov	r2, r4
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b818 	b.w	8008cc4 <_kill_r>
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d00a      	beq.n	8008cae <_raise_r+0x4c>
 8008c98:	1c59      	adds	r1, r3, #1
 8008c9a:	d103      	bne.n	8008ca4 <_raise_r+0x42>
 8008c9c:	2316      	movs	r3, #22
 8008c9e:	6003      	str	r3, [r0, #0]
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	e7e7      	b.n	8008c74 <_raise_r+0x12>
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008caa:	4620      	mov	r0, r4
 8008cac:	4798      	blx	r3
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e7e0      	b.n	8008c74 <_raise_r+0x12>
	...

08008cb4 <raise>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <raise+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f7ff bfd2 	b.w	8008c62 <_raise_r>
 8008cbe:	bf00      	nop
 8008cc0:	20000024 	.word	0x20000024

08008cc4 <_kill_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	@ (8008ce4 <_kill_r+0x20>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	4611      	mov	r1, r2
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	f7f8 fe83 	bl	80019dc <_kill>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	d102      	bne.n	8008ce0 <_kill_r+0x1c>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	b103      	cbz	r3, 8008ce0 <_kill_r+0x1c>
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000ca0 	.word	0x20000ca0

08008ce8 <_getpid_r>:
 8008ce8:	f7f8 be70 	b.w	80019cc <_getpid>

08008cec <_init>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	bf00      	nop
 8008cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf2:	bc08      	pop	{r3}
 8008cf4:	469e      	mov	lr, r3
 8008cf6:	4770      	bx	lr

08008cf8 <_fini>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	bf00      	nop
 8008cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfe:	bc08      	pop	{r3}
 8008d00:	469e      	mov	lr, r3
 8008d02:	4770      	bx	lr
