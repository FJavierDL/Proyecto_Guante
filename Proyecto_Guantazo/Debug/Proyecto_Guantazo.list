
Proyecto_Guantazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08007120  08007120  00008120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b0  080076b0  00009320  2**0
                  CONTENTS
  4 .ARM          00000008  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b8  080076b8  00009320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076bc  080076bc  000086bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080076c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  080078a0  000091e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08007940  00009280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000378  20000320  080079e0  00009320  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  20000698  080079e0  00009698  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00009320  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f26c  00000000  00000000  0000934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002673  00000000  00000000  000185ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  0001ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d70  00000000  00000000  0001be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c591  00000000  00000000  0001cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000107e7  00000000  00000000  00049109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109439  00000000  00000000  000598f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162d29  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059b8  00000000  00000000  00162d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00168724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	08007104 	.word	0x08007104

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	08007104 	.word	0x08007104

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4619      	mov	r1, r3
 80002fe:	2007      	movs	r0, #7
 8000300:	f000 ff84 	bl	800120c <bno055_writeData>
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800030c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000310:	b09e      	sub	sp, #120	@ 0x78
 8000312:	af00      	add	r7, sp, #0
 8000314:	4603      	mov	r3, r0
 8000316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ffe8 	bl	80002f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000324:	2b20      	cmp	r3, #32
 8000326:	d108      	bne.n	800033a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000328:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800032c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000330:	2208      	movs	r2, #8
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f856 	bl	80013e4 <bno055_readData>
 8000338:	e007      	b.n	800034a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800033a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800033e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000342:	2206      	movs	r2, #6
 8000344:	4618      	mov	r0, r3
 8000346:	f001 f84d 	bl	80013e4 <bno055_readData>

  double scale = 1;
 800034a:	f04f 0200 	mov.w	r2, #0
 800034e:	4b7d      	ldr	r3, [pc, #500]	@ (8000544 <bno055_getVector+0x238>)
 8000350:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000358:	2b0e      	cmp	r3, #14
 800035a:	d108      	bne.n	800036e <bno055_getVector+0x62>
    scale = magScale;
 800035c:	4b7a      	ldr	r3, [pc, #488]	@ (8000548 <bno055_getVector+0x23c>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	ee07 3a90 	vmov	s15, r3
 8000364:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000368:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800036c:	e03a      	b.n	80003e4 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800036e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000372:	2b08      	cmp	r3, #8
 8000374:	d007      	beq.n	8000386 <bno055_getVector+0x7a>
 8000376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800037a:	2b28      	cmp	r3, #40	@ 0x28
 800037c:	d003      	beq.n	8000386 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800037e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000382:	2b2e      	cmp	r3, #46	@ 0x2e
 8000384:	d108      	bne.n	8000398 <bno055_getVector+0x8c>
    scale = accelScale;
 8000386:	4b71      	ldr	r3, [pc, #452]	@ (800054c <bno055_getVector+0x240>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	ee07 3a90 	vmov	s15, r3
 800038e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000392:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000396:	e025      	b.n	80003e4 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800039c:	2b14      	cmp	r3, #20
 800039e:	d108      	bne.n	80003b2 <bno055_getVector+0xa6>
    scale = angularRateScale;
 80003a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000550 <bno055_getVector+0x244>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	ee07 3a90 	vmov	s15, r3
 80003a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80003ac:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 80003b0:	e018      	b.n	80003e4 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 80003b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003b6:	2b1a      	cmp	r3, #26
 80003b8:	d108      	bne.n	80003cc <bno055_getVector+0xc0>
    scale = eulerScale;
 80003ba:	4b66      	ldr	r3, [pc, #408]	@ (8000554 <bno055_getVector+0x248>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	ee07 3a90 	vmov	s15, r3
 80003c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80003c6:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 80003ca:	e00b      	b.n	80003e4 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80003cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003d0:	2b20      	cmp	r3, #32
 80003d2:	d107      	bne.n	80003e4 <bno055_getVector+0xd8>
    scale = quaScale;
 80003d4:	4b60      	ldr	r3, [pc, #384]	@ (8000558 <bno055_getVector+0x24c>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	ee07 3a90 	vmov	s15, r3
 80003dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80003e0:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz;/* = {.w = 0, .x = 0, .y = 0, .z = 0};*/
  if (vec == BNO055_VECTOR_QUATERNION) {
 80003e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003e8:	2b20      	cmp	r3, #32
 80003ea:	d14c      	bne.n	8000486 <bno055_getVector+0x17a>

    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80003ec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b21a      	sxth	r2, r3
 80003f4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b21b      	sxth	r3, r3
 80003fe:	ee07 3a90 	vmov	s15, r3
 8000402:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000406:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800040a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800040e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000412:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000416:	021b      	lsls	r3, r3, #8
 8000418:	b21a      	sxth	r2, r3
 800041a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800041e:	b21b      	sxth	r3, r3
 8000420:	4313      	orrs	r3, r2
 8000422:	b21b      	sxth	r3, r3
 8000424:	ee07 3a90 	vmov	s15, r3
 8000428:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800042c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000430:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000434:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000438:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800043c:	021b      	lsls	r3, r3, #8
 800043e:	b21a      	sxth	r2, r3
 8000440:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000444:	b21b      	sxth	r3, r3
 8000446:	4313      	orrs	r3, r2
 8000448:	b21b      	sxth	r3, r3
 800044a:	ee07 3a90 	vmov	s15, r3
 800044e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000452:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000456:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800045a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800045e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	b21a      	sxth	r2, r3
 8000466:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800046a:	b21b      	sxth	r3, r3
 800046c:	4313      	orrs	r3, r2
 800046e:	b21b      	sxth	r3, r3
 8000470:	ee07 3a90 	vmov	s15, r3
 8000474:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000478:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800047c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000480:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000484:	e038      	b.n	80004f8 <bno055_getVector+0x1ec>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000486:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	b21a      	sxth	r2, r3
 800048e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000492:	b21b      	sxth	r3, r3
 8000494:	4313      	orrs	r3, r2
 8000496:	b21b      	sxth	r3, r3
 8000498:	ee07 3a90 	vmov	s15, r3
 800049c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80004a0:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80004a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80004a8:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80004ac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	b21a      	sxth	r2, r3
 80004b4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	4313      	orrs	r3, r2
 80004bc:	b21b      	sxth	r3, r3
 80004be:	ee07 3a90 	vmov	s15, r3
 80004c2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80004c6:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80004ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80004ce:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80004d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	b21a      	sxth	r2, r3
 80004da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80004de:	b21b      	sxth	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b21b      	sxth	r3, r3
 80004e4:	ee07 3a90 	vmov	s15, r3
 80004e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80004ec:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80004f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80004f4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 80004f8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80004fc:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8000500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800050c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8000510:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000514:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000518:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800051c:	ec49 8b14 	vmov	d4, r8, r9
 8000520:	ec45 4b15 	vmov	d5, r4, r5
 8000524:	ec41 0b16 	vmov	d6, r0, r1
 8000528:	ec43 2b17 	vmov	d7, r2, r3
}
 800052c:	eeb0 0b44 	vmov.f64	d0, d4
 8000530:	eeb0 1b45 	vmov.f64	d1, d5
 8000534:	eeb0 2b46 	vmov.f64	d2, d6
 8000538:	eeb0 3b47 	vmov.f64	d3, d7
 800053c:	3778      	adds	r7, #120	@ 0x78
 800053e:	46bd      	mov	sp, r7
 8000540:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000544:	3ff00000 	.word	0x3ff00000
 8000548:	20000006 	.word	0x20000006
 800054c:	20000000 	.word	0x20000000
 8000550:	20000002 	.word	0x20000002
 8000554:	20000004 	.word	0x20000004
 8000558:	20000008 	.word	0x20000008

0800055c <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 800055c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000560:	b090      	sub	sp, #64	@ 0x40
 8000562:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000564:	2020      	movs	r0, #32
 8000566:	f7ff fed1 	bl	800030c <bno055_getVector>
 800056a:	eeb0 4b40 	vmov.f64	d4, d0
 800056e:	eeb0 5b41 	vmov.f64	d5, d1
 8000572:	eeb0 6b42 	vmov.f64	d6, d2
 8000576:	eeb0 7b43 	vmov.f64	d7, d3
 800057a:	ed87 4b08 	vstr	d4, [r7, #32]
 800057e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000582:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000586:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800058a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800058e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000592:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800059a:	ec49 8b14 	vmov	d4, r8, r9
 800059e:	ec45 4b15 	vmov	d5, r4, r5
 80005a2:	ec41 0b16 	vmov	d6, r0, r1
 80005a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80005aa:	eeb0 0b44 	vmov.f64	d0, d4
 80005ae:	eeb0 1b45 	vmov.f64	d1, d5
 80005b2:	eeb0 2b46 	vmov.f64	d2, d6
 80005b6:	eeb0 3b47 	vmov.f64	d3, d7
 80005ba:	3740      	adds	r7, #64	@ 0x40
 80005bc:	46bd      	mov	sp, r7
 80005be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080005c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <__NVIC_SetPriorityGrouping+0x40>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	4313      	orrs	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <__NVIC_SetPriorityGrouping+0x40>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0000 	.word	0x05fa0000

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4907      	ldr	r1, [pc, #28]	@ (8000660 <__NVIC_EnableIRQ+0x38>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db12      	blt.n	800069c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	490a      	ldr	r1, [pc, #40]	@ (80006a8 <__NVIC_DisableIRQ+0x44>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	3320      	adds	r3, #32
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800076e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000772:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d013      	beq.n	80007a6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800077e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000782:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000786:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00b      	beq.n	80007a6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800078e:	e000      	b.n	8000792 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000790:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000792:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800079c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80007d4:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	440b      	add	r3, r1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	440b      	add	r3, r1
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	600b      	str	r3, [r1, #0]
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	08007320 	.word	0x08007320

080007fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000808:	4a0d      	ldr	r2, [pc, #52]	@ (8000840 <LL_DMA_SetMode+0x44>)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800081c:	4908      	ldr	r1, [pc, #32]	@ (8000840 <LL_DMA_SetMode+0x44>)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	440b      	add	r3, r1
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	440b      	add	r3, r1
 800082a:	4619      	mov	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	600b      	str	r3, [r1, #0]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	08007320 	.word	0x08007320

08000844 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LL_DMA_SetPeriphIncMode+0x44>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000864:	4908      	ldr	r1, [pc, #32]	@ (8000888 <LL_DMA_SetPeriphIncMode+0x44>)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	440b      	add	r3, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	440b      	add	r3, r1
 8000872:	4619      	mov	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	600b      	str	r3, [r1, #0]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	08007320 	.word	0x08007320

0800088c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <LL_DMA_SetMemoryIncMode+0x44>)
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80008ac:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <LL_DMA_SetMemoryIncMode+0x44>)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	440b      	add	r3, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	440b      	add	r3, r1
 80008ba:	4619      	mov	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4313      	orrs	r3, r2
 80008c0:	600b      	str	r3, [r1, #0]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	08007320 	.word	0x08007320

080008d4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LL_DMA_SetPeriphSize+0x44>)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80008f4:	4908      	ldr	r1, [pc, #32]	@ (8000918 <LL_DMA_SetPeriphSize+0x44>)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	440b      	add	r3, r1
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4313      	orrs	r3, r2
 8000908:	600b      	str	r3, [r1, #0]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	08007320 	.word	0x08007320

0800091c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000928:	4a0d      	ldr	r2, [pc, #52]	@ (8000960 <LL_DMA_SetMemorySize+0x44>)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800093c:	4908      	ldr	r1, [pc, #32]	@ (8000960 <LL_DMA_SetMemorySize+0x44>)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	440b      	add	r3, r1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	440b      	add	r3, r1
 800094a:	4619      	mov	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4313      	orrs	r3, r2
 8000950:	600b      	str	r3, [r1, #0]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	08007320 	.word	0x08007320

08000964 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000984:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	440b      	add	r3, r1
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	440b      	add	r3, r1
 8000992:	4619      	mov	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4313      	orrs	r3, r2
 8000998:	600b      	str	r3, [r1, #0]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	08007320 	.word	0x08007320

080009ac <LL_DMA_SetChannelSelection>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LL_DMA_SetChannelSelection+0x44>)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 52f0 	bic.w	r2, r3, #503316480	@ 0x1e000000
 80009cc:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <LL_DMA_SetChannelSelection+0x44>)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	440b      	add	r3, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	440b      	add	r3, r1
 80009da:	4619      	mov	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4313      	orrs	r3, r2
 80009e0:	600b      	str	r3, [r1, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	08007320 	.word	0x08007320

080009f4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <LL_DMA_DisableFifoMode+0x3c>)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <LL_DMA_DisableFifoMode+0x3c>)
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	440a      	add	r2, r1
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	4611      	mov	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	440a      	add	r2, r1
 8000a1c:	f023 0304 	bic.w	r3, r3, #4
 8000a20:	6153      	str	r3, [r2, #20]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	08007320 	.word	0x08007320

08000a34 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <LL_I2C_SetOwnAddress2+0x2c>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	fffff801 	.word	0xfffff801

08000aa4 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	605a      	str	r2, [r3, #4]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <LL_RCC_HSE_Enable+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <LL_RCC_HSE_Enable+0x1c>)
 8000b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <LL_RCC_HSE_IsReady+0x24>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <LL_RCC_SetSysClkSource+0x24>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 0203 	bic.w	r2, r3, #3
 8000b5c:	4904      	ldr	r1, [pc, #16]	@ (8000b70 <LL_RCC_SetSysClkSource+0x24>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	608b      	str	r3, [r1, #8]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800

08000b74 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <LL_RCC_GetSysClkSource+0x18>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ba0:	4904      	ldr	r1, [pc, #16]	@ (8000bb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000bc8:	4904      	ldr	r1, [pc, #16]	@ (8000bdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40023800 	.word	0x40023800

08000be0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000bf0:	4904      	ldr	r1, [pc, #16]	@ (8000c04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40023800 	.word	0x40023800

08000c08 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <LL_RCC_SetUSARTClockSource+0x30>)
 8000c12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4905      	ldr	r1, [pc, #20]	@ (8000c38 <LL_RCC_SetUSARTClockSource+0x30>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (I2CxSource & 0xFFFF0000U),  (I2CxSource << 16U));
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <LL_RCC_SetI2CClockSource+0x30>)
 8000c46:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <LL_RCC_SetI2CClockSource+0x34>)
 8000c4e:	400b      	ands	r3, r1
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	041b      	lsls	r3, r3, #16
 8000c58:	4904      	ldr	r1, [pc, #16]	@ (8000c6c <LL_RCC_SetI2CClockSource+0x30>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	ffff0000 	.word	0xffff0000

08000c74 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <LL_RCC_SetTIMPrescaler+0x28>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c82:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c86:	4905      	ldr	r1, [pc, #20]	@ (8000c9c <LL_RCC_SetTIMPrescaler+0x28>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <LL_RCC_PLL_Enable+0x1c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <LL_RCC_PLL_Enable+0x1c>)
 8000caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <LL_RCC_PLL_IsReady+0x24>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	4311      	orrs	r1, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	0192      	lsls	r2, r2, #6
 8000d08:	4311      	orrs	r1, r2
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	4904      	ldr	r1, [pc, #16]	@ (8000d20 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800
 8000d24:	ffbc8000 	.word	0xffbc8000

08000d28 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4013      	ands	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40023800 	.word	0x40023800

08000d58 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4013      	ands	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40023800 	.word	0x40023800

08000d88 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000d92:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <LL_SYSCFG_SetEXTISource+0x58>)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	43db      	mvns	r3, r3
 8000da4:	ea02 0103 	and.w	r1, r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	0c1b      	lsrs	r3, r3, #16
 8000dac:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	fa03 f202 	lsl.w	r2, r3, r2
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <LL_SYSCFG_SetEXTISource+0x58>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	3302      	adds	r3, #2
 8000dd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40013800 	.word	0x40013800

08000de4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <LL_FLASH_SetLatency+0x24>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 020f 	bic.w	r2, r3, #15
 8000df4:	4904      	ldr	r1, [pc, #16]	@ (8000e08 <LL_FLASH_SetLatency+0x24>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <LL_FLASH_GetLatency+0x18>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 030f 	and.w	r3, r3, #15
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40007000 	.word	0x40007000

08000e48 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000e58:	4904      	ldr	r1, [pc, #16]	@ (8000e6c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40007000 	.word	0x40007000

08000e70 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40007000 	.word	0x40007000

08000e98 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0201 	orr.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000ef8:	d101      	bne.n	8000efe <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f20:	d101      	bne.n	8000f26 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	e853 3f00 	ldrex	r3, [r3]
 8000f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	61ba      	str	r2, [r7, #24]
 8000f56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f58:	6979      	ldr	r1, [r7, #20]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	e841 2300 	strex	r3, r2, [r1]
 8000f60:	613b      	str	r3, [r7, #16]
   return(result);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e9      	bne.n	8000f3c <LL_USART_EnableIT_RXNE+0x8>
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	@ 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b089      	sub	sp, #36	@ 0x24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	e853 3f00 	ldrex	r3, [r3]
 8000f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	61ba      	str	r2, [r7, #24]
 8000f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f9a:	6979      	ldr	r1, [r7, #20]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	e841 2300 	strex	r3, r2, [r1]
 8000fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1e9      	bne.n	8000f7e <LL_USART_EnableIT_TC+0x8>
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3724      	adds	r7, #36	@ 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	e853 3f00 	ldrex	r3, [r3]
 8000fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	61ba      	str	r2, [r7, #24]
 8000fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	e841 2300 	strex	r3, r2, [r1]
 8000fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e9      	bne.n	8000fc0 <LL_USART_EnableIT_TXE+0x8>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b089      	sub	sp, #36	@ 0x24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3308      	adds	r3, #8
 8001006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	e853 3f00 	ldrex	r3, [r3]
 800100e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3308      	adds	r3, #8
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	61ba      	str	r2, [r7, #24]
 8001020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001022:	6979      	ldr	r1, [r7, #20]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	e841 2300 	strex	r3, r2, [r1]
 800102a:	613b      	str	r3, [r7, #16]
   return(result);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1e7      	bne.n	8001002 <LL_USART_EnableIT_ERROR+0x8>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3724      	adds	r7, #36	@ 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	e853 3f00 	ldrex	r3, [r3]
 8001052:	60bb      	str	r3, [r7, #8]
   return(result);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	61ba      	str	r2, [r7, #24]
 8001062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001064:	6979      	ldr	r1, [r7, #20]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	e841 2300 	strex	r3, r2, [r1]
 800106c:	613b      	str	r3, [r7, #16]
   return(result);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e9      	bne.n	8001048 <LL_USART_DisableIT_TC+0x8>
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001082:	b480      	push	{r7}
 8001084:	b089      	sub	sp, #36	@ 0x24
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e853 3f00 	ldrex	r3, [r3]
 8001094:	60bb      	str	r3, [r7, #8]
   return(result);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	61ba      	str	r2, [r7, #24]
 80010a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e841 2300 	strex	r3, r2, [r1]
 80010ae:	613b      	str	r3, [r7, #16]
   return(result);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e9      	bne.n	800108a <LL_USART_DisableIT_TXE+0x8>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	@ 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b089      	sub	sp, #36	@ 0x24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	613b      	str	r3, [r7, #16]
  return result;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2103      	movs	r1, #3
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	401a      	ands	r2, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	61bb      	str	r3, [r7, #24]
  return result;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	613b      	str	r3, [r7, #16]
  return result;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2103      	movs	r1, #3
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	61bb      	str	r3, [r7, #24]
  return result;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	431a      	orrs	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	4013      	ands	r3, r2
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	400b      	ands	r3, r1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <bno055_writeData>:
#else
  HAL_Delay(time);
#endif
}

void bno055_writeData(uint8_t reg, uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	733b      	strb	r3, [r7, #12]
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <bno055_writeData+0x184>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	230a      	movs	r3, #10
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2302      	movs	r3, #2
 8001232:	2150      	movs	r1, #80	@ 0x50
 8001234:	f001 fe78 	bl	8002f28 <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80a0 	beq.w	8001384 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d103      	bne.n	8001252 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800124a:	4852      	ldr	r0, [pc, #328]	@ (8001394 <bno055_writeData+0x188>)
 800124c:	f004 f85a 	bl	8005304 <puts>
 8001250:	e012      	b.n	8001278 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d103      	bne.n	8001260 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001258:	484f      	ldr	r0, [pc, #316]	@ (8001398 <bno055_writeData+0x18c>)
 800125a:	f004 f853 	bl	8005304 <puts>
 800125e:	e00b      	b.n	8001278 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d103      	bne.n	800126e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001266:	484d      	ldr	r0, [pc, #308]	@ (800139c <bno055_writeData+0x190>)
 8001268:	f004 f84c 	bl	8005304 <puts>
 800126c:	e004      	b.n	8001278 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	4619      	mov	r1, r3
 8001272:	484b      	ldr	r0, [pc, #300]	@ (80013a0 <bno055_writeData+0x194>)
 8001274:	f003 ffde 	bl	8005234 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <bno055_writeData+0x184>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f84b 	bl	8003318 <HAL_I2C_GetError>
 8001282:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d07e      	beq.n	8001388 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d103      	bne.n	8001298 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001290:	4844      	ldr	r0, [pc, #272]	@ (80013a4 <bno055_writeData+0x198>)
 8001292:	f004 f837 	bl	8005304 <puts>
 8001296:	e021      	b.n	80012dc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d103      	bne.n	80012a6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800129e:	4842      	ldr	r0, [pc, #264]	@ (80013a8 <bno055_writeData+0x19c>)
 80012a0:	f004 f830 	bl	8005304 <puts>
 80012a4:	e01a      	b.n	80012dc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d103      	bne.n	80012b4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80012ac:	483f      	ldr	r0, [pc, #252]	@ (80013ac <bno055_writeData+0x1a0>)
 80012ae:	f004 f829 	bl	8005304 <puts>
 80012b2:	e013      	b.n	80012dc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d103      	bne.n	80012c2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <bno055_writeData+0x1a4>)
 80012bc:	f004 f822 	bl	8005304 <puts>
 80012c0:	e00c      	b.n	80012dc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d103      	bne.n	80012d0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80012c8:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <bno055_writeData+0x1a8>)
 80012ca:	f004 f81b 	bl	8005304 <puts>
 80012ce:	e005      	b.n	80012dc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d102      	bne.n	80012dc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80012d6:	4838      	ldr	r0, [pc, #224]	@ (80013b8 <bno055_writeData+0x1ac>)
 80012d8:	f004 f814 	bl	8005304 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <bno055_writeData+0x184>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f80b 	bl	80032fc <HAL_I2C_GetState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012f0:	4832      	ldr	r0, [pc, #200]	@ (80013bc <bno055_writeData+0x1b0>)
 80012f2:	f004 f807 	bl	8005304 <puts>
 80012f6:	e048      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d103      	bne.n	8001306 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012fe:	482f      	ldr	r0, [pc, #188]	@ (80013bc <bno055_writeData+0x1b0>)
 8001300:	f004 f800 	bl	8005304 <puts>
 8001304:	e041      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b24      	cmp	r3, #36	@ 0x24
 800130a:	d103      	bne.n	8001314 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <bno055_writeData+0x1b4>)
 800130e:	f003 fff9 	bl	8005304 <puts>
 8001312:	e03a      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b21      	cmp	r3, #33	@ 0x21
 8001318:	d103      	bne.n	8001322 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800131a:	482a      	ldr	r0, [pc, #168]	@ (80013c4 <bno055_writeData+0x1b8>)
 800131c:	f003 fff2 	bl	8005304 <puts>
 8001320:	e033      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b22      	cmp	r3, #34	@ 0x22
 8001326:	d103      	bne.n	8001330 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001328:	4827      	ldr	r0, [pc, #156]	@ (80013c8 <bno055_writeData+0x1bc>)
 800132a:	f003 ffeb 	bl	8005304 <puts>
 800132e:	e02c      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b28      	cmp	r3, #40	@ 0x28
 8001334:	d103      	bne.n	800133e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001336:	4825      	ldr	r0, [pc, #148]	@ (80013cc <bno055_writeData+0x1c0>)
 8001338:	f003 ffe4 	bl	8005304 <puts>
 800133c:	e025      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b29      	cmp	r3, #41	@ 0x29
 8001342:	d103      	bne.n	800134c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001344:	4822      	ldr	r0, [pc, #136]	@ (80013d0 <bno055_writeData+0x1c4>)
 8001346:	f003 ffdd 	bl	8005304 <puts>
 800134a:	e01e      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001350:	d103      	bne.n	800135a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001352:	4820      	ldr	r0, [pc, #128]	@ (80013d4 <bno055_writeData+0x1c8>)
 8001354:	f003 ffd6 	bl	8005304 <puts>
 8001358:	e017      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b60      	cmp	r3, #96	@ 0x60
 800135e:	d103      	bne.n	8001368 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001360:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <bno055_writeData+0x1cc>)
 8001362:	f003 ffcf 	bl	8005304 <puts>
 8001366:	e010      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2ba0      	cmp	r3, #160	@ 0xa0
 800136c:	d103      	bne.n	8001376 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800136e:	481b      	ldr	r0, [pc, #108]	@ (80013dc <bno055_writeData+0x1d0>)
 8001370:	f003 ffc8 	bl	8005304 <puts>
 8001374:	e009      	b.n	800138a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2be0      	cmp	r3, #224	@ 0xe0
 800137a:	d106      	bne.n	800138a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800137c:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <bno055_writeData+0x1d4>)
 800137e:	f003 ffc1 	bl	8005304 <puts>
 8001382:	e002      	b.n	800138a <bno055_writeData+0x17e>
    return;
 8001384:	bf00      	nop
 8001386:	e000      	b.n	800138a <bno055_writeData+0x17e>
    return;
 8001388:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000033c 	.word	0x2000033c
 8001394:	08007120 	.word	0x08007120
 8001398:	08007144 	.word	0x08007144
 800139c:	0800716c 	.word	0x0800716c
 80013a0:	08007190 	.word	0x08007190
 80013a4:	080071a8 	.word	0x080071a8
 80013a8:	080071bc 	.word	0x080071bc
 80013ac:	080071d0 	.word	0x080071d0
 80013b0:	080071e4 	.word	0x080071e4
 80013b4:	080071f8 	.word	0x080071f8
 80013b8:	0800720c 	.word	0x0800720c
 80013bc:	08007224 	.word	0x08007224
 80013c0:	0800723c 	.word	0x0800723c
 80013c4:	08007250 	.word	0x08007250
 80013c8:	08007268 	.word	0x08007268
 80013cc:	08007280 	.word	0x08007280
 80013d0:	08007298 	.word	0x08007298
 80013d4:	080072b8 	.word	0x080072b8
 80013d8:	080072d8 	.word	0x080072d8
 80013dc:	080072f0 	.word	0x080072f0
 80013e0:	08007308 	.word	0x08007308

080013e4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <bno055_readData+0x40>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	1dfa      	adds	r2, r7, #7
 80013fa:	2364      	movs	r3, #100	@ 0x64
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2150      	movs	r1, #80	@ 0x50
 8001402:	f001 fd91 	bl	8002f28 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <bno055_readData+0x40>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	b29b      	uxth	r3, r3
 800140e:	2264      	movs	r2, #100	@ 0x64
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	2150      	movs	r1, #80	@ 0x50
 8001416:	f001 fe7b 	bl	8003110 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000033c 	.word	0x2000033c

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142e:	f000 ff42 	bl	80022b6 <HAL_Init>

  /* USER CODE BEGIN Init */

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001432:	2004      	movs	r0, #4
 8001434:	f7ff f8c6 	bl	80005c4 <__NVIC_SetPriorityGrouping>
  //LL_PWR_DisableUCPDDeadBattery();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f866 	bl	8001508 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 800143c:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <main+0xc8>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 fa77 	bl	8001934 <MX_GPIO_Init>
  MX_DMA_Init();
 8001446:	f000 fa4d 	bl	80018e4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800144a:	f000 f9d3 	bl	80017f4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800144e:	f000 f8ff 	bl	8001650 <MX_I2C1_Init>
  MX_ETH_Init();
 8001452:	f000 f8af 	bl	80015b4 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  ITM_Port32(31) = 2;
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <main+0xc8>)
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]


  printf("W,X,Y,Z,Tipo\r\n");*/

  /* Polling USART initialisation */
  while ((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 800145c:	bf00      	nop
 800145e:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <main+0xcc>)
 8001460:	f7ff fd40 	bl	8000ee4 <LL_USART_IsActiveFlag_TEACK>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f9      	beq.n	800145e <main+0x36>
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <main+0xcc>)
 800146c:	f7ff fd4e 	bl	8000f0c <LL_USART_IsActiveFlag_REACK>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f3      	beq.n	800145e <main+0x36>
  {
  }

  /* Enable RXNE and Error interrupts */
  LL_USART_EnableIT_RXNE(USART3);
 8001476:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <main+0xcc>)
 8001478:	f7ff fd5c 	bl	8000f34 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART3);
 800147c:	481d      	ldr	r0, [pc, #116]	@ (80014f4 <main+0xcc>)
 800147e:	f7ff fdbc 	bl	8000ffa <LL_USART_EnableIT_ERROR>

  /* Set LED1 Off */
  LED_Off();
 8001482:	f000 fb93 	bl	8001bac <LED_Off>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bno055_vector_t v = bno055_getVectorQuaternion();
 8001486:	f7ff f869 	bl	800055c <bno055_getVectorQuaternion>
 800148a:	eeb0 4b40 	vmov.f64	d4, d0
 800148e:	eeb0 5b41 	vmov.f64	d5, d1
 8001492:	eeb0 6b42 	vmov.f64	d6, d2
 8001496:	eeb0 7b43 	vmov.f64	d7, d3
 800149a:	ed87 4b00 	vstr	d4, [r7]
 800149e:	ed87 5b02 	vstr	d5, [r7, #8]
 80014a2:	ed87 6b04 	vstr	d6, [r7, #16]
 80014a6:	ed87 7b06 	vstr	d7, [r7, #24]
	  w = v.w;
 80014aa:	ed97 7b00 	vldr	d7, [r7]
 80014ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <main+0xd0>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
	  x = v.x;
 80014b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80014bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <main+0xd4>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	  y = v.y;
 80014c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <main+0xd8>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
	  z = v.z;
 80014d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80014d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <main+0xdc>)
 80014de:	edc3 7a00 	vstr	s15, [r3]
	  cont++;
*/

	  //printf("W: %.6f, X: %.6f, Y: %.6f, Z: %.6f\r\n", w, x, y, z);
	  // Esperar un tiempo antes de la próxima transmisión
	  HAL_Delay(500);
 80014e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014e6:	f000 ff43 	bl	8002370 <HAL_Delay>
  {
 80014ea:	bf00      	nop
 80014ec:	e7cb      	b.n	8001486 <main+0x5e>
 80014ee:	bf00      	nop
 80014f0:	e000007c 	.word	0xe000007c
 80014f4:	40004800 	.word	0x40004800
 80014f8:	2000052c 	.word	0x2000052c
 80014fc:	20000530 	.word	0x20000530
 8001500:	20000534 	.word	0x20000534
 8001504:	20000538 	.word	0x20000538

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fc69 	bl	8000de4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001512:	bf00      	nop
 8001514:	f7ff fc7a 	bl	8000e0c <LL_FLASH_GetLatency>
 8001518:	4603      	mov	r3, r0
 800151a:	2b03      	cmp	r3, #3
 800151c:	d1fa      	bne.n	8001514 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 800151e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001522:	f7ff fc91 	bl	8000e48 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001526:	f7ff fc7f 	bl	8000e28 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 800152a:	f7ff fadb 	bl	8000ae4 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 800152e:	f7ff fae9 	bl	8000b04 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001532:	bf00      	nop
 8001534:	f7ff faf6 	bl	8000b24 <LL_RCC_HSE_IsReady>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d1fa      	bne.n	8001534 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 96, LL_RCC_PLLP_DIV_2);
 800153e:	2300      	movs	r3, #0
 8001540:	2260      	movs	r2, #96	@ 0x60
 8001542:	2104      	movs	r1, #4
 8001544:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001548:	f7ff fbce 	bl	8000ce8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800154c:	f7ff fba8 	bl	8000ca0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001550:	bf00      	nop
 8001552:	f7ff fbb5 	bl	8000cc0 <LL_RCC_PLL_IsReady>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1fa      	bne.n	8001552 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800155c:	bf00      	nop
 800155e:	f7ff fc87 	bl	8000e70 <LL_PWR_IsActiveFlag_VOS>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0fa      	beq.n	800155e <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff fb11 	bl	8000b90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800156e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001572:	f7ff fb21 	bl	8000bb8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fb32 	bl	8000be0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff fae5 	bl	8000b4c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001582:	bf00      	nop
 8001584:	f7ff faf6 	bl	8000b74 <LL_RCC_GetSysClkSource>
 8001588:	4603      	mov	r3, r0
 800158a:	2b08      	cmp	r3, #8
 800158c:	d1fa      	bne.n	8001584 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(96000000);
 800158e:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <SystemClock_Config+0xa8>)
 8001590:	f003 f946 	bl	8004820 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001594:	2000      	movs	r0, #0
 8001596:	f000 fe9b 	bl	80022d0 <HAL_InitTick>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a0:	f000 fb9a 	bl	8001cd8 <Error_Handler>
  }

   /* Set Timers Clock Prescalers */
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fb65 	bl	8000c74 <LL_RCC_SetTIMPrescaler>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	05b8d800 	.word	0x05b8d800

080015b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_ETH_Init+0x84>)
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <MX_ETH_Init+0x88>)
 80015bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015cc:	22e1      	movs	r2, #225	@ 0xe1
 80015ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_ETH_Init+0x84>)
 80015e4:	4a16      	ldr	r2, [pc, #88]	@ (8001640 <MX_ETH_Init+0x8c>)
 80015e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_ETH_Init+0x84>)
 80015ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_ETH_Init+0x84>)
 80015f2:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <MX_ETH_Init+0x90>)
 80015f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_ETH_Init+0x84>)
 80015f8:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <MX_ETH_Init+0x94>)
 80015fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_ETH_Init+0x84>)
 80015fe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001602:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_ETH_Init+0x84>)
 8001606:	f000 ffbd 	bl	8002584 <HAL_ETH_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001610:	f000 fb62 	bl	8001cd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001614:	2238      	movs	r2, #56	@ 0x38
 8001616:	2100      	movs	r1, #0
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_ETH_Init+0x98>)
 800161a:	f003 ff53 	bl	80054c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_ETH_Init+0x98>)
 8001620:	2221      	movs	r2, #33	@ 0x21
 8001622:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_ETH_Init+0x98>)
 8001626:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800162a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_ETH_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000378 	.word	0x20000378
 800163c:	40028000 	.word	0x40028000
 8001640:	2000053c 	.word	0x2000053c
 8001644:	20000280 	.word	0x20000280
 8001648:	200001e0 	.word	0x200001e0
 800164c:	20000340 	.word	0x20000340

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	@ 0x38
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 800167a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800167e:	f7ff fadd 	bl	8000c3c <LL_RCC_SetI2CClockSource>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff fb50 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800168e:	2302      	movs	r3, #2
 8001690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001696:	2301      	movs	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800169e:	2304      	movs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	484f      	ldr	r0, [pc, #316]	@ (80017e4 <MX_I2C1_Init+0x194>)
 80016a8:	f002 faca 	bl	8003c40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80016ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016ba:	2301      	movs	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4846      	ldr	r0, [pc, #280]	@ (80017e4 <MX_I2C1_Init+0x194>)
 80016cc:	f002 fab8 	bl	8003c40 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80016d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80016d4:	f7ff fb40 	bl	8000d58 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_0, LL_DMA_CHANNEL_1);
 80016d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016dc:	2100      	movs	r1, #0
 80016de:	4842      	ldr	r0, [pc, #264]	@ (80017e8 <MX_I2C1_Init+0x198>)
 80016e0:	f7ff f964 	bl	80009ac <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	483f      	ldr	r0, [pc, #252]	@ (80017e8 <MX_I2C1_Init+0x198>)
 80016ea:	f7ff f863 	bl	80007b4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	483d      	ldr	r0, [pc, #244]	@ (80017e8 <MX_I2C1_Init+0x198>)
 80016f4:	f7ff f936 	bl	8000964 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	483a      	ldr	r0, [pc, #232]	@ (80017e8 <MX_I2C1_Init+0x198>)
 80016fe:	f7ff f87d 	bl	80007fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	4838      	ldr	r0, [pc, #224]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001708:	f7ff f89c 	bl	8000844 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	2100      	movs	r1, #0
 8001712:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001714:	f7ff f8ba 	bl	800088c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	4832      	ldr	r0, [pc, #200]	@ (80017e8 <MX_I2C1_Init+0x198>)
 800171e:	f7ff f8d9 	bl	80008d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	4830      	ldr	r0, [pc, #192]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001728:	f7ff f8f8 	bl	800091c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 800172c:	2100      	movs	r1, #0
 800172e:	482e      	ldr	r0, [pc, #184]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001730:	f7ff f960 	bl	80009f4 <LL_DMA_DisableFifoMode>

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_1);
 8001734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001738:	2106      	movs	r1, #6
 800173a:	482b      	ldr	r0, [pc, #172]	@ (80017e8 <MX_I2C1_Init+0x198>)
 800173c:	f7ff f936 	bl	80009ac <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001740:	2240      	movs	r2, #64	@ 0x40
 8001742:	2106      	movs	r1, #6
 8001744:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001746:	f7ff f835 	bl	80007b4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 800174a:	2200      	movs	r2, #0
 800174c:	2106      	movs	r1, #6
 800174e:	4826      	ldr	r0, [pc, #152]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001750:	f7ff f908 	bl	8000964 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001754:	2200      	movs	r2, #0
 8001756:	2106      	movs	r1, #6
 8001758:	4823      	ldr	r0, [pc, #140]	@ (80017e8 <MX_I2C1_Init+0x198>)
 800175a:	f7ff f84f 	bl	80007fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800175e:	2200      	movs	r2, #0
 8001760:	2106      	movs	r1, #6
 8001762:	4821      	ldr	r0, [pc, #132]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001764:	f7ff f86e 	bl	8000844 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176c:	2106      	movs	r1, #6
 800176e:	481e      	ldr	r0, [pc, #120]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001770:	f7ff f88c 	bl	800088c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8001774:	2200      	movs	r2, #0
 8001776:	2106      	movs	r1, #6
 8001778:	481b      	ldr	r0, [pc, #108]	@ (80017e8 <MX_I2C1_Init+0x198>)
 800177a:	f7ff f8ab 	bl	80008d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800177e:	2200      	movs	r2, #0
 8001780:	2106      	movs	r1, #6
 8001782:	4819      	ldr	r0, [pc, #100]	@ (80017e8 <MX_I2C1_Init+0x198>)
 8001784:	f7ff f8ca 	bl	800091c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001788:	2106      	movs	r1, #6
 800178a:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <MX_I2C1_Init+0x198>)
 800178c:	f7ff f932 	bl	80009f4 <LL_DMA_DisableFifoMode>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001790:	4816      	ldr	r0, [pc, #88]	@ (80017ec <MX_I2C1_Init+0x19c>)
 8001792:	f7ff f997 	bl	8000ac4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	4814      	ldr	r0, [pc, #80]	@ (80017ec <MX_I2C1_Init+0x19c>)
 800179c:	f7ff f96a 	bl	8000a74 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_I2C1_Init+0x19c>)
 80017a2:	f7ff f97f 	bl	8000aa4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017a6:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_I2C1_Init+0x19c>)
 80017a8:	f7ff f954 	bl	8000a54 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80017ac:	480f      	ldr	r0, [pc, #60]	@ (80017ec <MX_I2C1_Init+0x19c>)
 80017ae:	f7ff f941 	bl	8000a34 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x20303E5D;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <MX_I2C1_Init+0x1a0>)
 80017b8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_I2C1_Init+0x19c>)
 80017d6:	f002 fb4b 	bl	8003e70 <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	@ 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40026000 	.word	0x40026000
 80017ec:	40005400 	.word	0x40005400
 80017f0:	20303e5d 	.word	0x20303e5d

080017f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	@ 0x38
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 800181e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8001822:	f7ff f9f1 	bl	8000c08 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001826:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800182a:	f7ff fa95 	bl	8000d58 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800182e:	2008      	movs	r0, #8
 8001830:	f7ff fa7a 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = STLK_RX_Pin;
 8001834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800183a:	2302      	movs	r3, #2
 800183c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800184a:	2307      	movs	r3, #7
 800184c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	@ (80018dc <MX_USART3_UART_Init+0xe8>)
 8001854:	f002 f9f4 	bl	8003c40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STLK_TX_Pin;
 8001858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800185e:	2302      	movs	r3, #2
 8001860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800186e:	2307      	movs	r3, #7
 8001870:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4819      	ldr	r0, [pc, #100]	@ (80018dc <MX_USART3_UART_Init+0xe8>)
 8001878:	f002 f9e2 	bl	8003c40 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800187c:	f7fe fec6 	bl	800060c <__NVIC_GetPriorityGrouping>
 8001880:	4603      	mov	r3, r0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe ff3a 	bl	8000700 <NVIC_EncodePriority>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	2027      	movs	r0, #39	@ 0x27
 8001892:	f7fe ff0b 	bl	80006ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001896:	2027      	movs	r0, #39	@ 0x27
 8001898:	f7fe fec6 	bl	8000628 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800189c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80018a0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018ae:	230c      	movs	r3, #12
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <MX_USART3_UART_Init+0xec>)
 80018c2:	f002 fee7 	bl	8004694 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_USART3_UART_Init+0xec>)
 80018c8:	f7ff faf6 	bl	8000eb8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80018cc:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MX_USART3_UART_Init+0xec>)
 80018ce:	f7ff fae3 	bl	8000e98 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	@ 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40004800 	.word	0x40004800

080018e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80018e8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80018ec:	f7ff fa1c 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018f0:	f7fe fe8c 	bl	800060c <__NVIC_GetPriorityGrouping>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe ff00 	bl	8000700 <NVIC_EncodePriority>
 8001900:	4603      	mov	r3, r0
 8001902:	4619      	mov	r1, r3
 8001904:	200b      	movs	r0, #11
 8001906:	f7fe fed1 	bl	80006ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800190a:	200b      	movs	r0, #11
 800190c:	f7fe fe8c 	bl	8000628 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001910:	f7fe fe7c 	bl	800060c <__NVIC_GetPriorityGrouping>
 8001914:	4603      	mov	r3, r0
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fef0 	bl	8000700 <NVIC_EncodePriority>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	2011      	movs	r0, #17
 8001926:	f7fe fec1 	bl	80006ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800192a:	2011      	movs	r0, #17
 800192c:	f7fe fe7c 	bl	8000628 <__NVIC_EnableIRQ>

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001954:	2004      	movs	r0, #4
 8001956:	f7ff f9e7 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800195a:	2080      	movs	r0, #128	@ 0x80
 800195c:	f7ff f9e4 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff f9e1 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001966:	2002      	movs	r0, #2
 8001968:	f7ff f9de 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800196c:	2008      	movs	r0, #8
 800196e:	f7ff f9db 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8001972:	2040      	movs	r0, #64	@ 0x40
 8001974:	f7ff f9d8 	bl	8000d28 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD1_GPIO_Port, LD1_Pin);
 8001978:	2101      	movs	r1, #1
 800197a:	4874      	ldr	r0, [pc, #464]	@ (8001b4c <MX_GPIO_Init+0x218>)
 800197c:	f7ff fc1d 	bl	80011ba <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001980:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001984:	4871      	ldr	r0, [pc, #452]	@ (8001b4c <MX_GPIO_Init+0x218>)
 8001986:	f7ff fc18 	bl	80011ba <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin);
 800198a:	2140      	movs	r1, #64	@ 0x40
 800198c:	4870      	ldr	r0, [pc, #448]	@ (8001b50 <MX_GPIO_Init+0x21c>)
 800198e:	f7ff fc14 	bl	80011ba <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	486d      	ldr	r0, [pc, #436]	@ (8001b4c <MX_GPIO_Init+0x218>)
 8001996:	f7ff fc10 	bl	80011ba <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800199a:	496e      	ldr	r1, [pc, #440]	@ (8001b54 <MX_GPIO_Init+0x220>)
 800199c:	2002      	movs	r0, #2
 800199e:	f7ff f9f3 	bl	8000d88 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80019a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80019b0:	2301      	movs	r3, #1
 80019b2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 ffbd 	bl	8003938 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_PULL_NO);
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c4:	4864      	ldr	r0, [pc, #400]	@ (8001b58 <MX_GPIO_Init+0x224>)
 80019c6:	f7ff fbbb 	bl	8001140 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_MODE_INPUT);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019d0:	4861      	ldr	r0, [pc, #388]	@ (8001b58 <MX_GPIO_Init+0x224>)
 80019d2:	f7ff fb86 	bl	80010e2 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Boton_Pin;
 80019d6:	2308      	movs	r3, #8
 80019d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	485d      	ldr	r0, [pc, #372]	@ (8001b5c <MX_GPIO_Init+0x228>)
 80019e8:	f002 f92a 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin;
 80019ec:	2301      	movs	r3, #1
 80019ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019f0:	2301      	movs	r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4851      	ldr	r0, [pc, #324]	@ (8001b4c <MX_GPIO_Init+0x218>)
 8001a06:	f002 f91b 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a10:	2301      	movs	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	4849      	ldr	r0, [pc, #292]	@ (8001b4c <MX_GPIO_Init+0x218>)
 8001a26:	f002 f90b 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a2a:	2340      	movs	r3, #64	@ 0x40
 8001a2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4843      	ldr	r0, [pc, #268]	@ (8001b50 <MX_GPIO_Init+0x21c>)
 8001a44:	f002 f8fc 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	483d      	ldr	r0, [pc, #244]	@ (8001b50 <MX_GPIO_Init+0x21c>)
 8001a5a:	f002 f8f1 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_SOF_Pin;
 8001a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a64:	2302      	movs	r3, #2
 8001a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001a74:	230a      	movs	r3, #10
 8001a76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USB_SOF_GPIO_Port, &GPIO_InitStruct);
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4837      	ldr	r0, [pc, #220]	@ (8001b5c <MX_GPIO_Init+0x228>)
 8001a7e:	f002 f8df 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4831      	ldr	r0, [pc, #196]	@ (8001b5c <MX_GPIO_Init+0x228>)
 8001a96:	f002 f8d3 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_ID_Pin;
 8001a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4828      	ldr	r0, [pc, #160]	@ (8001b5c <MX_GPIO_Init+0x228>)
 8001aba:	f002 f8c1 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_DM_Pin;
 8001abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ac2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USB_DM_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <MX_GPIO_Init+0x228>)
 8001ade:	f002 f8af 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_DP_Pin;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001af8:	230a      	movs	r3, #10
 8001afa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(USB_DP_GPIO_Port, &GPIO_InitStruct);
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4816      	ldr	r0, [pc, #88]	@ (8001b5c <MX_GPIO_Init+0x228>)
 8001b02:	f002 f89d 	bl	8003c40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480b      	ldr	r0, [pc, #44]	@ (8001b4c <MX_GPIO_Init+0x218>)
 8001b20:	f002 f88e 	bl	8003c40 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b24:	f7fe fd72 	bl	800060c <__NVIC_GetPriorityGrouping>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fde6 	bl	8000700 <NVIC_EncodePriority>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	2028      	movs	r0, #40	@ 0x28
 8001b3a:	f7fe fdb7 	bl	80006ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b3e:	2028      	movs	r0, #40	@ 0x28
 8001b40:	f7fe fd72 	bl	8000628 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40021800 	.word	0x40021800
 8001b54:	00f00003 	.word	0x00f00003
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020000 	.word	0x40020000

08001b60 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e009      	b.n	8001b86 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	60ba      	str	r2, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fdf3 	bl	8000766 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf1      	blt.n	8001b72 <_write+0x12>
	}
	return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <LED_On>:
  * @brief  Turn-on LED1.
  * @param  None
  * @retval None
  */
void LED_On(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Turn LED1 on */
  LL_GPIO_SetOutputPin(LD1_GPIO_Port, LD1_Pin);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <LED_On+0x10>)
 8001ba0:	f7ff fafd 	bl	800119e <LL_GPIO_SetOutputPin>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40020400 	.word	0x40020400

08001bac <LED_Off>:
  * @brief  Turn-off LED1.
  * @param  None
  * @retval None
  */
void LED_Off(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Turn LED1 off */
  LL_GPIO_ResetOutputPin(LD1_GPIO_Port, LD1_Pin);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <LED_Off+0x10>)
 8001bb4:	f7ff fb01 	bl	80011ba <LL_GPIO_ResetOutputPin>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <LED_Blinking>:
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Toggle LED1 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <LED_Blinking+0x1c>)
 8001bcc:	f7ff fb04 	bl	80011d8 <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f002 fdff 	bl	80047d4 <LL_mDelay>
    LL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001bd6:	bf00      	nop
 8001bd8:	e7f6      	b.n	8001bc8 <LED_Blinking+0x8>
 8001bda:	bf00      	nop
 8001bdc:	40020400 	.word	0x40020400

08001be0 <UserButton_Callback>:
  * @brief  Function to manage User push-button
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Start transfer only if not already ongoing */
  if (ubSend == 0)
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <UserButton_Callback+0x34>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d110      	bne.n	8001c10 <UserButton_Callback+0x30>
  {
    /* Start LPUART transmission : Will initiate TXE interrupt after TDR register is empty */
    LL_USART_TransmitData8(USART3, aStringToSend[ubSend++]);
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <UserButton_Callback+0x34>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	b2d1      	uxtb	r1, r2
 8001bf8:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <UserButton_Callback+0x34>)
 8001bfa:	7011      	strb	r1, [r2, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <UserButton_Callback+0x38>)
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <UserButton_Callback+0x3c>)
 8001c06:	f7ff fa5d 	bl	80010c4 <LL_USART_TransmitData8>

    /* Enable TXE interrupt */
    LL_USART_EnableIT_TXE(USART3);
 8001c0a:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <UserButton_Callback+0x3c>)
 8001c0c:	f7ff f9d4 	bl	8000fb8 <LL_USART_EnableIT_TXE>
  }
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000428 	.word	0x20000428
 8001c18:	2000042c 	.word	0x2000042c
 8001c1c:	40004800 	.word	0x40004800

08001c20 <USART_TXEmpty_Callback>:
  * @brief  Function called for achieving next TX Byte sending
  * @param  None
  * @retval None
  */
void USART_TXEmpty_Callback(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  if (ubSend == (ubSizeToSend - 1))
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <USART_TXEmpty_Callback+0x44>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <USART_TXEmpty_Callback+0x48>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d105      	bne.n	8001c42 <USART_TXEmpty_Callback+0x22>
  {
    /* Disable TXE interrupt */
    LL_USART_DisableIT_TXE(USART3);
 8001c36:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <USART_TXEmpty_Callback+0x4c>)
 8001c38:	f7ff fa23 	bl	8001082 <LL_USART_DisableIT_TXE>

    /* Enable TC interrupt */
    LL_USART_EnableIT_TC(USART3);
 8001c3c:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <USART_TXEmpty_Callback+0x4c>)
 8001c3e:	f7ff f99a 	bl	8000f76 <LL_USART_EnableIT_TC>
  }

  /* Fill TDR with a new char */
  LL_USART_TransmitData8(USART3, aStringToSend[ubSend++]);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <USART_TXEmpty_Callback+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	b2d1      	uxtb	r1, r2
 8001c4c:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <USART_TXEmpty_Callback+0x44>)
 8001c4e:	7011      	strb	r1, [r2, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <USART_TXEmpty_Callback+0x50>)
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <USART_TXEmpty_Callback+0x4c>)
 8001c5a:	f7ff fa33 	bl	80010c4 <LL_USART_TransmitData8>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000428 	.word	0x20000428
 8001c68:	2000052b 	.word	0x2000052b
 8001c6c:	40004800 	.word	0x40004800
 8001c70:	2000042c 	.word	0x2000042c

08001c74 <USART_CharTransmitComplete_Callback>:
  * @brief  Function called at completion of last byte transmission
  * @param  None
  * @retval None
  */
void USART_CharTransmitComplete_Callback(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  if (ubSend == sizeof(aStringToSend))
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <USART_CharTransmitComplete_Callback+0x24>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2bff      	cmp	r3, #255	@ 0xff
 8001c80:	d107      	bne.n	8001c92 <USART_CharTransmitComplete_Callback+0x1e>
  {
    ubSend = 0;
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <USART_CharTransmitComplete_Callback+0x24>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

    /* Disable TC interrupt */
    LL_USART_DisableIT_TC(USART3);
 8001c88:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <USART_CharTransmitComplete_Callback+0x28>)
 8001c8a:	f7ff f9d9 	bl	8001040 <LL_USART_DisableIT_TC>

    /* Turn LED1 On at end of transfer : Tx sequence completed successfully */
    LED_On();
 8001c8e:	f7ff ff83 	bl	8001b98 <LED_On>
  }
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000428 	.word	0x20000428
 8001c9c:	40004800 	.word	0x40004800

08001ca0 <Error_Callback>:
  * @brief  Function called in case of error detected in LPUART IT Handler
  * @param  None
  * @retval None
  */
void Error_Callback(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  __IO uint32_t isr_reg;

  /* Disable LPUARTx_IRQn */
  NVIC_DisableIRQ(USART3_IRQn);
 8001ca6:	2027      	movs	r0, #39	@ 0x27
 8001ca8:	f7fe fcdc 	bl	8000664 <__NVIC_DisableIRQ>

  /* Error handling example :
    - Read LPUART ISR register to identify flag that leads to IT raising
    - Perform corresponding error handling treatment according to flag
  */
  isr_reg = LL_USART_ReadReg(USART3, ISR);
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <Error_Callback+0x34>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	607b      	str	r3, [r7, #4]
  if (isr_reg & LL_USART_ISR_NE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <Error_Callback+0x24>
  {
	  /* case Noise Error flag is raised : ... */
	  LED_Blinking(LED_BLINK_FAST);
 8001cbc:	20c8      	movs	r0, #200	@ 0xc8
 8001cbe:	f7ff ff7f 	bl	8001bc0 <LED_Blinking>
  else
  {
    /* Unexpected IT source : Set LED to Blinking mode to indicate error occurs */
    LED_Blinking(LED_BLINK_ERROR);
  }
}
 8001cc2:	e003      	b.n	8001ccc <Error_Callback+0x2c>
    LED_Blinking(LED_BLINK_ERROR);
 8001cc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc8:	f7ff ff7a 	bl	8001bc0 <LED_Blinking>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40004800 	.word	0x40004800

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <Error_Handler+0x8>

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	@ 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	@ (8001e84 <HAL_ETH_MspInit+0x158>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 8096 	bne.w	8001e7c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d50:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	4a4c      	ldr	r2, [pc, #304]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	4a46      	ldr	r2, [pc, #280]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d74:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a40      	ldr	r2, [pc, #256]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da4:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001df8:	2332      	movs	r3, #50	@ 0x32
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	481e      	ldr	r0, [pc, #120]	@ (8001e8c <HAL_ETH_MspInit+0x160>)
 8001e14:	f000 fedc 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001e18:	2386      	movs	r3, #134	@ 0x86
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e28:	230b      	movs	r3, #11
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4817      	ldr	r0, [pc, #92]	@ (8001e90 <HAL_ETH_MspInit+0x164>)
 8001e34:	f000 fecc 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e4a:	230b      	movs	r3, #11
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	@ (8001e94 <HAL_ETH_MspInit+0x168>)
 8001e56:	f000 febb 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001e5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e6c:	230b      	movs	r3, #11
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4808      	ldr	r0, [pc, #32]	@ (8001e98 <HAL_ETH_MspInit+0x16c>)
 8001e78:	f000 feaa 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	@ 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40028000 	.word	0x40028000
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40021800 	.word	0x40021800

08001e9c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001ea4:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6153      	str	r3, [r2, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <LL_USART_IsActiveFlag_NE>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d101      	bne.n	8001f00 <LL_USART_IsActiveFlag_NE+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_USART_IsActiveFlag_NE+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_USART_IsActiveFlag_TC>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d101      	bne.n	8001f26 <LL_USART_IsActiveFlag_TC+0x18>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_USART_IsActiveFlag_TC+0x1a>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_USART_IsActiveFlag_TXE>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b80      	cmp	r3, #128	@ 0x80
 8001f46:	d101      	bne.n	8001f4c <LL_USART_IsActiveFlag_TXE+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_USART_IsActiveFlag_TXE+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_USART_ClearFlag_TC>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	621a      	str	r2, [r3, #32]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_USART_IsEnabledIT_TC>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	2b40      	cmp	r3, #64	@ 0x40
 8001f86:	d101      	bne.n	8001f8c <LL_USART_IsEnabledIT_TC+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_USART_IsEnabledIT_TC+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_USART_IsEnabledIT_TXE>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	2b80      	cmp	r3, #128	@ 0x80
 8001fac:	d101      	bne.n	8001fb2 <LL_USART_IsEnabledIT_TXE+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_USART_IsEnabledIT_TXE+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_USART_IsEnabledIT_ERROR>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <LL_USART_IsEnabledIT_ERROR+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_USART_IsEnabledIT_ERROR+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fea:	bf00      	nop
 8001fec:	e7fd      	b.n	8001fea <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	bf00      	nop
 8001ff4:	e7fd      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffa:	bf00      	nop
 8001ffc:	e7fd      	b.n	8001ffa <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	bf00      	nop
 8002004:	e7fd      	b.n	8002002 <BusFault_Handler+0x4>

08002006 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200a:	bf00      	nop
 800200c:	e7fd      	b.n	800200a <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 f978 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  if (LL_USART_IsEnabledIT_TXE(USART3) && LL_USART_IsActiveFlag_TXE(USART3))
 8002064:	4817      	ldr	r0, [pc, #92]	@ (80020c4 <USART3_IRQHandler+0x64>)
 8002066:	f7ff ff98 	bl	8001f9a <LL_USART_IsEnabledIT_TXE>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <USART3_IRQHandler+0x20>
 8002070:	4814      	ldr	r0, [pc, #80]	@ (80020c4 <USART3_IRQHandler+0x64>)
 8002072:	f7ff ff5f 	bl	8001f34 <LL_USART_IsActiveFlag_TXE>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <USART3_IRQHandler+0x20>
  {
	/* TXE flag will be automatically cleared when writing new data in TDR register */

	/* Call function in charge of handling empty DR => will lead to transmission of next character */
	USART_TXEmpty_Callback();
 800207c:	f7ff fdd0 	bl	8001c20 <USART_TXEmpty_Callback>
  }

  if (LL_USART_IsEnabledIT_TC(USART3) && LL_USART_IsActiveFlag_TC(USART3))
 8002080:	4810      	ldr	r0, [pc, #64]	@ (80020c4 <USART3_IRQHandler+0x64>)
 8002082:	f7ff ff77 	bl	8001f74 <LL_USART_IsEnabledIT_TC>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <USART3_IRQHandler+0x42>
 800208c:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <USART3_IRQHandler+0x64>)
 800208e:	f7ff ff3e 	bl	8001f0e <LL_USART_IsActiveFlag_TC>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <USART3_IRQHandler+0x42>
  {
	/* Clear TC flag */
	LL_USART_ClearFlag_TC(USART3);
 8002098:	480a      	ldr	r0, [pc, #40]	@ (80020c4 <USART3_IRQHandler+0x64>)
 800209a:	f7ff ff5e 	bl	8001f5a <LL_USART_ClearFlag_TC>
	/* Call function in charge of handling end of transmission of sent character
	   and prepare next character transmission */
	USART_CharTransmitComplete_Callback();
 800209e:	f7ff fde9 	bl	8001c74 <USART_CharTransmitComplete_Callback>
  }

  if (LL_USART_IsEnabledIT_ERROR(USART3) && LL_USART_IsActiveFlag_NE(USART3))
 80020a2:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <USART3_IRQHandler+0x64>)
 80020a4:	f7ff ff8c 	bl	8001fc0 <LL_USART_IsEnabledIT_ERROR>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <USART3_IRQHandler+0x5e>
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <USART3_IRQHandler+0x64>)
 80020b0:	f7ff ff1a 	bl	8001ee8 <LL_USART_IsActiveFlag_NE>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <USART3_IRQHandler+0x5e>
  {
	/* Call Error function */
	Error_Callback();
 80020ba:	f7ff fdf1 	bl	8001ca0 <Error_Callback>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004800 	.word	0x40004800

080020c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80020cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020d0:	f7ff fee4 	bl	8001e9c <LL_EXTI_IsActiveFlag_0_31>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80020da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020de:	f7ff fef3 	bl	8001ec8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    UserButton_Callback();
 80020e2:	f7ff fd7d 	bl	8001be0 <UserButton_Callback>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_kill>:

int _kill(int pid, int sig)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002104:	f003 fa30 	bl	8005568 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	2216      	movs	r2, #22
 800210c:	601a      	str	r2, [r3, #0]
  return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_exit>:

void _exit (int status)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002122:	f04f 31ff 	mov.w	r1, #4294967295
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffe7 	bl	80020fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <_exit+0x12>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
  }

  return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_close>:
  }
  return len;
}

int _close(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002192:	605a      	str	r2, [r3, #4]
  return 0;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_isatty>:

int _isatty(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <_sbrk+0x5c>)
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <_sbrk+0x60>)
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <_sbrk+0x64>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <_sbrk+0x68>)
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d207      	bcs.n	8002214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002204:	f003 f9b0 	bl	8005568 <__errno>
 8002208:	4603      	mov	r3, r0
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e009      	b.n	8002228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221a:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <_sbrk+0x64>)
 8002224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20080000 	.word	0x20080000
 8002234:	00000400 	.word	0x00000400
 8002238:	20000544 	.word	0x20000544
 800223c:	20000698 	.word	0x20000698

08002240 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800229c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002268:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800226a:	490e      	ldr	r1, [pc, #56]	@ (80022a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800226c:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002280:	4c0b      	ldr	r4, [pc, #44]	@ (80022b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800228e:	f7ff ffd7 	bl	8002240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f003 f96f 	bl	8005574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7ff f8c7 	bl	8001428 <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80022a8:	080076c0 	.word	0x080076c0
  ldr r2, =_sbss
 80022ac:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80022b0:	20000698 	.word	0x20000698

080022b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>

080022b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ba:	2003      	movs	r0, #3
 80022bc:	f000 f92e 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f805 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c6:	f7ff fd0d 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f93b 	bl	800256a <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f911 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	@ (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000014 	.word	0x20000014
 800232c:	20000010 	.word	0x20000010

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000014 	.word	0x20000014
 8002354:	20000548 	.word	0x20000548

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000548 	.word	0x20000548

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000014 	.word	0x20000014

080023b8 <__NVIC_SetPriorityGrouping>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x40>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x40>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	05fa0000 	.word	0x05fa0000

08002400 <__NVIC_GetPriorityGrouping>:
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_SetPriority>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	@ (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	@ (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff47 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff5c 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffb0 	bl	80024d8 <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06a      	b.n	800266c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2223      	movs	r2, #35	@ 0x23
 80025a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fbbf 	bl	8001d2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_ETH_Init+0xf0>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	4a30      	ldr	r2, [pc, #192]	@ (8002674 <HAL_ETH_Init+0xf0>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_ETH_Init+0xf0>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <HAL_ETH_Init+0xf4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <HAL_ETH_Init+0xf4>)
 80025cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <HAL_ETH_Init+0xf4>)
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4927      	ldr	r1, [pc, #156]	@ (8002678 <HAL_ETH_Init+0xf4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_ETH_Init+0xf4>)
 80025e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff feac 	bl	8002358 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002602:	e011      	b.n	8002628 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002604:	f7ff fea8 	bl	8002358 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002612:	d909      	bls.n	8002628 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2204      	movs	r2, #4
 8002618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	22e0      	movs	r2, #224	@ 0xe0
 8002620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e021      	b.n	800266c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e4      	bne.n	8002604 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f958 	bl	80028f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f9ff 	bl	8002a44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa55 	bl	8002af6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	461a      	mov	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f9bd 	bl	80029d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2210      	movs	r2, #16
 8002666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	40013800 	.word	0x40013800

0800267c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4b51      	ldr	r3, [pc, #324]	@ (80027d8 <ETH_SetMACConfig+0x15c>)
 8002692:	4013      	ands	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7c1b      	ldrb	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <ETH_SetMACConfig+0x28>
 800269e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026a2:	e000      	b.n	80026a6 <ETH_SetMACConfig+0x2a>
 80026a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7c5b      	ldrb	r3, [r3, #17]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <ETH_SetMACConfig+0x38>
 80026ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026b2:	e000      	b.n	80026b6 <ETH_SetMACConfig+0x3a>
 80026b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7fdb      	ldrb	r3, [r3, #31]
 80026c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	7f92      	ldrb	r2, [r2, #30]
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d102      	bne.n	80026da <ETH_SetMACConfig+0x5e>
 80026d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x60>
 80026da:	2200      	movs	r2, #0
                        macconf->Speed |
 80026dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7f1b      	ldrb	r3, [r3, #28]
 80026e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	791b      	ldrb	r3, [r3, #4]
 80026f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d102      	bne.n	8002704 <ETH_SetMACConfig+0x88>
 80026fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002702:	e000      	b.n	8002706 <ETH_SetMACConfig+0x8a>
 8002704:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	7bdb      	ldrb	r3, [r3, #15]
 800270c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800270e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800271c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800271e:	4313      	orrs	r3, r2
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff fe1a 	bl	8002370 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002752:	4013      	ands	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002762:	2a00      	cmp	r2, #0
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0xee>
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0xf0>
 800276a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800276c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800277a:	2a01      	cmp	r2, #1
 800277c:	d101      	bne.n	8002782 <ETH_SetMACConfig+0x106>
 800277e:	2208      	movs	r2, #8
 8002780:	e000      	b.n	8002784 <ETH_SetMACConfig+0x108>
 8002782:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002784:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800278c:	2a01      	cmp	r2, #1
 800278e:	d101      	bne.n	8002794 <ETH_SetMACConfig+0x118>
 8002790:	2204      	movs	r2, #4
 8002792:	e000      	b.n	8002796 <ETH_SetMACConfig+0x11a>
 8002794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002796:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800279e:	2a01      	cmp	r2, #1
 80027a0:	d101      	bne.n	80027a6 <ETH_SetMACConfig+0x12a>
 80027a2:	2202      	movs	r2, #2
 80027a4:	e000      	b.n	80027a8 <ETH_SetMACConfig+0x12c>
 80027a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fdd5 	bl	8002370 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	ff20810f 	.word	0xff20810f

080027dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <ETH_SetDMAConfig+0x110>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetDMAConfig+0x2c>
 8002802:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002806:	e000      	b.n	800280a <ETH_SetDMAConfig+0x2e>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7b5b      	ldrb	r3, [r3, #13]
 800280e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002810:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	7f52      	ldrb	r2, [r2, #29]
 8002816:	2a00      	cmp	r2, #0
 8002818:	d102      	bne.n	8002820 <ETH_SetDMAConfig+0x44>
 800281a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800281e:	e000      	b.n	8002822 <ETH_SetDMAConfig+0x46>
 8002820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002822:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7b9b      	ldrb	r3, [r3, #14]
 8002828:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800282a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002830:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7f1b      	ldrb	r3, [r3, #28]
 8002836:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7f9b      	ldrb	r3, [r3, #30]
 800283e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002840:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002846:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800284e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002850:	4313      	orrs	r3, r2
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff fd7c 	bl	8002370 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002890:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002896:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800289c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff fd4d 	bl	8002370 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	f8de3f23 	.word	0xf8de3f23

080028f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0a6      	sub	sp, #152	@ 0x98
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800292c:	2300      	movs	r3, #0
 800292e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002936:	2300      	movs	r3, #0
 8002938:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002952:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800295c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002964:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe86 	bl	800267c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002970:	2301      	movs	r3, #1
 8002972:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002974:	2301      	movs	r3, #1
 8002976:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800299c:	2301      	movs	r3, #1
 800299e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff08 	bl	80027dc <ETH_SetDMAConfig>
}
 80029cc:	bf00      	nop
 80029ce:	3798      	adds	r7, #152	@ 0x98
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3305      	adds	r3, #5
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	3204      	adds	r2, #4
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <ETH_MACAddressConfig+0x68>)
 80029f6:	4413      	add	r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3303      	adds	r3, #3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	061a      	lsls	r2, r3, #24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3301      	adds	r3, #1
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <ETH_MACAddressConfig+0x6c>)
 8002a26:	4413      	add	r3, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	6013      	str	r3, [r2, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40028040 	.word	0x40028040
 8002a40:	40028044 	.word	0x40028044

08002a44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e03e      	b.n	8002ad0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	3206      	adds	r2, #6
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d80c      	bhi.n	8002ab4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	e004      	b.n	8002abe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3301      	adds	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d9bd      	bls.n	8002a52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae8:	611a      	str	r2, [r3, #16]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e046      	b.n	8002b92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6919      	ldr	r1, [r3, #16]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002b48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	3212      	adds	r2, #18
 8002b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d80c      	bhi.n	8002b82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6919      	ldr	r1, [r3, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	e004      	b.n	8002b8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d9b5      	bls.n	8002b04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e175      	b.n	8002edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	f040 8164 	bne.w	8002ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d005      	beq.n	8002c26 <HAL_GPIO_Init+0x56>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d130      	bne.n	8002c88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 0201 	and.w	r2, r3, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d017      	beq.n	8002cc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d123      	bne.n	8002d18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80be 	beq.w	8002ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b66      	ldr	r3, [pc, #408]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4a65      	ldr	r2, [pc, #404]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d66:	4b63      	ldr	r3, [pc, #396]	@ (8002ef4 <HAL_GPIO_Init+0x324>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d72:	4a61      	ldr	r2, [pc, #388]	@ (8002ef8 <HAL_GPIO_Init+0x328>)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a58      	ldr	r2, [pc, #352]	@ (8002efc <HAL_GPIO_Init+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d037      	beq.n	8002e0e <HAL_GPIO_Init+0x23e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a57      	ldr	r2, [pc, #348]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_GPIO_Init+0x23a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a56      	ldr	r2, [pc, #344]	@ (8002f04 <HAL_GPIO_Init+0x334>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02b      	beq.n	8002e06 <HAL_GPIO_Init+0x236>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a55      	ldr	r2, [pc, #340]	@ (8002f08 <HAL_GPIO_Init+0x338>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d025      	beq.n	8002e02 <HAL_GPIO_Init+0x232>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a54      	ldr	r2, [pc, #336]	@ (8002f0c <HAL_GPIO_Init+0x33c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <HAL_GPIO_Init+0x22e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a53      	ldr	r2, [pc, #332]	@ (8002f10 <HAL_GPIO_Init+0x340>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0x22a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	@ (8002f14 <HAL_GPIO_Init+0x344>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_Init+0x226>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a51      	ldr	r2, [pc, #324]	@ (8002f18 <HAL_GPIO_Init+0x348>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_Init+0x222>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a50      	ldr	r2, [pc, #320]	@ (8002f1c <HAL_GPIO_Init+0x34c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_Init+0x21e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4f      	ldr	r2, [pc, #316]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_Init+0x21a>
 8002de6:	2309      	movs	r3, #9
 8002de8:	e012      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002dea:	230a      	movs	r3, #10
 8002dec:	e010      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002dee:	2308      	movs	r3, #8
 8002df0:	e00e      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00c      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e00a      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x240>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e20:	4935      	ldr	r1, [pc, #212]	@ (8002ef8 <HAL_GPIO_Init+0x328>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a34      	ldr	r2, [pc, #208]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b32      	ldr	r3, [pc, #200]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e82:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eac:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <HAL_GPIO_Init+0x354>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	f67f ae86 	bls.w	8002bf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021800 	.word	0x40021800
 8002f18:	40021c00 	.word	0x40021c00
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40022400 	.word	0x40022400
 8002f24:	40013c00 	.word	0x40013c00

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	f040 80da 	bne.w	80030fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0d3      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f60:	f7ff f9fa 	bl	8002358 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2319      	movs	r3, #25
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa00 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0be      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	893a      	ldrh	r2, [r7, #8]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2bff      	cmp	r3, #255	@ 0xff
 8002fb2:	d90e      	bls.n	8002fd2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	22ff      	movs	r2, #255	@ 0xff
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	4b51      	ldr	r3, [pc, #324]	@ (8003108 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fbea 	bl	80037a4 <I2C_TransferConfig>
 8002fd0:	e06c      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	8979      	ldrh	r1, [r7, #10]
 8002fe4:	4b48      	ldr	r3, [pc, #288]	@ (8003108 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbd9 	bl	80037a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ff2:	e05b      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f9fd 	bl	80033f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e07b      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d034      	beq.n	80030ac <HAL_I2C_Master_Transmit+0x184>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d130      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	@ 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f98f 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04d      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2bff      	cmp	r3, #255	@ 0xff
 800306c:	d90e      	bls.n	800308c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	@ 0xff
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fb8d 	bl	80037a4 <I2C_TransferConfig>
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb7c 	bl	80037a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d19e      	bne.n	8002ff4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9dc 	bl	8003478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01a      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_I2C_Master_Transmit+0x1e4>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	80002000 	.word	0x80002000
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
 8003120:	4613      	mov	r3, r2
 8003122:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	f040 80db 	bne.w	80032e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2C_Master_Receive+0x30>
 800313c:	2302      	movs	r3, #2
 800313e:	e0d4      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003148:	f7ff f906 	bl	8002358 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2319      	movs	r3, #25
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f90c 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0bf      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2222      	movs	r2, #34	@ 0x22
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2210      	movs	r2, #16
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2bff      	cmp	r3, #255	@ 0xff
 800319a:	d90e      	bls.n	80031ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_I2C_Master_Receive+0x1e4>)
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 faf6 	bl	80037a4 <I2C_TransferConfig>
 80031b8:	e06d      	b.n	8003296 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	4b49      	ldr	r3, [pc, #292]	@ (80032f4 <HAL_I2C_Master_Receive+0x1e4>)
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fae5 	bl	80037a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031da:	e05c      	b.n	8003296 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	6a39      	ldr	r1, [r7, #32]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f985 	bl	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e07c      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d034      	beq.n	8003296 <HAL_I2C_Master_Receive+0x186>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d130      	bne.n	8003296 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2200      	movs	r2, #0
 800323c:	2180      	movs	r1, #128	@ 0x80
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f89a 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e04d      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2bff      	cmp	r3, #255	@ 0xff
 8003256:	d90e      	bls.n	8003276 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	22ff      	movs	r2, #255	@ 0xff
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa98 	bl	80037a4 <I2C_TransferConfig>
 8003274:	e00f      	b.n	8003296 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	2300      	movs	r3, #0
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa87 	bl	80037a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d19d      	bne.n	80031dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f8e7 	bl	8003478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e01a      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2220      	movs	r2, #32
 80032ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <HAL_I2C_Master_Receive+0x1e8>)
 80032c8:	400b      	ands	r3, r1
 80032ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	80002400 	.word	0x80002400
 80032f8:	fe00e800 	.word	0xfe00e800

080032fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330a:	b2db      	uxtb	r3, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d103      	bne.n	800334e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	619a      	str	r2, [r3, #24]
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	e022      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d01e      	beq.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe ffe1 	bl	8002358 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d113      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e00f      	b.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d0cd      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003404:	e02c      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8ea 	bl	80035e4 <I2C_IsErrorOccurred>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e02a      	b.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d01e      	beq.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe ff99 	bl	8002358 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d1cb      	bne.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003484:	e028      	b.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8aa 	bl	80035e4 <I2C_IsErrorOccurred>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e026      	b.n	80034e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe ff5d 	bl	8002358 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d1cf      	bne.n	8003486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034fc:	e064      	b.n	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f86e 	bl	80035e4 <I2C_IsErrorOccurred>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e062      	b.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d138      	bne.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d105      	bne.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e04e      	b.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b10      	cmp	r3, #16
 8003546:	d107      	bne.n	8003558 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2204      	movs	r2, #4
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
 8003556:	e002      	b.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003572:	400b      	ands	r3, r1
 8003574:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fee1 	bl	8002358 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e007      	b.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d193      	bne.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d068      	beq.n	80036e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2210      	movs	r2, #16
 8003616:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003618:	e049      	b.n	80036ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d045      	beq.n	80036ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe fe99 	bl	8002358 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_IsErrorOccurred+0x54>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d13a      	bne.n	80036ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800364a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800365a:	d121      	bne.n	80036a0 <I2C_IsErrorOccurred+0xbc>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003662:	d01d      	beq.n	80036a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b20      	cmp	r3, #32
 8003668:	d01a      	beq.n	80036a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003678:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800367a:	f7fe fe6d 	bl	8002358 <HAL_GetTick>
 800367e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003680:	e00e      	b.n	80036a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003682:	f7fe fe69 	bl	8002358 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b19      	cmp	r3, #25
 800368e:	d907      	bls.n	80036a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f043 0320 	orr.w	r3, r3, #32
 8003696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800369e:	e006      	b.n	80036ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d1e9      	bne.n	8003682 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d003      	beq.n	80036c4 <I2C_IsErrorOccurred+0xe0>
 80036bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0aa      	beq.n	800361a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2220      	movs	r2, #32
 80036d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fde9 	bl	8003330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <I2C_IsErrorOccurred+0x1bc>)
 800376a:	400b      	ands	r3, r1
 800376c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003796:	4618      	mov	r0, r3
 8003798:	3728      	adds	r7, #40	@ 0x28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	fe00e800 	.word	0xfe00e800

080037a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	4613      	mov	r3, r2
 80037b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037bc:	7a7b      	ldrb	r3, [r7, #9]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <I2C_TransferConfig+0x60>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	43db      	mvns	r3, r3
 80037e8:	ea02 0103 	and.w	r1, r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	03ff63ff 	.word	0x03ff63ff

08003808 <LL_EXTI_EnableIT_0_31>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <LL_EXTI_EnableIT_0_31+0x20>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4904      	ldr	r1, [pc, #16]	@ (8003828 <LL_EXTI_EnableIT_0_31+0x20>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40013c00 	.word	0x40013c00

0800382c <LL_EXTI_DisableIT_0_31>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <LL_EXTI_DisableIT_0_31+0x24>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	43db      	mvns	r3, r3
 800383c:	4904      	ldr	r1, [pc, #16]	@ (8003850 <LL_EXTI_DisableIT_0_31+0x24>)
 800383e:	4013      	ands	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40013c00 	.word	0x40013c00

08003854 <LL_EXTI_EnableEvent_0_31>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <LL_EXTI_EnableEvent_0_31+0x20>)
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4904      	ldr	r1, [pc, #16]	@ (8003874 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40013c00 	.word	0x40013c00

08003878 <LL_EXTI_DisableEvent_0_31>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	43db      	mvns	r3, r3
 8003888:	4904      	ldr	r1, [pc, #16]	@ (800389c <LL_EXTI_DisableEvent_0_31+0x24>)
 800388a:	4013      	ands	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40013c00 	.word	0x40013c00

080038a0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	4904      	ldr	r1, [pc, #16]	@ (80038c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	4904      	ldr	r1, [pc, #16]	@ (80038e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40013c00 	.word	0x40013c00

080038ec <LL_EXTI_EnableFallingTrig_0_31>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4904      	ldr	r1, [pc, #16]	@ (800390c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40013c00 	.word	0x40013c00

08003910 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	43db      	mvns	r3, r3
 8003920:	4904      	ldr	r1, [pc, #16]	@ (8003934 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003922:	4013      	ands	r3, r2
 8003924:	60cb      	str	r3, [r1, #12]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40013c00 	.word	0x40013c00

08003938 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d065      	beq.n	8003a18 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d06b      	beq.n	8003a2c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	795b      	ldrb	r3, [r3, #5]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d01c      	beq.n	8003996 <LL_EXTI_Init+0x5e>
 800395c:	2b02      	cmp	r3, #2
 800395e:	dc25      	bgt.n	80039ac <LL_EXTI_Init+0x74>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <LL_EXTI_Init+0x32>
 8003964:	2b01      	cmp	r3, #1
 8003966:	d00b      	beq.n	8003980 <LL_EXTI_Init+0x48>
 8003968:	e020      	b.n	80039ac <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff82 	bl	8003878 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff45 	bl	8003808 <LL_EXTI_EnableIT_0_31>
          break;
 800397e:	e018      	b.n	80039b2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff51 	bl	800382c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff60 	bl	8003854 <LL_EXTI_EnableEvent_0_31>
          break;
 8003994:	e00d      	b.n	80039b2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff34 	bl	8003808 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff55 	bl	8003854 <LL_EXTI_EnableEvent_0_31>
          break;
 80039aa:	e002      	b.n	80039b2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
          break;
 80039b0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	799b      	ldrb	r3, [r3, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d038      	beq.n	8003a2c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d01c      	beq.n	80039fc <LL_EXTI_Init+0xc4>
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	dc25      	bgt.n	8003a12 <LL_EXTI_Init+0xda>
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d002      	beq.n	80039d0 <LL_EXTI_Init+0x98>
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d00b      	beq.n	80039e6 <LL_EXTI_Init+0xae>
 80039ce:	e020      	b.n	8003a12 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff9b 	bl	8003910 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff5e 	bl	80038a0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80039e4:	e022      	b.n	8003a2c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff6a 	bl	80038c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff79 	bl	80038ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039fa:	e017      	b.n	8003a2c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff4d 	bl	80038a0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff6e 	bl	80038ec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a10:	e00c      	b.n	8003a2c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
            break;
 8003a16:	e009      	b.n	8003a2c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff05 	bl	800382c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff26 	bl	8003878 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <LL_GPIO_SetPinMode>:
{
 8003a36:	b480      	push	{r7}
 8003a38:	b089      	sub	sp, #36	@ 0x24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	613b      	str	r3, [r7, #16]
  return result;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2103      	movs	r1, #3
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	401a      	ands	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	61bb      	str	r3, [r7, #24]
  return result;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	431a      	orrs	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3724      	adds	r7, #36	@ 0x24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_GPIO_SetPinOutputType>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_GPIO_SetPinSpeed>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	613b      	str	r3, [r7, #16]
  return result;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2103      	movs	r1, #3
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	61bb      	str	r3, [r7, #24]
  return result;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	3724      	adds	r7, #36	@ 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_GPIO_SetPinPull>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b089      	sub	sp, #36	@ 0x24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	613b      	str	r3, [r7, #16]
  return result;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2103      	movs	r1, #3
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	401a      	ands	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	60da      	str	r2, [r3, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3724      	adds	r7, #36	@ 0x24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_GPIO_SetAFPin_0_7>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	613b      	str	r3, [r7, #16]
  return result;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	401a      	ands	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	61bb      	str	r3, [r7, #24]
  return result;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	3724      	adds	r7, #36	@ 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_GPIO_SetAFPin_8_15>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	b089      	sub	sp, #36	@ 0x24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	613b      	str	r3, [r7, #16]
  return result;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	210f      	movs	r1, #15
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c34:	bf00      	nop
 8003c36:	3724      	adds	r7, #36	@ 0x24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	613b      	str	r3, [r7, #16]
  return result;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c6a:	e051      	b.n	8003d10 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d043      	beq.n	8003d0a <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d003      	beq.n	8003c92 <LL_GPIO_Init+0x52>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d10e      	bne.n	8003cb0 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	461a      	mov	r2, r3
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff12 	bl	8003ac4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fef2 	bl	8003a94 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff32 	bl	8003b22 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d11a      	bne.n	8003cfc <LL_GPIO_Init+0xbc>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	60bb      	str	r3, [r7, #8]
  return result;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	d807      	bhi.n	8003cee <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff4a 	bl	8003b80 <LL_GPIO_SetAFPin_0_7>
 8003cec:	e006      	b.n	8003cfc <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff71 	bl	8003bde <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	69b9      	ldr	r1, [r7, #24]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe96 	bl	8003a36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1a6      	bne.n	8003c6c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <LL_I2C_Enable>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_I2C_Disable>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0201 	bic.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_I2C_ConfigFilters>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0219      	lsls	r1, r3, #8
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <LL_I2C_SetOwnAddress1>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <LL_I2C_SetOwnAddress1+0x2c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	fffff800 	.word	0xfffff800

08003dc8 <LL_I2C_EnableOwnAddress1>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_I2C_DisableOwnAddress1>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_I2C_SetTiming>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	611a      	str	r2, [r3, #16]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_I2C_SetMode>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ff64 	bl	8003d48 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6899      	ldr	r1, [r3, #8]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff6c 	bl	8003d68 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffb6 	bl	8003e08 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff43 	bl	8003d28 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ffa0 	bl	8003de8 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ff70 	bl	8003d98 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff81 	bl	8003dc8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffa9 	bl	8003e24 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ffb6 	bl	8003e4a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <LL_RCC_HSI_IsReady>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <LL_RCC_HSI_IsReady+0x20>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40023800 	.word	0x40023800

08003f0c <LL_RCC_LSE_IsReady>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <LL_RCC_LSE_IsReady+0x20>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40023800 	.word	0x40023800

08003f30 <LL_RCC_GetSysClkSource>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <LL_RCC_GetSysClkSource+0x18>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <LL_RCC_GetAHBPrescaler>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f50:	4b04      	ldr	r3, [pc, #16]	@ (8003f64 <LL_RCC_GetAHBPrescaler+0x18>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800

08003f68 <LL_RCC_GetAPB1Prescaler>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800

08003f84 <LL_RCC_GetAPB2Prescaler>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <LL_RCC_GetUSARTClockSource>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8003fa8:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <LL_RCC_GetUSARTClockSource+0x24>)
 8003faa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	4313      	orrs	r3, r2
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <LL_RCC_GetUARTClockSource>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8003fd0:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <LL_RCC_GetUARTClockSource+0x24>)
 8003fd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	401a      	ands	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	4313      	orrs	r3, r2
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40023800 	.word	0x40023800

08003ff0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <LL_RCC_PLL_GetMainSource+0x18>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004010:	4b04      	ldr	r3, [pc, #16]	@ (8004024 <LL_RCC_PLL_GetN+0x18>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800401a:	4618      	mov	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40023800 	.word	0x40023800

08004028 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <LL_RCC_PLL_GetP+0x18>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800

08004044 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <LL_RCC_PLL_GetDivider+0x18>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d133      	bne.n	80040da <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff94 	bl	8003fa0 <LL_RCC_GetUSARTClockSource>
 8004078:	4603      	mov	r3, r0
 800407a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800407e:	d016      	beq.n	80040ae <LL_RCC_GetUSARTClockFreq+0x4e>
 8004080:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8004084:	d81d      	bhi.n	80040c2 <LL_RCC_GetUSARTClockFreq+0x62>
 8004086:	4a70      	ldr	r2, [pc, #448]	@ (8004248 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <LL_RCC_GetUSARTClockFreq+0x34>
 800408c:	4a6f      	ldr	r2, [pc, #444]	@ (800424c <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <LL_RCC_GetUSARTClockFreq+0x3c>
 8004092:	e016      	b.n	80040c2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004094:	f000 f9f2 	bl	800447c <RCC_GetSystemClockFreq>
 8004098:	60f8      	str	r0, [r7, #12]
        break;
 800409a:	e0cf      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800409c:	f7ff ff24 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80bb 	beq.w	800421e <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 80040a8:	4b69      	ldr	r3, [pc, #420]	@ (8004250 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80040aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040ac:	e0b7      	b.n	800421e <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80040ae:	f7ff ff2d 	bl	8003f0c <LL_RCC_LSE_IsReady>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80b4 	beq.w	8004222 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040c0:	e0af      	b.n	8004222 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80040c2:	f000 f9db 	bl	800447c <RCC_GetSystemClockFreq>
 80040c6:	4603      	mov	r3, r0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f9ff 	bl	80044cc <RCC_GetHCLKClockFreq>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fa25 	bl	8004520 <RCC_GetPCLK2ClockFreq>
 80040d6:	60f8      	str	r0, [r7, #12]
        break;
 80040d8:	e0b0      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	d133      	bne.n	8004148 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff5d 	bl	8003fa0 <LL_RCC_GetUSARTClockSource>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 80040ec:	d016      	beq.n	800411c <LL_RCC_GetUSARTClockFreq+0xbc>
 80040ee:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 80040f2:	d81d      	bhi.n	8004130 <LL_RCC_GetUSARTClockFreq+0xd0>
 80040f4:	4a57      	ldr	r2, [pc, #348]	@ (8004254 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <LL_RCC_GetUSARTClockFreq+0xa2>
 80040fa:	4a57      	ldr	r2, [pc, #348]	@ (8004258 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <LL_RCC_GetUSARTClockFreq+0xaa>
 8004100:	e016      	b.n	8004130 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004102:	f000 f9bb 	bl	800447c <RCC_GetSystemClockFreq>
 8004106:	60f8      	str	r0, [r7, #12]
        break;
 8004108:	e098      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800410a:	f7ff feed 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8088 	beq.w	8004226 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 8004116:	4b4e      	ldr	r3, [pc, #312]	@ (8004250 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8004118:	60fb      	str	r3, [r7, #12]
        }
        break;
 800411a:	e084      	b.n	8004226 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800411c:	f7ff fef6 	bl	8003f0c <LL_RCC_LSE_IsReady>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8081 	beq.w	800422a <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 8004128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800412e:	e07c      	b.n	800422a <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004130:	f000 f9a4 	bl	800447c <RCC_GetSystemClockFreq>
 8004134:	4603      	mov	r3, r0
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f9c8 	bl	80044cc <RCC_GetHCLKClockFreq>
 800413c:	4603      	mov	r3, r0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f9da 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 8004144:	60f8      	str	r0, [r7, #12]
        break;
 8004146:	e079      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800414e:	d131      	bne.n	80041b4 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff25 	bl	8003fa0 <LL_RCC_GetUSARTClockSource>
 8004156:	4603      	mov	r3, r0
 8004158:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800415c:	d015      	beq.n	800418a <LL_RCC_GetUSARTClockFreq+0x12a>
 800415e:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8004162:	d81b      	bhi.n	800419c <LL_RCC_GetUSARTClockFreq+0x13c>
 8004164:	4a3d      	ldr	r2, [pc, #244]	@ (800425c <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <LL_RCC_GetUSARTClockFreq+0x112>
 800416a:	4a3d      	ldr	r2, [pc, #244]	@ (8004260 <LL_RCC_GetUSARTClockFreq+0x200>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <LL_RCC_GetUSARTClockFreq+0x11a>
 8004170:	e014      	b.n	800419c <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004172:	f000 f983 	bl	800447c <RCC_GetSystemClockFreq>
 8004176:	60f8      	str	r0, [r7, #12]
        break;
 8004178:	e060      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800417a:	f7ff feb5 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d054      	beq.n	800422e <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8004184:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8004186:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004188:	e051      	b.n	800422e <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800418a:	f7ff febf 	bl	8003f0c <LL_RCC_LSE_IsReady>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d04e      	beq.n	8004232 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8004194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004198:	60fb      	str	r3, [r7, #12]
        }
        break;
 800419a:	e04a      	b.n	8004232 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800419c:	f000 f96e 	bl	800447c <RCC_GetSystemClockFreq>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f992 	bl	80044cc <RCC_GetHCLKClockFreq>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9b8 	bl	8004520 <RCC_GetPCLK2ClockFreq>
 80041b0:	60f8      	str	r0, [r7, #12]
        break;
 80041b2:	e043      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b30      	cmp	r3, #48	@ 0x30
 80041b8:	d140      	bne.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fef0 	bl	8003fa0 <LL_RCC_GetUSARTClockSource>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80041c6:	d015      	beq.n	80041f4 <LL_RCC_GetUSARTClockFreq+0x194>
 80041c8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80041cc:	d81b      	bhi.n	8004206 <LL_RCC_GetUSARTClockFreq+0x1a6>
 80041ce:	4a25      	ldr	r2, [pc, #148]	@ (8004264 <LL_RCC_GetUSARTClockFreq+0x204>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <LL_RCC_GetUSARTClockFreq+0x17c>
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <LL_RCC_GetUSARTClockFreq+0x208>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <LL_RCC_GetUSARTClockFreq+0x184>
 80041da:	e014      	b.n	8004206 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80041dc:	f000 f94e 	bl	800447c <RCC_GetSystemClockFreq>
 80041e0:	60f8      	str	r0, [r7, #12]
          break;
 80041e2:	e02b      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 80041e4:	f7ff fe80 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 80041ee:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80041f0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80041f2:	e020      	b.n	8004236 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 80041f4:	f7ff fe8a 	bl	8003f0c <LL_RCC_LSE_IsReady>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01d      	beq.n	800423a <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004204:	e019      	b.n	800423a <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004206:	f000 f939 	bl	800447c <RCC_GetSystemClockFreq>
 800420a:	4603      	mov	r3, r0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f95d 	bl	80044cc <RCC_GetHCLKClockFreq>
 8004212:	4603      	mov	r3, r0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f96f 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 800421a:	60f8      	str	r0, [r7, #12]
          break;
 800421c:	e00e      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800421e:	bf00      	nop
 8004220:	e00c      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8004222:	bf00      	nop
 8004224:	e00a      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8004226:	bf00      	nop
 8004228:	e008      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800422a:	bf00      	nop
 800422c:	e006      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800422e:	bf00      	nop
 8004230:	e004      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800423a:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	00030001 	.word	0x00030001
 800424c:	00030002 	.word	0x00030002
 8004250:	00f42400 	.word	0x00f42400
 8004254:	000c0004 	.word	0x000c0004
 8004258:	000c0008 	.word	0x000c0008
 800425c:	0c000400 	.word	0x0c000400
 8004260:	0c000800 	.word	0x0c000800
 8004264:	00300010 	.word	0x00300010
 8004268:	00300020 	.word	0x00300020

0800426c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2bc0      	cmp	r3, #192	@ 0xc0
 800427c:	d133      	bne.n	80042e6 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fea2 	bl	8003fc8 <LL_RCC_GetUARTClockSource>
 8004284:	4603      	mov	r3, r0
 8004286:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800428a:	d016      	beq.n	80042ba <LL_RCC_GetUARTClockFreq+0x4e>
 800428c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004290:	d81d      	bhi.n	80042ce <LL_RCC_GetUARTClockFreq+0x62>
 8004292:	4a71      	ldr	r2, [pc, #452]	@ (8004458 <LL_RCC_GetUARTClockFreq+0x1ec>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <LL_RCC_GetUARTClockFreq+0x34>
 8004298:	4a70      	ldr	r2, [pc, #448]	@ (800445c <LL_RCC_GetUARTClockFreq+0x1f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <LL_RCC_GetUARTClockFreq+0x3c>
 800429e:	e016      	b.n	80042ce <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80042a0:	f000 f8ec 	bl	800447c <RCC_GetSystemClockFreq>
 80042a4:	60f8      	str	r0, [r7, #12]
        break;
 80042a6:	e0d1      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80042a8:	f7ff fe1e 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80bd 	beq.w	800442e <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 80042b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80042b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80042b8:	e0b9      	b.n	800442e <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80042ba:	f7ff fe27 	bl	8003f0c <LL_RCC_LSE_IsReady>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80b6 	beq.w	8004432 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80042cc:	e0b1      	b.n	8004432 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80042ce:	f000 f8d5 	bl	800447c <RCC_GetSystemClockFreq>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f8f9 	bl	80044cc <RCC_GetHCLKClockFreq>
 80042da:	4603      	mov	r3, r0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f90b 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 80042e2:	60f8      	str	r0, [r7, #12]
        break;
 80042e4:	e0b2      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ec:	d133      	bne.n	8004356 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fe6a 	bl	8003fc8 <LL_RCC_GetUARTClockSource>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80042fa:	d016      	beq.n	800432a <LL_RCC_GetUARTClockFreq+0xbe>
 80042fc:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8004300:	d81d      	bhi.n	800433e <LL_RCC_GetUARTClockFreq+0xd2>
 8004302:	4a58      	ldr	r2, [pc, #352]	@ (8004464 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <LL_RCC_GetUARTClockFreq+0xa4>
 8004308:	4a57      	ldr	r2, [pc, #348]	@ (8004468 <LL_RCC_GetUARTClockFreq+0x1fc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <LL_RCC_GetUARTClockFreq+0xac>
 800430e:	e016      	b.n	800433e <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004310:	f000 f8b4 	bl	800447c <RCC_GetSystemClockFreq>
 8004314:	60f8      	str	r0, [r7, #12]
        break;
 8004316:	e099      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004318:	f7ff fde6 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8089 	beq.w	8004436 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8004324:	4b4e      	ldr	r3, [pc, #312]	@ (8004460 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8004326:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004328:	e085      	b.n	8004436 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800432a:	f7ff fdef 	bl	8003f0c <LL_RCC_LSE_IsReady>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8082 	beq.w	800443a <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 8004336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800433a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800433c:	e07d      	b.n	800443a <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800433e:	f000 f89d 	bl	800447c <RCC_GetSystemClockFreq>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f8c1 	bl	80044cc <RCC_GetHCLKClockFreq>
 800434a:	4603      	mov	r3, r0
 800434c:	4618      	mov	r0, r3
 800434e:	f000 f8d3 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 8004352:	60f8      	str	r0, [r7, #12]
        break;
 8004354:	e07a      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800435c:	d131      	bne.n	80043c2 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fe32 	bl	8003fc8 <LL_RCC_GetUARTClockSource>
 8004364:	4603      	mov	r3, r0
 8004366:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800436a:	d015      	beq.n	8004398 <LL_RCC_GetUARTClockFreq+0x12c>
 800436c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8004370:	d81b      	bhi.n	80043aa <LL_RCC_GetUARTClockFreq+0x13e>
 8004372:	4a3e      	ldr	r2, [pc, #248]	@ (800446c <LL_RCC_GetUARTClockFreq+0x200>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <LL_RCC_GetUARTClockFreq+0x114>
 8004378:	4a3d      	ldr	r2, [pc, #244]	@ (8004470 <LL_RCC_GetUARTClockFreq+0x204>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <LL_RCC_GetUARTClockFreq+0x11c>
 800437e:	e014      	b.n	80043aa <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004380:	f000 f87c 	bl	800447c <RCC_GetSystemClockFreq>
 8004384:	60f8      	str	r0, [r7, #12]
        break;
 8004386:	e061      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004388:	f7ff fdae 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d055      	beq.n	800443e <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8004392:	4b33      	ldr	r3, [pc, #204]	@ (8004460 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8004394:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004396:	e052      	b.n	800443e <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004398:	f7ff fdb8 	bl	8003f0c <LL_RCC_LSE_IsReady>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04f      	beq.n	8004442 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80043a8:	e04b      	b.n	8004442 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80043aa:	f000 f867 	bl	800447c <RCC_GetSystemClockFreq>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f88b 	bl	80044cc <RCC_GetHCLKClockFreq>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f89d 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 80043be:	60f8      	str	r0, [r7, #12]
        break;
 80043c0:	e044      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043c8:	d140      	bne.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fdfc 	bl	8003fc8 <LL_RCC_GetUARTClockSource>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80043d6:	d015      	beq.n	8004404 <LL_RCC_GetUARTClockFreq+0x198>
 80043d8:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80043dc:	d81b      	bhi.n	8004416 <LL_RCC_GetUARTClockFreq+0x1aa>
 80043de:	4a25      	ldr	r2, [pc, #148]	@ (8004474 <LL_RCC_GetUARTClockFreq+0x208>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <LL_RCC_GetUARTClockFreq+0x180>
 80043e4:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <LL_RCC_GetUARTClockFreq+0x20c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <LL_RCC_GetUARTClockFreq+0x188>
 80043ea:	e014      	b.n	8004416 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 80043ec:	f000 f846 	bl	800447c <RCC_GetSystemClockFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
          break;
 80043f2:	e02b      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 80043f4:	f7ff fd78 	bl	8003ee8 <LL_RCC_HSI_IsReady>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d023      	beq.n	8004446 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 80043fe:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8004400:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004402:	e020      	b.n	8004446 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8004404:	f7ff fd82 	bl	8003f0c <LL_RCC_LSE_IsReady>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004414:	e019      	b.n	800444a <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004416:	f000 f831 	bl	800447c <RCC_GetSystemClockFreq>
 800441a:	4603      	mov	r3, r0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f855 	bl	80044cc <RCC_GetHCLKClockFreq>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f867 	bl	80044f8 <RCC_GetPCLK1ClockFreq>
 800442a:	60f8      	str	r0, [r7, #12]
          break;
 800442c:	e00e      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800442e:	bf00      	nop
 8004430:	e00c      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8004432:	bf00      	nop
 8004434:	e00a      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8004436:	bf00      	nop
 8004438:	e008      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800443a:	bf00      	nop
 800443c:	e006      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800443e:	bf00      	nop
 8004440:	e004      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800444a:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00c00040 	.word	0x00c00040
 800445c:	00c00080 	.word	0x00c00080
 8004460:	00f42400 	.word	0x00f42400
 8004464:	03000100 	.word	0x03000100
 8004468:	03000200 	.word	0x03000200
 800446c:	30001000 	.word	0x30001000
 8004470:	30002000 	.word	0x30002000
 8004474:	c0004000 	.word	0xc0004000
 8004478:	c0008000 	.word	0xc0008000

0800447c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004486:	f7ff fd53 	bl	8003f30 <LL_RCC_GetSysClkSource>
 800448a:	4603      	mov	r3, r0
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00c      	beq.n	80044aa <RCC_GetSystemClockFreq+0x2e>
 8004490:	2b08      	cmp	r3, #8
 8004492:	d80e      	bhi.n	80044b2 <RCC_GetSystemClockFreq+0x36>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <RCC_GetSystemClockFreq+0x22>
 8004498:	2b04      	cmp	r3, #4
 800449a:	d003      	beq.n	80044a4 <RCC_GetSystemClockFreq+0x28>
 800449c:	e009      	b.n	80044b2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <RCC_GetSystemClockFreq+0x48>)
 80044a0:	607b      	str	r3, [r7, #4]
      break;
 80044a2:	e009      	b.n	80044b8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80044a4:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <RCC_GetSystemClockFreq+0x4c>)
 80044a6:	607b      	str	r3, [r7, #4]
      break;
 80044a8:	e006      	b.n	80044b8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80044aa:	f000 f84d 	bl	8004548 <RCC_PLL_GetFreqDomain_SYS>
 80044ae:	6078      	str	r0, [r7, #4]
      break;
 80044b0:	e002      	b.n	80044b8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80044b2:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <RCC_GetSystemClockFreq+0x48>)
 80044b4:	607b      	str	r3, [r7, #4]
      break;
 80044b6:	bf00      	nop
  }

  return frequency;
 80044b8:	687b      	ldr	r3, [r7, #4]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200

080044cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80044d4:	f7ff fd3a 	bl	8003f4c <LL_RCC_GetAHBPrescaler>
 80044d8:	4603      	mov	r3, r0
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <RCC_GetHCLKClockFreq+0x28>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	40d3      	lsrs	r3, r2
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	08007328 	.word	0x08007328

080044f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004500:	f7ff fd32 	bl	8003f68 <LL_RCC_GetAPB1Prescaler>
 8004504:	4603      	mov	r3, r0
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	4a04      	ldr	r2, [pc, #16]	@ (800451c <RCC_GetPCLK1ClockFreq+0x24>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	40d3      	lsrs	r3, r2
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	08007338 	.word	0x08007338

08004520 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004528:	f7ff fd2c 	bl	8003f84 <LL_RCC_GetAPB2Prescaler>
 800452c:	4603      	mov	r3, r0
 800452e:	0b5b      	lsrs	r3, r3, #13
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <RCC_GetPCLK2ClockFreq+0x24>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	461a      	mov	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	40d3      	lsrs	r3, r2
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08007338 	.word	0x08007338

08004548 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004556:	f7ff fd4b 	bl	8003ff0 <LL_RCC_PLL_GetMainSource>
 800455a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004568:	d003      	beq.n	8004572 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800456a:	e005      	b.n	8004578 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800456c:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800456e:	607b      	str	r3, [r7, #4]
      break;
 8004570:	e005      	b.n	800457e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8004574:	607b      	str	r3, [r7, #4]
      break;
 8004576:	e002      	b.n	800457e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8004578:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800457a:	607b      	str	r3, [r7, #4]
      break;
 800457c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800457e:	f7ff fd61 	bl	8004044 <LL_RCC_PLL_GetDivider>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	fbb3 f4f2 	udiv	r4, r3, r2
 800458a:	f7ff fd3f 	bl	800400c <LL_RCC_PLL_GetN>
 800458e:	4603      	mov	r3, r0
 8004590:	fb03 f404 	mul.w	r4, r3, r4
 8004594:	f7ff fd48 	bl	8004028 <LL_RCC_PLL_GetP>
 8004598:	4603      	mov	r3, r0
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	3301      	adds	r3, #1
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <LL_USART_IsEnabled>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <LL_USART_IsEnabled+0x18>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <LL_USART_IsEnabled+0x1a>
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_USART_SetStopBitsLength>:
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_USART_SetHWFlowCtrl>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_USART_SetBaudRate>:
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463a:	d11a      	bne.n	8004672 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	005a      	lsls	r2, r3, #1
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	b29b      	uxth	r3, r3
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	60da      	str	r2, [r3, #12]
}
 8004670:	e00a      	b.n	8004688 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	085a      	lsrs	r2, r3, #1
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	441a      	add	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	b29b      	uxth	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	60da      	str	r2, [r3, #12]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff84 	bl	80045b4 <LL_USART_IsEnabled>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d179      	bne.n	80047a6 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b3e      	ldr	r3, [pc, #248]	@ (80047b0 <LL_USART_Init+0x11c>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	6851      	ldr	r1, [r2, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	4311      	orrs	r1, r2
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	6912      	ldr	r2, [r2, #16]
 80046c8:	4311      	orrs	r1, r2
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	6992      	ldr	r2, [r2, #24]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff7c 	bl	80045da <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff89 	bl	8004600 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a30      	ldr	r2, [pc, #192]	@ (80047b4 <LL_USART_Init+0x120>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d104      	bne.n	8004700 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80046f6:	2003      	movs	r0, #3
 80046f8:	f7ff fcb2 	bl	8004060 <LL_RCC_GetUSARTClockFreq>
 80046fc:	60b8      	str	r0, [r7, #8]
 80046fe:	e041      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a2d      	ldr	r2, [pc, #180]	@ (80047b8 <LL_USART_Init+0x124>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d104      	bne.n	8004712 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004708:	200c      	movs	r0, #12
 800470a:	f7ff fca9 	bl	8004060 <LL_RCC_GetUSARTClockFreq>
 800470e:	60b8      	str	r0, [r7, #8]
 8004710:	e038      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	@ (80047bc <LL_USART_Init+0x128>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d104      	bne.n	8004724 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800471a:	2030      	movs	r0, #48	@ 0x30
 800471c:	f7ff fca0 	bl	8004060 <LL_RCC_GetUSARTClockFreq>
 8004720:	60b8      	str	r0, [r7, #8]
 8004722:	e02f      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <LL_USART_Init+0x12c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d104      	bne.n	8004736 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800472c:	20c0      	movs	r0, #192	@ 0xc0
 800472e:	f7ff fd9d 	bl	800426c <LL_RCC_GetUARTClockFreq>
 8004732:	60b8      	str	r0, [r7, #8]
 8004734:	e026      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a22      	ldr	r2, [pc, #136]	@ (80047c4 <LL_USART_Init+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d105      	bne.n	800474a <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800473e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8004742:	f7ff fd93 	bl	800426c <LL_RCC_GetUARTClockFreq>
 8004746:	60b8      	str	r0, [r7, #8]
 8004748:	e01c      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <LL_USART_Init+0x134>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d105      	bne.n	800475e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8004752:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004756:	f7ff fc83 	bl	8004060 <LL_RCC_GetUSARTClockFreq>
 800475a:	60b8      	str	r0, [r7, #8]
 800475c:	e012      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <LL_USART_Init+0x138>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d105      	bne.n	8004772 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8004766:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800476a:	f7ff fd7f 	bl	800426c <LL_RCC_GetUARTClockFreq>
 800476e:	60b8      	str	r0, [r7, #8]
 8004770:	e008      	b.n	8004784 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <LL_USART_Init+0x13c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d104      	bne.n	8004784 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800477a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800477e:	f7ff fd75 	bl	800426c <LL_RCC_GetUARTClockFreq>
 8004782:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff40 	bl	8004626 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	efff69f3 	.word	0xefff69f3
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40004400 	.word	0x40004400
 80047bc:	40004800 	.word	0x40004800
 80047c0:	40004c00 	.word	0x40004c00
 80047c4:	40005000 	.word	0x40005000
 80047c8:	40011400 	.word	0x40011400
 80047cc:	40007800 	.word	0x40007800
 80047d0:	40007c00 	.word	0x40007c00

080047d4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <LL_mDelay+0x48>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80047e2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d00c      	beq.n	8004806 <LL_mDelay+0x32>
  {
    Delay++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80047f2:	e008      	b.n	8004806 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <LL_mDelay+0x48>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <LL_mDelay+0x32>
    {
      Delay--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3b01      	subs	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f3      	bne.n	80047f4 <LL_mDelay+0x20>
    }
  }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e010 	.word	0xe000e010

08004820 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004828:	4a04      	ldr	r2, [pc, #16]	@ (800483c <LL_SetSystemCoreClock+0x1c>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000000c 	.word	0x2000000c

08004840 <__cvt>:
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	ed2d 8b02 	vpush	{d8}
 8004846:	eeb0 8b40 	vmov.f64	d8, d0
 800484a:	b085      	sub	sp, #20
 800484c:	4617      	mov	r7, r2
 800484e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004850:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004852:	ee18 2a90 	vmov	r2, s17
 8004856:	f025 0520 	bic.w	r5, r5, #32
 800485a:	2a00      	cmp	r2, #0
 800485c:	bfb6      	itet	lt
 800485e:	222d      	movlt	r2, #45	@ 0x2d
 8004860:	2200      	movge	r2, #0
 8004862:	eeb1 8b40 	vneglt.f64	d8, d0
 8004866:	2d46      	cmp	r5, #70	@ 0x46
 8004868:	460c      	mov	r4, r1
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	d004      	beq.n	8004878 <__cvt+0x38>
 800486e:	2d45      	cmp	r5, #69	@ 0x45
 8004870:	d100      	bne.n	8004874 <__cvt+0x34>
 8004872:	3401      	adds	r4, #1
 8004874:	2102      	movs	r1, #2
 8004876:	e000      	b.n	800487a <__cvt+0x3a>
 8004878:	2103      	movs	r1, #3
 800487a:	ab03      	add	r3, sp, #12
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	ab02      	add	r3, sp, #8
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4622      	mov	r2, r4
 8004884:	4633      	mov	r3, r6
 8004886:	eeb0 0b48 	vmov.f64	d0, d8
 800488a:	f000 ff31 	bl	80056f0 <_dtoa_r>
 800488e:	2d47      	cmp	r5, #71	@ 0x47
 8004890:	d114      	bne.n	80048bc <__cvt+0x7c>
 8004892:	07fb      	lsls	r3, r7, #31
 8004894:	d50a      	bpl.n	80048ac <__cvt+0x6c>
 8004896:	1902      	adds	r2, r0, r4
 8004898:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	bf08      	it	eq
 80048a2:	9203      	streq	r2, [sp, #12]
 80048a4:	2130      	movs	r1, #48	@ 0x30
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d319      	bcc.n	80048e0 <__cvt+0xa0>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048b0:	1a1b      	subs	r3, r3, r0
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	b005      	add	sp, #20
 80048b6:	ecbd 8b02 	vpop	{d8}
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	2d46      	cmp	r5, #70	@ 0x46
 80048be:	eb00 0204 	add.w	r2, r0, r4
 80048c2:	d1e9      	bne.n	8004898 <__cvt+0x58>
 80048c4:	7803      	ldrb	r3, [r0, #0]
 80048c6:	2b30      	cmp	r3, #48	@ 0x30
 80048c8:	d107      	bne.n	80048da <__cvt+0x9a>
 80048ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	bf1c      	itt	ne
 80048d4:	f1c4 0401 	rsbne	r4, r4, #1
 80048d8:	6034      	strne	r4, [r6, #0]
 80048da:	6833      	ldr	r3, [r6, #0]
 80048dc:	441a      	add	r2, r3
 80048de:	e7db      	b.n	8004898 <__cvt+0x58>
 80048e0:	1c5c      	adds	r4, r3, #1
 80048e2:	9403      	str	r4, [sp, #12]
 80048e4:	7019      	strb	r1, [r3, #0]
 80048e6:	e7de      	b.n	80048a6 <__cvt+0x66>

080048e8 <__exponent>:
 80048e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ea:	2900      	cmp	r1, #0
 80048ec:	bfba      	itte	lt
 80048ee:	4249      	neglt	r1, r1
 80048f0:	232d      	movlt	r3, #45	@ 0x2d
 80048f2:	232b      	movge	r3, #43	@ 0x2b
 80048f4:	2909      	cmp	r1, #9
 80048f6:	7002      	strb	r2, [r0, #0]
 80048f8:	7043      	strb	r3, [r0, #1]
 80048fa:	dd29      	ble.n	8004950 <__exponent+0x68>
 80048fc:	f10d 0307 	add.w	r3, sp, #7
 8004900:	461d      	mov	r5, r3
 8004902:	270a      	movs	r7, #10
 8004904:	461a      	mov	r2, r3
 8004906:	fbb1 f6f7 	udiv	r6, r1, r7
 800490a:	fb07 1416 	mls	r4, r7, r6, r1
 800490e:	3430      	adds	r4, #48	@ 0x30
 8004910:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004914:	460c      	mov	r4, r1
 8004916:	2c63      	cmp	r4, #99	@ 0x63
 8004918:	f103 33ff 	add.w	r3, r3, #4294967295
 800491c:	4631      	mov	r1, r6
 800491e:	dcf1      	bgt.n	8004904 <__exponent+0x1c>
 8004920:	3130      	adds	r1, #48	@ 0x30
 8004922:	1e94      	subs	r4, r2, #2
 8004924:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004928:	1c41      	adds	r1, r0, #1
 800492a:	4623      	mov	r3, r4
 800492c:	42ab      	cmp	r3, r5
 800492e:	d30a      	bcc.n	8004946 <__exponent+0x5e>
 8004930:	f10d 0309 	add.w	r3, sp, #9
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	42ac      	cmp	r4, r5
 8004938:	bf88      	it	hi
 800493a:	2300      	movhi	r3, #0
 800493c:	3302      	adds	r3, #2
 800493e:	4403      	add	r3, r0
 8004940:	1a18      	subs	r0, r3, r0
 8004942:	b003      	add	sp, #12
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004946:	f813 6b01 	ldrb.w	r6, [r3], #1
 800494a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800494e:	e7ed      	b.n	800492c <__exponent+0x44>
 8004950:	2330      	movs	r3, #48	@ 0x30
 8004952:	3130      	adds	r1, #48	@ 0x30
 8004954:	7083      	strb	r3, [r0, #2]
 8004956:	70c1      	strb	r1, [r0, #3]
 8004958:	1d03      	adds	r3, r0, #4
 800495a:	e7f1      	b.n	8004940 <__exponent+0x58>
 800495c:	0000      	movs	r0, r0
	...

08004960 <_printf_float>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	b08d      	sub	sp, #52	@ 0x34
 8004966:	460c      	mov	r4, r1
 8004968:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800496c:	4616      	mov	r6, r2
 800496e:	461f      	mov	r7, r3
 8004970:	4605      	mov	r5, r0
 8004972:	f000 fdaf 	bl	80054d4 <_localeconv_r>
 8004976:	f8d0 b000 	ldr.w	fp, [r0]
 800497a:	4658      	mov	r0, fp
 800497c:	f7fb fcb0 	bl	80002e0 <strlen>
 8004980:	2300      	movs	r3, #0
 8004982:	930a      	str	r3, [sp, #40]	@ 0x28
 8004984:	f8d8 3000 	ldr.w	r3, [r8]
 8004988:	f894 9018 	ldrb.w	r9, [r4, #24]
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	9005      	str	r0, [sp, #20]
 8004990:	3307      	adds	r3, #7
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	f103 0108 	add.w	r1, r3, #8
 800499a:	f8c8 1000 	str.w	r1, [r8]
 800499e:	ed93 0b00 	vldr	d0, [r3]
 80049a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004c00 <_printf_float+0x2a0>
 80049a6:	eeb0 7bc0 	vabs.f64	d7, d0
 80049aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80049b6:	dd24      	ble.n	8004a02 <_printf_float+0xa2>
 80049b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	d502      	bpl.n	80049c8 <_printf_float+0x68>
 80049c2:	232d      	movs	r3, #45	@ 0x2d
 80049c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c8:	498f      	ldr	r1, [pc, #572]	@ (8004c08 <_printf_float+0x2a8>)
 80049ca:	4b90      	ldr	r3, [pc, #576]	@ (8004c0c <_printf_float+0x2ac>)
 80049cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80049d0:	bf94      	ite	ls
 80049d2:	4688      	movls	r8, r1
 80049d4:	4698      	movhi	r8, r3
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	2303      	movs	r3, #3
 80049dc:	6123      	str	r3, [r4, #16]
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	f04f 0a00 	mov.w	sl, #0
 80049e4:	9700      	str	r7, [sp, #0]
 80049e6:	4633      	mov	r3, r6
 80049e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80049ea:	4621      	mov	r1, r4
 80049ec:	4628      	mov	r0, r5
 80049ee:	f000 f9d1 	bl	8004d94 <_printf_common>
 80049f2:	3001      	adds	r0, #1
 80049f4:	f040 8089 	bne.w	8004b0a <_printf_float+0x1aa>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b00d      	add	sp, #52	@ 0x34
 80049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a02:	eeb4 0b40 	vcmp.f64	d0, d0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d709      	bvc.n	8004a20 <_printf_float+0xc0>
 8004a0c:	ee10 3a90 	vmov	r3, s1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bfbc      	itt	lt
 8004a14:	232d      	movlt	r3, #45	@ 0x2d
 8004a16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a1a:	497d      	ldr	r1, [pc, #500]	@ (8004c10 <_printf_float+0x2b0>)
 8004a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c14 <_printf_float+0x2b4>)
 8004a1e:	e7d5      	b.n	80049cc <_printf_float+0x6c>
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	1c59      	adds	r1, r3, #1
 8004a24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004a28:	d139      	bne.n	8004a9e <_printf_float+0x13e>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a32:	2300      	movs	r3, #0
 8004a34:	6022      	str	r2, [r4, #0]
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004a3e:	ab09      	add	r3, sp, #36	@ 0x24
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6861      	ldr	r1, [r4, #4]
 8004a44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7ff fef9 	bl	8004840 <__cvt>
 8004a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a54:	4680      	mov	r8, r0
 8004a56:	d129      	bne.n	8004aac <_printf_float+0x14c>
 8004a58:	1cc8      	adds	r0, r1, #3
 8004a5a:	db02      	blt.n	8004a62 <_printf_float+0x102>
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	4299      	cmp	r1, r3
 8004a60:	dd41      	ble.n	8004ae6 <_printf_float+0x186>
 8004a62:	f1a9 0902 	sub.w	r9, r9, #2
 8004a66:	fa5f f989 	uxtb.w	r9, r9
 8004a6a:	3901      	subs	r1, #1
 8004a6c:	464a      	mov	r2, r9
 8004a6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a72:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a74:	f7ff ff38 	bl	80048e8 <__exponent>
 8004a78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a7a:	1813      	adds	r3, r2, r0
 8004a7c:	2a01      	cmp	r2, #1
 8004a7e:	4682      	mov	sl, r0
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	dc02      	bgt.n	8004a8a <_printf_float+0x12a>
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	07d2      	lsls	r2, r2, #31
 8004a88:	d501      	bpl.n	8004a8e <_printf_float+0x12e>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0a6      	beq.n	80049e4 <_printf_float+0x84>
 8004a96:	232d      	movs	r3, #45	@ 0x2d
 8004a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a9c:	e7a2      	b.n	80049e4 <_printf_float+0x84>
 8004a9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004aa2:	d1c4      	bne.n	8004a2e <_printf_float+0xce>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1c2      	bne.n	8004a2e <_printf_float+0xce>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7bf      	b.n	8004a2c <_printf_float+0xcc>
 8004aac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004ab0:	d9db      	bls.n	8004a6a <_printf_float+0x10a>
 8004ab2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004ab6:	d118      	bne.n	8004aea <_printf_float+0x18a>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	dd0b      	ble.n	8004ad6 <_printf_float+0x176>
 8004abe:	6121      	str	r1, [r4, #16]
 8004ac0:	b913      	cbnz	r3, 8004ac8 <_printf_float+0x168>
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	07d0      	lsls	r0, r2, #31
 8004ac6:	d502      	bpl.n	8004ace <_printf_float+0x16e>
 8004ac8:	3301      	adds	r3, #1
 8004aca:	440b      	add	r3, r1
 8004acc:	6123      	str	r3, [r4, #16]
 8004ace:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ad0:	f04f 0a00 	mov.w	sl, #0
 8004ad4:	e7db      	b.n	8004a8e <_printf_float+0x12e>
 8004ad6:	b913      	cbnz	r3, 8004ade <_printf_float+0x17e>
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	07d2      	lsls	r2, r2, #31
 8004adc:	d501      	bpl.n	8004ae2 <_printf_float+0x182>
 8004ade:	3302      	adds	r3, #2
 8004ae0:	e7f4      	b.n	8004acc <_printf_float+0x16c>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e7f2      	b.n	8004acc <_printf_float+0x16c>
 8004ae6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aec:	4299      	cmp	r1, r3
 8004aee:	db05      	blt.n	8004afc <_printf_float+0x19c>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	6121      	str	r1, [r4, #16]
 8004af4:	07d8      	lsls	r0, r3, #31
 8004af6:	d5ea      	bpl.n	8004ace <_printf_float+0x16e>
 8004af8:	1c4b      	adds	r3, r1, #1
 8004afa:	e7e7      	b.n	8004acc <_printf_float+0x16c>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	bfd4      	ite	le
 8004b00:	f1c1 0202 	rsble	r2, r1, #2
 8004b04:	2201      	movgt	r2, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	e7e0      	b.n	8004acc <_printf_float+0x16c>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	055a      	lsls	r2, r3, #21
 8004b0e:	d407      	bmi.n	8004b20 <_printf_float+0x1c0>
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	4642      	mov	r2, r8
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d12a      	bne.n	8004b74 <_printf_float+0x214>
 8004b1e:	e76b      	b.n	80049f8 <_printf_float+0x98>
 8004b20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004b24:	f240 80e0 	bls.w	8004ce8 <_printf_float+0x388>
 8004b28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004b2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	d133      	bne.n	8004b9e <_printf_float+0x23e>
 8004b36:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <_printf_float+0x2b8>)
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f af59 	beq.w	80049f8 <_printf_float+0x98>
 8004b46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b4a:	4543      	cmp	r3, r8
 8004b4c:	db02      	blt.n	8004b54 <_printf_float+0x1f4>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07d8      	lsls	r0, r3, #31
 8004b52:	d50f      	bpl.n	8004b74 <_printf_float+0x214>
 8004b54:	9b05      	ldr	r3, [sp, #20]
 8004b56:	465a      	mov	r2, fp
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f43f af4a 	beq.w	80049f8 <_printf_float+0x98>
 8004b64:	f04f 0900 	mov.w	r9, #0
 8004b68:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b6c:	f104 0a1a 	add.w	sl, r4, #26
 8004b70:	45c8      	cmp	r8, r9
 8004b72:	dc09      	bgt.n	8004b88 <_printf_float+0x228>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	079b      	lsls	r3, r3, #30
 8004b78:	f100 8107 	bmi.w	8004d8a <_printf_float+0x42a>
 8004b7c:	68e0      	ldr	r0, [r4, #12]
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b80:	4298      	cmp	r0, r3
 8004b82:	bfb8      	it	lt
 8004b84:	4618      	movlt	r0, r3
 8004b86:	e739      	b.n	80049fc <_printf_float+0x9c>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af30 	beq.w	80049f8 <_printf_float+0x98>
 8004b98:	f109 0901 	add.w	r9, r9, #1
 8004b9c:	e7e8      	b.n	8004b70 <_printf_float+0x210>
 8004b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dc3b      	bgt.n	8004c1c <_printf_float+0x2bc>
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <_printf_float+0x2b8>)
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f af22 	beq.w	80049f8 <_printf_float+0x98>
 8004bb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004bb8:	ea59 0303 	orrs.w	r3, r9, r3
 8004bbc:	d102      	bne.n	8004bc4 <_printf_float+0x264>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	07d9      	lsls	r1, r3, #31
 8004bc2:	d5d7      	bpl.n	8004b74 <_printf_float+0x214>
 8004bc4:	9b05      	ldr	r3, [sp, #20]
 8004bc6:	465a      	mov	r2, fp
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	f43f af12 	beq.w	80049f8 <_printf_float+0x98>
 8004bd4:	f04f 0a00 	mov.w	sl, #0
 8004bd8:	f104 0b1a 	add.w	fp, r4, #26
 8004bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bde:	425b      	negs	r3, r3
 8004be0:	4553      	cmp	r3, sl
 8004be2:	dc01      	bgt.n	8004be8 <_printf_float+0x288>
 8004be4:	464b      	mov	r3, r9
 8004be6:	e794      	b.n	8004b12 <_printf_float+0x1b2>
 8004be8:	2301      	movs	r3, #1
 8004bea:	465a      	mov	r2, fp
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af00 	beq.w	80049f8 <_printf_float+0x98>
 8004bf8:	f10a 0a01 	add.w	sl, sl, #1
 8004bfc:	e7ee      	b.n	8004bdc <_printf_float+0x27c>
 8004bfe:	bf00      	nop
 8004c00:	ffffffff 	.word	0xffffffff
 8004c04:	7fefffff 	.word	0x7fefffff
 8004c08:	08007340 	.word	0x08007340
 8004c0c:	08007344 	.word	0x08007344
 8004c10:	08007348 	.word	0x08007348
 8004c14:	0800734c 	.word	0x0800734c
 8004c18:	08007350 	.word	0x08007350
 8004c1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c22:	4553      	cmp	r3, sl
 8004c24:	bfa8      	it	ge
 8004c26:	4653      	movge	r3, sl
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	4699      	mov	r9, r3
 8004c2c:	dc37      	bgt.n	8004c9e <_printf_float+0x33e>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9307      	str	r3, [sp, #28]
 8004c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c36:	f104 021a 	add.w	r2, r4, #26
 8004c3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c3c:	9907      	ldr	r1, [sp, #28]
 8004c3e:	9306      	str	r3, [sp, #24]
 8004c40:	eba3 0309 	sub.w	r3, r3, r9
 8004c44:	428b      	cmp	r3, r1
 8004c46:	dc31      	bgt.n	8004cac <_printf_float+0x34c>
 8004c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c4a:	459a      	cmp	sl, r3
 8004c4c:	dc3b      	bgt.n	8004cc6 <_printf_float+0x366>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	07da      	lsls	r2, r3, #31
 8004c52:	d438      	bmi.n	8004cc6 <_printf_float+0x366>
 8004c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c56:	ebaa 0903 	sub.w	r9, sl, r3
 8004c5a:	9b06      	ldr	r3, [sp, #24]
 8004c5c:	ebaa 0303 	sub.w	r3, sl, r3
 8004c60:	4599      	cmp	r9, r3
 8004c62:	bfa8      	it	ge
 8004c64:	4699      	movge	r9, r3
 8004c66:	f1b9 0f00 	cmp.w	r9, #0
 8004c6a:	dc34      	bgt.n	8004cd6 <_printf_float+0x376>
 8004c6c:	f04f 0800 	mov.w	r8, #0
 8004c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c74:	f104 0b1a 	add.w	fp, r4, #26
 8004c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c7a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c7e:	eba3 0309 	sub.w	r3, r3, r9
 8004c82:	4543      	cmp	r3, r8
 8004c84:	f77f af76 	ble.w	8004b74 <_printf_float+0x214>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	465a      	mov	r2, fp
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f aeb0 	beq.w	80049f8 <_printf_float+0x98>
 8004c98:	f108 0801 	add.w	r8, r8, #1
 8004c9c:	e7ec      	b.n	8004c78 <_printf_float+0x318>
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1c1      	bne.n	8004c2e <_printf_float+0x2ce>
 8004caa:	e6a5      	b.n	80049f8 <_printf_float+0x98>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	9206      	str	r2, [sp, #24]
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f ae9e 	beq.w	80049f8 <_printf_float+0x98>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	9a06      	ldr	r2, [sp, #24]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	9307      	str	r3, [sp, #28]
 8004cc4:	e7b9      	b.n	8004c3a <_printf_float+0x2da>
 8004cc6:	9b05      	ldr	r3, [sp, #20]
 8004cc8:	465a      	mov	r2, fp
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d1bf      	bne.n	8004c54 <_printf_float+0x2f4>
 8004cd4:	e690      	b.n	80049f8 <_printf_float+0x98>
 8004cd6:	9a06      	ldr	r2, [sp, #24]
 8004cd8:	464b      	mov	r3, r9
 8004cda:	4442      	add	r2, r8
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d1c2      	bne.n	8004c6c <_printf_float+0x30c>
 8004ce6:	e687      	b.n	80049f8 <_printf_float+0x98>
 8004ce8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004cec:	f1b9 0f01 	cmp.w	r9, #1
 8004cf0:	dc01      	bgt.n	8004cf6 <_printf_float+0x396>
 8004cf2:	07db      	lsls	r3, r3, #31
 8004cf4:	d536      	bpl.n	8004d64 <_printf_float+0x404>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f ae79 	beq.w	80049f8 <_printf_float+0x98>
 8004d06:	9b05      	ldr	r3, [sp, #20]
 8004d08:	465a      	mov	r2, fp
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f ae71 	beq.w	80049f8 <_printf_float+0x98>
 8004d16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004d1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d26:	d018      	beq.n	8004d5a <_printf_float+0x3fa>
 8004d28:	464b      	mov	r3, r9
 8004d2a:	f108 0201 	add.w	r2, r8, #1
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	d10c      	bne.n	8004d52 <_printf_float+0x3f2>
 8004d38:	e65e      	b.n	80049f8 <_printf_float+0x98>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	465a      	mov	r2, fp
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b8      	blx	r7
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f ae57 	beq.w	80049f8 <_printf_float+0x98>
 8004d4a:	f108 0801 	add.w	r8, r8, #1
 8004d4e:	45c8      	cmp	r8, r9
 8004d50:	dbf3      	blt.n	8004d3a <_printf_float+0x3da>
 8004d52:	4653      	mov	r3, sl
 8004d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d58:	e6dc      	b.n	8004b14 <_printf_float+0x1b4>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	f104 0b1a 	add.w	fp, r4, #26
 8004d62:	e7f4      	b.n	8004d4e <_printf_float+0x3ee>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4642      	mov	r2, r8
 8004d68:	e7e1      	b.n	8004d2e <_printf_float+0x3ce>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae3f 	beq.w	80049f8 <_printf_float+0x98>
 8004d7a:	f108 0801 	add.w	r8, r8, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d82:	1a5b      	subs	r3, r3, r1
 8004d84:	4543      	cmp	r3, r8
 8004d86:	dcf0      	bgt.n	8004d6a <_printf_float+0x40a>
 8004d88:	e6f8      	b.n	8004b7c <_printf_float+0x21c>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0919 	add.w	r9, r4, #25
 8004d92:	e7f4      	b.n	8004d7e <_printf_float+0x41e>

08004d94 <_printf_common>:
 8004d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	4616      	mov	r6, r2
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	688a      	ldr	r2, [r1, #8]
 8004d9e:	690b      	ldr	r3, [r1, #16]
 8004da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	bfb8      	it	lt
 8004da8:	4613      	movlt	r3, r2
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004db0:	4607      	mov	r7, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	b10a      	cbz	r2, 8004dba <_printf_common+0x26>
 8004db6:	3301      	adds	r3, #1
 8004db8:	6033      	str	r3, [r6, #0]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	0699      	lsls	r1, r3, #26
 8004dbe:	bf42      	ittt	mi
 8004dc0:	6833      	ldrmi	r3, [r6, #0]
 8004dc2:	3302      	addmi	r3, #2
 8004dc4:	6033      	strmi	r3, [r6, #0]
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	f015 0506 	ands.w	r5, r5, #6
 8004dcc:	d106      	bne.n	8004ddc <_printf_common+0x48>
 8004dce:	f104 0a19 	add.w	sl, r4, #25
 8004dd2:	68e3      	ldr	r3, [r4, #12]
 8004dd4:	6832      	ldr	r2, [r6, #0]
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	dc26      	bgt.n	8004e2a <_printf_common+0x96>
 8004ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	3b00      	subs	r3, #0
 8004de4:	bf18      	it	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	0692      	lsls	r2, r2, #26
 8004dea:	d42b      	bmi.n	8004e44 <_printf_common+0xb0>
 8004dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004df0:	4641      	mov	r1, r8
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c8      	blx	r9
 8004df6:	3001      	adds	r0, #1
 8004df8:	d01e      	beq.n	8004e38 <_printf_common+0xa4>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	6922      	ldr	r2, [r4, #16]
 8004dfe:	f003 0306 	and.w	r3, r3, #6
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	bf02      	ittt	eq
 8004e06:	68e5      	ldreq	r5, [r4, #12]
 8004e08:	6833      	ldreq	r3, [r6, #0]
 8004e0a:	1aed      	subeq	r5, r5, r3
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	bf0c      	ite	eq
 8004e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e14:	2500      	movne	r5, #0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bfc4      	itt	gt
 8004e1a:	1a9b      	subgt	r3, r3, r2
 8004e1c:	18ed      	addgt	r5, r5, r3
 8004e1e:	2600      	movs	r6, #0
 8004e20:	341a      	adds	r4, #26
 8004e22:	42b5      	cmp	r5, r6
 8004e24:	d11a      	bne.n	8004e5c <_printf_common+0xc8>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e008      	b.n	8004e3c <_printf_common+0xa8>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4641      	mov	r1, r8
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c8      	blx	r9
 8004e34:	3001      	adds	r0, #1
 8004e36:	d103      	bne.n	8004e40 <_printf_common+0xac>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	3501      	adds	r5, #1
 8004e42:	e7c6      	b.n	8004dd2 <_printf_common+0x3e>
 8004e44:	18e1      	adds	r1, r4, r3
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	2030      	movs	r0, #48	@ 0x30
 8004e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e4e:	4422      	add	r2, r4
 8004e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e58:	3302      	adds	r3, #2
 8004e5a:	e7c7      	b.n	8004dec <_printf_common+0x58>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4641      	mov	r1, r8
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c8      	blx	r9
 8004e66:	3001      	adds	r0, #1
 8004e68:	d0e6      	beq.n	8004e38 <_printf_common+0xa4>
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7d9      	b.n	8004e22 <_printf_common+0x8e>
	...

08004e70 <_printf_i>:
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	7e0f      	ldrb	r7, [r1, #24]
 8004e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e78:	2f78      	cmp	r7, #120	@ 0x78
 8004e7a:	4691      	mov	r9, r2
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	469a      	mov	sl, r3
 8004e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e86:	d807      	bhi.n	8004e98 <_printf_i+0x28>
 8004e88:	2f62      	cmp	r7, #98	@ 0x62
 8004e8a:	d80a      	bhi.n	8004ea2 <_printf_i+0x32>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	f000 80d2 	beq.w	8005036 <_printf_i+0x1c6>
 8004e92:	2f58      	cmp	r7, #88	@ 0x58
 8004e94:	f000 80b9 	beq.w	800500a <_printf_i+0x19a>
 8004e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ea0:	e03a      	b.n	8004f18 <_printf_i+0xa8>
 8004ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ea6:	2b15      	cmp	r3, #21
 8004ea8:	d8f6      	bhi.n	8004e98 <_printf_i+0x28>
 8004eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8004eb0 <_printf_i+0x40>)
 8004eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004e99 	.word	0x08004e99
 8004ebc:	08004e99 	.word	0x08004e99
 8004ec0:	08004e99 	.word	0x08004e99
 8004ec4:	08004e99 	.word	0x08004e99
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e99 	.word	0x08004e99
 8004ed0:	08004e99 	.word	0x08004e99
 8004ed4:	08004e99 	.word	0x08004e99
 8004ed8:	08004e99 	.word	0x08004e99
 8004edc:	0800501d 	.word	0x0800501d
 8004ee0:	08004f47 	.word	0x08004f47
 8004ee4:	08004fd7 	.word	0x08004fd7
 8004ee8:	08004e99 	.word	0x08004e99
 8004eec:	08004e99 	.word	0x08004e99
 8004ef0:	0800503f 	.word	0x0800503f
 8004ef4:	08004e99 	.word	0x08004e99
 8004ef8:	08004f47 	.word	0x08004f47
 8004efc:	08004e99 	.word	0x08004e99
 8004f00:	08004e99 	.word	0x08004e99
 8004f04:	08004fdf 	.word	0x08004fdf
 8004f08:	6833      	ldr	r3, [r6, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6032      	str	r2, [r6, #0]
 8004f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e09d      	b.n	8005058 <_printf_i+0x1e8>
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	6031      	str	r1, [r6, #0]
 8004f24:	0606      	lsls	r6, r0, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xbc>
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	e003      	b.n	8004f34 <_printf_i+0xc4>
 8004f2c:	0645      	lsls	r5, r0, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xb8>
 8004f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	da03      	bge.n	8004f40 <_printf_i+0xd0>
 8004f38:	232d      	movs	r3, #45	@ 0x2d
 8004f3a:	426d      	negs	r5, r5
 8004f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f40:	4859      	ldr	r0, [pc, #356]	@ (80050a8 <_printf_i+0x238>)
 8004f42:	230a      	movs	r3, #10
 8004f44:	e011      	b.n	8004f6a <_printf_i+0xfa>
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	0608      	lsls	r0, r1, #24
 8004f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f50:	d402      	bmi.n	8004f58 <_printf_i+0xe8>
 8004f52:	0649      	lsls	r1, r1, #25
 8004f54:	bf48      	it	mi
 8004f56:	b2ad      	uxthmi	r5, r5
 8004f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f5a:	4853      	ldr	r0, [pc, #332]	@ (80050a8 <_printf_i+0x238>)
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	bf14      	ite	ne
 8004f60:	230a      	movne	r3, #10
 8004f62:	2308      	moveq	r3, #8
 8004f64:	2100      	movs	r1, #0
 8004f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f6a:	6866      	ldr	r6, [r4, #4]
 8004f6c:	60a6      	str	r6, [r4, #8]
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	bfa2      	ittt	ge
 8004f72:	6821      	ldrge	r1, [r4, #0]
 8004f74:	f021 0104 	bicge.w	r1, r1, #4
 8004f78:	6021      	strge	r1, [r4, #0]
 8004f7a:	b90d      	cbnz	r5, 8004f80 <_printf_i+0x110>
 8004f7c:	2e00      	cmp	r6, #0
 8004f7e:	d04b      	beq.n	8005018 <_printf_i+0x1a8>
 8004f80:	4616      	mov	r6, r2
 8004f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f86:	fb03 5711 	mls	r7, r3, r1, r5
 8004f8a:	5dc7      	ldrb	r7, [r0, r7]
 8004f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f90:	462f      	mov	r7, r5
 8004f92:	42bb      	cmp	r3, r7
 8004f94:	460d      	mov	r5, r1
 8004f96:	d9f4      	bls.n	8004f82 <_printf_i+0x112>
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d10b      	bne.n	8004fb4 <_printf_i+0x144>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	07df      	lsls	r7, r3, #31
 8004fa0:	d508      	bpl.n	8004fb4 <_printf_i+0x144>
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	6861      	ldr	r1, [r4, #4]
 8004fa6:	4299      	cmp	r1, r3
 8004fa8:	bfde      	ittt	le
 8004faa:	2330      	movle	r3, #48	@ 0x30
 8004fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fb4:	1b92      	subs	r2, r2, r6
 8004fb6:	6122      	str	r2, [r4, #16]
 8004fb8:	f8cd a000 	str.w	sl, [sp]
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	aa03      	add	r2, sp, #12
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f7ff fee6 	bl	8004d94 <_printf_common>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d14a      	bne.n	8005062 <_printf_i+0x1f2>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	b004      	add	sp, #16
 8004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f043 0320 	orr.w	r3, r3, #32
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	4833      	ldr	r0, [pc, #204]	@ (80050ac <_printf_i+0x23c>)
 8004fe0:	2778      	movs	r7, #120	@ 0x78
 8004fe2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	6831      	ldr	r1, [r6, #0]
 8004fea:	061f      	lsls	r7, r3, #24
 8004fec:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ff0:	d402      	bmi.n	8004ff8 <_printf_i+0x188>
 8004ff2:	065f      	lsls	r7, r3, #25
 8004ff4:	bf48      	it	mi
 8004ff6:	b2ad      	uxthmi	r5, r5
 8004ff8:	6031      	str	r1, [r6, #0]
 8004ffa:	07d9      	lsls	r1, r3, #31
 8004ffc:	bf44      	itt	mi
 8004ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8005002:	6023      	strmi	r3, [r4, #0]
 8005004:	b11d      	cbz	r5, 800500e <_printf_i+0x19e>
 8005006:	2310      	movs	r3, #16
 8005008:	e7ac      	b.n	8004f64 <_printf_i+0xf4>
 800500a:	4827      	ldr	r0, [pc, #156]	@ (80050a8 <_printf_i+0x238>)
 800500c:	e7e9      	b.n	8004fe2 <_printf_i+0x172>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f023 0320 	bic.w	r3, r3, #32
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	e7f6      	b.n	8005006 <_printf_i+0x196>
 8005018:	4616      	mov	r6, r2
 800501a:	e7bd      	b.n	8004f98 <_printf_i+0x128>
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	6961      	ldr	r1, [r4, #20]
 8005022:	1d18      	adds	r0, r3, #4
 8005024:	6030      	str	r0, [r6, #0]
 8005026:	062e      	lsls	r6, r5, #24
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	d501      	bpl.n	8005030 <_printf_i+0x1c0>
 800502c:	6019      	str	r1, [r3, #0]
 800502e:	e002      	b.n	8005036 <_printf_i+0x1c6>
 8005030:	0668      	lsls	r0, r5, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0x1bc>
 8005034:	8019      	strh	r1, [r3, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	4616      	mov	r6, r2
 800503c:	e7bc      	b.n	8004fb8 <_printf_i+0x148>
 800503e:	6833      	ldr	r3, [r6, #0]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	6032      	str	r2, [r6, #0]
 8005044:	681e      	ldr	r6, [r3, #0]
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	2100      	movs	r1, #0
 800504a:	4630      	mov	r0, r6
 800504c:	f7fb f8f8 	bl	8000240 <memchr>
 8005050:	b108      	cbz	r0, 8005056 <_printf_i+0x1e6>
 8005052:	1b80      	subs	r0, r0, r6
 8005054:	6060      	str	r0, [r4, #4]
 8005056:	6863      	ldr	r3, [r4, #4]
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	2300      	movs	r3, #0
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005060:	e7aa      	b.n	8004fb8 <_printf_i+0x148>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	4632      	mov	r2, r6
 8005066:	4649      	mov	r1, r9
 8005068:	4640      	mov	r0, r8
 800506a:	47d0      	blx	sl
 800506c:	3001      	adds	r0, #1
 800506e:	d0ad      	beq.n	8004fcc <_printf_i+0x15c>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	079b      	lsls	r3, r3, #30
 8005074:	d413      	bmi.n	800509e <_printf_i+0x22e>
 8005076:	68e0      	ldr	r0, [r4, #12]
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	4298      	cmp	r0, r3
 800507c:	bfb8      	it	lt
 800507e:	4618      	movlt	r0, r3
 8005080:	e7a6      	b.n	8004fd0 <_printf_i+0x160>
 8005082:	2301      	movs	r3, #1
 8005084:	4632      	mov	r2, r6
 8005086:	4649      	mov	r1, r9
 8005088:	4640      	mov	r0, r8
 800508a:	47d0      	blx	sl
 800508c:	3001      	adds	r0, #1
 800508e:	d09d      	beq.n	8004fcc <_printf_i+0x15c>
 8005090:	3501      	adds	r5, #1
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	9903      	ldr	r1, [sp, #12]
 8005096:	1a5b      	subs	r3, r3, r1
 8005098:	42ab      	cmp	r3, r5
 800509a:	dcf2      	bgt.n	8005082 <_printf_i+0x212>
 800509c:	e7eb      	b.n	8005076 <_printf_i+0x206>
 800509e:	2500      	movs	r5, #0
 80050a0:	f104 0619 	add.w	r6, r4, #25
 80050a4:	e7f5      	b.n	8005092 <_printf_i+0x222>
 80050a6:	bf00      	nop
 80050a8:	08007352 	.word	0x08007352
 80050ac:	08007363 	.word	0x08007363

080050b0 <std>:
 80050b0:	2300      	movs	r3, #0
 80050b2:	b510      	push	{r4, lr}
 80050b4:	4604      	mov	r4, r0
 80050b6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050be:	6083      	str	r3, [r0, #8]
 80050c0:	8181      	strh	r1, [r0, #12]
 80050c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80050c4:	81c2      	strh	r2, [r0, #14]
 80050c6:	6183      	str	r3, [r0, #24]
 80050c8:	4619      	mov	r1, r3
 80050ca:	2208      	movs	r2, #8
 80050cc:	305c      	adds	r0, #92	@ 0x5c
 80050ce:	f000 f9f9 	bl	80054c4 <memset>
 80050d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <std+0x58>)
 80050d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <std+0x5c>)
 80050d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <std+0x60>)
 80050dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <std+0x64>)
 80050e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <std+0x68>)
 80050e4:	6224      	str	r4, [r4, #32]
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d006      	beq.n	80050f8 <std+0x48>
 80050ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050ee:	4294      	cmp	r4, r2
 80050f0:	d002      	beq.n	80050f8 <std+0x48>
 80050f2:	33d0      	adds	r3, #208	@ 0xd0
 80050f4:	429c      	cmp	r4, r3
 80050f6:	d105      	bne.n	8005104 <std+0x54>
 80050f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	f000 ba5c 	b.w	80055bc <__retarget_lock_init_recursive>
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	08005315 	.word	0x08005315
 800510c:	08005337 	.word	0x08005337
 8005110:	0800536f 	.word	0x0800536f
 8005114:	08005393 	.word	0x08005393
 8005118:	2000054c 	.word	0x2000054c

0800511c <stdio_exit_handler>:
 800511c:	4a02      	ldr	r2, [pc, #8]	@ (8005128 <stdio_exit_handler+0xc>)
 800511e:	4903      	ldr	r1, [pc, #12]	@ (800512c <stdio_exit_handler+0x10>)
 8005120:	4803      	ldr	r0, [pc, #12]	@ (8005130 <stdio_exit_handler+0x14>)
 8005122:	f000 b869 	b.w	80051f8 <_fwalk_sglue>
 8005126:	bf00      	nop
 8005128:	20000018 	.word	0x20000018
 800512c:	08006e2d 	.word	0x08006e2d
 8005130:	20000028 	.word	0x20000028

08005134 <cleanup_stdio>:
 8005134:	6841      	ldr	r1, [r0, #4]
 8005136:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <cleanup_stdio+0x34>)
 8005138:	4299      	cmp	r1, r3
 800513a:	b510      	push	{r4, lr}
 800513c:	4604      	mov	r4, r0
 800513e:	d001      	beq.n	8005144 <cleanup_stdio+0x10>
 8005140:	f001 fe74 	bl	8006e2c <_fflush_r>
 8005144:	68a1      	ldr	r1, [r4, #8]
 8005146:	4b09      	ldr	r3, [pc, #36]	@ (800516c <cleanup_stdio+0x38>)
 8005148:	4299      	cmp	r1, r3
 800514a:	d002      	beq.n	8005152 <cleanup_stdio+0x1e>
 800514c:	4620      	mov	r0, r4
 800514e:	f001 fe6d 	bl	8006e2c <_fflush_r>
 8005152:	68e1      	ldr	r1, [r4, #12]
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <cleanup_stdio+0x3c>)
 8005156:	4299      	cmp	r1, r3
 8005158:	d004      	beq.n	8005164 <cleanup_stdio+0x30>
 800515a:	4620      	mov	r0, r4
 800515c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005160:	f001 be64 	b.w	8006e2c <_fflush_r>
 8005164:	bd10      	pop	{r4, pc}
 8005166:	bf00      	nop
 8005168:	2000054c 	.word	0x2000054c
 800516c:	200005b4 	.word	0x200005b4
 8005170:	2000061c 	.word	0x2000061c

08005174 <global_stdio_init.part.0>:
 8005174:	b510      	push	{r4, lr}
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <global_stdio_init.part.0+0x30>)
 8005178:	4c0b      	ldr	r4, [pc, #44]	@ (80051a8 <global_stdio_init.part.0+0x34>)
 800517a:	4a0c      	ldr	r2, [pc, #48]	@ (80051ac <global_stdio_init.part.0+0x38>)
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	4620      	mov	r0, r4
 8005180:	2200      	movs	r2, #0
 8005182:	2104      	movs	r1, #4
 8005184:	f7ff ff94 	bl	80050b0 <std>
 8005188:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800518c:	2201      	movs	r2, #1
 800518e:	2109      	movs	r1, #9
 8005190:	f7ff ff8e 	bl	80050b0 <std>
 8005194:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005198:	2202      	movs	r2, #2
 800519a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800519e:	2112      	movs	r1, #18
 80051a0:	f7ff bf86 	b.w	80050b0 <std>
 80051a4:	20000684 	.word	0x20000684
 80051a8:	2000054c 	.word	0x2000054c
 80051ac:	0800511d 	.word	0x0800511d

080051b0 <__sfp_lock_acquire>:
 80051b0:	4801      	ldr	r0, [pc, #4]	@ (80051b8 <__sfp_lock_acquire+0x8>)
 80051b2:	f000 ba04 	b.w	80055be <__retarget_lock_acquire_recursive>
 80051b6:	bf00      	nop
 80051b8:	2000068d 	.word	0x2000068d

080051bc <__sfp_lock_release>:
 80051bc:	4801      	ldr	r0, [pc, #4]	@ (80051c4 <__sfp_lock_release+0x8>)
 80051be:	f000 b9ff 	b.w	80055c0 <__retarget_lock_release_recursive>
 80051c2:	bf00      	nop
 80051c4:	2000068d 	.word	0x2000068d

080051c8 <__sinit>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	f7ff fff0 	bl	80051b0 <__sfp_lock_acquire>
 80051d0:	6a23      	ldr	r3, [r4, #32]
 80051d2:	b11b      	cbz	r3, 80051dc <__sinit+0x14>
 80051d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d8:	f7ff bff0 	b.w	80051bc <__sfp_lock_release>
 80051dc:	4b04      	ldr	r3, [pc, #16]	@ (80051f0 <__sinit+0x28>)
 80051de:	6223      	str	r3, [r4, #32]
 80051e0:	4b04      	ldr	r3, [pc, #16]	@ (80051f4 <__sinit+0x2c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f5      	bne.n	80051d4 <__sinit+0xc>
 80051e8:	f7ff ffc4 	bl	8005174 <global_stdio_init.part.0>
 80051ec:	e7f2      	b.n	80051d4 <__sinit+0xc>
 80051ee:	bf00      	nop
 80051f0:	08005135 	.word	0x08005135
 80051f4:	20000684 	.word	0x20000684

080051f8 <_fwalk_sglue>:
 80051f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051fc:	4607      	mov	r7, r0
 80051fe:	4688      	mov	r8, r1
 8005200:	4614      	mov	r4, r2
 8005202:	2600      	movs	r6, #0
 8005204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005208:	f1b9 0901 	subs.w	r9, r9, #1
 800520c:	d505      	bpl.n	800521a <_fwalk_sglue+0x22>
 800520e:	6824      	ldr	r4, [r4, #0]
 8005210:	2c00      	cmp	r4, #0
 8005212:	d1f7      	bne.n	8005204 <_fwalk_sglue+0xc>
 8005214:	4630      	mov	r0, r6
 8005216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d907      	bls.n	8005230 <_fwalk_sglue+0x38>
 8005220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005224:	3301      	adds	r3, #1
 8005226:	d003      	beq.n	8005230 <_fwalk_sglue+0x38>
 8005228:	4629      	mov	r1, r5
 800522a:	4638      	mov	r0, r7
 800522c:	47c0      	blx	r8
 800522e:	4306      	orrs	r6, r0
 8005230:	3568      	adds	r5, #104	@ 0x68
 8005232:	e7e9      	b.n	8005208 <_fwalk_sglue+0x10>

08005234 <iprintf>:
 8005234:	b40f      	push	{r0, r1, r2, r3}
 8005236:	b507      	push	{r0, r1, r2, lr}
 8005238:	4906      	ldr	r1, [pc, #24]	@ (8005254 <iprintf+0x20>)
 800523a:	ab04      	add	r3, sp, #16
 800523c:	6808      	ldr	r0, [r1, #0]
 800523e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005242:	6881      	ldr	r1, [r0, #8]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f001 fc55 	bl	8006af4 <_vfiprintf_r>
 800524a:	b003      	add	sp, #12
 800524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr
 8005254:	20000024 	.word	0x20000024

08005258 <_puts_r>:
 8005258:	6a03      	ldr	r3, [r0, #32]
 800525a:	b570      	push	{r4, r5, r6, lr}
 800525c:	6884      	ldr	r4, [r0, #8]
 800525e:	4605      	mov	r5, r0
 8005260:	460e      	mov	r6, r1
 8005262:	b90b      	cbnz	r3, 8005268 <_puts_r+0x10>
 8005264:	f7ff ffb0 	bl	80051c8 <__sinit>
 8005268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800526a:	07db      	lsls	r3, r3, #31
 800526c:	d405      	bmi.n	800527a <_puts_r+0x22>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d402      	bmi.n	800527a <_puts_r+0x22>
 8005274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005276:	f000 f9a2 	bl	80055be <__retarget_lock_acquire_recursive>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	0719      	lsls	r1, r3, #28
 800527e:	d502      	bpl.n	8005286 <_puts_r+0x2e>
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d135      	bne.n	80052f2 <_puts_r+0x9a>
 8005286:	4621      	mov	r1, r4
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f8c5 	bl	8005418 <__swsetup_r>
 800528e:	b380      	cbz	r0, 80052f2 <_puts_r+0x9a>
 8005290:	f04f 35ff 	mov.w	r5, #4294967295
 8005294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005296:	07da      	lsls	r2, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_puts_r+0x4e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	059b      	lsls	r3, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_puts_r+0x4e>
 80052a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a2:	f000 f98d 	bl	80055c0 <__retarget_lock_release_recursive>
 80052a6:	4628      	mov	r0, r5
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da04      	bge.n	80052b8 <_puts_r+0x60>
 80052ae:	69a2      	ldr	r2, [r4, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dc17      	bgt.n	80052e4 <_puts_r+0x8c>
 80052b4:	290a      	cmp	r1, #10
 80052b6:	d015      	beq.n	80052e4 <_puts_r+0x8c>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	7019      	strb	r1, [r3, #0]
 80052c0:	68a3      	ldr	r3, [r4, #8]
 80052c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d1ed      	bne.n	80052aa <_puts_r+0x52>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da11      	bge.n	80052f6 <_puts_r+0x9e>
 80052d2:	4622      	mov	r2, r4
 80052d4:	210a      	movs	r1, #10
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f85f 	bl	800539a <__swbuf_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d0d7      	beq.n	8005290 <_puts_r+0x38>
 80052e0:	250a      	movs	r5, #10
 80052e2:	e7d7      	b.n	8005294 <_puts_r+0x3c>
 80052e4:	4622      	mov	r2, r4
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f857 	bl	800539a <__swbuf_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d1e7      	bne.n	80052c0 <_puts_r+0x68>
 80052f0:	e7ce      	b.n	8005290 <_puts_r+0x38>
 80052f2:	3e01      	subs	r6, #1
 80052f4:	e7e4      	b.n	80052c0 <_puts_r+0x68>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	220a      	movs	r2, #10
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e7ee      	b.n	80052e0 <_puts_r+0x88>
	...

08005304 <puts>:
 8005304:	4b02      	ldr	r3, [pc, #8]	@ (8005310 <puts+0xc>)
 8005306:	4601      	mov	r1, r0
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f7ff bfa5 	b.w	8005258 <_puts_r>
 800530e:	bf00      	nop
 8005310:	20000024 	.word	0x20000024

08005314 <__sread>:
 8005314:	b510      	push	{r4, lr}
 8005316:	460c      	mov	r4, r1
 8005318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531c:	f000 f900 	bl	8005520 <_read_r>
 8005320:	2800      	cmp	r0, #0
 8005322:	bfab      	itete	ge
 8005324:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005326:	89a3      	ldrhlt	r3, [r4, #12]
 8005328:	181b      	addge	r3, r3, r0
 800532a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800532e:	bfac      	ite	ge
 8005330:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005332:	81a3      	strhlt	r3, [r4, #12]
 8005334:	bd10      	pop	{r4, pc}

08005336 <__swrite>:
 8005336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	461f      	mov	r7, r3
 800533c:	898b      	ldrh	r3, [r1, #12]
 800533e:	05db      	lsls	r3, r3, #23
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	4616      	mov	r6, r2
 8005346:	d505      	bpl.n	8005354 <__swrite+0x1e>
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	2302      	movs	r3, #2
 800534e:	2200      	movs	r2, #0
 8005350:	f000 f8d4 	bl	80054fc <_lseek_r>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	4632      	mov	r2, r6
 8005362:	463b      	mov	r3, r7
 8005364:	4628      	mov	r0, r5
 8005366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	f000 b8eb 	b.w	8005544 <_write_r>

0800536e <__sseek>:
 800536e:	b510      	push	{r4, lr}
 8005370:	460c      	mov	r4, r1
 8005372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005376:	f000 f8c1 	bl	80054fc <_lseek_r>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	bf15      	itete	ne
 8005380:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800538a:	81a3      	strheq	r3, [r4, #12]
 800538c:	bf18      	it	ne
 800538e:	81a3      	strhne	r3, [r4, #12]
 8005390:	bd10      	pop	{r4, pc}

08005392 <__sclose>:
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	f000 b8a1 	b.w	80054dc <_close_r>

0800539a <__swbuf_r>:
 800539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539c:	460e      	mov	r6, r1
 800539e:	4614      	mov	r4, r2
 80053a0:	4605      	mov	r5, r0
 80053a2:	b118      	cbz	r0, 80053ac <__swbuf_r+0x12>
 80053a4:	6a03      	ldr	r3, [r0, #32]
 80053a6:	b90b      	cbnz	r3, 80053ac <__swbuf_r+0x12>
 80053a8:	f7ff ff0e 	bl	80051c8 <__sinit>
 80053ac:	69a3      	ldr	r3, [r4, #24]
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	071a      	lsls	r2, r3, #28
 80053b4:	d501      	bpl.n	80053ba <__swbuf_r+0x20>
 80053b6:	6923      	ldr	r3, [r4, #16]
 80053b8:	b943      	cbnz	r3, 80053cc <__swbuf_r+0x32>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f82b 	bl	8005418 <__swsetup_r>
 80053c2:	b118      	cbz	r0, 80053cc <__swbuf_r+0x32>
 80053c4:	f04f 37ff 	mov.w	r7, #4294967295
 80053c8:	4638      	mov	r0, r7
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	6922      	ldr	r2, [r4, #16]
 80053d0:	1a98      	subs	r0, r3, r2
 80053d2:	6963      	ldr	r3, [r4, #20]
 80053d4:	b2f6      	uxtb	r6, r6
 80053d6:	4283      	cmp	r3, r0
 80053d8:	4637      	mov	r7, r6
 80053da:	dc05      	bgt.n	80053e8 <__swbuf_r+0x4e>
 80053dc:	4621      	mov	r1, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	f001 fd24 	bl	8006e2c <_fflush_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1ed      	bne.n	80053c4 <__swbuf_r+0x2a>
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60a3      	str	r3, [r4, #8]
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	701e      	strb	r6, [r3, #0]
 80053f6:	6962      	ldr	r2, [r4, #20]
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d004      	beq.n	8005408 <__swbuf_r+0x6e>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	07db      	lsls	r3, r3, #31
 8005402:	d5e1      	bpl.n	80053c8 <__swbuf_r+0x2e>
 8005404:	2e0a      	cmp	r6, #10
 8005406:	d1df      	bne.n	80053c8 <__swbuf_r+0x2e>
 8005408:	4621      	mov	r1, r4
 800540a:	4628      	mov	r0, r5
 800540c:	f001 fd0e 	bl	8006e2c <_fflush_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0d9      	beq.n	80053c8 <__swbuf_r+0x2e>
 8005414:	e7d6      	b.n	80053c4 <__swbuf_r+0x2a>
	...

08005418 <__swsetup_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4b29      	ldr	r3, [pc, #164]	@ (80054c0 <__swsetup_r+0xa8>)
 800541c:	4605      	mov	r5, r0
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	460c      	mov	r4, r1
 8005422:	b118      	cbz	r0, 800542c <__swsetup_r+0x14>
 8005424:	6a03      	ldr	r3, [r0, #32]
 8005426:	b90b      	cbnz	r3, 800542c <__swsetup_r+0x14>
 8005428:	f7ff fece 	bl	80051c8 <__sinit>
 800542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005430:	0719      	lsls	r1, r3, #28
 8005432:	d422      	bmi.n	800547a <__swsetup_r+0x62>
 8005434:	06da      	lsls	r2, r3, #27
 8005436:	d407      	bmi.n	8005448 <__swsetup_r+0x30>
 8005438:	2209      	movs	r2, #9
 800543a:	602a      	str	r2, [r5, #0]
 800543c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	e033      	b.n	80054b0 <__swsetup_r+0x98>
 8005448:	0758      	lsls	r0, r3, #29
 800544a:	d512      	bpl.n	8005472 <__swsetup_r+0x5a>
 800544c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800544e:	b141      	cbz	r1, 8005462 <__swsetup_r+0x4a>
 8005450:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005454:	4299      	cmp	r1, r3
 8005456:	d002      	beq.n	800545e <__swsetup_r+0x46>
 8005458:	4628      	mov	r0, r5
 800545a:	f000 fe9f 	bl	800619c <_free_r>
 800545e:	2300      	movs	r3, #0
 8005460:	6363      	str	r3, [r4, #52]	@ 0x34
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	b94b      	cbnz	r3, 8005492 <__swsetup_r+0x7a>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005488:	d003      	beq.n	8005492 <__swsetup_r+0x7a>
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f001 fd1b 	bl	8006ec8 <__smakebuf_r>
 8005492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005496:	f013 0201 	ands.w	r2, r3, #1
 800549a:	d00a      	beq.n	80054b2 <__swsetup_r+0x9a>
 800549c:	2200      	movs	r2, #0
 800549e:	60a2      	str	r2, [r4, #8]
 80054a0:	6962      	ldr	r2, [r4, #20]
 80054a2:	4252      	negs	r2, r2
 80054a4:	61a2      	str	r2, [r4, #24]
 80054a6:	6922      	ldr	r2, [r4, #16]
 80054a8:	b942      	cbnz	r2, 80054bc <__swsetup_r+0xa4>
 80054aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ae:	d1c5      	bne.n	800543c <__swsetup_r+0x24>
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
 80054b2:	0799      	lsls	r1, r3, #30
 80054b4:	bf58      	it	pl
 80054b6:	6962      	ldrpl	r2, [r4, #20]
 80054b8:	60a2      	str	r2, [r4, #8]
 80054ba:	e7f4      	b.n	80054a6 <__swsetup_r+0x8e>
 80054bc:	2000      	movs	r0, #0
 80054be:	e7f7      	b.n	80054b0 <__swsetup_r+0x98>
 80054c0:	20000024 	.word	0x20000024

080054c4 <memset>:
 80054c4:	4402      	add	r2, r0
 80054c6:	4603      	mov	r3, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <_localeconv_r>:
 80054d4:	4800      	ldr	r0, [pc, #0]	@ (80054d8 <_localeconv_r+0x4>)
 80054d6:	4770      	bx	lr
 80054d8:	20000164 	.word	0x20000164

080054dc <_close_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d06      	ldr	r5, [pc, #24]	@ (80054f8 <_close_r+0x1c>)
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	f7fc fe3f 	bl	800216a <_close>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_close_r+0x1a>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_close_r+0x1a>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	20000688 	.word	0x20000688

080054fc <_lseek_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d07      	ldr	r5, [pc, #28]	@ (800551c <_lseek_r+0x20>)
 8005500:	4604      	mov	r4, r0
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	2200      	movs	r2, #0
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	f7fc fe54 	bl	80021b8 <_lseek>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_lseek_r+0x1e>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_lseek_r+0x1e>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20000688 	.word	0x20000688

08005520 <_read_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d07      	ldr	r5, [pc, #28]	@ (8005540 <_read_r+0x20>)
 8005524:	4604      	mov	r4, r0
 8005526:	4608      	mov	r0, r1
 8005528:	4611      	mov	r1, r2
 800552a:	2200      	movs	r2, #0
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7fc fdfe 	bl	8002130 <_read>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_read_r+0x1e>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_read_r+0x1e>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000688 	.word	0x20000688

08005544 <_write_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	@ (8005564 <_write_r+0x20>)
 8005548:	4604      	mov	r4, r0
 800554a:	4608      	mov	r0, r1
 800554c:	4611      	mov	r1, r2
 800554e:	2200      	movs	r2, #0
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f7fc fb04 	bl	8001b60 <_write>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_write_r+0x1e>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_write_r+0x1e>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	20000688 	.word	0x20000688

08005568 <__errno>:
 8005568:	4b01      	ldr	r3, [pc, #4]	@ (8005570 <__errno+0x8>)
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000024 	.word	0x20000024

08005574 <__libc_init_array>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4d0d      	ldr	r5, [pc, #52]	@ (80055ac <__libc_init_array+0x38>)
 8005578:	4c0d      	ldr	r4, [pc, #52]	@ (80055b0 <__libc_init_array+0x3c>)
 800557a:	1b64      	subs	r4, r4, r5
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	2600      	movs	r6, #0
 8005580:	42a6      	cmp	r6, r4
 8005582:	d109      	bne.n	8005598 <__libc_init_array+0x24>
 8005584:	4d0b      	ldr	r5, [pc, #44]	@ (80055b4 <__libc_init_array+0x40>)
 8005586:	4c0c      	ldr	r4, [pc, #48]	@ (80055b8 <__libc_init_array+0x44>)
 8005588:	f001 fdbc 	bl	8007104 <_init>
 800558c:	1b64      	subs	r4, r4, r5
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	2600      	movs	r6, #0
 8005592:	42a6      	cmp	r6, r4
 8005594:	d105      	bne.n	80055a2 <__libc_init_array+0x2e>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	f855 3b04 	ldr.w	r3, [r5], #4
 800559c:	4798      	blx	r3
 800559e:	3601      	adds	r6, #1
 80055a0:	e7ee      	b.n	8005580 <__libc_init_array+0xc>
 80055a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a6:	4798      	blx	r3
 80055a8:	3601      	adds	r6, #1
 80055aa:	e7f2      	b.n	8005592 <__libc_init_array+0x1e>
 80055ac:	080076b8 	.word	0x080076b8
 80055b0:	080076b8 	.word	0x080076b8
 80055b4:	080076b8 	.word	0x080076b8
 80055b8:	080076bc 	.word	0x080076bc

080055bc <__retarget_lock_init_recursive>:
 80055bc:	4770      	bx	lr

080055be <__retarget_lock_acquire_recursive>:
 80055be:	4770      	bx	lr

080055c0 <__retarget_lock_release_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <memcpy>:
 80055c2:	440a      	add	r2, r1
 80055c4:	4291      	cmp	r1, r2
 80055c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ca:	d100      	bne.n	80055ce <memcpy+0xc>
 80055cc:	4770      	bx	lr
 80055ce:	b510      	push	{r4, lr}
 80055d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d8:	4291      	cmp	r1, r2
 80055da:	d1f9      	bne.n	80055d0 <memcpy+0xe>
 80055dc:	bd10      	pop	{r4, pc}

080055de <quorem>:
 80055de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e2:	6903      	ldr	r3, [r0, #16]
 80055e4:	690c      	ldr	r4, [r1, #16]
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	4607      	mov	r7, r0
 80055ea:	db7e      	blt.n	80056ea <quorem+0x10c>
 80055ec:	3c01      	subs	r4, #1
 80055ee:	f101 0814 	add.w	r8, r1, #20
 80055f2:	00a3      	lsls	r3, r4, #2
 80055f4:	f100 0514 	add.w	r5, r0, #20
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005608:	3301      	adds	r3, #1
 800560a:	429a      	cmp	r2, r3
 800560c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005610:	fbb2 f6f3 	udiv	r6, r2, r3
 8005614:	d32e      	bcc.n	8005674 <quorem+0x96>
 8005616:	f04f 0a00 	mov.w	sl, #0
 800561a:	46c4      	mov	ip, r8
 800561c:	46ae      	mov	lr, r5
 800561e:	46d3      	mov	fp, sl
 8005620:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005624:	b298      	uxth	r0, r3
 8005626:	fb06 a000 	mla	r0, r6, r0, sl
 800562a:	0c02      	lsrs	r2, r0, #16
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	fb06 2303 	mla	r3, r6, r3, r2
 8005632:	f8de 2000 	ldr.w	r2, [lr]
 8005636:	b280      	uxth	r0, r0
 8005638:	b292      	uxth	r2, r2
 800563a:	1a12      	subs	r2, r2, r0
 800563c:	445a      	add	r2, fp
 800563e:	f8de 0000 	ldr.w	r0, [lr]
 8005642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005646:	b29b      	uxth	r3, r3
 8005648:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800564c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005650:	b292      	uxth	r2, r2
 8005652:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005656:	45e1      	cmp	r9, ip
 8005658:	f84e 2b04 	str.w	r2, [lr], #4
 800565c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005660:	d2de      	bcs.n	8005620 <quorem+0x42>
 8005662:	9b00      	ldr	r3, [sp, #0]
 8005664:	58eb      	ldr	r3, [r5, r3]
 8005666:	b92b      	cbnz	r3, 8005674 <quorem+0x96>
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	3b04      	subs	r3, #4
 800566c:	429d      	cmp	r5, r3
 800566e:	461a      	mov	r2, r3
 8005670:	d32f      	bcc.n	80056d2 <quorem+0xf4>
 8005672:	613c      	str	r4, [r7, #16]
 8005674:	4638      	mov	r0, r7
 8005676:	f001 f90b 	bl	8006890 <__mcmp>
 800567a:	2800      	cmp	r0, #0
 800567c:	db25      	blt.n	80056ca <quorem+0xec>
 800567e:	4629      	mov	r1, r5
 8005680:	2000      	movs	r0, #0
 8005682:	f858 2b04 	ldr.w	r2, [r8], #4
 8005686:	f8d1 c000 	ldr.w	ip, [r1]
 800568a:	fa1f fe82 	uxth.w	lr, r2
 800568e:	fa1f f38c 	uxth.w	r3, ip
 8005692:	eba3 030e 	sub.w	r3, r3, lr
 8005696:	4403      	add	r3, r0
 8005698:	0c12      	lsrs	r2, r2, #16
 800569a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800569e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056a8:	45c1      	cmp	r9, r8
 80056aa:	f841 3b04 	str.w	r3, [r1], #4
 80056ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056b2:	d2e6      	bcs.n	8005682 <quorem+0xa4>
 80056b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056bc:	b922      	cbnz	r2, 80056c8 <quorem+0xea>
 80056be:	3b04      	subs	r3, #4
 80056c0:	429d      	cmp	r5, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	d30b      	bcc.n	80056de <quorem+0x100>
 80056c6:	613c      	str	r4, [r7, #16]
 80056c8:	3601      	adds	r6, #1
 80056ca:	4630      	mov	r0, r6
 80056cc:	b003      	add	sp, #12
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d1cb      	bne.n	8005672 <quorem+0x94>
 80056da:	3c01      	subs	r4, #1
 80056dc:	e7c6      	b.n	800566c <quorem+0x8e>
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	3b04      	subs	r3, #4
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	d1ef      	bne.n	80056c6 <quorem+0xe8>
 80056e6:	3c01      	subs	r4, #1
 80056e8:	e7ea      	b.n	80056c0 <quorem+0xe2>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e7ee      	b.n	80056cc <quorem+0xee>
	...

080056f0 <_dtoa_r>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	ed2d 8b02 	vpush	{d8}
 80056f8:	69c7      	ldr	r7, [r0, #28]
 80056fa:	b091      	sub	sp, #68	@ 0x44
 80056fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005700:	ec55 4b10 	vmov	r4, r5, d0
 8005704:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005706:	9107      	str	r1, [sp, #28]
 8005708:	4681      	mov	r9, r0
 800570a:	9209      	str	r2, [sp, #36]	@ 0x24
 800570c:	930d      	str	r3, [sp, #52]	@ 0x34
 800570e:	b97f      	cbnz	r7, 8005730 <_dtoa_r+0x40>
 8005710:	2010      	movs	r0, #16
 8005712:	f000 fd8d 	bl	8006230 <malloc>
 8005716:	4602      	mov	r2, r0
 8005718:	f8c9 001c 	str.w	r0, [r9, #28]
 800571c:	b920      	cbnz	r0, 8005728 <_dtoa_r+0x38>
 800571e:	4ba0      	ldr	r3, [pc, #640]	@ (80059a0 <_dtoa_r+0x2b0>)
 8005720:	21ef      	movs	r1, #239	@ 0xef
 8005722:	48a0      	ldr	r0, [pc, #640]	@ (80059a4 <_dtoa_r+0x2b4>)
 8005724:	f001 fc3e 	bl	8006fa4 <__assert_func>
 8005728:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800572c:	6007      	str	r7, [r0, #0]
 800572e:	60c7      	str	r7, [r0, #12]
 8005730:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	b159      	cbz	r1, 8005750 <_dtoa_r+0x60>
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	604a      	str	r2, [r1, #4]
 800573c:	2301      	movs	r3, #1
 800573e:	4093      	lsls	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
 8005742:	4648      	mov	r0, r9
 8005744:	f000 fe6a 	bl	800641c <_Bfree>
 8005748:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	1e2b      	subs	r3, r5, #0
 8005752:	bfbb      	ittet	lt
 8005754:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005758:	9303      	strlt	r3, [sp, #12]
 800575a:	2300      	movge	r3, #0
 800575c:	2201      	movlt	r2, #1
 800575e:	bfac      	ite	ge
 8005760:	6033      	strge	r3, [r6, #0]
 8005762:	6032      	strlt	r2, [r6, #0]
 8005764:	4b90      	ldr	r3, [pc, #576]	@ (80059a8 <_dtoa_r+0x2b8>)
 8005766:	9e03      	ldr	r6, [sp, #12]
 8005768:	43b3      	bics	r3, r6
 800576a:	d110      	bne.n	800578e <_dtoa_r+0x9e>
 800576c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800576e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005778:	4323      	orrs	r3, r4
 800577a:	f000 84de 	beq.w	800613a <_dtoa_r+0xa4a>
 800577e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005780:	4f8a      	ldr	r7, [pc, #552]	@ (80059ac <_dtoa_r+0x2bc>)
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 84e0 	beq.w	8006148 <_dtoa_r+0xa58>
 8005788:	1cfb      	adds	r3, r7, #3
 800578a:	f000 bcdb 	b.w	8006144 <_dtoa_r+0xa54>
 800578e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005792:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579a:	d10a      	bne.n	80057b2 <_dtoa_r+0xc2>
 800579c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800579e:	2301      	movs	r3, #1
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80057a4:	b113      	cbz	r3, 80057ac <_dtoa_r+0xbc>
 80057a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80057a8:	4b81      	ldr	r3, [pc, #516]	@ (80059b0 <_dtoa_r+0x2c0>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4f81      	ldr	r7, [pc, #516]	@ (80059b4 <_dtoa_r+0x2c4>)
 80057ae:	f000 bccb 	b.w	8006148 <_dtoa_r+0xa58>
 80057b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80057b4:	a90f      	add	r1, sp, #60	@ 0x3c
 80057b6:	4648      	mov	r0, r9
 80057b8:	eeb0 0b48 	vmov.f64	d0, d8
 80057bc:	f001 f918 	bl	80069f0 <__d2b>
 80057c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80057c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057c6:	9001      	str	r0, [sp, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d045      	beq.n	8005858 <_dtoa_r+0x168>
 80057cc:	eeb0 7b48 	vmov.f64	d7, d8
 80057d0:	ee18 1a90 	vmov	r1, s17
 80057d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80057d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80057dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80057e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80057e4:	2500      	movs	r5, #0
 80057e6:	ee07 1a90 	vmov	s15, r1
 80057ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80057ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005988 <_dtoa_r+0x298>
 80057f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005990 <_dtoa_r+0x2a0>
 80057fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80057fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005998 <_dtoa_r+0x2a8>
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800580a:	eeb0 7b46 	vmov.f64	d7, d6
 800580e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005812:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005816:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581e:	ee16 8a90 	vmov	r8, s13
 8005822:	d508      	bpl.n	8005836 <_dtoa_r+0x146>
 8005824:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005828:	eeb4 6b47 	vcmp.f64	d6, d7
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	bf18      	it	ne
 8005832:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005836:	f1b8 0f16 	cmp.w	r8, #22
 800583a:	d82b      	bhi.n	8005894 <_dtoa_r+0x1a4>
 800583c:	495e      	ldr	r1, [pc, #376]	@ (80059b8 <_dtoa_r+0x2c8>)
 800583e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005842:	ed91 7b00 	vldr	d7, [r1]
 8005846:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584e:	d501      	bpl.n	8005854 <_dtoa_r+0x164>
 8005850:	f108 38ff 	add.w	r8, r8, #4294967295
 8005854:	2100      	movs	r1, #0
 8005856:	e01e      	b.n	8005896 <_dtoa_r+0x1a6>
 8005858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800585a:	4413      	add	r3, r2
 800585c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005860:	2920      	cmp	r1, #32
 8005862:	bfc1      	itttt	gt
 8005864:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005868:	408e      	lslgt	r6, r1
 800586a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800586e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005872:	bfd6      	itet	le
 8005874:	f1c1 0120 	rsble	r1, r1, #32
 8005878:	4331      	orrgt	r1, r6
 800587a:	fa04 f101 	lslle.w	r1, r4, r1
 800587e:	ee07 1a90 	vmov	s15, r1
 8005882:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005886:	3b01      	subs	r3, #1
 8005888:	ee17 1a90 	vmov	r1, s15
 800588c:	2501      	movs	r5, #1
 800588e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005892:	e7a8      	b.n	80057e6 <_dtoa_r+0xf6>
 8005894:	2101      	movs	r1, #1
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	1e53      	subs	r3, r2, #1
 800589a:	9306      	str	r3, [sp, #24]
 800589c:	bf45      	ittet	mi
 800589e:	f1c2 0301 	rsbmi	r3, r2, #1
 80058a2:	9305      	strmi	r3, [sp, #20]
 80058a4:	2300      	movpl	r3, #0
 80058a6:	2300      	movmi	r3, #0
 80058a8:	bf4c      	ite	mi
 80058aa:	9306      	strmi	r3, [sp, #24]
 80058ac:	9305      	strpl	r3, [sp, #20]
 80058ae:	f1b8 0f00 	cmp.w	r8, #0
 80058b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80058b4:	db18      	blt.n	80058e8 <_dtoa_r+0x1f8>
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80058bc:	4443      	add	r3, r8
 80058be:	9306      	str	r3, [sp, #24]
 80058c0:	2300      	movs	r3, #0
 80058c2:	9a07      	ldr	r2, [sp, #28]
 80058c4:	2a09      	cmp	r2, #9
 80058c6:	d849      	bhi.n	800595c <_dtoa_r+0x26c>
 80058c8:	2a05      	cmp	r2, #5
 80058ca:	bfc4      	itt	gt
 80058cc:	3a04      	subgt	r2, #4
 80058ce:	9207      	strgt	r2, [sp, #28]
 80058d0:	9a07      	ldr	r2, [sp, #28]
 80058d2:	f1a2 0202 	sub.w	r2, r2, #2
 80058d6:	bfcc      	ite	gt
 80058d8:	2400      	movgt	r4, #0
 80058da:	2401      	movle	r4, #1
 80058dc:	2a03      	cmp	r2, #3
 80058de:	d848      	bhi.n	8005972 <_dtoa_r+0x282>
 80058e0:	e8df f002 	tbb	[pc, r2]
 80058e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	eba3 0308 	sub.w	r3, r3, r8
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80058f4:	f1c8 0300 	rsb	r3, r8, #0
 80058f8:	e7e3      	b.n	80058c2 <_dtoa_r+0x1d2>
 80058fa:	2200      	movs	r2, #0
 80058fc:	9208      	str	r2, [sp, #32]
 80058fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005900:	2a00      	cmp	r2, #0
 8005902:	dc39      	bgt.n	8005978 <_dtoa_r+0x288>
 8005904:	f04f 0b01 	mov.w	fp, #1
 8005908:	46da      	mov	sl, fp
 800590a:	465a      	mov	r2, fp
 800590c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005910:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005914:	2100      	movs	r1, #0
 8005916:	2004      	movs	r0, #4
 8005918:	f100 0614 	add.w	r6, r0, #20
 800591c:	4296      	cmp	r6, r2
 800591e:	d930      	bls.n	8005982 <_dtoa_r+0x292>
 8005920:	6079      	str	r1, [r7, #4]
 8005922:	4648      	mov	r0, r9
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	f000 fd39 	bl	800639c <_Balloc>
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	4607      	mov	r7, r0
 800592e:	2800      	cmp	r0, #0
 8005930:	d146      	bne.n	80059c0 <_dtoa_r+0x2d0>
 8005932:	4b22      	ldr	r3, [pc, #136]	@ (80059bc <_dtoa_r+0x2cc>)
 8005934:	4602      	mov	r2, r0
 8005936:	f240 11af 	movw	r1, #431	@ 0x1af
 800593a:	e6f2      	b.n	8005722 <_dtoa_r+0x32>
 800593c:	2201      	movs	r2, #1
 800593e:	e7dd      	b.n	80058fc <_dtoa_r+0x20c>
 8005940:	2200      	movs	r2, #0
 8005942:	9208      	str	r2, [sp, #32]
 8005944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005946:	eb08 0b02 	add.w	fp, r8, r2
 800594a:	f10b 0a01 	add.w	sl, fp, #1
 800594e:	4652      	mov	r2, sl
 8005950:	2a01      	cmp	r2, #1
 8005952:	bfb8      	it	lt
 8005954:	2201      	movlt	r2, #1
 8005956:	e7db      	b.n	8005910 <_dtoa_r+0x220>
 8005958:	2201      	movs	r2, #1
 800595a:	e7f2      	b.n	8005942 <_dtoa_r+0x252>
 800595c:	2401      	movs	r4, #1
 800595e:	2200      	movs	r2, #0
 8005960:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005964:	f04f 3bff 	mov.w	fp, #4294967295
 8005968:	2100      	movs	r1, #0
 800596a:	46da      	mov	sl, fp
 800596c:	2212      	movs	r2, #18
 800596e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005970:	e7ce      	b.n	8005910 <_dtoa_r+0x220>
 8005972:	2201      	movs	r2, #1
 8005974:	9208      	str	r2, [sp, #32]
 8005976:	e7f5      	b.n	8005964 <_dtoa_r+0x274>
 8005978:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800597c:	46da      	mov	sl, fp
 800597e:	465a      	mov	r2, fp
 8005980:	e7c6      	b.n	8005910 <_dtoa_r+0x220>
 8005982:	3101      	adds	r1, #1
 8005984:	0040      	lsls	r0, r0, #1
 8005986:	e7c7      	b.n	8005918 <_dtoa_r+0x228>
 8005988:	636f4361 	.word	0x636f4361
 800598c:	3fd287a7 	.word	0x3fd287a7
 8005990:	8b60c8b3 	.word	0x8b60c8b3
 8005994:	3fc68a28 	.word	0x3fc68a28
 8005998:	509f79fb 	.word	0x509f79fb
 800599c:	3fd34413 	.word	0x3fd34413
 80059a0:	08007381 	.word	0x08007381
 80059a4:	08007398 	.word	0x08007398
 80059a8:	7ff00000 	.word	0x7ff00000
 80059ac:	0800737d 	.word	0x0800737d
 80059b0:	08007351 	.word	0x08007351
 80059b4:	08007350 	.word	0x08007350
 80059b8:	08007490 	.word	0x08007490
 80059bc:	080073f0 	.word	0x080073f0
 80059c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80059c4:	f1ba 0f0e 	cmp.w	sl, #14
 80059c8:	6010      	str	r0, [r2, #0]
 80059ca:	d86f      	bhi.n	8005aac <_dtoa_r+0x3bc>
 80059cc:	2c00      	cmp	r4, #0
 80059ce:	d06d      	beq.n	8005aac <_dtoa_r+0x3bc>
 80059d0:	f1b8 0f00 	cmp.w	r8, #0
 80059d4:	f340 80c2 	ble.w	8005b5c <_dtoa_r+0x46c>
 80059d8:	4aca      	ldr	r2, [pc, #808]	@ (8005d04 <_dtoa_r+0x614>)
 80059da:	f008 010f 	and.w	r1, r8, #15
 80059de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80059e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80059e6:	ed92 7b00 	vldr	d7, [r2]
 80059ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80059ee:	f000 80a9 	beq.w	8005b44 <_dtoa_r+0x454>
 80059f2:	4ac5      	ldr	r2, [pc, #788]	@ (8005d08 <_dtoa_r+0x618>)
 80059f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80059f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80059fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005a00:	f001 010f 	and.w	r1, r1, #15
 8005a04:	2203      	movs	r2, #3
 8005a06:	48c0      	ldr	r0, [pc, #768]	@ (8005d08 <_dtoa_r+0x618>)
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	f040 809d 	bne.w	8005b48 <_dtoa_r+0x458>
 8005a0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005a16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a20:	2900      	cmp	r1, #0
 8005a22:	f000 80c1 	beq.w	8005ba8 <_dtoa_r+0x4b8>
 8005a26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005a2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	f140 80b9 	bpl.w	8005ba8 <_dtoa_r+0x4b8>
 8005a36:	f1ba 0f00 	cmp.w	sl, #0
 8005a3a:	f000 80b5 	beq.w	8005ba8 <_dtoa_r+0x4b8>
 8005a3e:	f1bb 0f00 	cmp.w	fp, #0
 8005a42:	dd31      	ble.n	8005aa8 <_dtoa_r+0x3b8>
 8005a44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005a48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a50:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a54:	9104      	str	r1, [sp, #16]
 8005a56:	3201      	adds	r2, #1
 8005a58:	465c      	mov	r4, fp
 8005a5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005a62:	ee07 2a90 	vmov	s15, r2
 8005a66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005a6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005a6e:	ee15 2a90 	vmov	r2, s11
 8005a72:	ec51 0b15 	vmov	r0, r1, d5
 8005a76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	f040 8098 	bne.w	8005bb0 <_dtoa_r+0x4c0>
 8005a80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005a84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a88:	ec41 0b17 	vmov	d7, r0, r1
 8005a8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a94:	f300 8261 	bgt.w	8005f5a <_dtoa_r+0x86a>
 8005a98:	eeb1 7b47 	vneg.f64	d7, d7
 8005a9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	f100 80f5 	bmi.w	8005c92 <_dtoa_r+0x5a2>
 8005aa8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005aac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	f2c0 812c 	blt.w	8005d0c <_dtoa_r+0x61c>
 8005ab4:	f1b8 0f0e 	cmp.w	r8, #14
 8005ab8:	f300 8128 	bgt.w	8005d0c <_dtoa_r+0x61c>
 8005abc:	4b91      	ldr	r3, [pc, #580]	@ (8005d04 <_dtoa_r+0x614>)
 8005abe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ac2:	ed93 6b00 	vldr	d6, [r3]
 8005ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da03      	bge.n	8005ad4 <_dtoa_r+0x3e4>
 8005acc:	f1ba 0f00 	cmp.w	sl, #0
 8005ad0:	f340 80d2 	ble.w	8005c78 <_dtoa_r+0x588>
 8005ad4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005adc:	463e      	mov	r6, r7
 8005ade:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ae2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005ae6:	ee15 3a10 	vmov	r3, s10
 8005aea:	3330      	adds	r3, #48	@ 0x30
 8005aec:	f806 3b01 	strb.w	r3, [r6], #1
 8005af0:	1bf3      	subs	r3, r6, r7
 8005af2:	459a      	cmp	sl, r3
 8005af4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005af8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005afc:	f040 80f8 	bne.w	8005cf0 <_dtoa_r+0x600>
 8005b00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	f300 80dd 	bgt.w	8005cca <_dtoa_r+0x5da>
 8005b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	d104      	bne.n	8005b24 <_dtoa_r+0x434>
 8005b1a:	ee15 3a10 	vmov	r3, s10
 8005b1e:	07db      	lsls	r3, r3, #31
 8005b20:	f100 80d3 	bmi.w	8005cca <_dtoa_r+0x5da>
 8005b24:	9901      	ldr	r1, [sp, #4]
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 fc78 	bl	800641c <_Bfree>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b30:	7033      	strb	r3, [r6, #0]
 8005b32:	f108 0301 	add.w	r3, r8, #1
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 8304 	beq.w	8006148 <_dtoa_r+0xa58>
 8005b40:	601e      	str	r6, [r3, #0]
 8005b42:	e301      	b.n	8006148 <_dtoa_r+0xa58>
 8005b44:	2202      	movs	r2, #2
 8005b46:	e75e      	b.n	8005a06 <_dtoa_r+0x316>
 8005b48:	07cc      	lsls	r4, r1, #31
 8005b4a:	d504      	bpl.n	8005b56 <_dtoa_r+0x466>
 8005b4c:	ed90 6b00 	vldr	d6, [r0]
 8005b50:	3201      	adds	r2, #1
 8005b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b56:	1049      	asrs	r1, r1, #1
 8005b58:	3008      	adds	r0, #8
 8005b5a:	e755      	b.n	8005a08 <_dtoa_r+0x318>
 8005b5c:	d022      	beq.n	8005ba4 <_dtoa_r+0x4b4>
 8005b5e:	f1c8 0100 	rsb	r1, r8, #0
 8005b62:	4a68      	ldr	r2, [pc, #416]	@ (8005d04 <_dtoa_r+0x614>)
 8005b64:	f001 000f 	and.w	r0, r1, #15
 8005b68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005b6c:	ed92 7b00 	vldr	d7, [r2]
 8005b70:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005b74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b78:	4863      	ldr	r0, [pc, #396]	@ (8005d08 <_dtoa_r+0x618>)
 8005b7a:	1109      	asrs	r1, r1, #4
 8005b7c:	2400      	movs	r4, #0
 8005b7e:	2202      	movs	r2, #2
 8005b80:	b929      	cbnz	r1, 8005b8e <_dtoa_r+0x49e>
 8005b82:	2c00      	cmp	r4, #0
 8005b84:	f43f af49 	beq.w	8005a1a <_dtoa_r+0x32a>
 8005b88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b8c:	e745      	b.n	8005a1a <_dtoa_r+0x32a>
 8005b8e:	07ce      	lsls	r6, r1, #31
 8005b90:	d505      	bpl.n	8005b9e <_dtoa_r+0x4ae>
 8005b92:	ed90 6b00 	vldr	d6, [r0]
 8005b96:	3201      	adds	r2, #1
 8005b98:	2401      	movs	r4, #1
 8005b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b9e:	1049      	asrs	r1, r1, #1
 8005ba0:	3008      	adds	r0, #8
 8005ba2:	e7ed      	b.n	8005b80 <_dtoa_r+0x490>
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	e738      	b.n	8005a1a <_dtoa_r+0x32a>
 8005ba8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005bac:	4654      	mov	r4, sl
 8005bae:	e754      	b.n	8005a5a <_dtoa_r+0x36a>
 8005bb0:	4a54      	ldr	r2, [pc, #336]	@ (8005d04 <_dtoa_r+0x614>)
 8005bb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005bb6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005bba:	9a08      	ldr	r2, [sp, #32]
 8005bbc:	ec41 0b17 	vmov	d7, r0, r1
 8005bc0:	443c      	add	r4, r7
 8005bc2:	b34a      	cbz	r2, 8005c18 <_dtoa_r+0x528>
 8005bc4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005bc8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005bcc:	463e      	mov	r6, r7
 8005bce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005bd2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005bd6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005bda:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005bde:	ee14 2a90 	vmov	r2, s9
 8005be2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005be6:	3230      	adds	r2, #48	@ 0x30
 8005be8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005bec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf4:	f806 2b01 	strb.w	r2, [r6], #1
 8005bf8:	d438      	bmi.n	8005c6c <_dtoa_r+0x57c>
 8005bfa:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005bfe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d462      	bmi.n	8005cce <_dtoa_r+0x5de>
 8005c08:	42a6      	cmp	r6, r4
 8005c0a:	f43f af4d 	beq.w	8005aa8 <_dtoa_r+0x3b8>
 8005c0e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005c12:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005c16:	e7e0      	b.n	8005bda <_dtoa_r+0x4ea>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	463e      	mov	r6, r7
 8005c1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005c20:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005c24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005c28:	ee14 2a90 	vmov	r2, s9
 8005c2c:	3230      	adds	r2, #48	@ 0x30
 8005c2e:	f806 2b01 	strb.w	r2, [r6], #1
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005c38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005c3c:	d119      	bne.n	8005c72 <_dtoa_r+0x582>
 8005c3e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005c42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005c46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4e:	dc3e      	bgt.n	8005cce <_dtoa_r+0x5de>
 8005c50:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005c54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5c:	f57f af24 	bpl.w	8005aa8 <_dtoa_r+0x3b8>
 8005c60:	460e      	mov	r6, r1
 8005c62:	3901      	subs	r1, #1
 8005c64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c68:	2b30      	cmp	r3, #48	@ 0x30
 8005c6a:	d0f9      	beq.n	8005c60 <_dtoa_r+0x570>
 8005c6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005c70:	e758      	b.n	8005b24 <_dtoa_r+0x434>
 8005c72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005c76:	e7d5      	b.n	8005c24 <_dtoa_r+0x534>
 8005c78:	d10b      	bne.n	8005c92 <_dtoa_r+0x5a2>
 8005c7a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005c7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	f2c0 8161 	blt.w	8005f54 <_dtoa_r+0x864>
 8005c92:	2400      	movs	r4, #0
 8005c94:	4625      	mov	r5, r4
 8005c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	463e      	mov	r6, r7
 8005c9e:	f04f 0800 	mov.w	r8, #0
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4648      	mov	r0, r9
 8005ca6:	f000 fbb9 	bl	800641c <_Bfree>
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	d0de      	beq.n	8005c6c <_dtoa_r+0x57c>
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	d005      	beq.n	8005cc0 <_dtoa_r+0x5d0>
 8005cb4:	45a8      	cmp	r8, r5
 8005cb6:	d003      	beq.n	8005cc0 <_dtoa_r+0x5d0>
 8005cb8:	4641      	mov	r1, r8
 8005cba:	4648      	mov	r0, r9
 8005cbc:	f000 fbae 	bl	800641c <_Bfree>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	f000 fbaa 	bl	800641c <_Bfree>
 8005cc8:	e7d0      	b.n	8005c6c <_dtoa_r+0x57c>
 8005cca:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cce:	4633      	mov	r3, r6
 8005cd0:	461e      	mov	r6, r3
 8005cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cd6:	2a39      	cmp	r2, #57	@ 0x39
 8005cd8:	d106      	bne.n	8005ce8 <_dtoa_r+0x5f8>
 8005cda:	429f      	cmp	r7, r3
 8005cdc:	d1f8      	bne.n	8005cd0 <_dtoa_r+0x5e0>
 8005cde:	9a04      	ldr	r2, [sp, #16]
 8005ce0:	3201      	adds	r2, #1
 8005ce2:	9204      	str	r2, [sp, #16]
 8005ce4:	2230      	movs	r2, #48	@ 0x30
 8005ce6:	703a      	strb	r2, [r7, #0]
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	3201      	adds	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e7bd      	b.n	8005c6c <_dtoa_r+0x57c>
 8005cf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfc:	f47f aeef 	bne.w	8005ade <_dtoa_r+0x3ee>
 8005d00:	e710      	b.n	8005b24 <_dtoa_r+0x434>
 8005d02:	bf00      	nop
 8005d04:	08007490 	.word	0x08007490
 8005d08:	08007468 	.word	0x08007468
 8005d0c:	9908      	ldr	r1, [sp, #32]
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	f000 80e3 	beq.w	8005eda <_dtoa_r+0x7ea>
 8005d14:	9907      	ldr	r1, [sp, #28]
 8005d16:	2901      	cmp	r1, #1
 8005d18:	f300 80c8 	bgt.w	8005eac <_dtoa_r+0x7bc>
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	f000 80c1 	beq.w	8005ea4 <_dtoa_r+0x7b4>
 8005d22:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005d26:	9e05      	ldr	r6, [sp, #20]
 8005d28:	461c      	mov	r4, r3
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	9b05      	ldr	r3, [sp, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2101      	movs	r1, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	4648      	mov	r0, r9
 8005d3a:	9306      	str	r3, [sp, #24]
 8005d3c:	f000 fc22 	bl	8006584 <__i2b>
 8005d40:	9b04      	ldr	r3, [sp, #16]
 8005d42:	4605      	mov	r5, r0
 8005d44:	b166      	cbz	r6, 8005d60 <_dtoa_r+0x670>
 8005d46:	9a06      	ldr	r2, [sp, #24]
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	dd09      	ble.n	8005d60 <_dtoa_r+0x670>
 8005d4c:	42b2      	cmp	r2, r6
 8005d4e:	9905      	ldr	r1, [sp, #20]
 8005d50:	bfa8      	it	ge
 8005d52:	4632      	movge	r2, r6
 8005d54:	1a89      	subs	r1, r1, r2
 8005d56:	9105      	str	r1, [sp, #20]
 8005d58:	9906      	ldr	r1, [sp, #24]
 8005d5a:	1ab6      	subs	r6, r6, r2
 8005d5c:	1a8a      	subs	r2, r1, r2
 8005d5e:	9206      	str	r2, [sp, #24]
 8005d60:	b1fb      	cbz	r3, 8005da2 <_dtoa_r+0x6b2>
 8005d62:	9a08      	ldr	r2, [sp, #32]
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	f000 80bc 	beq.w	8005ee2 <_dtoa_r+0x7f2>
 8005d6a:	b19c      	cbz	r4, 8005d94 <_dtoa_r+0x6a4>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4622      	mov	r2, r4
 8005d70:	4648      	mov	r0, r9
 8005d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d74:	f000 fcc6 	bl	8006704 <__pow5mult>
 8005d78:	9a01      	ldr	r2, [sp, #4]
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	4648      	mov	r0, r9
 8005d80:	f000 fc16 	bl	80065b0 <__multiply>
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	9004      	str	r0, [sp, #16]
 8005d88:	4648      	mov	r0, r9
 8005d8a:	f000 fb47 	bl	800641c <_Bfree>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d92:	9201      	str	r2, [sp, #4]
 8005d94:	1b1a      	subs	r2, r3, r4
 8005d96:	d004      	beq.n	8005da2 <_dtoa_r+0x6b2>
 8005d98:	9901      	ldr	r1, [sp, #4]
 8005d9a:	4648      	mov	r0, r9
 8005d9c:	f000 fcb2 	bl	8006704 <__pow5mult>
 8005da0:	9001      	str	r0, [sp, #4]
 8005da2:	2101      	movs	r1, #1
 8005da4:	4648      	mov	r0, r9
 8005da6:	f000 fbed 	bl	8006584 <__i2b>
 8005daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dac:	4604      	mov	r4, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 81d0 	beq.w	8006154 <_dtoa_r+0xa64>
 8005db4:	461a      	mov	r2, r3
 8005db6:	4601      	mov	r1, r0
 8005db8:	4648      	mov	r0, r9
 8005dba:	f000 fca3 	bl	8006704 <__pow5mult>
 8005dbe:	9b07      	ldr	r3, [sp, #28]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f300 8095 	bgt.w	8005ef2 <_dtoa_r+0x802>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 808b 	bne.w	8005ee6 <_dtoa_r+0x7f6>
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	f040 8087 	bne.w	8005eea <_dtoa_r+0x7fa>
 8005ddc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005de0:	0d12      	lsrs	r2, r2, #20
 8005de2:	0512      	lsls	r2, r2, #20
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	f000 8082 	beq.w	8005eee <_dtoa_r+0x7fe>
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	3301      	adds	r3, #1
 8005dee:	9305      	str	r3, [sp, #20]
 8005df0:	9b06      	ldr	r3, [sp, #24]
 8005df2:	3301      	adds	r3, #1
 8005df4:	9306      	str	r3, [sp, #24]
 8005df6:	2301      	movs	r3, #1
 8005df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 81af 	beq.w	8006160 <_dtoa_r+0xa70>
 8005e02:	6922      	ldr	r2, [r4, #16]
 8005e04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005e08:	6910      	ldr	r0, [r2, #16]
 8005e0a:	f000 fb6f 	bl	80064ec <__hi0bits>
 8005e0e:	f1c0 0020 	rsb	r0, r0, #32
 8005e12:	9b06      	ldr	r3, [sp, #24]
 8005e14:	4418      	add	r0, r3
 8005e16:	f010 001f 	ands.w	r0, r0, #31
 8005e1a:	d076      	beq.n	8005f0a <_dtoa_r+0x81a>
 8005e1c:	f1c0 0220 	rsb	r2, r0, #32
 8005e20:	2a04      	cmp	r2, #4
 8005e22:	dd69      	ble.n	8005ef8 <_dtoa_r+0x808>
 8005e24:	9b05      	ldr	r3, [sp, #20]
 8005e26:	f1c0 001c 	rsb	r0, r0, #28
 8005e2a:	4403      	add	r3, r0
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	9b06      	ldr	r3, [sp, #24]
 8005e30:	4406      	add	r6, r0
 8005e32:	4403      	add	r3, r0
 8005e34:	9306      	str	r3, [sp, #24]
 8005e36:	9b05      	ldr	r3, [sp, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dd05      	ble.n	8005e48 <_dtoa_r+0x758>
 8005e3c:	9901      	ldr	r1, [sp, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4648      	mov	r0, r9
 8005e42:	f000 fcb9 	bl	80067b8 <__lshift>
 8005e46:	9001      	str	r0, [sp, #4]
 8005e48:	9b06      	ldr	r3, [sp, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	dd05      	ble.n	8005e5a <_dtoa_r+0x76a>
 8005e4e:	4621      	mov	r1, r4
 8005e50:	461a      	mov	r2, r3
 8005e52:	4648      	mov	r0, r9
 8005e54:	f000 fcb0 	bl	80067b8 <__lshift>
 8005e58:	4604      	mov	r4, r0
 8005e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d056      	beq.n	8005f0e <_dtoa_r+0x81e>
 8005e60:	9801      	ldr	r0, [sp, #4]
 8005e62:	4621      	mov	r1, r4
 8005e64:	f000 fd14 	bl	8006890 <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	da50      	bge.n	8005f0e <_dtoa_r+0x81e>
 8005e6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	9901      	ldr	r1, [sp, #4]
 8005e74:	2300      	movs	r3, #0
 8005e76:	220a      	movs	r2, #10
 8005e78:	4648      	mov	r0, r9
 8005e7a:	f000 faf1 	bl	8006460 <__multadd>
 8005e7e:	9b08      	ldr	r3, [sp, #32]
 8005e80:	9001      	str	r0, [sp, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 816e 	beq.w	8006164 <_dtoa_r+0xa74>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 fae6 	bl	8006460 <__multadd>
 8005e94:	f1bb 0f00 	cmp.w	fp, #0
 8005e98:	4605      	mov	r5, r0
 8005e9a:	dc64      	bgt.n	8005f66 <_dtoa_r+0x876>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	dc3e      	bgt.n	8005f20 <_dtoa_r+0x830>
 8005ea2:	e060      	b.n	8005f66 <_dtoa_r+0x876>
 8005ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005eaa:	e73c      	b.n	8005d26 <_dtoa_r+0x636>
 8005eac:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	bfbf      	itttt	lt
 8005eb4:	1ae2      	sublt	r2, r4, r3
 8005eb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005eb8:	189b      	addlt	r3, r3, r2
 8005eba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005ebc:	bfae      	itee	ge
 8005ebe:	1b1c      	subge	r4, r3, r4
 8005ec0:	4623      	movlt	r3, r4
 8005ec2:	2400      	movlt	r4, #0
 8005ec4:	f1ba 0f00 	cmp.w	sl, #0
 8005ec8:	bfb5      	itete	lt
 8005eca:	9a05      	ldrlt	r2, [sp, #20]
 8005ecc:	9e05      	ldrge	r6, [sp, #20]
 8005ece:	eba2 060a 	sublt.w	r6, r2, sl
 8005ed2:	4652      	movge	r2, sl
 8005ed4:	bfb8      	it	lt
 8005ed6:	2200      	movlt	r2, #0
 8005ed8:	e727      	b.n	8005d2a <_dtoa_r+0x63a>
 8005eda:	9e05      	ldr	r6, [sp, #20]
 8005edc:	9d08      	ldr	r5, [sp, #32]
 8005ede:	461c      	mov	r4, r3
 8005ee0:	e730      	b.n	8005d44 <_dtoa_r+0x654>
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	e758      	b.n	8005d98 <_dtoa_r+0x6a8>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e786      	b.n	8005df8 <_dtoa_r+0x708>
 8005eea:	9b02      	ldr	r3, [sp, #8]
 8005eec:	e784      	b.n	8005df8 <_dtoa_r+0x708>
 8005eee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ef0:	e783      	b.n	8005dfa <_dtoa_r+0x70a>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ef6:	e784      	b.n	8005e02 <_dtoa_r+0x712>
 8005ef8:	d09d      	beq.n	8005e36 <_dtoa_r+0x746>
 8005efa:	9b05      	ldr	r3, [sp, #20]
 8005efc:	321c      	adds	r2, #28
 8005efe:	4413      	add	r3, r2
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	9b06      	ldr	r3, [sp, #24]
 8005f04:	4416      	add	r6, r2
 8005f06:	4413      	add	r3, r2
 8005f08:	e794      	b.n	8005e34 <_dtoa_r+0x744>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	e7f5      	b.n	8005efa <_dtoa_r+0x80a>
 8005f0e:	f1ba 0f00 	cmp.w	sl, #0
 8005f12:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f16:	46d3      	mov	fp, sl
 8005f18:	dc21      	bgt.n	8005f5e <_dtoa_r+0x86e>
 8005f1a:	9b07      	ldr	r3, [sp, #28]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	dd1e      	ble.n	8005f5e <_dtoa_r+0x86e>
 8005f20:	f1bb 0f00 	cmp.w	fp, #0
 8005f24:	f47f aeb7 	bne.w	8005c96 <_dtoa_r+0x5a6>
 8005f28:	4621      	mov	r1, r4
 8005f2a:	465b      	mov	r3, fp
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	4648      	mov	r0, r9
 8005f30:	f000 fa96 	bl	8006460 <__multadd>
 8005f34:	4601      	mov	r1, r0
 8005f36:	4604      	mov	r4, r0
 8005f38:	9801      	ldr	r0, [sp, #4]
 8005f3a:	f000 fca9 	bl	8006890 <__mcmp>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f77f aea9 	ble.w	8005c96 <_dtoa_r+0x5a6>
 8005f44:	463e      	mov	r6, r7
 8005f46:	2331      	movs	r3, #49	@ 0x31
 8005f48:	f806 3b01 	strb.w	r3, [r6], #1
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	e6a4      	b.n	8005c9e <_dtoa_r+0x5ae>
 8005f54:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f58:	4654      	mov	r4, sl
 8005f5a:	4625      	mov	r5, r4
 8005f5c:	e7f2      	b.n	8005f44 <_dtoa_r+0x854>
 8005f5e:	9b08      	ldr	r3, [sp, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8103 	beq.w	800616c <_dtoa_r+0xa7c>
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	dd05      	ble.n	8005f76 <_dtoa_r+0x886>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4648      	mov	r0, r9
 8005f70:	f000 fc22 	bl	80067b8 <__lshift>
 8005f74:	4605      	mov	r5, r0
 8005f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d058      	beq.n	800602e <_dtoa_r+0x93e>
 8005f7c:	6869      	ldr	r1, [r5, #4]
 8005f7e:	4648      	mov	r0, r9
 8005f80:	f000 fa0c 	bl	800639c <_Balloc>
 8005f84:	4606      	mov	r6, r0
 8005f86:	b928      	cbnz	r0, 8005f94 <_dtoa_r+0x8a4>
 8005f88:	4b82      	ldr	r3, [pc, #520]	@ (8006194 <_dtoa_r+0xaa4>)
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f90:	f7ff bbc7 	b.w	8005722 <_dtoa_r+0x32>
 8005f94:	692a      	ldr	r2, [r5, #16]
 8005f96:	3202      	adds	r2, #2
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	f105 010c 	add.w	r1, r5, #12
 8005f9e:	300c      	adds	r0, #12
 8005fa0:	f7ff fb0f 	bl	80055c2 <memcpy>
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4648      	mov	r0, r9
 8005faa:	f000 fc05 	bl	80067b8 <__lshift>
 8005fae:	1c7b      	adds	r3, r7, #1
 8005fb0:	9305      	str	r3, [sp, #20]
 8005fb2:	eb07 030b 	add.w	r3, r7, fp
 8005fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	46a8      	mov	r8, r5
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	9b05      	ldr	r3, [sp, #20]
 8005fc6:	9801      	ldr	r0, [sp, #4]
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fce:	f7ff fb06 	bl	80055de <quorem>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	9002      	str	r0, [sp, #8]
 8005fd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005fda:	9801      	ldr	r0, [sp, #4]
 8005fdc:	f000 fc58 	bl	8006890 <__mcmp>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	9006      	str	r0, [sp, #24]
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4648      	mov	r0, r9
 8005fe8:	f000 fc6e 	bl	80068c8 <__mdiff>
 8005fec:	68c2      	ldr	r2, [r0, #12]
 8005fee:	4606      	mov	r6, r0
 8005ff0:	b9fa      	cbnz	r2, 8006032 <_dtoa_r+0x942>
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	9801      	ldr	r0, [sp, #4]
 8005ff6:	f000 fc4b 	bl	8006890 <__mcmp>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4648      	mov	r0, r9
 8006000:	920a      	str	r2, [sp, #40]	@ 0x28
 8006002:	f000 fa0b 	bl	800641c <_Bfree>
 8006006:	9b07      	ldr	r3, [sp, #28]
 8006008:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800600a:	9e05      	ldr	r6, [sp, #20]
 800600c:	ea43 0102 	orr.w	r1, r3, r2
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	4319      	orrs	r1, r3
 8006014:	d10f      	bne.n	8006036 <_dtoa_r+0x946>
 8006016:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800601a:	d028      	beq.n	800606e <_dtoa_r+0x97e>
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd02      	ble.n	8006028 <_dtoa_r+0x938>
 8006022:	9b02      	ldr	r3, [sp, #8]
 8006024:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006028:	f88b a000 	strb.w	sl, [fp]
 800602c:	e639      	b.n	8005ca2 <_dtoa_r+0x5b2>
 800602e:	4628      	mov	r0, r5
 8006030:	e7bd      	b.n	8005fae <_dtoa_r+0x8be>
 8006032:	2201      	movs	r2, #1
 8006034:	e7e2      	b.n	8005ffc <_dtoa_r+0x90c>
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	db04      	blt.n	8006046 <_dtoa_r+0x956>
 800603c:	9907      	ldr	r1, [sp, #28]
 800603e:	430b      	orrs	r3, r1
 8006040:	9908      	ldr	r1, [sp, #32]
 8006042:	430b      	orrs	r3, r1
 8006044:	d120      	bne.n	8006088 <_dtoa_r+0x998>
 8006046:	2a00      	cmp	r2, #0
 8006048:	ddee      	ble.n	8006028 <_dtoa_r+0x938>
 800604a:	9901      	ldr	r1, [sp, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	4648      	mov	r0, r9
 8006050:	f000 fbb2 	bl	80067b8 <__lshift>
 8006054:	4621      	mov	r1, r4
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	f000 fc1a 	bl	8006890 <__mcmp>
 800605c:	2800      	cmp	r0, #0
 800605e:	dc03      	bgt.n	8006068 <_dtoa_r+0x978>
 8006060:	d1e2      	bne.n	8006028 <_dtoa_r+0x938>
 8006062:	f01a 0f01 	tst.w	sl, #1
 8006066:	d0df      	beq.n	8006028 <_dtoa_r+0x938>
 8006068:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800606c:	d1d9      	bne.n	8006022 <_dtoa_r+0x932>
 800606e:	2339      	movs	r3, #57	@ 0x39
 8006070:	f88b 3000 	strb.w	r3, [fp]
 8006074:	4633      	mov	r3, r6
 8006076:	461e      	mov	r6, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800607e:	2a39      	cmp	r2, #57	@ 0x39
 8006080:	d053      	beq.n	800612a <_dtoa_r+0xa3a>
 8006082:	3201      	adds	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e60c      	b.n	8005ca2 <_dtoa_r+0x5b2>
 8006088:	2a00      	cmp	r2, #0
 800608a:	dd07      	ble.n	800609c <_dtoa_r+0x9ac>
 800608c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006090:	d0ed      	beq.n	800606e <_dtoa_r+0x97e>
 8006092:	f10a 0301 	add.w	r3, sl, #1
 8006096:	f88b 3000 	strb.w	r3, [fp]
 800609a:	e602      	b.n	8005ca2 <_dtoa_r+0x5b2>
 800609c:	9b05      	ldr	r3, [sp, #20]
 800609e:	9a05      	ldr	r2, [sp, #20]
 80060a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80060a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d029      	beq.n	80060fe <_dtoa_r+0xa0e>
 80060aa:	9901      	ldr	r1, [sp, #4]
 80060ac:	2300      	movs	r3, #0
 80060ae:	220a      	movs	r2, #10
 80060b0:	4648      	mov	r0, r9
 80060b2:	f000 f9d5 	bl	8006460 <__multadd>
 80060b6:	45a8      	cmp	r8, r5
 80060b8:	9001      	str	r0, [sp, #4]
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f04f 020a 	mov.w	r2, #10
 80060c2:	4641      	mov	r1, r8
 80060c4:	4648      	mov	r0, r9
 80060c6:	d107      	bne.n	80060d8 <_dtoa_r+0x9e8>
 80060c8:	f000 f9ca 	bl	8006460 <__multadd>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4605      	mov	r5, r0
 80060d0:	9b05      	ldr	r3, [sp, #20]
 80060d2:	3301      	adds	r3, #1
 80060d4:	9305      	str	r3, [sp, #20]
 80060d6:	e775      	b.n	8005fc4 <_dtoa_r+0x8d4>
 80060d8:	f000 f9c2 	bl	8006460 <__multadd>
 80060dc:	4629      	mov	r1, r5
 80060de:	4680      	mov	r8, r0
 80060e0:	2300      	movs	r3, #0
 80060e2:	220a      	movs	r2, #10
 80060e4:	4648      	mov	r0, r9
 80060e6:	f000 f9bb 	bl	8006460 <__multadd>
 80060ea:	4605      	mov	r5, r0
 80060ec:	e7f0      	b.n	80060d0 <_dtoa_r+0x9e0>
 80060ee:	f1bb 0f00 	cmp.w	fp, #0
 80060f2:	bfcc      	ite	gt
 80060f4:	465e      	movgt	r6, fp
 80060f6:	2601      	movle	r6, #1
 80060f8:	443e      	add	r6, r7
 80060fa:	f04f 0800 	mov.w	r8, #0
 80060fe:	9901      	ldr	r1, [sp, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	4648      	mov	r0, r9
 8006104:	f000 fb58 	bl	80067b8 <__lshift>
 8006108:	4621      	mov	r1, r4
 800610a:	9001      	str	r0, [sp, #4]
 800610c:	f000 fbc0 	bl	8006890 <__mcmp>
 8006110:	2800      	cmp	r0, #0
 8006112:	dcaf      	bgt.n	8006074 <_dtoa_r+0x984>
 8006114:	d102      	bne.n	800611c <_dtoa_r+0xa2c>
 8006116:	f01a 0f01 	tst.w	sl, #1
 800611a:	d1ab      	bne.n	8006074 <_dtoa_r+0x984>
 800611c:	4633      	mov	r3, r6
 800611e:	461e      	mov	r6, r3
 8006120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006124:	2a30      	cmp	r2, #48	@ 0x30
 8006126:	d0fa      	beq.n	800611e <_dtoa_r+0xa2e>
 8006128:	e5bb      	b.n	8005ca2 <_dtoa_r+0x5b2>
 800612a:	429f      	cmp	r7, r3
 800612c:	d1a3      	bne.n	8006076 <_dtoa_r+0x986>
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	3301      	adds	r3, #1
 8006132:	9304      	str	r3, [sp, #16]
 8006134:	2331      	movs	r3, #49	@ 0x31
 8006136:	703b      	strb	r3, [r7, #0]
 8006138:	e5b3      	b.n	8005ca2 <_dtoa_r+0x5b2>
 800613a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800613c:	4f16      	ldr	r7, [pc, #88]	@ (8006198 <_dtoa_r+0xaa8>)
 800613e:	b11b      	cbz	r3, 8006148 <_dtoa_r+0xa58>
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4638      	mov	r0, r7
 800614a:	b011      	add	sp, #68	@ 0x44
 800614c:	ecbd 8b02 	vpop	{d8}
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	2b01      	cmp	r3, #1
 8006158:	f77f ae36 	ble.w	8005dc8 <_dtoa_r+0x6d8>
 800615c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800615e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006160:	2001      	movs	r0, #1
 8006162:	e656      	b.n	8005e12 <_dtoa_r+0x722>
 8006164:	f1bb 0f00 	cmp.w	fp, #0
 8006168:	f77f aed7 	ble.w	8005f1a <_dtoa_r+0x82a>
 800616c:	463e      	mov	r6, r7
 800616e:	9801      	ldr	r0, [sp, #4]
 8006170:	4621      	mov	r1, r4
 8006172:	f7ff fa34 	bl	80055de <quorem>
 8006176:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800617a:	f806 ab01 	strb.w	sl, [r6], #1
 800617e:	1bf2      	subs	r2, r6, r7
 8006180:	4593      	cmp	fp, r2
 8006182:	ddb4      	ble.n	80060ee <_dtoa_r+0x9fe>
 8006184:	9901      	ldr	r1, [sp, #4]
 8006186:	2300      	movs	r3, #0
 8006188:	220a      	movs	r2, #10
 800618a:	4648      	mov	r0, r9
 800618c:	f000 f968 	bl	8006460 <__multadd>
 8006190:	9001      	str	r0, [sp, #4]
 8006192:	e7ec      	b.n	800616e <_dtoa_r+0xa7e>
 8006194:	080073f0 	.word	0x080073f0
 8006198:	08007374 	.word	0x08007374

0800619c <_free_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4605      	mov	r5, r0
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d041      	beq.n	8006228 <_free_r+0x8c>
 80061a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a8:	1f0c      	subs	r4, r1, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfb8      	it	lt
 80061ae:	18e4      	addlt	r4, r4, r3
 80061b0:	f000 f8e8 	bl	8006384 <__malloc_lock>
 80061b4:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <_free_r+0x90>)
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	b933      	cbnz	r3, 80061c8 <_free_r+0x2c>
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	6014      	str	r4, [r2, #0]
 80061be:	4628      	mov	r0, r5
 80061c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c4:	f000 b8e4 	b.w	8006390 <__malloc_unlock>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d908      	bls.n	80061de <_free_r+0x42>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	1821      	adds	r1, r4, r0
 80061d0:	428b      	cmp	r3, r1
 80061d2:	bf01      	itttt	eq
 80061d4:	6819      	ldreq	r1, [r3, #0]
 80061d6:	685b      	ldreq	r3, [r3, #4]
 80061d8:	1809      	addeq	r1, r1, r0
 80061da:	6021      	streq	r1, [r4, #0]
 80061dc:	e7ed      	b.n	80061ba <_free_r+0x1e>
 80061de:	461a      	mov	r2, r3
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b10b      	cbz	r3, 80061e8 <_free_r+0x4c>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d9fa      	bls.n	80061de <_free_r+0x42>
 80061e8:	6811      	ldr	r1, [r2, #0]
 80061ea:	1850      	adds	r0, r2, r1
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d10b      	bne.n	8006208 <_free_r+0x6c>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	4401      	add	r1, r0
 80061f4:	1850      	adds	r0, r2, r1
 80061f6:	4283      	cmp	r3, r0
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	d1e0      	bne.n	80061be <_free_r+0x22>
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	4408      	add	r0, r1
 8006204:	6010      	str	r0, [r2, #0]
 8006206:	e7da      	b.n	80061be <_free_r+0x22>
 8006208:	d902      	bls.n	8006210 <_free_r+0x74>
 800620a:	230c      	movs	r3, #12
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	e7d6      	b.n	80061be <_free_r+0x22>
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	1821      	adds	r1, r4, r0
 8006214:	428b      	cmp	r3, r1
 8006216:	bf04      	itt	eq
 8006218:	6819      	ldreq	r1, [r3, #0]
 800621a:	685b      	ldreq	r3, [r3, #4]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	bf04      	itt	eq
 8006220:	1809      	addeq	r1, r1, r0
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	6054      	str	r4, [r2, #4]
 8006226:	e7ca      	b.n	80061be <_free_r+0x22>
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	bf00      	nop
 800622c:	20000694 	.word	0x20000694

08006230 <malloc>:
 8006230:	4b02      	ldr	r3, [pc, #8]	@ (800623c <malloc+0xc>)
 8006232:	4601      	mov	r1, r0
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f000 b825 	b.w	8006284 <_malloc_r>
 800623a:	bf00      	nop
 800623c:	20000024 	.word	0x20000024

08006240 <sbrk_aligned>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0f      	ldr	r6, [pc, #60]	@ (8006280 <sbrk_aligned+0x40>)
 8006244:	460c      	mov	r4, r1
 8006246:	6831      	ldr	r1, [r6, #0]
 8006248:	4605      	mov	r5, r0
 800624a:	b911      	cbnz	r1, 8006252 <sbrk_aligned+0x12>
 800624c:	f000 fe9a 	bl	8006f84 <_sbrk_r>
 8006250:	6030      	str	r0, [r6, #0]
 8006252:	4621      	mov	r1, r4
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fe95 	bl	8006f84 <_sbrk_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d103      	bne.n	8006266 <sbrk_aligned+0x26>
 800625e:	f04f 34ff 	mov.w	r4, #4294967295
 8006262:	4620      	mov	r0, r4
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d0f8      	beq.n	8006262 <sbrk_aligned+0x22>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fe86 	bl	8006f84 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d1f2      	bne.n	8006262 <sbrk_aligned+0x22>
 800627c:	e7ef      	b.n	800625e <sbrk_aligned+0x1e>
 800627e:	bf00      	nop
 8006280:	20000690 	.word	0x20000690

08006284 <_malloc_r>:
 8006284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006288:	1ccd      	adds	r5, r1, #3
 800628a:	f025 0503 	bic.w	r5, r5, #3
 800628e:	3508      	adds	r5, #8
 8006290:	2d0c      	cmp	r5, #12
 8006292:	bf38      	it	cc
 8006294:	250c      	movcc	r5, #12
 8006296:	2d00      	cmp	r5, #0
 8006298:	4606      	mov	r6, r0
 800629a:	db01      	blt.n	80062a0 <_malloc_r+0x1c>
 800629c:	42a9      	cmp	r1, r5
 800629e:	d904      	bls.n	80062aa <_malloc_r+0x26>
 80062a0:	230c      	movs	r3, #12
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	2000      	movs	r0, #0
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006380 <_malloc_r+0xfc>
 80062ae:	f000 f869 	bl	8006384 <__malloc_lock>
 80062b2:	f8d8 3000 	ldr.w	r3, [r8]
 80062b6:	461c      	mov	r4, r3
 80062b8:	bb44      	cbnz	r4, 800630c <_malloc_r+0x88>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	f7ff ffbf 	bl	8006240 <sbrk_aligned>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	4604      	mov	r4, r0
 80062c6:	d158      	bne.n	800637a <_malloc_r+0xf6>
 80062c8:	f8d8 4000 	ldr.w	r4, [r8]
 80062cc:	4627      	mov	r7, r4
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	d143      	bne.n	800635a <_malloc_r+0xd6>
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	d04b      	beq.n	800636e <_malloc_r+0xea>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	4639      	mov	r1, r7
 80062da:	4630      	mov	r0, r6
 80062dc:	eb04 0903 	add.w	r9, r4, r3
 80062e0:	f000 fe50 	bl	8006f84 <_sbrk_r>
 80062e4:	4581      	cmp	r9, r0
 80062e6:	d142      	bne.n	800636e <_malloc_r+0xea>
 80062e8:	6821      	ldr	r1, [r4, #0]
 80062ea:	1a6d      	subs	r5, r5, r1
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7ff ffa6 	bl	8006240 <sbrk_aligned>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d03a      	beq.n	800636e <_malloc_r+0xea>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	442b      	add	r3, r5
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	bb62      	cbnz	r2, 8006360 <_malloc_r+0xdc>
 8006306:	f8c8 7000 	str.w	r7, [r8]
 800630a:	e00f      	b.n	800632c <_malloc_r+0xa8>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	1b52      	subs	r2, r2, r5
 8006310:	d420      	bmi.n	8006354 <_malloc_r+0xd0>
 8006312:	2a0b      	cmp	r2, #11
 8006314:	d917      	bls.n	8006346 <_malloc_r+0xc2>
 8006316:	1961      	adds	r1, r4, r5
 8006318:	42a3      	cmp	r3, r4
 800631a:	6025      	str	r5, [r4, #0]
 800631c:	bf18      	it	ne
 800631e:	6059      	strne	r1, [r3, #4]
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	bf08      	it	eq
 8006324:	f8c8 1000 	streq.w	r1, [r8]
 8006328:	5162      	str	r2, [r4, r5]
 800632a:	604b      	str	r3, [r1, #4]
 800632c:	4630      	mov	r0, r6
 800632e:	f000 f82f 	bl	8006390 <__malloc_unlock>
 8006332:	f104 000b 	add.w	r0, r4, #11
 8006336:	1d23      	adds	r3, r4, #4
 8006338:	f020 0007 	bic.w	r0, r0, #7
 800633c:	1ac2      	subs	r2, r0, r3
 800633e:	bf1c      	itt	ne
 8006340:	1a1b      	subne	r3, r3, r0
 8006342:	50a3      	strne	r3, [r4, r2]
 8006344:	e7af      	b.n	80062a6 <_malloc_r+0x22>
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	42a3      	cmp	r3, r4
 800634a:	bf0c      	ite	eq
 800634c:	f8c8 2000 	streq.w	r2, [r8]
 8006350:	605a      	strne	r2, [r3, #4]
 8006352:	e7eb      	b.n	800632c <_malloc_r+0xa8>
 8006354:	4623      	mov	r3, r4
 8006356:	6864      	ldr	r4, [r4, #4]
 8006358:	e7ae      	b.n	80062b8 <_malloc_r+0x34>
 800635a:	463c      	mov	r4, r7
 800635c:	687f      	ldr	r7, [r7, #4]
 800635e:	e7b6      	b.n	80062ce <_malloc_r+0x4a>
 8006360:	461a      	mov	r2, r3
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	42a3      	cmp	r3, r4
 8006366:	d1fb      	bne.n	8006360 <_malloc_r+0xdc>
 8006368:	2300      	movs	r3, #0
 800636a:	6053      	str	r3, [r2, #4]
 800636c:	e7de      	b.n	800632c <_malloc_r+0xa8>
 800636e:	230c      	movs	r3, #12
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f80c 	bl	8006390 <__malloc_unlock>
 8006378:	e794      	b.n	80062a4 <_malloc_r+0x20>
 800637a:	6005      	str	r5, [r0, #0]
 800637c:	e7d6      	b.n	800632c <_malloc_r+0xa8>
 800637e:	bf00      	nop
 8006380:	20000694 	.word	0x20000694

08006384 <__malloc_lock>:
 8006384:	4801      	ldr	r0, [pc, #4]	@ (800638c <__malloc_lock+0x8>)
 8006386:	f7ff b91a 	b.w	80055be <__retarget_lock_acquire_recursive>
 800638a:	bf00      	nop
 800638c:	2000068c 	.word	0x2000068c

08006390 <__malloc_unlock>:
 8006390:	4801      	ldr	r0, [pc, #4]	@ (8006398 <__malloc_unlock+0x8>)
 8006392:	f7ff b915 	b.w	80055c0 <__retarget_lock_release_recursive>
 8006396:	bf00      	nop
 8006398:	2000068c 	.word	0x2000068c

0800639c <_Balloc>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	69c6      	ldr	r6, [r0, #28]
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	b976      	cbnz	r6, 80063c4 <_Balloc+0x28>
 80063a6:	2010      	movs	r0, #16
 80063a8:	f7ff ff42 	bl	8006230 <malloc>
 80063ac:	4602      	mov	r2, r0
 80063ae:	61e0      	str	r0, [r4, #28]
 80063b0:	b920      	cbnz	r0, 80063bc <_Balloc+0x20>
 80063b2:	4b18      	ldr	r3, [pc, #96]	@ (8006414 <_Balloc+0x78>)
 80063b4:	4818      	ldr	r0, [pc, #96]	@ (8006418 <_Balloc+0x7c>)
 80063b6:	216b      	movs	r1, #107	@ 0x6b
 80063b8:	f000 fdf4 	bl	8006fa4 <__assert_func>
 80063bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063c0:	6006      	str	r6, [r0, #0]
 80063c2:	60c6      	str	r6, [r0, #12]
 80063c4:	69e6      	ldr	r6, [r4, #28]
 80063c6:	68f3      	ldr	r3, [r6, #12]
 80063c8:	b183      	cbz	r3, 80063ec <_Balloc+0x50>
 80063ca:	69e3      	ldr	r3, [r4, #28]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063d2:	b9b8      	cbnz	r0, 8006404 <_Balloc+0x68>
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f605 	lsl.w	r6, r1, r5
 80063da:	1d72      	adds	r2, r6, #5
 80063dc:	0092      	lsls	r2, r2, #2
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fdfe 	bl	8006fe0 <_calloc_r>
 80063e4:	b160      	cbz	r0, 8006400 <_Balloc+0x64>
 80063e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ea:	e00e      	b.n	800640a <_Balloc+0x6e>
 80063ec:	2221      	movs	r2, #33	@ 0x21
 80063ee:	2104      	movs	r1, #4
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fdf5 	bl	8006fe0 <_calloc_r>
 80063f6:	69e3      	ldr	r3, [r4, #28]
 80063f8:	60f0      	str	r0, [r6, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e4      	bne.n	80063ca <_Balloc+0x2e>
 8006400:	2000      	movs	r0, #0
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	6802      	ldr	r2, [r0, #0]
 8006406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800640a:	2300      	movs	r3, #0
 800640c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006410:	e7f7      	b.n	8006402 <_Balloc+0x66>
 8006412:	bf00      	nop
 8006414:	08007381 	.word	0x08007381
 8006418:	08007401 	.word	0x08007401

0800641c <_Bfree>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	69c6      	ldr	r6, [r0, #28]
 8006420:	4605      	mov	r5, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b976      	cbnz	r6, 8006444 <_Bfree+0x28>
 8006426:	2010      	movs	r0, #16
 8006428:	f7ff ff02 	bl	8006230 <malloc>
 800642c:	4602      	mov	r2, r0
 800642e:	61e8      	str	r0, [r5, #28]
 8006430:	b920      	cbnz	r0, 800643c <_Bfree+0x20>
 8006432:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <_Bfree+0x3c>)
 8006434:	4809      	ldr	r0, [pc, #36]	@ (800645c <_Bfree+0x40>)
 8006436:	218f      	movs	r1, #143	@ 0x8f
 8006438:	f000 fdb4 	bl	8006fa4 <__assert_func>
 800643c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006440:	6006      	str	r6, [r0, #0]
 8006442:	60c6      	str	r6, [r0, #12]
 8006444:	b13c      	cbz	r4, 8006456 <_Bfree+0x3a>
 8006446:	69eb      	ldr	r3, [r5, #28]
 8006448:	6862      	ldr	r2, [r4, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006450:	6021      	str	r1, [r4, #0]
 8006452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	08007381 	.word	0x08007381
 800645c:	08007401 	.word	0x08007401

08006460 <__multadd>:
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	690d      	ldr	r5, [r1, #16]
 8006466:	4607      	mov	r7, r0
 8006468:	460c      	mov	r4, r1
 800646a:	461e      	mov	r6, r3
 800646c:	f101 0c14 	add.w	ip, r1, #20
 8006470:	2000      	movs	r0, #0
 8006472:	f8dc 3000 	ldr.w	r3, [ip]
 8006476:	b299      	uxth	r1, r3
 8006478:	fb02 6101 	mla	r1, r2, r1, r6
 800647c:	0c1e      	lsrs	r6, r3, #16
 800647e:	0c0b      	lsrs	r3, r1, #16
 8006480:	fb02 3306 	mla	r3, r2, r6, r3
 8006484:	b289      	uxth	r1, r1
 8006486:	3001      	adds	r0, #1
 8006488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800648c:	4285      	cmp	r5, r0
 800648e:	f84c 1b04 	str.w	r1, [ip], #4
 8006492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006496:	dcec      	bgt.n	8006472 <__multadd+0x12>
 8006498:	b30e      	cbz	r6, 80064de <__multadd+0x7e>
 800649a:	68a3      	ldr	r3, [r4, #8]
 800649c:	42ab      	cmp	r3, r5
 800649e:	dc19      	bgt.n	80064d4 <__multadd+0x74>
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	4638      	mov	r0, r7
 80064a4:	3101      	adds	r1, #1
 80064a6:	f7ff ff79 	bl	800639c <_Balloc>
 80064aa:	4680      	mov	r8, r0
 80064ac:	b928      	cbnz	r0, 80064ba <__multadd+0x5a>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <__multadd+0x84>)
 80064b2:	480d      	ldr	r0, [pc, #52]	@ (80064e8 <__multadd+0x88>)
 80064b4:	21ba      	movs	r1, #186	@ 0xba
 80064b6:	f000 fd75 	bl	8006fa4 <__assert_func>
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	3202      	adds	r2, #2
 80064be:	f104 010c 	add.w	r1, r4, #12
 80064c2:	0092      	lsls	r2, r2, #2
 80064c4:	300c      	adds	r0, #12
 80064c6:	f7ff f87c 	bl	80055c2 <memcpy>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4638      	mov	r0, r7
 80064ce:	f7ff ffa5 	bl	800641c <_Bfree>
 80064d2:	4644      	mov	r4, r8
 80064d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064d8:	3501      	adds	r5, #1
 80064da:	615e      	str	r6, [r3, #20]
 80064dc:	6125      	str	r5, [r4, #16]
 80064de:	4620      	mov	r0, r4
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	080073f0 	.word	0x080073f0
 80064e8:	08007401 	.word	0x08007401

080064ec <__hi0bits>:
 80064ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064f0:	4603      	mov	r3, r0
 80064f2:	bf36      	itet	cc
 80064f4:	0403      	lslcc	r3, r0, #16
 80064f6:	2000      	movcs	r0, #0
 80064f8:	2010      	movcc	r0, #16
 80064fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064fe:	bf3c      	itt	cc
 8006500:	021b      	lslcc	r3, r3, #8
 8006502:	3008      	addcc	r0, #8
 8006504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006508:	bf3c      	itt	cc
 800650a:	011b      	lslcc	r3, r3, #4
 800650c:	3004      	addcc	r0, #4
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006512:	bf3c      	itt	cc
 8006514:	009b      	lslcc	r3, r3, #2
 8006516:	3002      	addcc	r0, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	db05      	blt.n	8006528 <__hi0bits+0x3c>
 800651c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006520:	f100 0001 	add.w	r0, r0, #1
 8006524:	bf08      	it	eq
 8006526:	2020      	moveq	r0, #32
 8006528:	4770      	bx	lr

0800652a <__lo0bits>:
 800652a:	6803      	ldr	r3, [r0, #0]
 800652c:	4602      	mov	r2, r0
 800652e:	f013 0007 	ands.w	r0, r3, #7
 8006532:	d00b      	beq.n	800654c <__lo0bits+0x22>
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	d421      	bmi.n	800657c <__lo0bits+0x52>
 8006538:	0798      	lsls	r0, r3, #30
 800653a:	bf49      	itett	mi
 800653c:	085b      	lsrmi	r3, r3, #1
 800653e:	089b      	lsrpl	r3, r3, #2
 8006540:	2001      	movmi	r0, #1
 8006542:	6013      	strmi	r3, [r2, #0]
 8006544:	bf5c      	itt	pl
 8006546:	6013      	strpl	r3, [r2, #0]
 8006548:	2002      	movpl	r0, #2
 800654a:	4770      	bx	lr
 800654c:	b299      	uxth	r1, r3
 800654e:	b909      	cbnz	r1, 8006554 <__lo0bits+0x2a>
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	2010      	movs	r0, #16
 8006554:	b2d9      	uxtb	r1, r3
 8006556:	b909      	cbnz	r1, 800655c <__lo0bits+0x32>
 8006558:	3008      	adds	r0, #8
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	0719      	lsls	r1, r3, #28
 800655e:	bf04      	itt	eq
 8006560:	091b      	lsreq	r3, r3, #4
 8006562:	3004      	addeq	r0, #4
 8006564:	0799      	lsls	r1, r3, #30
 8006566:	bf04      	itt	eq
 8006568:	089b      	lsreq	r3, r3, #2
 800656a:	3002      	addeq	r0, #2
 800656c:	07d9      	lsls	r1, r3, #31
 800656e:	d403      	bmi.n	8006578 <__lo0bits+0x4e>
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	f100 0001 	add.w	r0, r0, #1
 8006576:	d003      	beq.n	8006580 <__lo0bits+0x56>
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	4770      	bx	lr
 800657c:	2000      	movs	r0, #0
 800657e:	4770      	bx	lr
 8006580:	2020      	movs	r0, #32
 8006582:	4770      	bx	lr

08006584 <__i2b>:
 8006584:	b510      	push	{r4, lr}
 8006586:	460c      	mov	r4, r1
 8006588:	2101      	movs	r1, #1
 800658a:	f7ff ff07 	bl	800639c <_Balloc>
 800658e:	4602      	mov	r2, r0
 8006590:	b928      	cbnz	r0, 800659e <__i2b+0x1a>
 8006592:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <__i2b+0x24>)
 8006594:	4805      	ldr	r0, [pc, #20]	@ (80065ac <__i2b+0x28>)
 8006596:	f240 1145 	movw	r1, #325	@ 0x145
 800659a:	f000 fd03 	bl	8006fa4 <__assert_func>
 800659e:	2301      	movs	r3, #1
 80065a0:	6144      	str	r4, [r0, #20]
 80065a2:	6103      	str	r3, [r0, #16]
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	080073f0 	.word	0x080073f0
 80065ac:	08007401 	.word	0x08007401

080065b0 <__multiply>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	4614      	mov	r4, r2
 80065b6:	690a      	ldr	r2, [r1, #16]
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	bfa8      	it	ge
 80065be:	4623      	movge	r3, r4
 80065c0:	460f      	mov	r7, r1
 80065c2:	bfa4      	itt	ge
 80065c4:	460c      	movge	r4, r1
 80065c6:	461f      	movge	r7, r3
 80065c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80065cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80065d0:	68a3      	ldr	r3, [r4, #8]
 80065d2:	6861      	ldr	r1, [r4, #4]
 80065d4:	eb0a 0609 	add.w	r6, sl, r9
 80065d8:	42b3      	cmp	r3, r6
 80065da:	b085      	sub	sp, #20
 80065dc:	bfb8      	it	lt
 80065de:	3101      	addlt	r1, #1
 80065e0:	f7ff fedc 	bl	800639c <_Balloc>
 80065e4:	b930      	cbnz	r0, 80065f4 <__multiply+0x44>
 80065e6:	4602      	mov	r2, r0
 80065e8:	4b44      	ldr	r3, [pc, #272]	@ (80066fc <__multiply+0x14c>)
 80065ea:	4845      	ldr	r0, [pc, #276]	@ (8006700 <__multiply+0x150>)
 80065ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065f0:	f000 fcd8 	bl	8006fa4 <__assert_func>
 80065f4:	f100 0514 	add.w	r5, r0, #20
 80065f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065fc:	462b      	mov	r3, r5
 80065fe:	2200      	movs	r2, #0
 8006600:	4543      	cmp	r3, r8
 8006602:	d321      	bcc.n	8006648 <__multiply+0x98>
 8006604:	f107 0114 	add.w	r1, r7, #20
 8006608:	f104 0214 	add.w	r2, r4, #20
 800660c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006610:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	1b13      	subs	r3, r2, r4
 8006618:	3b15      	subs	r3, #21
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	3304      	adds	r3, #4
 8006620:	f104 0715 	add.w	r7, r4, #21
 8006624:	42ba      	cmp	r2, r7
 8006626:	bf38      	it	cc
 8006628:	2304      	movcc	r3, #4
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	9b02      	ldr	r3, [sp, #8]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	428b      	cmp	r3, r1
 8006632:	d80c      	bhi.n	800664e <__multiply+0x9e>
 8006634:	2e00      	cmp	r6, #0
 8006636:	dd03      	ble.n	8006640 <__multiply+0x90>
 8006638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800663c:	2b00      	cmp	r3, #0
 800663e:	d05b      	beq.n	80066f8 <__multiply+0x148>
 8006640:	6106      	str	r6, [r0, #16]
 8006642:	b005      	add	sp, #20
 8006644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006648:	f843 2b04 	str.w	r2, [r3], #4
 800664c:	e7d8      	b.n	8006600 <__multiply+0x50>
 800664e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006652:	f1ba 0f00 	cmp.w	sl, #0
 8006656:	d024      	beq.n	80066a2 <__multiply+0xf2>
 8006658:	f104 0e14 	add.w	lr, r4, #20
 800665c:	46a9      	mov	r9, r5
 800665e:	f04f 0c00 	mov.w	ip, #0
 8006662:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006666:	f8d9 3000 	ldr.w	r3, [r9]
 800666a:	fa1f fb87 	uxth.w	fp, r7
 800666e:	b29b      	uxth	r3, r3
 8006670:	fb0a 330b 	mla	r3, sl, fp, r3
 8006674:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006678:	f8d9 7000 	ldr.w	r7, [r9]
 800667c:	4463      	add	r3, ip
 800667e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006682:	fb0a c70b 	mla	r7, sl, fp, ip
 8006686:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006690:	4572      	cmp	r2, lr
 8006692:	f849 3b04 	str.w	r3, [r9], #4
 8006696:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800669a:	d8e2      	bhi.n	8006662 <__multiply+0xb2>
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	f845 c003 	str.w	ip, [r5, r3]
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066a8:	3104      	adds	r1, #4
 80066aa:	f1b9 0f00 	cmp.w	r9, #0
 80066ae:	d021      	beq.n	80066f4 <__multiply+0x144>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	f104 0c14 	add.w	ip, r4, #20
 80066b6:	46ae      	mov	lr, r5
 80066b8:	f04f 0a00 	mov.w	sl, #0
 80066bc:	f8bc b000 	ldrh.w	fp, [ip]
 80066c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80066c4:	fb09 770b 	mla	r7, r9, fp, r7
 80066c8:	4457      	add	r7, sl
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066d0:	f84e 3b04 	str.w	r3, [lr], #4
 80066d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066dc:	f8be 3000 	ldrh.w	r3, [lr]
 80066e0:	fb09 330a 	mla	r3, r9, sl, r3
 80066e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80066e8:	4562      	cmp	r2, ip
 80066ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066ee:	d8e5      	bhi.n	80066bc <__multiply+0x10c>
 80066f0:	9f01      	ldr	r7, [sp, #4]
 80066f2:	51eb      	str	r3, [r5, r7]
 80066f4:	3504      	adds	r5, #4
 80066f6:	e799      	b.n	800662c <__multiply+0x7c>
 80066f8:	3e01      	subs	r6, #1
 80066fa:	e79b      	b.n	8006634 <__multiply+0x84>
 80066fc:	080073f0 	.word	0x080073f0
 8006700:	08007401 	.word	0x08007401

08006704 <__pow5mult>:
 8006704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006708:	4615      	mov	r5, r2
 800670a:	f012 0203 	ands.w	r2, r2, #3
 800670e:	4607      	mov	r7, r0
 8006710:	460e      	mov	r6, r1
 8006712:	d007      	beq.n	8006724 <__pow5mult+0x20>
 8006714:	4c25      	ldr	r4, [pc, #148]	@ (80067ac <__pow5mult+0xa8>)
 8006716:	3a01      	subs	r2, #1
 8006718:	2300      	movs	r3, #0
 800671a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800671e:	f7ff fe9f 	bl	8006460 <__multadd>
 8006722:	4606      	mov	r6, r0
 8006724:	10ad      	asrs	r5, r5, #2
 8006726:	d03d      	beq.n	80067a4 <__pow5mult+0xa0>
 8006728:	69fc      	ldr	r4, [r7, #28]
 800672a:	b97c      	cbnz	r4, 800674c <__pow5mult+0x48>
 800672c:	2010      	movs	r0, #16
 800672e:	f7ff fd7f 	bl	8006230 <malloc>
 8006732:	4602      	mov	r2, r0
 8006734:	61f8      	str	r0, [r7, #28]
 8006736:	b928      	cbnz	r0, 8006744 <__pow5mult+0x40>
 8006738:	4b1d      	ldr	r3, [pc, #116]	@ (80067b0 <__pow5mult+0xac>)
 800673a:	481e      	ldr	r0, [pc, #120]	@ (80067b4 <__pow5mult+0xb0>)
 800673c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006740:	f000 fc30 	bl	8006fa4 <__assert_func>
 8006744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006748:	6004      	str	r4, [r0, #0]
 800674a:	60c4      	str	r4, [r0, #12]
 800674c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006754:	b94c      	cbnz	r4, 800676a <__pow5mult+0x66>
 8006756:	f240 2171 	movw	r1, #625	@ 0x271
 800675a:	4638      	mov	r0, r7
 800675c:	f7ff ff12 	bl	8006584 <__i2b>
 8006760:	2300      	movs	r3, #0
 8006762:	f8c8 0008 	str.w	r0, [r8, #8]
 8006766:	4604      	mov	r4, r0
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	07eb      	lsls	r3, r5, #31
 8006770:	d50a      	bpl.n	8006788 <__pow5mult+0x84>
 8006772:	4631      	mov	r1, r6
 8006774:	4622      	mov	r2, r4
 8006776:	4638      	mov	r0, r7
 8006778:	f7ff ff1a 	bl	80065b0 <__multiply>
 800677c:	4631      	mov	r1, r6
 800677e:	4680      	mov	r8, r0
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff fe4b 	bl	800641c <_Bfree>
 8006786:	4646      	mov	r6, r8
 8006788:	106d      	asrs	r5, r5, #1
 800678a:	d00b      	beq.n	80067a4 <__pow5mult+0xa0>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	b938      	cbnz	r0, 80067a0 <__pow5mult+0x9c>
 8006790:	4622      	mov	r2, r4
 8006792:	4621      	mov	r1, r4
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff ff0b 	bl	80065b0 <__multiply>
 800679a:	6020      	str	r0, [r4, #0]
 800679c:	f8c0 9000 	str.w	r9, [r0]
 80067a0:	4604      	mov	r4, r0
 80067a2:	e7e4      	b.n	800676e <__pow5mult+0x6a>
 80067a4:	4630      	mov	r0, r6
 80067a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067aa:	bf00      	nop
 80067ac:	0800745c 	.word	0x0800745c
 80067b0:	08007381 	.word	0x08007381
 80067b4:	08007401 	.word	0x08007401

080067b8 <__lshift>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	6849      	ldr	r1, [r1, #4]
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	4607      	mov	r7, r0
 80067ca:	4691      	mov	r9, r2
 80067cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067d0:	f108 0601 	add.w	r6, r8, #1
 80067d4:	42b3      	cmp	r3, r6
 80067d6:	db0b      	blt.n	80067f0 <__lshift+0x38>
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff fddf 	bl	800639c <_Balloc>
 80067de:	4605      	mov	r5, r0
 80067e0:	b948      	cbnz	r0, 80067f6 <__lshift+0x3e>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4b28      	ldr	r3, [pc, #160]	@ (8006888 <__lshift+0xd0>)
 80067e6:	4829      	ldr	r0, [pc, #164]	@ (800688c <__lshift+0xd4>)
 80067e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067ec:	f000 fbda 	bl	8006fa4 <__assert_func>
 80067f0:	3101      	adds	r1, #1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	e7ee      	b.n	80067d4 <__lshift+0x1c>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f100 0114 	add.w	r1, r0, #20
 80067fc:	f100 0210 	add.w	r2, r0, #16
 8006800:	4618      	mov	r0, r3
 8006802:	4553      	cmp	r3, sl
 8006804:	db33      	blt.n	800686e <__lshift+0xb6>
 8006806:	6920      	ldr	r0, [r4, #16]
 8006808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800680c:	f104 0314 	add.w	r3, r4, #20
 8006810:	f019 091f 	ands.w	r9, r9, #31
 8006814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800681c:	d02b      	beq.n	8006876 <__lshift+0xbe>
 800681e:	f1c9 0e20 	rsb	lr, r9, #32
 8006822:	468a      	mov	sl, r1
 8006824:	2200      	movs	r2, #0
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	fa00 f009 	lsl.w	r0, r0, r9
 800682c:	4310      	orrs	r0, r2
 800682e:	f84a 0b04 	str.w	r0, [sl], #4
 8006832:	f853 2b04 	ldr.w	r2, [r3], #4
 8006836:	459c      	cmp	ip, r3
 8006838:	fa22 f20e 	lsr.w	r2, r2, lr
 800683c:	d8f3      	bhi.n	8006826 <__lshift+0x6e>
 800683e:	ebac 0304 	sub.w	r3, ip, r4
 8006842:	3b15      	subs	r3, #21
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	3304      	adds	r3, #4
 800684a:	f104 0015 	add.w	r0, r4, #21
 800684e:	4584      	cmp	ip, r0
 8006850:	bf38      	it	cc
 8006852:	2304      	movcc	r3, #4
 8006854:	50ca      	str	r2, [r1, r3]
 8006856:	b10a      	cbz	r2, 800685c <__lshift+0xa4>
 8006858:	f108 0602 	add.w	r6, r8, #2
 800685c:	3e01      	subs	r6, #1
 800685e:	4638      	mov	r0, r7
 8006860:	612e      	str	r6, [r5, #16]
 8006862:	4621      	mov	r1, r4
 8006864:	f7ff fdda 	bl	800641c <_Bfree>
 8006868:	4628      	mov	r0, r5
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006872:	3301      	adds	r3, #1
 8006874:	e7c5      	b.n	8006802 <__lshift+0x4a>
 8006876:	3904      	subs	r1, #4
 8006878:	f853 2b04 	ldr.w	r2, [r3], #4
 800687c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006880:	459c      	cmp	ip, r3
 8006882:	d8f9      	bhi.n	8006878 <__lshift+0xc0>
 8006884:	e7ea      	b.n	800685c <__lshift+0xa4>
 8006886:	bf00      	nop
 8006888:	080073f0 	.word	0x080073f0
 800688c:	08007401 	.word	0x08007401

08006890 <__mcmp>:
 8006890:	690a      	ldr	r2, [r1, #16]
 8006892:	4603      	mov	r3, r0
 8006894:	6900      	ldr	r0, [r0, #16]
 8006896:	1a80      	subs	r0, r0, r2
 8006898:	b530      	push	{r4, r5, lr}
 800689a:	d10e      	bne.n	80068ba <__mcmp+0x2a>
 800689c:	3314      	adds	r3, #20
 800689e:	3114      	adds	r1, #20
 80068a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068b0:	4295      	cmp	r5, r2
 80068b2:	d003      	beq.n	80068bc <__mcmp+0x2c>
 80068b4:	d205      	bcs.n	80068c2 <__mcmp+0x32>
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	bd30      	pop	{r4, r5, pc}
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d3f3      	bcc.n	80068a8 <__mcmp+0x18>
 80068c0:	e7fb      	b.n	80068ba <__mcmp+0x2a>
 80068c2:	2001      	movs	r0, #1
 80068c4:	e7f9      	b.n	80068ba <__mcmp+0x2a>
	...

080068c8 <__mdiff>:
 80068c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	4689      	mov	r9, r1
 80068ce:	4606      	mov	r6, r0
 80068d0:	4611      	mov	r1, r2
 80068d2:	4648      	mov	r0, r9
 80068d4:	4614      	mov	r4, r2
 80068d6:	f7ff ffdb 	bl	8006890 <__mcmp>
 80068da:	1e05      	subs	r5, r0, #0
 80068dc:	d112      	bne.n	8006904 <__mdiff+0x3c>
 80068de:	4629      	mov	r1, r5
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7ff fd5b 	bl	800639c <_Balloc>
 80068e6:	4602      	mov	r2, r0
 80068e8:	b928      	cbnz	r0, 80068f6 <__mdiff+0x2e>
 80068ea:	4b3f      	ldr	r3, [pc, #252]	@ (80069e8 <__mdiff+0x120>)
 80068ec:	f240 2137 	movw	r1, #567	@ 0x237
 80068f0:	483e      	ldr	r0, [pc, #248]	@ (80069ec <__mdiff+0x124>)
 80068f2:	f000 fb57 	bl	8006fa4 <__assert_func>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068fc:	4610      	mov	r0, r2
 80068fe:	b003      	add	sp, #12
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006904:	bfbc      	itt	lt
 8006906:	464b      	movlt	r3, r9
 8006908:	46a1      	movlt	r9, r4
 800690a:	4630      	mov	r0, r6
 800690c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006910:	bfba      	itte	lt
 8006912:	461c      	movlt	r4, r3
 8006914:	2501      	movlt	r5, #1
 8006916:	2500      	movge	r5, #0
 8006918:	f7ff fd40 	bl	800639c <_Balloc>
 800691c:	4602      	mov	r2, r0
 800691e:	b918      	cbnz	r0, 8006928 <__mdiff+0x60>
 8006920:	4b31      	ldr	r3, [pc, #196]	@ (80069e8 <__mdiff+0x120>)
 8006922:	f240 2145 	movw	r1, #581	@ 0x245
 8006926:	e7e3      	b.n	80068f0 <__mdiff+0x28>
 8006928:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800692c:	6926      	ldr	r6, [r4, #16]
 800692e:	60c5      	str	r5, [r0, #12]
 8006930:	f109 0310 	add.w	r3, r9, #16
 8006934:	f109 0514 	add.w	r5, r9, #20
 8006938:	f104 0e14 	add.w	lr, r4, #20
 800693c:	f100 0b14 	add.w	fp, r0, #20
 8006940:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006944:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	46d9      	mov	r9, fp
 800694c:	f04f 0c00 	mov.w	ip, #0
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006956:	f853 af04 	ldr.w	sl, [r3, #4]!
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	fa1f f38a 	uxth.w	r3, sl
 8006960:	4619      	mov	r1, r3
 8006962:	b283      	uxth	r3, r0
 8006964:	1acb      	subs	r3, r1, r3
 8006966:	0c00      	lsrs	r0, r0, #16
 8006968:	4463      	add	r3, ip
 800696a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800696e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006972:	b29b      	uxth	r3, r3
 8006974:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006978:	4576      	cmp	r6, lr
 800697a:	f849 3b04 	str.w	r3, [r9], #4
 800697e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006982:	d8e5      	bhi.n	8006950 <__mdiff+0x88>
 8006984:	1b33      	subs	r3, r6, r4
 8006986:	3b15      	subs	r3, #21
 8006988:	f023 0303 	bic.w	r3, r3, #3
 800698c:	3415      	adds	r4, #21
 800698e:	3304      	adds	r3, #4
 8006990:	42a6      	cmp	r6, r4
 8006992:	bf38      	it	cc
 8006994:	2304      	movcc	r3, #4
 8006996:	441d      	add	r5, r3
 8006998:	445b      	add	r3, fp
 800699a:	461e      	mov	r6, r3
 800699c:	462c      	mov	r4, r5
 800699e:	4544      	cmp	r4, r8
 80069a0:	d30e      	bcc.n	80069c0 <__mdiff+0xf8>
 80069a2:	f108 0103 	add.w	r1, r8, #3
 80069a6:	1b49      	subs	r1, r1, r5
 80069a8:	f021 0103 	bic.w	r1, r1, #3
 80069ac:	3d03      	subs	r5, #3
 80069ae:	45a8      	cmp	r8, r5
 80069b0:	bf38      	it	cc
 80069b2:	2100      	movcc	r1, #0
 80069b4:	440b      	add	r3, r1
 80069b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069ba:	b191      	cbz	r1, 80069e2 <__mdiff+0x11a>
 80069bc:	6117      	str	r7, [r2, #16]
 80069be:	e79d      	b.n	80068fc <__mdiff+0x34>
 80069c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80069c4:	46e6      	mov	lr, ip
 80069c6:	0c08      	lsrs	r0, r1, #16
 80069c8:	fa1c fc81 	uxtah	ip, ip, r1
 80069cc:	4471      	add	r1, lr
 80069ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069d2:	b289      	uxth	r1, r1
 80069d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069d8:	f846 1b04 	str.w	r1, [r6], #4
 80069dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069e0:	e7dd      	b.n	800699e <__mdiff+0xd6>
 80069e2:	3f01      	subs	r7, #1
 80069e4:	e7e7      	b.n	80069b6 <__mdiff+0xee>
 80069e6:	bf00      	nop
 80069e8:	080073f0 	.word	0x080073f0
 80069ec:	08007401 	.word	0x08007401

080069f0 <__d2b>:
 80069f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069f4:	460f      	mov	r7, r1
 80069f6:	2101      	movs	r1, #1
 80069f8:	ec59 8b10 	vmov	r8, r9, d0
 80069fc:	4616      	mov	r6, r2
 80069fe:	f7ff fccd 	bl	800639c <_Balloc>
 8006a02:	4604      	mov	r4, r0
 8006a04:	b930      	cbnz	r0, 8006a14 <__d2b+0x24>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b23      	ldr	r3, [pc, #140]	@ (8006a98 <__d2b+0xa8>)
 8006a0a:	4824      	ldr	r0, [pc, #144]	@ (8006a9c <__d2b+0xac>)
 8006a0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a10:	f000 fac8 	bl	8006fa4 <__assert_func>
 8006a14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a1c:	b10d      	cbz	r5, 8006a22 <__d2b+0x32>
 8006a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	f1b8 0300 	subs.w	r3, r8, #0
 8006a28:	d023      	beq.n	8006a72 <__d2b+0x82>
 8006a2a:	4668      	mov	r0, sp
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	f7ff fd7c 	bl	800652a <__lo0bits>
 8006a32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a36:	b1d0      	cbz	r0, 8006a6e <__d2b+0x7e>
 8006a38:	f1c0 0320 	rsb	r3, r0, #32
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	430b      	orrs	r3, r1
 8006a42:	40c2      	lsrs	r2, r0
 8006a44:	6163      	str	r3, [r4, #20]
 8006a46:	9201      	str	r2, [sp, #4]
 8006a48:	9b01      	ldr	r3, [sp, #4]
 8006a4a:	61a3      	str	r3, [r4, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf0c      	ite	eq
 8006a50:	2201      	moveq	r2, #1
 8006a52:	2202      	movne	r2, #2
 8006a54:	6122      	str	r2, [r4, #16]
 8006a56:	b1a5      	cbz	r5, 8006a82 <__d2b+0x92>
 8006a58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a5c:	4405      	add	r5, r0
 8006a5e:	603d      	str	r5, [r7, #0]
 8006a60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a64:	6030      	str	r0, [r6, #0]
 8006a66:	4620      	mov	r0, r4
 8006a68:	b003      	add	sp, #12
 8006a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a6e:	6161      	str	r1, [r4, #20]
 8006a70:	e7ea      	b.n	8006a48 <__d2b+0x58>
 8006a72:	a801      	add	r0, sp, #4
 8006a74:	f7ff fd59 	bl	800652a <__lo0bits>
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	6163      	str	r3, [r4, #20]
 8006a7c:	3020      	adds	r0, #32
 8006a7e:	2201      	movs	r2, #1
 8006a80:	e7e8      	b.n	8006a54 <__d2b+0x64>
 8006a82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a8a:	6038      	str	r0, [r7, #0]
 8006a8c:	6918      	ldr	r0, [r3, #16]
 8006a8e:	f7ff fd2d 	bl	80064ec <__hi0bits>
 8006a92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a96:	e7e5      	b.n	8006a64 <__d2b+0x74>
 8006a98:	080073f0 	.word	0x080073f0
 8006a9c:	08007401 	.word	0x08007401

08006aa0 <__sfputc_r>:
 8006aa0:	6893      	ldr	r3, [r2, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	b410      	push	{r4}
 8006aa8:	6093      	str	r3, [r2, #8]
 8006aaa:	da08      	bge.n	8006abe <__sfputc_r+0x1e>
 8006aac:	6994      	ldr	r4, [r2, #24]
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	db01      	blt.n	8006ab6 <__sfputc_r+0x16>
 8006ab2:	290a      	cmp	r1, #10
 8006ab4:	d103      	bne.n	8006abe <__sfputc_r+0x1e>
 8006ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aba:	f7fe bc6e 	b.w	800539a <__swbuf_r>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	1c58      	adds	r0, r3, #1
 8006ac2:	6010      	str	r0, [r2, #0]
 8006ac4:	7019      	strb	r1, [r3, #0]
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <__sfputs_r>:
 8006ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	18d5      	adds	r5, r2, r3
 8006ad8:	42ac      	cmp	r4, r5
 8006ada:	d101      	bne.n	8006ae0 <__sfputs_r+0x12>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e007      	b.n	8006af0 <__sfputs_r+0x22>
 8006ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffda 	bl	8006aa0 <__sfputc_r>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d1f3      	bne.n	8006ad8 <__sfputs_r+0xa>
 8006af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af4 <_vfiprintf_r>:
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	460d      	mov	r5, r1
 8006afa:	b09d      	sub	sp, #116	@ 0x74
 8006afc:	4614      	mov	r4, r2
 8006afe:	4698      	mov	r8, r3
 8006b00:	4606      	mov	r6, r0
 8006b02:	b118      	cbz	r0, 8006b0c <_vfiprintf_r+0x18>
 8006b04:	6a03      	ldr	r3, [r0, #32]
 8006b06:	b90b      	cbnz	r3, 8006b0c <_vfiprintf_r+0x18>
 8006b08:	f7fe fb5e 	bl	80051c8 <__sinit>
 8006b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b0e:	07d9      	lsls	r1, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_vfiprintf_r+0x2a>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	059a      	lsls	r2, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_vfiprintf_r+0x2a>
 8006b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b1a:	f7fe fd50 	bl	80055be <__retarget_lock_acquire_recursive>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	071b      	lsls	r3, r3, #28
 8006b22:	d501      	bpl.n	8006b28 <_vfiprintf_r+0x34>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	b99b      	cbnz	r3, 8006b50 <_vfiprintf_r+0x5c>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7fe fc74 	bl	8005418 <__swsetup_r>
 8006b30:	b170      	cbz	r0, 8006b50 <_vfiprintf_r+0x5c>
 8006b32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b34:	07dc      	lsls	r4, r3, #31
 8006b36:	d504      	bpl.n	8006b42 <_vfiprintf_r+0x4e>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	b01d      	add	sp, #116	@ 0x74
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	0598      	lsls	r0, r3, #22
 8006b46:	d4f7      	bmi.n	8006b38 <_vfiprintf_r+0x44>
 8006b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b4a:	f7fe fd39 	bl	80055c0 <__retarget_lock_release_recursive>
 8006b4e:	e7f3      	b.n	8006b38 <_vfiprintf_r+0x44>
 8006b50:	2300      	movs	r3, #0
 8006b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b54:	2320      	movs	r3, #32
 8006b56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5e:	2330      	movs	r3, #48	@ 0x30
 8006b60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d10 <_vfiprintf_r+0x21c>
 8006b64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b68:	f04f 0901 	mov.w	r9, #1
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	469a      	mov	sl, r3
 8006b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b74:	b10a      	cbz	r2, 8006b7a <_vfiprintf_r+0x86>
 8006b76:	2a25      	cmp	r2, #37	@ 0x25
 8006b78:	d1f9      	bne.n	8006b6e <_vfiprintf_r+0x7a>
 8006b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7e:	d00b      	beq.n	8006b98 <_vfiprintf_r+0xa4>
 8006b80:	465b      	mov	r3, fp
 8006b82:	4622      	mov	r2, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ffa1 	bl	8006ace <__sfputs_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f000 80a7 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b94:	445a      	add	r2, fp
 8006b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 809f 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	9307      	str	r3, [sp, #28]
 8006bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bba:	4654      	mov	r4, sl
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc2:	4853      	ldr	r0, [pc, #332]	@ (8006d10 <_vfiprintf_r+0x21c>)
 8006bc4:	f7f9 fb3c 	bl	8000240 <memchr>
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	b9d8      	cbnz	r0, 8006c04 <_vfiprintf_r+0x110>
 8006bcc:	06d1      	lsls	r1, r2, #27
 8006bce:	bf44      	itt	mi
 8006bd0:	2320      	movmi	r3, #32
 8006bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bd6:	0713      	lsls	r3, r2, #28
 8006bd8:	bf44      	itt	mi
 8006bda:	232b      	movmi	r3, #43	@ 0x2b
 8006bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be6:	d015      	beq.n	8006c14 <_vfiprintf_r+0x120>
 8006be8:	9a07      	ldr	r2, [sp, #28]
 8006bea:	4654      	mov	r4, sl
 8006bec:	2000      	movs	r0, #0
 8006bee:	f04f 0c0a 	mov.w	ip, #10
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf8:	3b30      	subs	r3, #48	@ 0x30
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d94b      	bls.n	8006c96 <_vfiprintf_r+0x1a2>
 8006bfe:	b1b0      	cbz	r0, 8006c2e <_vfiprintf_r+0x13a>
 8006c00:	9207      	str	r2, [sp, #28]
 8006c02:	e014      	b.n	8006c2e <_vfiprintf_r+0x13a>
 8006c04:	eba0 0308 	sub.w	r3, r0, r8
 8006c08:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	46a2      	mov	sl, r4
 8006c12:	e7d2      	b.n	8006bba <_vfiprintf_r+0xc6>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1d19      	adds	r1, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	9103      	str	r1, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bfbb      	ittet	lt
 8006c20:	425b      	neglt	r3, r3
 8006c22:	f042 0202 	orrlt.w	r2, r2, #2
 8006c26:	9307      	strge	r3, [sp, #28]
 8006c28:	9307      	strlt	r3, [sp, #28]
 8006c2a:	bfb8      	it	lt
 8006c2c:	9204      	strlt	r2, [sp, #16]
 8006c2e:	7823      	ldrb	r3, [r4, #0]
 8006c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c32:	d10a      	bne.n	8006c4a <_vfiprintf_r+0x156>
 8006c34:	7863      	ldrb	r3, [r4, #1]
 8006c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c38:	d132      	bne.n	8006ca0 <_vfiprintf_r+0x1ac>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	9203      	str	r2, [sp, #12]
 8006c42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c46:	3402      	adds	r4, #2
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d20 <_vfiprintf_r+0x22c>
 8006c4e:	7821      	ldrb	r1, [r4, #0]
 8006c50:	2203      	movs	r2, #3
 8006c52:	4650      	mov	r0, sl
 8006c54:	f7f9 faf4 	bl	8000240 <memchr>
 8006c58:	b138      	cbz	r0, 8006c6a <_vfiprintf_r+0x176>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	eba0 000a 	sub.w	r0, r0, sl
 8006c60:	2240      	movs	r2, #64	@ 0x40
 8006c62:	4082      	lsls	r2, r0
 8006c64:	4313      	orrs	r3, r2
 8006c66:	3401      	adds	r4, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6e:	4829      	ldr	r0, [pc, #164]	@ (8006d14 <_vfiprintf_r+0x220>)
 8006c70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c74:	2206      	movs	r2, #6
 8006c76:	f7f9 fae3 	bl	8000240 <memchr>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d03f      	beq.n	8006cfe <_vfiprintf_r+0x20a>
 8006c7e:	4b26      	ldr	r3, [pc, #152]	@ (8006d18 <_vfiprintf_r+0x224>)
 8006c80:	bb1b      	cbnz	r3, 8006cca <_vfiprintf_r+0x1d6>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	3307      	adds	r3, #7
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c90:	443b      	add	r3, r7
 8006c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c94:	e76a      	b.n	8006b6c <_vfiprintf_r+0x78>
 8006c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	e7a8      	b.n	8006bf2 <_vfiprintf_r+0xfe>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f04f 0c0a 	mov.w	ip, #10
 8006cac:	4620      	mov	r0, r4
 8006cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb2:	3a30      	subs	r2, #48	@ 0x30
 8006cb4:	2a09      	cmp	r2, #9
 8006cb6:	d903      	bls.n	8006cc0 <_vfiprintf_r+0x1cc>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0c6      	beq.n	8006c4a <_vfiprintf_r+0x156>
 8006cbc:	9105      	str	r1, [sp, #20]
 8006cbe:	e7c4      	b.n	8006c4a <_vfiprintf_r+0x156>
 8006cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7f0      	b.n	8006cac <_vfiprintf_r+0x1b8>
 8006cca:	ab03      	add	r3, sp, #12
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4b12      	ldr	r3, [pc, #72]	@ (8006d1c <_vfiprintf_r+0x228>)
 8006cd2:	a904      	add	r1, sp, #16
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7fd fe43 	bl	8004960 <_printf_float>
 8006cda:	4607      	mov	r7, r0
 8006cdc:	1c78      	adds	r0, r7, #1
 8006cde:	d1d6      	bne.n	8006c8e <_vfiprintf_r+0x19a>
 8006ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d405      	bmi.n	8006cf2 <_vfiprintf_r+0x1fe>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_vfiprintf_r+0x1fe>
 8006cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cee:	f7fe fc67 	bl	80055c0 <__retarget_lock_release_recursive>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	f53f af1f 	bmi.w	8006b38 <_vfiprintf_r+0x44>
 8006cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cfc:	e71e      	b.n	8006b3c <_vfiprintf_r+0x48>
 8006cfe:	ab03      	add	r3, sp, #12
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	462a      	mov	r2, r5
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <_vfiprintf_r+0x228>)
 8006d06:	a904      	add	r1, sp, #16
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7fe f8b1 	bl	8004e70 <_printf_i>
 8006d0e:	e7e4      	b.n	8006cda <_vfiprintf_r+0x1e6>
 8006d10:	08007558 	.word	0x08007558
 8006d14:	08007562 	.word	0x08007562
 8006d18:	08004961 	.word	0x08004961
 8006d1c:	08006acf 	.word	0x08006acf
 8006d20:	0800755e 	.word	0x0800755e

08006d24 <__sflush_r>:
 8006d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	0716      	lsls	r6, r2, #28
 8006d2e:	4605      	mov	r5, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	d454      	bmi.n	8006dde <__sflush_r+0xba>
 8006d34:	684b      	ldr	r3, [r1, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dc02      	bgt.n	8006d40 <__sflush_r+0x1c>
 8006d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd48      	ble.n	8006dd2 <__sflush_r+0xae>
 8006d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	d045      	beq.n	8006dd2 <__sflush_r+0xae>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d4c:	682f      	ldr	r7, [r5, #0]
 8006d4e:	6a21      	ldr	r1, [r4, #32]
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	d030      	beq.n	8006db6 <__sflush_r+0x92>
 8006d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	0759      	lsls	r1, r3, #29
 8006d5a:	d505      	bpl.n	8006d68 <__sflush_r+0x44>
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d62:	b10b      	cbz	r3, 8006d68 <__sflush_r+0x44>
 8006d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d6c:	6a21      	ldr	r1, [r4, #32]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b0      	blx	r6
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	d106      	bne.n	8006d86 <__sflush_r+0x62>
 8006d78:	6829      	ldr	r1, [r5, #0]
 8006d7a:	291d      	cmp	r1, #29
 8006d7c:	d82b      	bhi.n	8006dd6 <__sflush_r+0xb2>
 8006d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e28 <__sflush_r+0x104>)
 8006d80:	410a      	asrs	r2, r1
 8006d82:	07d6      	lsls	r6, r2, #31
 8006d84:	d427      	bmi.n	8006dd6 <__sflush_r+0xb2>
 8006d86:	2200      	movs	r2, #0
 8006d88:	6062      	str	r2, [r4, #4]
 8006d8a:	04d9      	lsls	r1, r3, #19
 8006d8c:	6922      	ldr	r2, [r4, #16]
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	d504      	bpl.n	8006d9c <__sflush_r+0x78>
 8006d92:	1c42      	adds	r2, r0, #1
 8006d94:	d101      	bne.n	8006d9a <__sflush_r+0x76>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	b903      	cbnz	r3, 8006d9c <__sflush_r+0x78>
 8006d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d9e:	602f      	str	r7, [r5, #0]
 8006da0:	b1b9      	cbz	r1, 8006dd2 <__sflush_r+0xae>
 8006da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006da6:	4299      	cmp	r1, r3
 8006da8:	d002      	beq.n	8006db0 <__sflush_r+0x8c>
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7ff f9f6 	bl	800619c <_free_r>
 8006db0:	2300      	movs	r3, #0
 8006db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006db4:	e00d      	b.n	8006dd2 <__sflush_r+0xae>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b0      	blx	r6
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	1c50      	adds	r0, r2, #1
 8006dc0:	d1c9      	bne.n	8006d56 <__sflush_r+0x32>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0c6      	beq.n	8006d56 <__sflush_r+0x32>
 8006dc8:	2b1d      	cmp	r3, #29
 8006dca:	d001      	beq.n	8006dd0 <__sflush_r+0xac>
 8006dcc:	2b16      	cmp	r3, #22
 8006dce:	d11e      	bne.n	8006e0e <__sflush_r+0xea>
 8006dd0:	602f      	str	r7, [r5, #0]
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e022      	b.n	8006e1c <__sflush_r+0xf8>
 8006dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dda:	b21b      	sxth	r3, r3
 8006ddc:	e01b      	b.n	8006e16 <__sflush_r+0xf2>
 8006dde:	690f      	ldr	r7, [r1, #16]
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	d0f6      	beq.n	8006dd2 <__sflush_r+0xae>
 8006de4:	0793      	lsls	r3, r2, #30
 8006de6:	680e      	ldr	r6, [r1, #0]
 8006de8:	bf08      	it	eq
 8006dea:	694b      	ldreq	r3, [r1, #20]
 8006dec:	600f      	str	r7, [r1, #0]
 8006dee:	bf18      	it	ne
 8006df0:	2300      	movne	r3, #0
 8006df2:	eba6 0807 	sub.w	r8, r6, r7
 8006df6:	608b      	str	r3, [r1, #8]
 8006df8:	f1b8 0f00 	cmp.w	r8, #0
 8006dfc:	dde9      	ble.n	8006dd2 <__sflush_r+0xae>
 8006dfe:	6a21      	ldr	r1, [r4, #32]
 8006e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e02:	4643      	mov	r3, r8
 8006e04:	463a      	mov	r2, r7
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	dc08      	bgt.n	8006e20 <__sflush_r+0xfc>
 8006e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	4407      	add	r7, r0
 8006e22:	eba8 0800 	sub.w	r8, r8, r0
 8006e26:	e7e7      	b.n	8006df8 <__sflush_r+0xd4>
 8006e28:	dfbffffe 	.word	0xdfbffffe

08006e2c <_fflush_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b913      	cbnz	r3, 8006e3c <_fflush_r+0x10>
 8006e36:	2500      	movs	r5, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	b118      	cbz	r0, 8006e46 <_fflush_r+0x1a>
 8006e3e:	6a03      	ldr	r3, [r0, #32]
 8006e40:	b90b      	cbnz	r3, 8006e46 <_fflush_r+0x1a>
 8006e42:	f7fe f9c1 	bl	80051c8 <__sinit>
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f3      	beq.n	8006e36 <_fflush_r+0xa>
 8006e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e50:	07d0      	lsls	r0, r2, #31
 8006e52:	d404      	bmi.n	8006e5e <_fflush_r+0x32>
 8006e54:	0599      	lsls	r1, r3, #22
 8006e56:	d402      	bmi.n	8006e5e <_fflush_r+0x32>
 8006e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e5a:	f7fe fbb0 	bl	80055be <__retarget_lock_acquire_recursive>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7ff ff5f 	bl	8006d24 <__sflush_r>
 8006e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e68:	07da      	lsls	r2, r3, #31
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	d4e4      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d4e1      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e76:	f7fe fba3 	bl	80055c0 <__retarget_lock_release_recursive>
 8006e7a:	e7dd      	b.n	8006e38 <_fflush_r+0xc>

08006e7c <__swhatbuf_r>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	2900      	cmp	r1, #0
 8006e86:	b096      	sub	sp, #88	@ 0x58
 8006e88:	4615      	mov	r5, r2
 8006e8a:	461e      	mov	r6, r3
 8006e8c:	da0d      	bge.n	8006eaa <__swhatbuf_r+0x2e>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2340      	movne	r3, #64	@ 0x40
 8006e9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	6031      	str	r1, [r6, #0]
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	b016      	add	sp, #88	@ 0x58
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	466a      	mov	r2, sp
 8006eac:	f000 f848 	bl	8006f40 <_fstat_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dbec      	blt.n	8006e8e <__swhatbuf_r+0x12>
 8006eb4:	9901      	ldr	r1, [sp, #4]
 8006eb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006eba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ebe:	4259      	negs	r1, r3
 8006ec0:	4159      	adcs	r1, r3
 8006ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ec6:	e7eb      	b.n	8006ea0 <__swhatbuf_r+0x24>

08006ec8 <__smakebuf_r>:
 8006ec8:	898b      	ldrh	r3, [r1, #12]
 8006eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ecc:	079d      	lsls	r5, r3, #30
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	d507      	bpl.n	8006ee4 <__smakebuf_r+0x1c>
 8006ed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	2301      	movs	r3, #1
 8006ede:	6163      	str	r3, [r4, #20]
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee4:	ab01      	add	r3, sp, #4
 8006ee6:	466a      	mov	r2, sp
 8006ee8:	f7ff ffc8 	bl	8006e7c <__swhatbuf_r>
 8006eec:	9f00      	ldr	r7, [sp, #0]
 8006eee:	4605      	mov	r5, r0
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff f9c6 	bl	8006284 <_malloc_r>
 8006ef8:	b948      	cbnz	r0, 8006f0e <__smakebuf_r+0x46>
 8006efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efe:	059a      	lsls	r2, r3, #22
 8006f00:	d4ee      	bmi.n	8006ee0 <__smakebuf_r+0x18>
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	f043 0302 	orr.w	r3, r3, #2
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	e7e2      	b.n	8006ed4 <__smakebuf_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	6020      	str	r0, [r4, #0]
 8006f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f1e:	b15b      	cbz	r3, 8006f38 <__smakebuf_r+0x70>
 8006f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f81d 	bl	8006f64 <_isatty_r>
 8006f2a:	b128      	cbz	r0, 8006f38 <__smakebuf_r+0x70>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	81a3      	strh	r3, [r4, #12]
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	431d      	orrs	r5, r3
 8006f3c:	81a5      	strh	r5, [r4, #12]
 8006f3e:	e7cf      	b.n	8006ee0 <__smakebuf_r+0x18>

08006f40 <_fstat_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	@ (8006f60 <_fstat_r+0x20>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f7fb f918 	bl	8002182 <_fstat>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d102      	bne.n	8006f5c <_fstat_r+0x1c>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b103      	cbz	r3, 8006f5c <_fstat_r+0x1c>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000688 	.word	0x20000688

08006f64 <_isatty_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d06      	ldr	r5, [pc, #24]	@ (8006f80 <_isatty_r+0x1c>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7fb f917 	bl	80021a2 <_isatty>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_isatty_r+0x1a>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_isatty_r+0x1a>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000688 	.word	0x20000688

08006f84 <_sbrk_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d06      	ldr	r5, [pc, #24]	@ (8006fa0 <_sbrk_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7fb f920 	bl	80021d4 <_sbrk>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_sbrk_r+0x1a>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_sbrk_r+0x1a>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000688 	.word	0x20000688

08006fa4 <__assert_func>:
 8006fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <__assert_func+0x2c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4605      	mov	r5, r0
 8006fb0:	68d8      	ldr	r0, [r3, #12]
 8006fb2:	b954      	cbnz	r4, 8006fca <__assert_func+0x26>
 8006fb4:	4b07      	ldr	r3, [pc, #28]	@ (8006fd4 <__assert_func+0x30>)
 8006fb6:	461c      	mov	r4, r3
 8006fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fbc:	9100      	str	r1, [sp, #0]
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	4905      	ldr	r1, [pc, #20]	@ (8006fd8 <__assert_func+0x34>)
 8006fc2:	f000 f841 	bl	8007048 <fiprintf>
 8006fc6:	f000 f851 	bl	800706c <abort>
 8006fca:	4b04      	ldr	r3, [pc, #16]	@ (8006fdc <__assert_func+0x38>)
 8006fcc:	e7f4      	b.n	8006fb8 <__assert_func+0x14>
 8006fce:	bf00      	nop
 8006fd0:	20000024 	.word	0x20000024
 8006fd4:	080075ae 	.word	0x080075ae
 8006fd8:	08007580 	.word	0x08007580
 8006fdc:	08007573 	.word	0x08007573

08006fe0 <_calloc_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	fba1 5402 	umull	r5, r4, r1, r2
 8006fe6:	b93c      	cbnz	r4, 8006ff8 <_calloc_r+0x18>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7ff f94b 	bl	8006284 <_malloc_r>
 8006fee:	4606      	mov	r6, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <_calloc_r+0x1e>
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	6002      	str	r2, [r0, #0]
 8006ffc:	e7f9      	b.n	8006ff2 <_calloc_r+0x12>
 8006ffe:	462a      	mov	r2, r5
 8007000:	4621      	mov	r1, r4
 8007002:	f7fe fa5f 	bl	80054c4 <memset>
 8007006:	e7f5      	b.n	8006ff4 <_calloc_r+0x14>

08007008 <__ascii_mbtowc>:
 8007008:	b082      	sub	sp, #8
 800700a:	b901      	cbnz	r1, 800700e <__ascii_mbtowc+0x6>
 800700c:	a901      	add	r1, sp, #4
 800700e:	b142      	cbz	r2, 8007022 <__ascii_mbtowc+0x1a>
 8007010:	b14b      	cbz	r3, 8007026 <__ascii_mbtowc+0x1e>
 8007012:	7813      	ldrb	r3, [r2, #0]
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	1e10      	subs	r0, r2, #0
 800701a:	bf18      	it	ne
 800701c:	2001      	movne	r0, #1
 800701e:	b002      	add	sp, #8
 8007020:	4770      	bx	lr
 8007022:	4610      	mov	r0, r2
 8007024:	e7fb      	b.n	800701e <__ascii_mbtowc+0x16>
 8007026:	f06f 0001 	mvn.w	r0, #1
 800702a:	e7f8      	b.n	800701e <__ascii_mbtowc+0x16>

0800702c <__ascii_wctomb>:
 800702c:	4603      	mov	r3, r0
 800702e:	4608      	mov	r0, r1
 8007030:	b141      	cbz	r1, 8007044 <__ascii_wctomb+0x18>
 8007032:	2aff      	cmp	r2, #255	@ 0xff
 8007034:	d904      	bls.n	8007040 <__ascii_wctomb+0x14>
 8007036:	228a      	movs	r2, #138	@ 0x8a
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	f04f 30ff 	mov.w	r0, #4294967295
 800703e:	4770      	bx	lr
 8007040:	700a      	strb	r2, [r1, #0]
 8007042:	2001      	movs	r0, #1
 8007044:	4770      	bx	lr
	...

08007048 <fiprintf>:
 8007048:	b40e      	push	{r1, r2, r3}
 800704a:	b503      	push	{r0, r1, lr}
 800704c:	4601      	mov	r1, r0
 800704e:	ab03      	add	r3, sp, #12
 8007050:	4805      	ldr	r0, [pc, #20]	@ (8007068 <fiprintf+0x20>)
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f7ff fd4b 	bl	8006af4 <_vfiprintf_r>
 800705e:	b002      	add	sp, #8
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b003      	add	sp, #12
 8007066:	4770      	bx	lr
 8007068:	20000024 	.word	0x20000024

0800706c <abort>:
 800706c:	b508      	push	{r3, lr}
 800706e:	2006      	movs	r0, #6
 8007070:	f000 f82c 	bl	80070cc <raise>
 8007074:	2001      	movs	r0, #1
 8007076:	f7fb f850 	bl	800211a <_exit>

0800707a <_raise_r>:
 800707a:	291f      	cmp	r1, #31
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4605      	mov	r5, r0
 8007080:	460c      	mov	r4, r1
 8007082:	d904      	bls.n	800708e <_raise_r+0x14>
 8007084:	2316      	movs	r3, #22
 8007086:	6003      	str	r3, [r0, #0]
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007090:	b112      	cbz	r2, 8007098 <_raise_r+0x1e>
 8007092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007096:	b94b      	cbnz	r3, 80070ac <_raise_r+0x32>
 8007098:	4628      	mov	r0, r5
 800709a:	f000 f831 	bl	8007100 <_getpid_r>
 800709e:	4622      	mov	r2, r4
 80070a0:	4601      	mov	r1, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b818 	b.w	80070dc <_kill_r>
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d00a      	beq.n	80070c6 <_raise_r+0x4c>
 80070b0:	1c59      	adds	r1, r3, #1
 80070b2:	d103      	bne.n	80070bc <_raise_r+0x42>
 80070b4:	2316      	movs	r3, #22
 80070b6:	6003      	str	r3, [r0, #0]
 80070b8:	2001      	movs	r0, #1
 80070ba:	e7e7      	b.n	800708c <_raise_r+0x12>
 80070bc:	2100      	movs	r1, #0
 80070be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070c2:	4620      	mov	r0, r4
 80070c4:	4798      	blx	r3
 80070c6:	2000      	movs	r0, #0
 80070c8:	e7e0      	b.n	800708c <_raise_r+0x12>
	...

080070cc <raise>:
 80070cc:	4b02      	ldr	r3, [pc, #8]	@ (80070d8 <raise+0xc>)
 80070ce:	4601      	mov	r1, r0
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f7ff bfd2 	b.w	800707a <_raise_r>
 80070d6:	bf00      	nop
 80070d8:	20000024 	.word	0x20000024

080070dc <_kill_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_kill_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fb f806 	bl	80020fa <_kill>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_kill_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_kill_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	20000688 	.word	0x20000688

08007100 <_getpid_r>:
 8007100:	f7fa bff3 	b.w	80020ea <_getpid>

08007104 <_init>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr

08007110 <_fini>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr
