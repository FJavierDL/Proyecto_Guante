
Proyecto_Guantazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08009078  08009078  0000a078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  0000b320  2**0
                  CONTENTS
  4 .ARM          00000008  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a8  080096a8  0000b320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080096b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  08009890  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08009930  0000b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000adc  20000320  080099d0  0000b320  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000dfc  080099d0  0000bdfc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY
 14 .debug_info   000150a4  00000000  00000000  0000b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034d3  00000000  00000000  000203f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001400  00000000  00000000  000238c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2b  00000000  00000000  00024cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf0f  00000000  00000000  00025bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a0d  00000000  00000000  00052b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001094fd  00000000  00000000  0006950f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00172a0c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000063b4  00000000  00000000  00172a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00178e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	0800905c 	.word	0x0800905c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	0800905c 	.word	0x0800905c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 fae8 	bl	8000bc4 <bno055_writeData>
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4619      	mov	r1, r3
 800060a:	203d      	movs	r0, #61	@ 0x3d
 800060c:	f000 fada 	bl	8000bc4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000616:	2013      	movs	r0, #19
 8000618:	f000 fac8 	bl	8000bac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800061c:	e002      	b.n	8000624 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800061e:	2007      	movs	r0, #7
 8000620:	f000 fac4 	bl	8000bac <bno055_delay>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffe3 	bl	80005fc <bno055_setOperationMode>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800063e:	200c      	movs	r0, #12
 8000640:	f7ff ffdc 	bl	80005fc <bno055_setOperationMode>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800064c:	2120      	movs	r1, #32
 800064e:	203f      	movs	r0, #63	@ 0x3f
 8000650:	f000 fab8 	bl	8000bc4 <bno055_writeData>
  bno055_delay(700);
 8000654:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000658:	f000 faa8 	bl	8000bac <bno055_delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  bno055_reset();
 8000666:	f7ff ffef 	bl	8000648 <bno055_reset>

  uint8_t id = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fb91 	bl	8000d9c <bno055_readData>
  if (id != BNO055_ID) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2ba0      	cmp	r3, #160	@ 0xa0
 800067e:	d004      	beq.n	800068a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <bno055_setup+0x4c>)
 8000686:	f006 fba5 	bl	8006dd4 <iprintf>
  }
  bno055_setPage(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffa8 	bl	80005e0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000690:	2100      	movs	r1, #0
 8000692:	203f      	movs	r0, #63	@ 0x3f
 8000694:	f000 fa96 	bl	8000bc4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000698:	f7ff ffc8 	bl	800062c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fa85 	bl	8000bac <bno055_delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08009078 	.word	0x08009078

080006b0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b09e      	sub	sp, #120	@ 0x78
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff8e 	bl	80005e0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d108      	bne.n	80006de <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006d4:	2208      	movs	r2, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fb60 	bl	8000d9c <bno055_readData>
 80006dc:	e007      	b.n	80006ee <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006de:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006e6:	2206      	movs	r2, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fb57 	bl	8000d9c <bno055_readData>

  double scale = 1;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	4b81      	ldr	r3, [pc, #516]	@ (80008f8 <bno055_getVector+0x248>)
 80006f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80006f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d108      	bne.n	8000712 <bno055_getVector+0x62>
    scale = magScale;
 8000700:	4b7e      	ldr	r3, [pc, #504]	@ (80008fc <bno055_getVector+0x24c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800070c:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000710:	e03a      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000716:	2b08      	cmp	r3, #8
 8000718:	d007      	beq.n	800072a <bno055_getVector+0x7a>
 800071a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800071e:	2b28      	cmp	r3, #40	@ 0x28
 8000720:	d003      	beq.n	800072a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000726:	2b2e      	cmp	r3, #46	@ 0x2e
 8000728:	d108      	bne.n	800073c <bno055_getVector+0x8c>
    scale = accelScale;
 800072a:	4b75      	ldr	r3, [pc, #468]	@ (8000900 <bno055_getVector+0x250>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000736:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800073a:	e025      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800073c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000740:	2b14      	cmp	r3, #20
 8000742:	d108      	bne.n	8000756 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000744:	4b6f      	ldr	r3, [pc, #444]	@ (8000904 <bno055_getVector+0x254>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000750:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000754:	e018      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800075a:	2b1a      	cmp	r3, #26
 800075c:	d108      	bne.n	8000770 <bno055_getVector+0xc0>
    scale = eulerScale;
 800075e:	4b6a      	ldr	r3, [pc, #424]	@ (8000908 <bno055_getVector+0x258>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800076a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800076e:	e00b      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000774:	2b20      	cmp	r3, #32
 8000776:	d107      	bne.n	8000788 <bno055_getVector+0xd8>
    scale = quaScale;
 8000778:	4b64      	ldr	r3, [pc, #400]	@ (800090c <bno055_getVector+0x25c>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000784:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000788:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f006 fc9b 	bl	80070cc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800079a:	2b20      	cmp	r3, #32
 800079c:	d14c      	bne.n	8000838 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800079e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007b8:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007c0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007de:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007e6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000804:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000808:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800080c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000810:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800082a:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800082e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000832:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000836:	e038      	b.n	80008aa <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000838:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b21a      	sxth	r2, r3
 8000840:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000852:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000856:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800085a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800085e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000878:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800087c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000880:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000884:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800089e:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80008a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008a6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 80008aa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80008ae:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80008c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80008c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80008ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80008ce:	ec49 8b14 	vmov	d4, r8, r9
 80008d2:	ec45 4b15 	vmov	d5, r4, r5
 80008d6:	ec41 0b16 	vmov	d6, r0, r1
 80008da:	ec43 2b17 	vmov	d7, r2, r3
}
 80008de:	eeb0 0b44 	vmov.f64	d0, d4
 80008e2:	eeb0 1b45 	vmov.f64	d1, d5
 80008e6:	eeb0 2b46 	vmov.f64	d2, d6
 80008ea:	eeb0 3b47 	vmov.f64	d3, d7
 80008ee:	3778      	adds	r7, #120	@ 0x78
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80008f6:	bf00      	nop
 80008f8:	3ff00000 	.word	0x3ff00000
 80008fc:	20000006 	.word	0x20000006
 8000900:	20000000 	.word	0x20000000
 8000904:	20000002 	.word	0x20000002
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008

08000910 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000914:	b090      	sub	sp, #64	@ 0x40
 8000916:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000918:	2020      	movs	r0, #32
 800091a:	f7ff fec9 	bl	80006b0 <bno055_getVector>
 800091e:	eeb0 4b40 	vmov.f64	d4, d0
 8000922:	eeb0 5b41 	vmov.f64	d5, d1
 8000926:	eeb0 6b42 	vmov.f64	d6, d2
 800092a:	eeb0 7b43 	vmov.f64	d7, d3
 800092e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000932:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000936:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800093a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800093e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000942:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000946:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800094a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800094e:	ec49 8b14 	vmov	d4, r8, r9
 8000952:	ec45 4b15 	vmov	d5, r4, r5
 8000956:	ec41 0b16 	vmov	d6, r0, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
}
 800095e:	eeb0 0b44 	vmov.f64	d0, d4
 8000962:	eeb0 1b45 	vmov.f64	d1, d5
 8000966:	eeb0 2b46 	vmov.f64	d2, d6
 800096a:	eeb0 3b47 	vmov.f64	d3, d7
 800096e:	3740      	adds	r7, #64	@ 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000976 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800097e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000982:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800098e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000992:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000996:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00b      	beq.n	80009b6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800099e:	e000      	b.n	80009a2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009a0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b6:	687b      	ldr	r3, [r7, #4]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	2b80      	cmp	r3, #128	@ 0x80
 8000a22:	d101      	bne.n	8000a28 <LL_USART_IsActiveFlag_TXE+0x18>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a4a:	d101      	bne.n	8000a50 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a72:	d101      	bne.n	8000a78 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <LL_USART_IsActiveFlag_REACK+0x1c>
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b089      	sub	sp, #36	@ 0x24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	e853 3f00 	ldrex	r3, [r3]
 8000a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	61ba      	str	r2, [r7, #24]
 8000aa8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	e841 2300 	strex	r3, r2, [r1]
 8000ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1e9      	bne.n	8000a8e <LL_USART_EnableIT_RXNE+0x8>
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3724      	adds	r7, #36	@ 0x24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	e853 3f00 	ldrex	r3, [r3]
 8000adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	61ba      	str	r2, [r7, #24]
 8000aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	e841 2300 	strex	r3, r2, [r1]
 8000af8:	613b      	str	r3, [r7, #16]
   return(result);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1e7      	bne.n	8000ad0 <LL_USART_EnableIT_ERROR+0x8>
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000b1a:	78fa      	ldrb	r2, [r7, #3]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800

08000b5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <bno055_assignI2C>:
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;
//uint8_t BNO055_I2C_ADDR;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <bno055_assignI2C+0x1c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
//  BNO055_I2C_ADDR = i2c_address;
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000033c 	.word	0x2000033c

08000bac <bno055_delay>:

void bno055_delay(int time) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fa1a 	bl	8001ff0 <HAL_Delay>
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	733b      	strb	r3, [r7, #12]
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d48 <bno055_writeData+0x184>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f107 020c 	add.w	r2, r7, #12
 8000be4:	230a      	movs	r3, #10
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	2150      	movs	r1, #80	@ 0x50
 8000bec:	f002 fb9c 	bl	8003328 <HAL_I2C_Master_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
//  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, i2c_address << 1,
//                                     txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80a0 	beq.w	8000d3c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d103      	bne.n	8000c0a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000c02:	4852      	ldr	r0, [pc, #328]	@ (8000d4c <bno055_writeData+0x188>)
 8000c04:	f006 f94e 	bl	8006ea4 <puts>
 8000c08:	e012      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d103      	bne.n	8000c18 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000c10:	484f      	ldr	r0, [pc, #316]	@ (8000d50 <bno055_writeData+0x18c>)
 8000c12:	f006 f947 	bl	8006ea4 <puts>
 8000c16:	e00b      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d103      	bne.n	8000c26 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000c1e:	484d      	ldr	r0, [pc, #308]	@ (8000d54 <bno055_writeData+0x190>)
 8000c20:	f006 f940 	bl	8006ea4 <puts>
 8000c24:	e004      	b.n	8000c30 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484b      	ldr	r0, [pc, #300]	@ (8000d58 <bno055_writeData+0x194>)
 8000c2c:	f006 f8d2 	bl	8006dd4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000c30:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <bno055_writeData+0x184>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fd6f 	bl	8003718 <HAL_I2C_GetError>
 8000c3a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d07e      	beq.n	8000d40 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d103      	bne.n	8000c50 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000c48:	4844      	ldr	r0, [pc, #272]	@ (8000d5c <bno055_writeData+0x198>)
 8000c4a:	f006 f92b 	bl	8006ea4 <puts>
 8000c4e:	e021      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d103      	bne.n	8000c5e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000c56:	4842      	ldr	r0, [pc, #264]	@ (8000d60 <bno055_writeData+0x19c>)
 8000c58:	f006 f924 	bl	8006ea4 <puts>
 8000c5c:	e01a      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d103      	bne.n	8000c6c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000c64:	483f      	ldr	r0, [pc, #252]	@ (8000d64 <bno055_writeData+0x1a0>)
 8000c66:	f006 f91d 	bl	8006ea4 <puts>
 8000c6a:	e013      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d103      	bne.n	8000c7a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000c72:	483d      	ldr	r0, [pc, #244]	@ (8000d68 <bno055_writeData+0x1a4>)
 8000c74:	f006 f916 	bl	8006ea4 <puts>
 8000c78:	e00c      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d103      	bne.n	8000c88 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000c80:	483a      	ldr	r0, [pc, #232]	@ (8000d6c <bno055_writeData+0x1a8>)
 8000c82:	f006 f90f 	bl	8006ea4 <puts>
 8000c86:	e005      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	d102      	bne.n	8000c94 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000c8e:	4838      	ldr	r0, [pc, #224]	@ (8000d70 <bno055_writeData+0x1ac>)
 8000c90:	f006 f908 	bl	8006ea4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <bno055_writeData+0x184>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fd2f 	bl	80036fc <HAL_I2C_GetState>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ca8:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000caa:	f006 f8fb 	bl	8006ea4 <puts>
 8000cae:	e048      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d103      	bne.n	8000cbe <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000cb6:	482f      	ldr	r0, [pc, #188]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000cb8:	f006 f8f4 	bl	8006ea4 <puts>
 8000cbc:	e041      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b24      	cmp	r3, #36	@ 0x24
 8000cc2:	d103      	bne.n	8000ccc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <bno055_writeData+0x1b4>)
 8000cc6:	f006 f8ed 	bl	8006ea4 <puts>
 8000cca:	e03a      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b21      	cmp	r3, #33	@ 0x21
 8000cd0:	d103      	bne.n	8000cda <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000cd2:	482a      	ldr	r0, [pc, #168]	@ (8000d7c <bno055_writeData+0x1b8>)
 8000cd4:	f006 f8e6 	bl	8006ea4 <puts>
 8000cd8:	e033      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b22      	cmp	r3, #34	@ 0x22
 8000cde:	d103      	bne.n	8000ce8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ce0:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <bno055_writeData+0x1bc>)
 8000ce2:	f006 f8df 	bl	8006ea4 <puts>
 8000ce6:	e02c      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b28      	cmp	r3, #40	@ 0x28
 8000cec:	d103      	bne.n	8000cf6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <bno055_writeData+0x1c0>)
 8000cf0:	f006 f8d8 	bl	8006ea4 <puts>
 8000cf4:	e025      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b29      	cmp	r3, #41	@ 0x29
 8000cfa:	d103      	bne.n	8000d04 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000cfc:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <bno055_writeData+0x1c4>)
 8000cfe:	f006 f8d1 	bl	8006ea4 <puts>
 8000d02:	e01e      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d08:	d103      	bne.n	8000d12 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000d0a:	4820      	ldr	r0, [pc, #128]	@ (8000d8c <bno055_writeData+0x1c8>)
 8000d0c:	f006 f8ca 	bl	8006ea4 <puts>
 8000d10:	e017      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b60      	cmp	r3, #96	@ 0x60
 8000d16:	d103      	bne.n	8000d20 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000d18:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <bno055_writeData+0x1cc>)
 8000d1a:	f006 f8c3 	bl	8006ea4 <puts>
 8000d1e:	e010      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8000d24:	d103      	bne.n	8000d2e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <bno055_writeData+0x1d0>)
 8000d28:	f006 f8bc 	bl	8006ea4 <puts>
 8000d2c:	e009      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2be0      	cmp	r3, #224	@ 0xe0
 8000d32:	d106      	bne.n	8000d42 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000d34:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <bno055_writeData+0x1d4>)
 8000d36:	f006 f8b5 	bl	8006ea4 <puts>
 8000d3a:	e002      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d3c:	bf00      	nop
 8000d3e:	e000      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d40:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000033c 	.word	0x2000033c
 8000d4c:	080090b4 	.word	0x080090b4
 8000d50:	080090d8 	.word	0x080090d8
 8000d54:	08009100 	.word	0x08009100
 8000d58:	08009124 	.word	0x08009124
 8000d5c:	0800913c 	.word	0x0800913c
 8000d60:	08009150 	.word	0x08009150
 8000d64:	08009164 	.word	0x08009164
 8000d68:	08009178 	.word	0x08009178
 8000d6c:	0800918c 	.word	0x0800918c
 8000d70:	080091a0 	.word	0x080091a0
 8000d74:	080091b8 	.word	0x080091b8
 8000d78:	080091d0 	.word	0x080091d0
 8000d7c:	080091e4 	.word	0x080091e4
 8000d80:	080091fc 	.word	0x080091fc
 8000d84:	08009214 	.word	0x08009214
 8000d88:	0800922c 	.word	0x0800922c
 8000d8c:	0800924c 	.word	0x0800924c
 8000d90:	0800926c 	.word	0x0800926c
 8000d94:	08009284 	.word	0x08009284
 8000d98:	0800929c 	.word	0x0800929c

08000d9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <bno055_readData+0x40>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	1dfa      	adds	r2, r7, #7
 8000db2:	2364      	movs	r3, #100	@ 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	2150      	movs	r1, #80	@ 0x50
 8000dba:	f002 fab5 	bl	8003328 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <bno055_readData+0x40>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2264      	movs	r2, #100	@ 0x64
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	2150      	movs	r1, #80	@ 0x50
 8000dce:	f002 fb9f 	bl	8003510 <HAL_I2C_Master_Receive>
//	                          100);
//	HAL_I2C_Master_Receive(_bno055_i2c_port, i2c_address << 1, data, len,
//	                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000033c 	.word	0x2000033c

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	@ 0x50
 8000de4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 f8a6 	bl	8001f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f99d 	bl	8001128 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	ITM_Port32(31) = 1;
 8000dee:	4bbb      	ldr	r3, [pc, #748]	@ (80010dc <main+0x2fc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 fbca 	bl	800158c <MX_GPIO_Init>
  MX_DMA_Init();
 8000df8:	f000 fb92 	bl	8001520 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dfc:	f000 fad4 	bl	80013a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e00:	f000 fb60 	bl	80014c4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e04:	f000 fa50 	bl	80012a8 <MX_I2C1_Init>
  MX_ETH_Init();
 8000e08:	f000 fa00 	bl	800120c <MX_ETH_Init>
  MX_I2C2_Init();
 8000e0c:	f000 fa8c 	bl	8001328 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	ITM_Port32(31) = 2;
 8000e10:	4bb2      	ldr	r3, [pc, #712]	@ (80010dc <main+0x2fc>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	601a      	str	r2, [r3, #0]

	bno055_assignI2C(&hi2c1);
 8000e16:	48b2      	ldr	r0, [pc, #712]	@ (80010e0 <main+0x300>)
 8000e18:	f7ff feb8 	bl	8000b8c <bno055_assignI2C>
	bno055_setup();
 8000e1c:	f7ff fc20 	bl	8000660 <bno055_setup>
	bno055_setOperationModeNDOF();
 8000e20:	f7ff fc0b 	bl	800063a <bno055_setOperationModeNDOF>

	bno055_assignI2C(&hi2c2);
 8000e24:	48af      	ldr	r0, [pc, #700]	@ (80010e4 <main+0x304>)
 8000e26:	f7ff feb1 	bl	8000b8c <bno055_assignI2C>
	bno055_setup();
 8000e2a:	f7ff fc19 	bl	8000660 <bno055_setup>
	bno055_setOperationModeNDOF();
 8000e2e:	f7ff fc04 	bl	800063a <bno055_setOperationModeNDOF>


	/* Polling USART initialisation */
	while ((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3)))){
 8000e32:	bf00      	nop
 8000e34:	48ac      	ldr	r0, [pc, #688]	@ (80010e8 <main+0x308>)
 8000e36:	f7ff fdfe 	bl	8000a36 <LL_USART_IsActiveFlag_TEACK>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <main+0x54>
 8000e40:	48a9      	ldr	r0, [pc, #676]	@ (80010e8 <main+0x308>)
 8000e42:	f7ff fe0c 	bl	8000a5e <LL_USART_IsActiveFlag_REACK>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f3      	beq.n	8000e34 <main+0x54>
	}

	/* Enable RXNE and Error interrupts */
	LL_USART_EnableIT_RXNE(USART3);
 8000e4c:	48a6      	ldr	r0, [pc, #664]	@ (80010e8 <main+0x308>)
 8000e4e:	f7ff fe1a 	bl	8000a86 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART3);
 8000e52:	48a5      	ldr	r0, [pc, #660]	@ (80010e8 <main+0x308>)
 8000e54:	f7ff fe38 	bl	8000ac8 <LL_USART_EnableIT_ERROR>
    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);


		bno055_assignI2C(&hi2c1);
 8000e58:	48a1      	ldr	r0, [pc, #644]	@ (80010e0 <main+0x300>)
 8000e5a:	f7ff fe97 	bl	8000b8c <bno055_assignI2C>
		v1 = bno055_getVectorQuaternion();
 8000e5e:	f7ff fd57 	bl	8000910 <bno055_getVectorQuaternion>
 8000e62:	eeb0 4b40 	vmov.f64	d4, d0
 8000e66:	eeb0 5b41 	vmov.f64	d5, d1
 8000e6a:	eeb0 6b42 	vmov.f64	d6, d2
 8000e6e:	eeb0 7b43 	vmov.f64	d7, d3
 8000e72:	4b9e      	ldr	r3, [pc, #632]	@ (80010ec <main+0x30c>)
 8000e74:	ed83 4b00 	vstr	d4, [r3]
 8000e78:	ed83 5b02 	vstr	d5, [r3, #8]
 8000e7c:	ed83 6b04 	vstr	d6, [r3, #16]
 8000e80:	ed83 7b06 	vstr	d7, [r3, #24]
		w1 = v1.w;
 8000e84:	4b99      	ldr	r3, [pc, #612]	@ (80010ec <main+0x30c>)
 8000e86:	ed93 7b00 	vldr	d7, [r3]
 8000e8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e8e:	4b98      	ldr	r3, [pc, #608]	@ (80010f0 <main+0x310>)
 8000e90:	edc3 7a00 	vstr	s15, [r3]
		x1 = v1.x;
 8000e94:	4b95      	ldr	r3, [pc, #596]	@ (80010ec <main+0x30c>)
 8000e96:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9e:	4b95      	ldr	r3, [pc, #596]	@ (80010f4 <main+0x314>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
		y1 = v1.y;
 8000ea4:	4b91      	ldr	r3, [pc, #580]	@ (80010ec <main+0x30c>)
 8000ea6:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eaa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eae:	4b92      	ldr	r3, [pc, #584]	@ (80010f8 <main+0x318>)
 8000eb0:	edc3 7a00 	vstr	s15, [r3]
		z1 = v1.z;
 8000eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80010ec <main+0x30c>)
 8000eb6:	ed93 7b06 	vldr	d7, [r3, #24]
 8000eba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80010fc <main+0x31c>)
 8000ec0:	edc3 7a00 	vstr	s15, [r3]

		bno055_assignI2C(&hi2c2);
 8000ec4:	4887      	ldr	r0, [pc, #540]	@ (80010e4 <main+0x304>)
 8000ec6:	f7ff fe61 	bl	8000b8c <bno055_assignI2C>
		v1 = bno055_getVectorQuaternion();
 8000eca:	f7ff fd21 	bl	8000910 <bno055_getVectorQuaternion>
 8000ece:	eeb0 4b40 	vmov.f64	d4, d0
 8000ed2:	eeb0 5b41 	vmov.f64	d5, d1
 8000ed6:	eeb0 6b42 	vmov.f64	d6, d2
 8000eda:	eeb0 7b43 	vmov.f64	d7, d3
 8000ede:	4b83      	ldr	r3, [pc, #524]	@ (80010ec <main+0x30c>)
 8000ee0:	ed83 4b00 	vstr	d4, [r3]
 8000ee4:	ed83 5b02 	vstr	d5, [r3, #8]
 8000ee8:	ed83 6b04 	vstr	d6, [r3, #16]
 8000eec:	ed83 7b06 	vstr	d7, [r3, #24]
		w2 = v1.w;
 8000ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80010ec <main+0x30c>)
 8000ef2:	ed93 7b00 	vldr	d7, [r3]
 8000ef6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efa:	4b81      	ldr	r3, [pc, #516]	@ (8001100 <main+0x320>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
		x2 = v1.x;
 8000f00:	4b7a      	ldr	r3, [pc, #488]	@ (80010ec <main+0x30c>)
 8000f02:	ed93 7b02 	vldr	d7, [r3, #8]
 8000f06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001104 <main+0x324>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
		y2 = v1.y;
 8000f10:	4b76      	ldr	r3, [pc, #472]	@ (80010ec <main+0x30c>)
 8000f12:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001108 <main+0x328>)
 8000f1c:	edc3 7a00 	vstr	s15, [r3]
		z2 = v1.z;
 8000f20:	4b72      	ldr	r3, [pc, #456]	@ (80010ec <main+0x30c>)
 8000f22:	ed93 7b06 	vldr	d7, [r3, #24]
 8000f26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f2a:	4b78      	ldr	r3, [pc, #480]	@ (800110c <main+0x32c>)
 8000f2c:	edc3 7a00 	vstr	s15, [r3]


		//Si el valor es 0, entra en modo entrenamiento, si el valor es 1, entra en modo ejecucion
		tipoFuncionamiento = 1;
 8000f30:	4b77      	ldr	r3, [pc, #476]	@ (8001110 <main+0x330>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

		if(tipoFuncionamiento == 0){
 8000f36:	4b76      	ldr	r3, [pc, #472]	@ (8001110 <main+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d16c      	bne.n	8001018 <main+0x238>
			if(cont < 2001){
 8000f3e:	4b75      	ldr	r3, [pc, #468]	@ (8001114 <main+0x334>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f46:	f300 80c4 	bgt.w	80010d2 <main+0x2f2>
				// W1,X1,Y1,Z1,W2,X2,Y2,Z2,Tipo
				int tipo = 2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	603b      	str	r3, [r7, #0]

				snprintf((char *)aStringToSend, sizeof(aStringToSend), "%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%d\r\n",
 8000f4e:	4b68      	ldr	r3, [pc, #416]	@ (80010f0 <main+0x310>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f58:	4b66      	ldr	r3, [pc, #408]	@ (80010f4 <main+0x314>)
 8000f5a:	edd3 6a00 	vldr	s13, [r3]
 8000f5e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f62:	4b65      	ldr	r3, [pc, #404]	@ (80010f8 <main+0x318>)
 8000f64:	edd3 5a00 	vldr	s11, [r3]
 8000f68:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000f6c:	4b63      	ldr	r3, [pc, #396]	@ (80010fc <main+0x31c>)
 8000f6e:	edd3 4a00 	vldr	s9, [r3]
 8000f72:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000f76:	4b62      	ldr	r3, [pc, #392]	@ (8001100 <main+0x320>)
 8000f78:	edd3 3a00 	vldr	s7, [r3]
 8000f7c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000f80:	4b60      	ldr	r3, [pc, #384]	@ (8001104 <main+0x324>)
 8000f82:	edd3 2a00 	vldr	s5, [r3]
 8000f86:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001108 <main+0x328>)
 8000f8c:	edd3 1a00 	vldr	s3, [r3]
 8000f90:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8000f94:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <main+0x32c>)
 8000f96:	edd3 0a00 	vldr	s1, [r3]
 8000f9a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8000fa2:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000fa6:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000faa:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000fae:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000fb2:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000fb6:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000fba:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000fbe:	ed8d 7b00 	vstr	d7, [sp]
 8000fc2:	4a55      	ldr	r2, [pc, #340]	@ (8001118 <main+0x338>)
 8000fc4:	21ff      	movs	r1, #255	@ 0xff
 8000fc6:	4855      	ldr	r0, [pc, #340]	@ (800111c <main+0x33c>)
 8000fc8:	f005 ff74 	bl	8006eb4 <sniprintf>
						w1, x1, y1, z1, w2, x2, y2, z2, tipo);
				ubSizeToSend = strlen((char *)aStringToSend);
 8000fcc:	4853      	ldr	r0, [pc, #332]	@ (800111c <main+0x33c>)
 8000fce:	f7ff f987 	bl	80002e0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <main+0x340>)
 8000fd8:	701a      	strb	r2, [r3, #0]

				// Enviar el mensaje byte por byte
				for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	e010      	b.n	8001002 <main+0x222>
					LL_USART_TransmitData8(USART3,  aStringToSend[i]);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800111c <main+0x33c>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <main+0x308>)
 8000fea:	f7ff fd90 	bl	8000b0e <LL_USART_TransmitData8>
					while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
 8000fee:	bf00      	nop
 8000ff0:	483d      	ldr	r0, [pc, #244]	@ (80010e8 <main+0x308>)
 8000ff2:	f7ff fd0d 	bl	8000a10 <LL_USART_IsActiveFlag_TXE>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f9      	beq.n	8000ff0 <main+0x210>
				for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	3301      	adds	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <main+0x340>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3e9      	bcc.n	8000fe0 <main+0x200>
				}
				cont++;
 800100c:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <main+0x334>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a40      	ldr	r2, [pc, #256]	@ (8001114 <main+0x334>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e05c      	b.n	80010d2 <main+0x2f2>
			}
		}else{
			snprintf((char *)aStringToSend, sizeof(aStringToSend), "%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f\r\n",
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <main+0x310>)
 800101a:	edd3 7a00 	vldr	s15, [r3]
 800101e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <main+0x314>)
 8001024:	edd3 6a00 	vldr	s13, [r3]
 8001028:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <main+0x318>)
 800102e:	edd3 5a00 	vldr	s11, [r3]
 8001032:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <main+0x31c>)
 8001038:	edd3 4a00 	vldr	s9, [r3]
 800103c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <main+0x320>)
 8001042:	edd3 3a00 	vldr	s7, [r3]
 8001046:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <main+0x324>)
 800104c:	edd3 2a00 	vldr	s5, [r3]
 8001050:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <main+0x328>)
 8001056:	edd3 1a00 	vldr	s3, [r3]
 800105a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 800105e:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <main+0x32c>)
 8001060:	edd3 0a00 	vldr	s1, [r3]
 8001064:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8001068:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 800106c:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8001070:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8001074:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001078:	ed8d 4b06 	vstr	d4, [sp, #24]
 800107c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001080:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001084:	ed8d 7b00 	vstr	d7, [sp]
 8001088:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <main+0x344>)
 800108a:	21ff      	movs	r1, #255	@ 0xff
 800108c:	4823      	ldr	r0, [pc, #140]	@ (800111c <main+0x33c>)
 800108e:	f005 ff11 	bl	8006eb4 <sniprintf>
					w1, x1, y1, z1, w2, x2, y2, z2);
			ubSizeToSend = strlen((char *)aStringToSend);
 8001092:	4822      	ldr	r0, [pc, #136]	@ (800111c <main+0x33c>)
 8001094:	f7ff f924 	bl	80002e0 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <main+0x340>)
 800109e:	701a      	strb	r2, [r3, #0]

			// Enviar el mensaje byte por byte
			for (uint8_t i = 0; i < ubSizeToSend; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	71bb      	strb	r3, [r7, #6]
 80010a4:	e010      	b.n	80010c8 <main+0x2e8>
				LL_USART_TransmitData8(USART3,  aStringToSend[i]);
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <main+0x33c>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	4619      	mov	r1, r3
 80010ae:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <main+0x308>)
 80010b0:	f7ff fd2d 	bl	8000b0e <LL_USART_TransmitData8>
				while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
 80010b4:	bf00      	nop
 80010b6:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <main+0x308>)
 80010b8:	f7ff fcaa 	bl	8000a10 <LL_USART_IsActiveFlag_TXE>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f9      	beq.n	80010b6 <main+0x2d6>
			for (uint8_t i = 0; i < ubSizeToSend; i++){
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	3301      	adds	r3, #1
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <main+0x340>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	79ba      	ldrb	r2, [r7, #6]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3e9      	bcc.n	80010a6 <main+0x2c6>
			}
		}
		HAL_Delay(500);
 80010d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d6:	f000 ff8b 	bl	8001ff0 <HAL_Delay>
		bno055_assignI2C(&hi2c1);
 80010da:	e6bd      	b.n	8000e58 <main+0x78>
 80010dc:	e000007c 	.word	0xe000007c
 80010e0:	20000428 	.word	0x20000428
 80010e4:	2000047c 	.word	0x2000047c
 80010e8:	40004800 	.word	0x40004800
 80010ec:	20000c80 	.word	0x20000c80
 80010f0:	20000c58 	.word	0x20000c58
 80010f4:	20000c5c 	.word	0x20000c5c
 80010f8:	20000c60 	.word	0x20000c60
 80010fc:	20000c64 	.word	0x20000c64
 8001100:	20000c68 	.word	0x20000c68
 8001104:	20000c6c 	.word	0x20000c6c
 8001108:	20000c70 	.word	0x20000c70
 800110c:	20000c74 	.word	0x20000c74
 8001110:	20000c7c 	.word	0x20000c7c
 8001114:	20000c78 	.word	0x20000c78
 8001118:	080092b4 	.word	0x080092b4
 800111c:	20000b58 	.word	0x20000b58
 8001120:	20000c57 	.word	0x20000c57
 8001124:	080092e4 	.word	0x080092e4

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2234      	movs	r2, #52	@ 0x34
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 ffc8 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800114c:	f002 ff3c 	bl	8003fc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <SystemClock_Config+0xdc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	4a2b      	ldr	r2, [pc, #172]	@ (8001204 <SystemClock_Config+0xdc>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <SystemClock_Config+0xdc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <SystemClock_Config+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001170:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <SystemClock_Config+0xe0>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <SystemClock_Config+0xe0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001188:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800118c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800119c:	2360      	movs	r3, #96	@ 0x60
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 ff69 	bl	8004088 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011bc:	f000 fab0 	bl	8001720 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c0:	f002 ff12 	bl	8003fe8 <HAL_PWREx_EnableOverDrive>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011ca:	f000 faa9 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2103      	movs	r1, #3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f9fa 	bl	80045e4 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011f6:	f000 fa93 	bl	8001720 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	@ 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_ETH_Init+0x84>)
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <MX_ETH_Init+0x88>)
 8001214:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_ETH_Init+0x8c>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_ETH_Init+0x8c>)
 800121e:	2280      	movs	r2, #128	@ 0x80
 8001220:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_ETH_Init+0x8c>)
 8001224:	22e1      	movs	r2, #225	@ 0xe1
 8001226:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_ETH_Init+0x8c>)
 800122a:	2200      	movs	r2, #0
 800122c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_ETH_Init+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001234:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_ETH_Init+0x8c>)
 8001236:	2200      	movs	r2, #0
 8001238:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_ETH_Init+0x84>)
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <MX_ETH_Init+0x8c>)
 800123e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_ETH_Init+0x84>)
 8001242:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001246:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_ETH_Init+0x84>)
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <MX_ETH_Init+0x90>)
 800124c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_ETH_Init+0x84>)
 8001250:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_ETH_Init+0x94>)
 8001252:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_ETH_Init+0x84>)
 8001256:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800125a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <MX_ETH_Init+0x84>)
 800125e:	f001 fae7 	bl	8002830 <HAL_ETH_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001268:	f000 fa5a 	bl	8001720 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800126c:	2238      	movs	r2, #56	@ 0x38
 800126e:	2100      	movs	r1, #0
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <MX_ETH_Init+0x98>)
 8001272:	f005 ff2b 	bl	80070cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_ETH_Init+0x98>)
 8001278:	2221      	movs	r2, #33	@ 0x21
 800127a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_ETH_Init+0x98>)
 800127e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001282:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <MX_ETH_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000378 	.word	0x20000378
 8001294:	40028000 	.word	0x40028000
 8001298:	20000ca0 	.word	0x20000ca0
 800129c:	20000280 	.word	0x20000280
 80012a0:	200001e0 	.word	0x200001e0
 80012a4:	20000340 	.word	0x20000340

080012a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <MX_I2C1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_I2C1_Init+0x74>)
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <MX_I2C1_Init+0x7c>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_I2C1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_I2C1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <MX_I2C1_Init+0x74>)
 80012e4:	f001 ff90 	bl	8003208 <HAL_I2C_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ee:	f000 fa17 	bl	8001720 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <MX_I2C1_Init+0x74>)
 80012f6:	f002 fc87 	bl	8003c08 <HAL_I2CEx_ConfigAnalogFilter>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001300:	f000 fa0e 	bl	8001720 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_I2C1_Init+0x74>)
 8001308:	f002 fcc9 	bl	8003c9e <HAL_I2CEx_ConfigDigitalFilter>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 fa05 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000428 	.word	0x20000428
 8001320:	40005400 	.word	0x40005400
 8001324:	20303e5d 	.word	0x20303e5d

08001328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_I2C2_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <MX_I2C2_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_I2C2_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <MX_I2C2_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_I2C2_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_I2C2_Init+0x74>)
 8001340:	2201      	movs	r2, #1
 8001342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_I2C2_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_I2C2_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_I2C2_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_I2C2_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001362:	480e      	ldr	r0, [pc, #56]	@ (800139c <MX_I2C2_Init+0x74>)
 8001364:	f001 ff50 	bl	8003208 <HAL_I2C_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 f9d7 	bl	8001720 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_I2C2_Init+0x74>)
 8001376:	f002 fc47 	bl	8003c08 <HAL_I2CEx_ConfigAnalogFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 f9ce 	bl	8001720 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_I2C2_Init+0x74>)
 8001388:	f002 fc89 	bl	8003c9e <HAL_I2CEx_ConfigDigitalFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001392:	f000 f9c5 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000047c 	.word	0x2000047c
 80013a0:	40005800 	.word	0x40005800
 80013a4:	20303e5d 	.word	0x20303e5d

080013a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0b2      	sub	sp, #200	@ 0xc8
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2290      	movs	r2, #144	@ 0x90
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fe76 	bl	80070cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 faeb 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 f992 	bl	8001720 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80013fc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001400:	f7ff fbac 	bl	8000b5c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001404:	2008      	movs	r0, #8
 8001406:	f7ff fb91 	bl	8000b2c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800140a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800142a:	2307      	movs	r3, #7
 800142c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001434:	4619      	mov	r1, r3
 8001436:	4821      	ldr	r0, [pc, #132]	@ (80014bc <MX_USART3_UART_Init+0x114>)
 8001438:	f003 fff3 	bl	8005422 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800143c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001440:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800145c:	2307      	movs	r3, #7
 800145e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001466:	4619      	mov	r1, r3
 8001468:	4814      	ldr	r0, [pc, #80]	@ (80014bc <MX_USART3_UART_Init+0x114>)
 800146a:	f003 ffda 	bl	8005422 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800146e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001488:	230c      	movs	r3, #12
 800148a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  LL_USART_Init(USART3, &USART_InitStruct);
 800149a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <MX_USART3_UART_Init+0x118>)
 80014a2:	f004 fc09 	bl	8005cb8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <MX_USART3_UART_Init+0x118>)
 80014a8:	f7ff fa9c 	bl	80009e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_USART3_UART_Init+0x118>)
 80014ae:	f7ff fa89 	bl	80009c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	37c8      	adds	r7, #200	@ 0xc8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40004800 	.word	0x40004800

080014c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d2:	2206      	movs	r2, #6
 80014d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d8:	2202      	movs	r2, #2
 80014da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	f002 fc15 	bl	8003d36 <HAL_PCD_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001512:	f000 f905 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000650 	.word	0x20000650

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_DMA_Init+0x68>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <MX_DMA_Init+0x68>)
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_DMA_Init+0x68>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200b      	movs	r0, #11
 8001544:	f000 fe53 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f000 fe6c 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	200d      	movs	r0, #13
 8001554:	f000 fe4b 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001558:	200d      	movs	r0, #13
 800155a:	f000 fe64 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	200f      	movs	r0, #15
 8001564:	f000 fe43 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001568:	200f      	movs	r0, #15
 800156a:	f000 fe5c 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2011      	movs	r0, #17
 8001574:	f000 fe3b 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001578:	2011      	movs	r0, #17
 800157a:	f000 fe54 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b4d      	ldr	r3, [pc, #308]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a4c      	ldr	r2, [pc, #304]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b4a      	ldr	r3, [pc, #296]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a46      	ldr	r2, [pc, #280]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b44      	ldr	r3, [pc, #272]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a40      	ldr	r2, [pc, #256]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a3a      	ldr	r2, [pc, #232]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a34      	ldr	r2, [pc, #208]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a2e      	ldr	r2, [pc, #184]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a28      	ldr	r2, [pc, #160]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <MX_GPIO_Init+0x14c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001650:	4822      	ldr	r0, [pc, #136]	@ (80016dc <MX_GPIO_Init+0x150>)
 8001652:	f001 fdbf 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2140      	movs	r1, #64	@ 0x40
 800165a:	4821      	ldr	r0, [pc, #132]	@ (80016e0 <MX_GPIO_Init+0x154>)
 800165c:	f001 fdba 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001666:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <MX_GPIO_Init+0x158>)
 8001678:	f001 fc00 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800167c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <MX_GPIO_Init+0x150>)
 8001696:	f001 fbf1 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800169a:	2340      	movs	r3, #64	@ 0x40
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <MX_GPIO_Init+0x154>)
 80016b2:	f001 fbe3 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_GPIO_Init+0x154>)
 80016ca:	f001 fbd7 	bl	8002e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	@ 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020800 	.word	0x40020800

080016e8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e009      	b.n	800170e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f937 	bl	8000976 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf1      	blt.n	80016fa <_write+0x12>
	}
	return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_MspInit+0x44>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_MspInit+0x44>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_MspInit+0x44>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_MspInit+0x44>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_MspInit+0x44>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	@ 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a4e      	ldr	r2, [pc, #312]	@ (80018cc <HAL_ETH_MspInit+0x158>)
 8001792:	4293      	cmp	r3, r2
 8001794:	f040 8096 	bne.w	80018c4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001798:	4b4d      	ldr	r3, [pc, #308]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	4a4c      	ldr	r2, [pc, #304]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a4:	4b4a      	ldr	r3, [pc, #296]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	4a46      	ldr	r2, [pc, #280]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80017bc:	4b44      	ldr	r3, [pc, #272]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	4a40      	ldr	r2, [pc, #256]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d4:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e4:	4a3a      	ldr	r2, [pc, #232]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ec:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6313      	str	r3, [r2, #48]	@ 0x30
 8001804:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6313      	str	r3, [r2, #48]	@ 0x30
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	4a28      	ldr	r2, [pc, #160]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 800182e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001832:	6313      	str	r3, [r2, #48]	@ 0x30
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <HAL_ETH_MspInit+0x15c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001840:	2332      	movs	r3, #50	@ 0x32
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001850:	230b      	movs	r3, #11
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	481e      	ldr	r0, [pc, #120]	@ (80018d4 <HAL_ETH_MspInit+0x160>)
 800185c:	f001 fb0e 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001860:	2386      	movs	r3, #134	@ 0x86
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001870:	230b      	movs	r3, #11
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <HAL_ETH_MspInit+0x164>)
 800187c:	f001 fafe 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001892:	230b      	movs	r3, #11
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	480f      	ldr	r0, [pc, #60]	@ (80018dc <HAL_ETH_MspInit+0x168>)
 800189e:	f001 faed 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b4:	230b      	movs	r3, #11
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <HAL_ETH_MspInit+0x16c>)
 80018c0:	f001 fadc 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	@ 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40028000 	.word	0x40028000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40021800 	.word	0x40021800

080018e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0b0      	sub	sp, #192	@ 0xc0
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2290      	movs	r2, #144	@ 0x90
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fbe1 	bl	80070cc <memset>
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4aa1      	ldr	r2, [pc, #644]	@ (8001b94 <HAL_I2C_MspInit+0x2b0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	f040 809b 	bne.w	8001a4c <HAL_I2C_MspInit+0x168>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001916:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800191a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f84e 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 8001932:	f7ff fef5 	bl	8001720 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b98      	ldr	r3, [pc, #608]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a97      	ldr	r2, [pc, #604]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b95      	ldr	r3, [pc, #596]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001968:	2304      	movs	r3, #4
 800196a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001972:	4619      	mov	r1, r3
 8001974:	4889      	ldr	r0, [pc, #548]	@ (8001b9c <HAL_I2C_MspInit+0x2b8>)
 8001976:	f001 fa81 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	4b87      	ldr	r3, [pc, #540]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a86      	ldr	r2, [pc, #536]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001980:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001992:	4b83      	ldr	r3, [pc, #524]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 8001994:	4a83      	ldr	r2, [pc, #524]	@ (8001ba4 <HAL_I2C_MspInit+0x2c0>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001998:	4b81      	ldr	r3, [pc, #516]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 800199a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800199e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ac:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ba:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019c0:	4b77      	ldr	r3, [pc, #476]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019cc:	4b74      	ldr	r3, [pc, #464]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019d2:	4873      	ldr	r0, [pc, #460]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019d4:	f000 fc42 	bl	800225c <HAL_DMA_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 80019de:	f7ff fe9f 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e8:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba0 <HAL_I2C_MspInit+0x2bc>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 80019f0:	4a6e      	ldr	r2, [pc, #440]	@ (8001bac <HAL_I2C_MspInit+0x2c8>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 80019f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a02:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a08:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a10:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a16:	4b64      	ldr	r3, [pc, #400]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a22:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a28:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a2e:	485e      	ldr	r0, [pc, #376]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a30:	f000 fc14 	bl	800225c <HAL_DMA_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_MspInit+0x15a>
    {
      Error_Handler();
 8001a3a:	f7ff fe71 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a59      	ldr	r2, [pc, #356]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a42:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a44:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_I2C_MspInit+0x2c4>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a4a:	e09e      	b.n	8001b8a <HAL_I2C_MspInit+0x2a6>
  else if(hi2c->Instance==I2C2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_I2C_MspInit+0x2cc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 8099 	bne.w	8001b8a <HAL_I2C_MspInit+0x2a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 ffad 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_MspInit+0x194>
      Error_Handler();
 8001a74:	f7ff fe54 	bl	8001720 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a78:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7c:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a84:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	483f      	ldr	r0, [pc, #252]	@ (8001bb4 <HAL_I2C_MspInit+0x2d0>)
 8001ab6:	f001 f9e1 	bl	8002e7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aba:	4b37      	ldr	r3, [pc, #220]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a36      	ldr	r2, [pc, #216]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <HAL_I2C_MspInit+0x2b4>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001ad2:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <HAL_I2C_MspInit+0x2d8>)
 8001ad6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001ad8:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001ada:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001ade:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae0:	4b35      	ldr	r3, [pc, #212]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae6:	4b34      	ldr	r3, [pc, #208]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aec:	4b32      	ldr	r3, [pc, #200]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afa:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b06:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001b12:	4829      	ldr	r0, [pc, #164]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b14:	f000 fba2 	bl	800225c <HAL_DMA_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_MspInit+0x23e>
      Error_Handler();
 8001b1e:	f7ff fdff 	bl	8001720 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b28:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <HAL_I2C_MspInit+0x2d4>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b30:	4a24      	ldr	r2, [pc, #144]	@ (8001bc4 <HAL_I2C_MspInit+0x2e0>)
 8001b32:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001b6e:	4814      	ldr	r0, [pc, #80]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b70:	f000 fb74 	bl	800225c <HAL_DMA_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8001b7a:	f7ff fdd1 	bl	8001720 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b84:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_I2C_MspInit+0x2dc>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b8a:	bf00      	nop
 8001b8c:	37c0      	adds	r7, #192	@ 0xc0
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	200004d0 	.word	0x200004d0
 8001ba4:	40026010 	.word	0x40026010
 8001ba8:	20000530 	.word	0x20000530
 8001bac:	400260a0 	.word	0x400260a0
 8001bb0:	40005800 	.word	0x40005800
 8001bb4:	40021400 	.word	0x40021400
 8001bb8:	20000590 	.word	0x20000590
 8001bbc:	40026040 	.word	0x40026040
 8001bc0:	200005f0 	.word	0x200005f0
 8001bc4:	40026070 	.word	0x40026070

08001bc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0ae      	sub	sp, #184	@ 0xb8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2290      	movs	r2, #144	@ 0x90
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fa6f 	bl	80070cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf6:	d159      	bne.n	8001cac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bf8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fedd 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c14:	f7ff fd84 	bl	8001720 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4a25      	ldr	r2, [pc, #148]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c24:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c30:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4818      	ldr	r0, [pc, #96]	@ (8001cb8 <HAL_PCD_MspInit+0xf0>)
 8001c58:	f001 f910 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4810      	ldr	r0, [pc, #64]	@ (8001cb8 <HAL_PCD_MspInit+0xf0>)
 8001c78:	f001 f900 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c86:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <HAL_PCD_MspInit+0xec>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	37b8      	adds	r7, #184	@ 0xb8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d12:	f000 f94d 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <DMA1_Stream0_IRQHandler+0x10>)
 8001d22:	f000 fb49 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200004d0 	.word	0x200004d0

08001d30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <DMA1_Stream2_IRQHandler+0x10>)
 8001d36:	f000 fb3f 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000590 	.word	0x20000590

08001d44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <DMA1_Stream4_IRQHandler+0x10>)
 8001d4a:	f000 fb35 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200005f0 	.word	0x200005f0

08001d58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <DMA1_Stream6_IRQHandler+0x10>)
 8001d5e:	f000 fb2b 	bl	80023b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000530 	.word	0x20000530

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d86:	f005 f9f3 	bl	8007170 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dae:	bf00      	nop
 8001db0:	e7fd      	b.n	8001dae <_exit+0x12>

08001db2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e00a      	b.n	8001dda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	4601      	mov	r1, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	60ba      	str	r2, [r7, #8]
 8001dd0:	b2ca      	uxtb	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbf0      	blt.n	8001dc4 <_read+0x12>
  }

  return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_close>:
  }
  return len;
}

int _close(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e14:	605a      	str	r2, [r3, #4]
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_isatty>:

int _isatty(int file)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f005 f974 	bl	8007170 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20080000 	.word	0x20080000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	20000ca8 	.word	0x20000ca8
 8001ebc:	20000e00 	.word	0x20000e00

08001ec0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	@ (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	@ (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f005 f933 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe ff63 	bl	8000de0 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f28:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8001f2c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001f30:	20000dfc 	.word	0x20000dfc

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>

08001f36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 f94c 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 f805 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fbf1 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f967 	bl	8002242 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 f92f 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	@ (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	20000010 	.word	0x20000010

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000014 	.word	0x20000014
 8001fd4:	20000cac 	.word	0x20000cac

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000cac 	.word	0x20000cac

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000014 	.word	0x20000014

08002038 <__NVIC_SetPriorityGrouping>:
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <__NVIC_SetPriorityGrouping+0x40>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	4313      	orrs	r3, r2
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <__NVIC_SetPriorityGrouping+0x40>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00
 800207c:	05fa0000 	.word	0x05fa0000

08002080 <__NVIC_GetPriorityGrouping>:
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	@ (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	@ (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff feb6 	bl	8001fd8 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e099      	b.n	80023ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002298:	e00f      	b.n	80022ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800229a:	f7ff fe9d 	bl	8001fd8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d908      	bls.n	80022ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e078      	b.n	80023ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e8      	bne.n	800229a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4b38      	ldr	r3, [pc, #224]	@ (80023b4 <HAL_DMA_Init+0x158>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	2b04      	cmp	r3, #4
 8002312:	d107      	bne.n	8002324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	4313      	orrs	r3, r2
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0307 	bic.w	r3, r3, #7
 800233a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	2b04      	cmp	r3, #4
 800234c:	d117      	bne.n	800237e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9e9 	bl	8002738 <DMA_CheckFifoParam>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800237a:	2301      	movs	r3, #1
 800237c:	e016      	b.n	80023ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f9a0 	bl	80026cc <DMA_CalcBaseAndBitshift>
 800238c:	4603      	mov	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	223f      	movs	r2, #63	@ 0x3f
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	e010803f 	.word	0xe010803f

080023b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002600 <HAL_DMA_IRQHandler+0x248>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002604 <HAL_DMA_IRQHandler+0x24c>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0a9b      	lsrs	r3, r3, #10
 80023d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2208      	movs	r2, #8
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01a      	beq.n	8002424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	2208      	movs	r2, #8
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	2201      	movs	r2, #1
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	2204      	movs	r2, #4
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	2204      	movs	r2, #4
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2210      	movs	r2, #16
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d043      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03c      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b2:	2210      	movs	r2, #16
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d018      	beq.n	80024fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d024      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
 80024e6:	e01f      	b.n	8002528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e016      	b.n	8002528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0208 	bic.w	r2, r2, #8
 8002516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	2220      	movs	r2, #32
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 808f 	beq.w	8002658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8087 	beq.w	8002658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2220      	movs	r2, #32
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b05      	cmp	r3, #5
 8002560:	d136      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0216 	bic.w	r2, r2, #22
 8002570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_DMA_IRQHandler+0x1da>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	223f      	movs	r2, #63	@ 0x3f
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d07e      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
        }
        return;
 80025ce:	e079      	b.n	80026c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
 80025fc:	e02c      	b.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
 80025fe:	bf00      	nop
 8002600:	2000000c 	.word	0x2000000c
 8002604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
 8002618:	e01e      	b.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0210 	bic.w	r2, r2, #16
 8002636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	2b00      	cmp	r3, #0
 800265e:	d032      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3301      	adds	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d307      	bcc.n	80026a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f2      	bne.n	8002684 <HAL_DMA_IRQHandler+0x2cc>
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
 80026c2:	e000      	b.n	80026c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026c4:	bf00      	nop
    }
  }
}
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3b10      	subs	r3, #16
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <DMA_CalcBaseAndBitshift+0x60>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <DMA_CalcBaseAndBitshift+0x64>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d908      	bls.n	800270c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <DMA_CalcBaseAndBitshift+0x68>)
 8002702:	4013      	ands	r3, r2
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58
 800270a:	e006      	b.n	800271a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <DMA_CalcBaseAndBitshift+0x68>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	aaaaaaab 	.word	0xaaaaaaab
 8002730:	08009328 	.word	0x08009328
 8002734:	fffffc00 	.word	0xfffffc00

08002738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d856      	bhi.n	8002806 <DMA_CheckFifoParam+0xce>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <DMA_CheckFifoParam+0x28>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002783 	.word	0x08002783
 8002768:	08002771 	.word	0x08002771
 800276c:	08002807 	.word	0x08002807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d046      	beq.n	800280a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e043      	b.n	800280a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800278a:	d140      	bne.n	800280e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e03d      	b.n	800280e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279a:	d121      	bne.n	80027e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d837      	bhi.n	8002812 <DMA_CheckFifoParam+0xda>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <DMA_CheckFifoParam+0x70>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027bf 	.word	0x080027bf
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	080027d1 	.word	0x080027d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e030      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d025      	beq.n	8002816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e022      	b.n	8002816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d8:	d11f      	bne.n	800281a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027de:	e01c      	b.n	800281a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d903      	bls.n	80027ee <DMA_CheckFifoParam+0xb6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ec:	e018      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e015      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e00b      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 8002806:	bf00      	nop
 8002808:	e00a      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e008      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e006      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e004      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;   
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
    }
  } 
  
  return status; 
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06a      	b.n	8002918 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2223      	movs	r2, #35	@ 0x23
 8002850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe ff8d 	bl	8001774 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_ETH_Init+0xf0>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_ETH_Init+0xf0>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HAL_ETH_Init+0xf0>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002872:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <HAL_ETH_Init+0xf4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a2b      	ldr	r2, [pc, #172]	@ (8002924 <HAL_ETH_Init+0xf4>)
 8002878:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800287c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800287e:	4b29      	ldr	r3, [pc, #164]	@ (8002924 <HAL_ETH_Init+0xf4>)
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4927      	ldr	r1, [pc, #156]	@ (8002924 <HAL_ETH_Init+0xf4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_ETH_Init+0xf4>)
 800288e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a8:	f7ff fb96 	bl	8001fd8 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028ae:	e011      	b.n	80028d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028b0:	f7ff fb92 	bl	8001fd8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028be:	d909      	bls.n	80028d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2204      	movs	r2, #4
 80028c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	22e0      	movs	r2, #224	@ 0xe0
 80028cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e021      	b.n	8002918 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e4      	bne.n	80028b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f958 	bl	8002b9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f9ff 	bl	8002cf0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa55 	bl	8002da2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	461a      	mov	r2, r3
 80028fe:	2100      	movs	r1, #0
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f9bd 	bl	8002c80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2210      	movs	r2, #16
 8002912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	40013800 	.word	0x40013800

08002928 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4b51      	ldr	r3, [pc, #324]	@ (8002a84 <ETH_SetMACConfig+0x15c>)
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7c1b      	ldrb	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <ETH_SetMACConfig+0x28>
 800294a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800294e:	e000      	b.n	8002952 <ETH_SetMACConfig+0x2a>
 8002950:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	7c5b      	ldrb	r3, [r3, #17]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <ETH_SetMACConfig+0x38>
 800295a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800295e:	e000      	b.n	8002962 <ETH_SetMACConfig+0x3a>
 8002960:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002962:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002968:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	7fdb      	ldrb	r3, [r3, #31]
 800296e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002970:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	7f92      	ldrb	r2, [r2, #30]
 800297c:	2a00      	cmp	r2, #0
 800297e:	d102      	bne.n	8002986 <ETH_SetMACConfig+0x5e>
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	e000      	b.n	8002988 <ETH_SetMACConfig+0x60>
 8002986:	2200      	movs	r2, #0
                        macconf->Speed |
 8002988:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7f1b      	ldrb	r3, [r3, #28]
 800298e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002990:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002996:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800299e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d102      	bne.n	80029b0 <ETH_SetMACConfig+0x88>
 80029aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ae:	e000      	b.n	80029b2 <ETH_SetMACConfig+0x8a>
 80029b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	7bdb      	ldrb	r3, [r3, #15]
 80029b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029ca:	4313      	orrs	r3, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff fb04 	bl	8001ff0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80029fe:	4013      	ands	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d101      	bne.n	8002a16 <ETH_SetMACConfig+0xee>
 8002a12:	2280      	movs	r2, #128	@ 0x80
 8002a14:	e000      	b.n	8002a18 <ETH_SetMACConfig+0xf0>
 8002a16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a26:	2a01      	cmp	r2, #1
 8002a28:	d101      	bne.n	8002a2e <ETH_SetMACConfig+0x106>
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	e000      	b.n	8002a30 <ETH_SetMACConfig+0x108>
 8002a2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a38:	2a01      	cmp	r2, #1
 8002a3a:	d101      	bne.n	8002a40 <ETH_SetMACConfig+0x118>
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	e000      	b.n	8002a42 <ETH_SetMACConfig+0x11a>
 8002a40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002a4a:	2a01      	cmp	r2, #1
 8002a4c:	d101      	bne.n	8002a52 <ETH_SetMACConfig+0x12a>
 8002a4e:	2202      	movs	r2, #2
 8002a50:	e000      	b.n	8002a54 <ETH_SetMACConfig+0x12c>
 8002a52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a54:	4313      	orrs	r3, r2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff fabf 	bl	8001ff0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	619a      	str	r2, [r3, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	ff20810f 	.word	0xff20810f

08002a88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <ETH_SetDMAConfig+0x110>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <ETH_SetDMAConfig+0x2c>
 8002aae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ab2:	e000      	b.n	8002ab6 <ETH_SetDMAConfig+0x2e>
 8002ab4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7b5b      	ldrb	r3, [r3, #13]
 8002aba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002abc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	7f52      	ldrb	r2, [r2, #29]
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d102      	bne.n	8002acc <ETH_SetDMAConfig+0x44>
 8002ac6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002aca:	e000      	b.n	8002ace <ETH_SetDMAConfig+0x46>
 8002acc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ace:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	7b9b      	ldrb	r3, [r3, #14]
 8002ad4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ad6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002adc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7f1b      	ldrb	r3, [r3, #28]
 8002ae2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ae4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f9b      	ldrb	r3, [r3, #30]
 8002aea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002aec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002af2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002afa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7ff fa66 	bl	8001ff0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	791b      	ldrb	r3, [r3, #4]
 8002b36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff fa37 	bl	8001ff0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	f8de3f23 	.word	0xf8de3f23

08002b9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b0a6      	sub	sp, #152	@ 0x98
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe86 	bl	8002928 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c6c:	f107 0308 	add.w	r3, r7, #8
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ff08 	bl	8002a88 <ETH_SetDMAConfig>
}
 8002c78:	bf00      	nop
 8002c7a:	3798      	adds	r7, #152	@ 0x98
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3305      	adds	r3, #5
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	3204      	adds	r2, #4
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <ETH_MACAddressConfig+0x68>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3303      	adds	r3, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <ETH_MACAddressConfig+0x6c>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40028040 	.word	0x40028040
 8002cec:	40028044 	.word	0x40028044

08002cf0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e03e      	b.n	8002d7c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	3206      	adds	r2, #6
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d80c      	bhi.n	8002d60 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e004      	b.n	8002d6a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d9bd      	bls.n	8002cfe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d94:	611a      	str	r2, [r3, #16]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e046      	b.n	8002e3e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6919      	ldr	r1, [r3, #16]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002dec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002df4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	3212      	adds	r2, #18
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d80c      	bhi.n	8002e2e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6919      	ldr	r1, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e004      	b.n	8002e38 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d9b5      	bls.n	8002db0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6e:	60da      	str	r2, [r3, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e175      	b.n	8003188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 8164 	bne.w	8003182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_GPIO_Init+0x56>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d130      	bne.n	8002f34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0201 	and.w	r2, r3, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d017      	beq.n	8002f70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d123      	bne.n	8002fc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80be 	beq.w	8003182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	4a65      	ldr	r2, [pc, #404]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 800300c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003010:	6453      	str	r3, [r2, #68]	@ 0x44
 8003012:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800301e:	4a61      	ldr	r2, [pc, #388]	@ (80031a4 <HAL_GPIO_Init+0x328>)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3302      	adds	r3, #2
 8003026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	220f      	movs	r2, #15
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a58      	ldr	r2, [pc, #352]	@ (80031a8 <HAL_GPIO_Init+0x32c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d037      	beq.n	80030ba <HAL_GPIO_Init+0x23e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a57      	ldr	r2, [pc, #348]	@ (80031ac <HAL_GPIO_Init+0x330>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d031      	beq.n	80030b6 <HAL_GPIO_Init+0x23a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a56      	ldr	r2, [pc, #344]	@ (80031b0 <HAL_GPIO_Init+0x334>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d02b      	beq.n	80030b2 <HAL_GPIO_Init+0x236>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a55      	ldr	r2, [pc, #340]	@ (80031b4 <HAL_GPIO_Init+0x338>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d025      	beq.n	80030ae <HAL_GPIO_Init+0x232>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a54      	ldr	r2, [pc, #336]	@ (80031b8 <HAL_GPIO_Init+0x33c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a53      	ldr	r2, [pc, #332]	@ (80031bc <HAL_GPIO_Init+0x340>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0x22a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a52      	ldr	r2, [pc, #328]	@ (80031c0 <HAL_GPIO_Init+0x344>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x226>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a51      	ldr	r2, [pc, #324]	@ (80031c4 <HAL_GPIO_Init+0x348>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x222>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a50      	ldr	r2, [pc, #320]	@ (80031c8 <HAL_GPIO_Init+0x34c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x21e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4f      	ldr	r2, [pc, #316]	@ (80031cc <HAL_GPIO_Init+0x350>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x21a>
 8003092:	2309      	movs	r3, #9
 8003094:	e012      	b.n	80030bc <HAL_GPIO_Init+0x240>
 8003096:	230a      	movs	r3, #10
 8003098:	e010      	b.n	80030bc <HAL_GPIO_Init+0x240>
 800309a:	2308      	movs	r3, #8
 800309c:	e00e      	b.n	80030bc <HAL_GPIO_Init+0x240>
 800309e:	2307      	movs	r3, #7
 80030a0:	e00c      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030a2:	2306      	movs	r3, #6
 80030a4:	e00a      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030a6:	2305      	movs	r3, #5
 80030a8:	e008      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030ae:	2303      	movs	r3, #3
 80030b0:	e004      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030ba:	2300      	movs	r3, #0
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f002 0203 	and.w	r2, r2, #3
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	4093      	lsls	r3, r2
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030cc:	4935      	ldr	r1, [pc, #212]	@ (80031a4 <HAL_GPIO_Init+0x328>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030da:	4b3d      	ldr	r3, [pc, #244]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fe:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003104:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003128:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003152:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	f67f ae86 	bls.w	8002e9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40021400 	.word	0x40021400
 80031c0:	40021800 	.word	0x40021800
 80031c4:	40021c00 	.word	0x40021c00
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40022400 	.word	0x40022400
 80031d0:	40013c00 	.word	0x40013c00

080031d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
 80031e0:	4613      	mov	r3, r2
 80031e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e4:	787b      	ldrb	r3, [r7, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031f0:	e003      	b.n	80031fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	041a      	lsls	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	619a      	str	r2, [r3, #24]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fb58 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003258:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003268:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e006      	b.n	8003290 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800328e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d104      	bne.n	80032a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <HAL_I2C_Init+0x11c>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69d9      	ldr	r1, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	02008000 	.word	0x02008000

08003328 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	461a      	mov	r2, r3
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
 8003338:	4613      	mov	r3, r2
 800333a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	f040 80da 	bne.w	80034fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_I2C_Master_Transmit+0x30>
 8003354:	2302      	movs	r3, #2
 8003356:	e0d3      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003360:	f7fe fe3a 	bl	8001fd8 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2319      	movs	r3, #25
 800336c:	2201      	movs	r2, #1
 800336e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa00 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0be      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2221      	movs	r2, #33	@ 0x21
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2210      	movs	r2, #16
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	893a      	ldrh	r2, [r7, #8]
 80033a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2bff      	cmp	r3, #255	@ 0xff
 80033b2:	d90e      	bls.n	80033d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	22ff      	movs	r2, #255	@ 0xff
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	4b51      	ldr	r3, [pc, #324]	@ (8003508 <HAL_I2C_Master_Transmit+0x1e0>)
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fbea 	bl	8003ba4 <I2C_TransferConfig>
 80033d0:	e06c      	b.n	80034ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	8979      	ldrh	r1, [r7, #10]
 80033e4:	4b48      	ldr	r3, [pc, #288]	@ (8003508 <HAL_I2C_Master_Transmit+0x1e0>)
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbd9 	bl	8003ba4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033f2:	e05b      	b.n	80034ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f9fd 	bl	80037f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e07b      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d034      	beq.n	80034ac <HAL_I2C_Master_Transmit+0x184>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d130      	bne.n	80034ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f98f 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e04d      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2bff      	cmp	r3, #255	@ 0xff
 800346c:	d90e      	bls.n	800348c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	22ff      	movs	r2, #255	@ 0xff
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003478:	b2da      	uxtb	r2, r3
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	2300      	movs	r3, #0
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fb8d 	bl	8003ba4 <I2C_TransferConfig>
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fb7c 	bl	8003ba4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d19e      	bne.n	80033f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9dc 	bl	8003878 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e01a      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_I2C_Master_Transmit+0x1e4>)
 80034de:	400b      	ands	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	80002000 	.word	0x80002000
 800350c:	fe00e800 	.word	0xfe00e800

08003510 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
 8003520:	4613      	mov	r3, r2
 8003522:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b20      	cmp	r3, #32
 800352e:	f040 80db 	bne.w	80036e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_I2C_Master_Receive+0x30>
 800353c:	2302      	movs	r3, #2
 800353e:	e0d4      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003548:	f7fe fd46 	bl	8001fd8 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2319      	movs	r3, #25
 8003554:	2201      	movs	r2, #1
 8003556:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f90c 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0bf      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2222      	movs	r2, #34	@ 0x22
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2210      	movs	r2, #16
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2bff      	cmp	r3, #255	@ 0xff
 800359a:	d90e      	bls.n	80035ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	22ff      	movs	r2, #255	@ 0xff
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	4b52      	ldr	r3, [pc, #328]	@ (80036f4 <HAL_I2C_Master_Receive+0x1e4>)
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 faf6 	bl	8003ba4 <I2C_TransferConfig>
 80035b8:	e06d      	b.n	8003696 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	4b49      	ldr	r3, [pc, #292]	@ (80036f4 <HAL_I2C_Master_Receive+0x1e4>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fae5 	bl	8003ba4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035da:	e05c      	b.n	8003696 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	6a39      	ldr	r1, [r7, #32]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f985 	bl	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e07c      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d034      	beq.n	8003696 <HAL_I2C_Master_Receive+0x186>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d130      	bne.n	8003696 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f89a 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e04d      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	2bff      	cmp	r3, #255	@ 0xff
 8003656:	d90e      	bls.n	8003676 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	22ff      	movs	r2, #255	@ 0xff
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	b2da      	uxtb	r2, r3
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa98 	bl	8003ba4 <I2C_TransferConfig>
 8003674:	e00f      	b.n	8003696 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	b2da      	uxtb	r2, r3
 8003686:	8979      	ldrh	r1, [r7, #10]
 8003688:	2300      	movs	r3, #0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fa87 	bl	8003ba4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d19d      	bne.n	80035dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	6a39      	ldr	r1, [r7, #32]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f8e7 	bl	8003878 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01a      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2220      	movs	r2, #32
 80036ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_I2C_Master_Receive+0x1e8>)
 80036c8:	400b      	ands	r3, r1
 80036ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	80002400 	.word	0x80002400
 80036f8:	fe00e800 	.word	0xfe00e800

080036fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370a:	b2db      	uxtb	r3, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d103      	bne.n	800374e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d007      	beq.n	800376c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	619a      	str	r2, [r3, #24]
  }
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	e022      	b.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d01e      	beq.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fc21 	bl	8001fd8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d113      	bne.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e00f      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d0cd      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003804:	e02c      	b.n	8003860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8ea 	bl	80039e4 <I2C_IsErrorOccurred>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e02a      	b.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d01e      	beq.n	8003860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fbd9 	bl	8001fd8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d1cb      	bne.n	8003806 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003884:	e028      	b.n	80038d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8aa 	bl	80039e4 <I2C_IsErrorOccurred>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e026      	b.n	80038e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fb9d 	bl	8001fd8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d113      	bne.n	80038d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e007      	b.n	80038e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d1cf      	bne.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fc:	e064      	b.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f86e 	bl	80039e4 <I2C_IsErrorOccurred>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e062      	b.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d138      	bne.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d105      	bne.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e04e      	b.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b10      	cmp	r3, #16
 8003946:	d107      	bne.n	8003958 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2204      	movs	r2, #4
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
 8003956:	e002      	b.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003972:	400b      	ands	r3, r1
 8003974:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e022      	b.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fb21 	bl	8001fd8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10f      	bne.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d193      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	fe00e800 	.word	0xfe00e800

080039e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	@ 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d068      	beq.n	8003ae2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a18:	e049      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d045      	beq.n	8003aae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fad9 	bl	8001fd8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_IsErrorOccurred+0x54>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d13a      	bne.n	8003aae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5a:	d121      	bne.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a62:	d01d      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d01a      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a7a:	f7fe faad 	bl	8001fd8 <HAL_GetTick>
 8003a7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a80:	e00e      	b.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a82:	f7fe faa9 	bl	8001fd8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b19      	cmp	r3, #25
 8003a8e:	d907      	bls.n	8003aa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a9e:	e006      	b.n	8003aae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d1e9      	bne.n	8003a82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d003      	beq.n	8003ac4 <I2C_IsErrorOccurred+0xe0>
 8003abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0aa      	beq.n	8003a1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00b      	beq.n	8003b0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fde9 	bl	8003730 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <I2C_IsErrorOccurred+0x1bc>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	@ 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	fe00e800 	.word	0xfe00e800

08003ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	817b      	strh	r3, [r7, #10]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bbc:	7a7b      	ldrb	r3, [r7, #9]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	0d5b      	lsrs	r3, r3, #21
 8003bde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003be2:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <I2C_TransferConfig+0x60>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	43db      	mvns	r3, r3
 8003be8:	ea02 0103 	and.w	r1, r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	03ff63ff 	.word	0x03ff63ff

08003c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d138      	bne.n	8003c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e032      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	@ 0x24
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d139      	bne.n	8003d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e033      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2224      	movs	r2, #36	@ 0x24
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d38:	b08f      	sub	sp, #60	@ 0x3c
 8003d3a:	af0a      	add	r7, sp, #40	@ 0x28
 8003d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e116      	b.n	8003f76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd ff30 	bl	8001bc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 f88e 	bl	8005ea8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	687e      	ldr	r6, [r7, #4]
 8003d94:	466d      	mov	r5, sp
 8003d96:	f106 0410 	add.w	r4, r6, #16
 8003d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003daa:	1d33      	adds	r3, r6, #4
 8003dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f002 f822 	bl	8005df8 <USB_CoreInit>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0d7      	b.n	8003f76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 f87c 	bl	8005eca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e04a      	b.n	8003e6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	333d      	adds	r3, #61	@ 0x3d
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	333c      	adds	r3, #60	@ 0x3c
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	b298      	uxth	r0, r3
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	3344      	adds	r3, #68	@ 0x44
 8003e14:	4602      	mov	r2, r0
 8003e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3340      	adds	r3, #64	@ 0x40
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3348      	adds	r3, #72	@ 0x48
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334c      	adds	r3, #76	@ 0x4c
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3354      	adds	r3, #84	@ 0x54
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d3af      	bcc.n	8003dd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e044      	b.n	8003f08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed6:	7bfa      	ldrb	r2, [r7, #15]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3301      	adds	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3b5      	bcc.n	8003e7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	687e      	ldr	r6, [r7, #4]
 8003f1a:	466d      	mov	r5, sp
 8003f1c:	f106 0410 	add.w	r4, r6, #16
 8003f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f30:	1d33      	adds	r3, r6, #4
 8003f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f34:	6838      	ldr	r0, [r7, #0]
 8003f36:	f002 f815 	bl	8005f64 <USB_DevInit>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e014      	b.n	8003f76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f80b 	bl	8003f80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f002 f9d3 	bl	800631a <USB_DevDisconnect>

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fae:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	10000003 	.word	0x10000003

08003fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x98>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800400a:	4b1e      	ldr	r3, [pc, #120]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004016:	f7fd ffdf 	bl	8001fd8 <HAL_GetTick>
 800401a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800401c:	e009      	b.n	8004032 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800401e:	f7fd ffdb 	bl	8001fd8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800402c:	d901      	bls.n	8004032 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e022      	b.n	8004078 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004032:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403e:	d1ee      	bne.n	800401e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800404a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800404c:	f7fd ffc4 	bl	8001fd8 <HAL_GetTick>
 8004050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004052:	e009      	b.n	8004068 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004054:	f7fd ffc0 	bl	8001fd8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004062:	d901      	bls.n	8004068 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e007      	b.n	8004078 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004068:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_PWREx_EnableOverDrive+0x9c>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004074:	d1ee      	bne.n	8004054 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000

08004088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004090:	2300      	movs	r3, #0
 8004092:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e29b      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8087 	beq.w	80041ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ac:	4b96      	ldr	r3, [pc, #600]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d00c      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b8:	4b93      	ldr	r3, [pc, #588]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d112      	bne.n	80040ea <HAL_RCC_OscConfig+0x62>
 80040c4:	4b90      	ldr	r3, [pc, #576]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d0:	d10b      	bne.n	80040ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d06c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x130>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d168      	bne.n	80041b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e275      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x7a>
 80040f4:	4b84      	ldr	r3, [pc, #528]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a83      	ldr	r2, [pc, #524]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e02e      	b.n	8004160 <HAL_RCC_OscConfig+0xd8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x9c>
 800410a:	4b7f      	ldr	r3, [pc, #508]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7e      	ldr	r2, [pc, #504]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7b      	ldr	r2, [pc, #492]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800411c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xd8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0xc0>
 800412e:	4b76      	ldr	r3, [pc, #472]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b73      	ldr	r3, [pc, #460]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xd8>
 8004148:	4b6f      	ldr	r3, [pc, #444]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6e      	ldr	r2, [pc, #440]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd ff36 	bl	8001fd8 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd ff32 	bl	8001fd8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e229      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xe8>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd ff22 	bl	8001fd8 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd ff1e 	bl	8001fd8 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e215      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x110>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d069      	beq.n	800429a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	4b50      	ldr	r3, [pc, #320]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d11c      	bne.n	8004218 <HAL_RCC_OscConfig+0x190>
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x17a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1e9      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	493d      	ldr	r1, [pc, #244]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	e040      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a38      	ldr	r2, [pc, #224]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fed4 	bl	8001fd8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fd fed0 	bl	8001fd8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1c7      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b30      	ldr	r3, [pc, #192]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4929      	ldr	r1, [pc, #164]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
 8004266:	e018      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004268:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a26      	ldr	r2, [pc, #152]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd feb0 	bl	8001fd8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fd feac 	bl	8001fd8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1a3      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d038      	beq.n	8004318 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d019      	beq.n	80042e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ae:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fd fe8d 	bl	8001fd8 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c2:	f7fd fe89 	bl	8001fd8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e180      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x23a>
 80042e0:	e01a      	b.n	8004318 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e2:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <HAL_RCC_OscConfig+0x280>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fd fe73 	bl	8001fd8 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fd fe6f 	bl	8001fd8 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d903      	bls.n	800430c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e166      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
 8004308:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b92      	ldr	r3, [pc, #584]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a4 	beq.w	800446e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b8c      	ldr	r3, [pc, #560]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	4b89      	ldr	r3, [pc, #548]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	4a88      	ldr	r2, [pc, #544]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	@ 0x40
 800433e:	4b86      	ldr	r3, [pc, #536]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434e:	4b83      	ldr	r3, [pc, #524]	@ (800455c <HAL_RCC_OscConfig+0x4d4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d118      	bne.n	800438c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800435a:	4b80      	ldr	r3, [pc, #512]	@ (800455c <HAL_RCC_OscConfig+0x4d4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7f      	ldr	r2, [pc, #508]	@ (800455c <HAL_RCC_OscConfig+0x4d4>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004366:	f7fd fe37 	bl	8001fd8 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fd fe33 	bl	8001fd8 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	@ 0x64
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e12a      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004380:	4b76      	ldr	r3, [pc, #472]	@ (800455c <HAL_RCC_OscConfig+0x4d4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x31a>
 8004394:	4b70      	ldr	r3, [pc, #448]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004398:	4a6f      	ldr	r2, [pc, #444]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a0:	e02d      	b.n	80043fe <HAL_RCC_OscConfig+0x376>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x33c>
 80043aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b6:	4b68      	ldr	r3, [pc, #416]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a67      	ldr	r2, [pc, #412]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c2:	e01c      	b.n	80043fe <HAL_RCC_OscConfig+0x376>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d10c      	bne.n	80043e6 <HAL_RCC_OscConfig+0x35e>
 80043cc:	4b62      	ldr	r3, [pc, #392]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d0:	4a61      	ldr	r2, [pc, #388]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043d2:	f043 0304 	orr.w	r3, r3, #4
 80043d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e4:	e00b      	b.n	80043fe <HAL_RCC_OscConfig+0x376>
 80043e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f2:	4b59      	ldr	r3, [pc, #356]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a58      	ldr	r2, [pc, #352]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fd fde7 	bl	8001fd8 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd fde3 	bl	8001fd8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e0d8      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	4b4c      	ldr	r3, [pc, #304]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ee      	beq.n	800440e <HAL_RCC_OscConfig+0x386>
 8004430:	e014      	b.n	800445c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fdd1 	bl	8001fd8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fd fdcd 	bl	8001fd8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0c2      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	4b41      	ldr	r3, [pc, #260]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ee      	bne.n	800443a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004462:	4b3d      	ldr	r3, [pc, #244]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	4a3c      	ldr	r2, [pc, #240]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80ae 	beq.w	80045d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004478:	4b37      	ldr	r3, [pc, #220]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d06d      	beq.n	8004560 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d14b      	bne.n	8004524 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448c:	4b32      	ldr	r3, [pc, #200]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a31      	ldr	r2, [pc, #196]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fd9e 	bl	8001fd8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd fd9a 	bl	8001fd8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e091      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	3b01      	subs	r3, #1
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	491b      	ldr	r1, [pc, #108]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a18      	ldr	r2, [pc, #96]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fd6c 	bl	8001fd8 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fd fd68 	bl	8001fd8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e05f      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x47c>
 8004522:	e057      	b.n	80045d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd fd52 	bl	8001fd8 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fd fd4e 	bl	8001fd8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e045      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_RCC_OscConfig+0x4d0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x4b0>
 8004556:	e03d      	b.n	80045d4 <HAL_RCC_OscConfig+0x54c>
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004560:	4b1f      	ldr	r3, [pc, #124]	@ (80045e0 <HAL_RCC_OscConfig+0x558>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d030      	beq.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d129      	bne.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d122      	bne.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004596:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004598:	4293      	cmp	r3, r2
 800459a:	d119      	bne.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	3b01      	subs	r3, #1
 80045aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d10f      	bne.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800

080045e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0d0      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b6a      	ldr	r3, [pc, #424]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b67      	ldr	r3, [pc, #412]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 020f 	bic.w	r2, r3, #15
 8004612:	4965      	ldr	r1, [pc, #404]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b8      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 800464a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800464e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a52      	ldr	r2, [pc, #328]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	494d      	ldr	r1, [pc, #308]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d040      	beq.n	8004708 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d115      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e07f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a6:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e073      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06b      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c6:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4936      	ldr	r1, [pc, #216]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d8:	f7fd fc7e 	bl	8001fd8 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fd fc7a 	bl	8001fd8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e053      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 020c 	and.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	429a      	cmp	r2, r3
 8004706:	d1eb      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d210      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	4922      	ldr	r1, [pc, #136]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4916      	ldr	r1, [pc, #88]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f821 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490a      	ldr	r1, [pc, #40]	@ (80047b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd fbda 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00
 80047ac:	40023800 	.word	0x40023800
 80047b0:	08009310 	.word	0x08009310
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	20000010 	.word	0x20000010

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b094      	sub	sp, #80	@ 0x50
 80047c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c8:	2300      	movs	r3, #0
 80047ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047cc:	2300      	movs	r3, #0
 80047ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d4:	4b79      	ldr	r3, [pc, #484]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d00d      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x40>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	f200 80e1 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ee:	e0db      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f4:	e0db      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f6:	4b73      	ldr	r3, [pc, #460]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80047f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047fa:	e0d8      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fc:	4b6f      	ldr	r3, [pc, #444]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004804:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004806:	4b6d      	ldr	r3, [pc, #436]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d063      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	2200      	movs	r2, #0
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800481c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
 800482a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4621      	mov	r1, r4
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	6139      	str	r1, [r7, #16]
 800484c:	4629      	mov	r1, r5
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	ebb2 0801 	subs.w	r8, r2, r1
 8004874:	4659      	mov	r1, fp
 8004876:	eb63 0901 	sbc.w	r9, r3, r1
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488e:	4690      	mov	r8, r2
 8004890:	4699      	mov	r9, r3
 8004892:	4623      	mov	r3, r4
 8004894:	eb18 0303 	adds.w	r3, r8, r3
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	462b      	mov	r3, r5
 800489c:	eb49 0303 	adc.w	r3, r9, r3
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ae:	4629      	mov	r1, r5
 80048b0:	024b      	lsls	r3, r1, #9
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b8:	4621      	mov	r1, r4
 80048ba:	024a      	lsls	r2, r1, #9
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	2200      	movs	r2, #0
 80048c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048cc:	f7fb fd10 	bl	80002f0 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	e058      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	4611      	mov	r1, r2
 80048e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	2300      	movs	r3, #0
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	f04f 0000 	mov.w	r0, #0
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	0159      	lsls	r1, r3, #5
 8004902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004906:	0150      	lsls	r0, r2, #5
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4641      	mov	r1, r8
 800490e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004912:	4649      	mov	r1, r9
 8004914:	eb63 0b01 	sbc.w	fp, r3, r1
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800492c:	ebb2 040a 	subs.w	r4, r2, sl
 8004930:	eb63 050b 	sbc.w	r5, r3, fp
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	00eb      	lsls	r3, r5, #3
 800493e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004942:	00e2      	lsls	r2, r4, #3
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
 8004948:	4643      	mov	r3, r8
 800494a:	18e3      	adds	r3, r4, r3
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	464b      	mov	r3, r9
 8004950:	eb45 0303 	adc.w	r3, r5, r3
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004962:	4629      	mov	r1, r5
 8004964:	028b      	lsls	r3, r1, #10
 8004966:	4621      	mov	r1, r4
 8004968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496c:	4621      	mov	r1, r4
 800496e:	028a      	lsls	r2, r1, #10
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004976:	2200      	movs	r2, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	f7fb fcb6 	bl	80002f0 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800499c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3750      	adds	r7, #80	@ 0x50
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049f0:	4b69      	ldr	r3, [pc, #420]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a68      	ldr	r2, [pc, #416]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	4964      	ldr	r1, [pc, #400]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a22:	4b5d      	ldr	r3, [pc, #372]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	4959      	ldr	r1, [pc, #356]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a40:	d101      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	494a      	ldr	r1, [pc, #296]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 808b 	beq.w	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b3a      	ldr	r3, [pc, #232]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	4a39      	ldr	r2, [pc, #228]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab8:	4b37      	ldr	r3, [pc, #220]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fd fa82 	bl	8001fd8 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fd fa7e 	bl	8001fd8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e38f      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af6:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d035      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d02e      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b14:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b36:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b3c:	4b16      	ldr	r3, [pc, #88]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d114      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fa46 	bl	8001fd8 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fd fa42 	bl	8001fd8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e351      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7e:	d111      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	4901      	ldr	r1, [pc, #4]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	0ffffcff 	.word	0x0ffffcff
 8004ba4:	4bac      	ldr	r3, [pc, #688]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4aab      	ldr	r2, [pc, #684]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004baa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bae:	6093      	str	r3, [r2, #8]
 8004bb0:	4ba9      	ldr	r3, [pc, #676]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	49a6      	ldr	r1, [pc, #664]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bce:	4ba2      	ldr	r3, [pc, #648]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd4:	4aa0      	ldr	r2, [pc, #640]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bde:	4b9e      	ldr	r3, [pc, #632]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	499b      	ldr	r1, [pc, #620]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bfc:	4b96      	ldr	r3, [pc, #600]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0a:	4993      	ldr	r1, [pc, #588]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c2c:	498a      	ldr	r1, [pc, #552]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c40:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	4982      	ldr	r1, [pc, #520]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c62:	4b7d      	ldr	r3, [pc, #500]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	4979      	ldr	r1, [pc, #484]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c84:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c92:	4971      	ldr	r1, [pc, #452]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cac:	f023 020c 	bic.w	r2, r3, #12
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	4968      	ldr	r1, [pc, #416]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc8:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	4960      	ldr	r1, [pc, #384]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cea:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	4957      	ldr	r1, [pc, #348]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d0c:	4b52      	ldr	r3, [pc, #328]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	494f      	ldr	r1, [pc, #316]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4946      	ldr	r1, [pc, #280]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d50:	4b41      	ldr	r3, [pc, #260]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	493e      	ldr	r1, [pc, #248]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d72:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	4935      	ldr	r1, [pc, #212]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d94:	4b30      	ldr	r3, [pc, #192]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da2:	492d      	ldr	r1, [pc, #180]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004db6:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc4:	4924      	ldr	r1, [pc, #144]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df6:	4b18      	ldr	r3, [pc, #96]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e04:	4914      	ldr	r1, [pc, #80]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e28:	490b      	ldr	r1, [pc, #44]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4c:	4902      	ldr	r1, [pc, #8]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e68:	4b8a      	ldr	r3, [pc, #552]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	4986      	ldr	r1, [pc, #536]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e8c:	4b81      	ldr	r3, [pc, #516]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	497d      	ldr	r1, [pc, #500]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80d6 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb8:	4b76      	ldr	r3, [pc, #472]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a75      	ldr	r2, [pc, #468]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd f888 	bl	8001fd8 <HAL_GetTick>
 8004ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ecc:	f7fd f884 	bl	8001fd8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	@ 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e195      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ede:	4b6d      	ldr	r3, [pc, #436]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d021      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004efe:	4b65      	ldr	r3, [pc, #404]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f0c:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f12:	0e1b      	lsrs	r3, r3, #24
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	019a      	lsls	r2, r3, #6
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	071b      	lsls	r3, r3, #28
 8004f32:	4958      	ldr	r1, [pc, #352]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02e      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f64:	d129      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f66:	4b4b      	ldr	r3, [pc, #300]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f74:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7a:	0f1b      	lsrs	r3, r3, #28
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	019a      	lsls	r2, r3, #6
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	493e      	ldr	r1, [pc, #248]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa8:	f023 021f 	bic.w	r2, r3, #31
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4938      	ldr	r1, [pc, #224]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01d      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc6:	4b33      	ldr	r3, [pc, #204]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fda:	0f1b      	lsrs	r3, r3, #28
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	019a      	lsls	r2, r3, #6
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	4926      	ldr	r1, [pc, #152]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	019a      	lsls	r2, r3, #6
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	491a      	ldr	r1, [pc, #104]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005032:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005038:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc ffcb 	bl	8001fd8 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005046:	f7fc ffc7 	bl	8001fd8 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b64      	cmp	r3, #100	@ 0x64
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0d8      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b01      	cmp	r3, #1
 8005068:	f040 80ce 	bne.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800506c:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a08      	ldr	r2, [pc, #32]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fc ffae 	bl	8001fd8 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800507e:	e00b      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005080:	f7fc ffaa 	bl	8001fd8 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d904      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0bb      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005098:	4b5e      	ldr	r3, [pc, #376]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a4:	d0ec      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d02e      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d12a      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ce:	4b51      	ldr	r3, [pc, #324]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4944      	ldr	r1, [pc, #272]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800510a:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005110:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	493d      	ldr	r1, [pc, #244]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005138:	d11d      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005148:	4b32      	ldr	r3, [pc, #200]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514e:	0f1b      	lsrs	r3, r3, #28
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	019a      	lsls	r2, r3, #6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	4929      	ldr	r1, [pc, #164]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005182:	4b24      	ldr	r3, [pc, #144]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	0e1b      	lsrs	r3, r3, #24
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005190:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	019a      	lsls	r2, r3, #6
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	071b      	lsls	r3, r3, #28
 80051b6:	4917      	ldr	r1, [pc, #92]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	4911      	ldr	r1, [pc, #68]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e0:	f7fc fefa 	bl	8001fd8 <HAL_GetTick>
 80051e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e8:	f7fc fef6 	bl	8001fd8 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e007      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005206:	d1ef      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800

08005218 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	@ 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	613b      	str	r3, [r7, #16]
  return result;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2103      	movs	r1, #3
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	401a      	ands	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	61bb      	str	r3, [r7, #24]
  return result;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	@ 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	43db      	mvns	r3, r3
 800528a:	401a      	ands	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b089      	sub	sp, #36	@ 0x24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	613b      	str	r3, [r7, #16]
  return result;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	2103      	movs	r1, #3
 80052ce:	fa01 f303 	lsl.w	r3, r1, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	401a      	ands	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa93 f3a3 	rbit	r3, r3
 80052e0:	61bb      	str	r3, [r7, #24]
  return result;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	fab3 f383 	clz	r3, r3
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80052f8:	bf00      	nop
 80052fa:	3724      	adds	r7, #36	@ 0x24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005304:	b480      	push	{r7}
 8005306:	b089      	sub	sp, #36	@ 0x24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	613b      	str	r3, [r7, #16]
  return result;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2103      	movs	r1, #3
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	61bb      	str	r3, [r7, #24]
  return result;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	60da      	str	r2, [r3, #12]
}
 8005356:	bf00      	nop
 8005358:	3724      	adds	r7, #36	@ 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005362:	b480      	push	{r7}
 8005364:	b089      	sub	sp, #36	@ 0x24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	fa93 f3a3 	rbit	r3, r3
 800537c:	613b      	str	r3, [r7, #16]
  return result;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	210f      	movs	r1, #15
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	401a      	ands	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	fa93 f3a3 	rbit	r3, r3
 800539c:	61bb      	str	r3, [r7, #24]
  return result;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	fab3 f383 	clz	r3, r3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80053b4:	bf00      	nop
 80053b6:	3724      	adds	r7, #36	@ 0x24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	613b      	str	r3, [r7, #16]
  return result;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	fab3 f383 	clz	r3, r3
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	210f      	movs	r1, #15
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	401a      	ands	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0a1b      	lsrs	r3, r3, #8
 80053f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	61bb      	str	r3, [r7, #24]
  return result;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005416:	bf00      	nop
 8005418:	3724      	adds	r7, #36	@ 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b088      	sub	sp, #32
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	fa93 f3a3 	rbit	r3, r3
 8005440:	613b      	str	r3, [r7, #16]
  return result;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	fab3 f383 	clz	r3, r3
 8005448:	b2db      	uxtb	r3, r3
 800544a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800544c:	e051      	b.n	80054f2 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d043      	beq.n	80054ec <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d003      	beq.n	8005474 <LL_GPIO_Init+0x52>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d10e      	bne.n	8005492 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	461a      	mov	r2, r3
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff ff12 	bl	80052a6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fef2 	bl	8005276 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	461a      	mov	r2, r3
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff32 	bl	8005304 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d11a      	bne.n	80054de <LL_GPIO_Init+0xbc>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	60bb      	str	r3, [r7, #8]
  return result;
 80054b4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b07      	cmp	r3, #7
 80054be:	d807      	bhi.n	80054d0 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	461a      	mov	r2, r3
 80054c6:	69b9      	ldr	r1, [r7, #24]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff4a 	bl	8005362 <LL_GPIO_SetAFPin_0_7>
 80054ce:	e006      	b.n	80054de <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	461a      	mov	r2, r3
 80054d6:	69b9      	ldr	r1, [r7, #24]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff71 	bl	80053c0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	461a      	mov	r2, r3
 80054e4:	69b9      	ldr	r1, [r7, #24]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fe96 	bl	8005218 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1a6      	bne.n	800544e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <LL_RCC_HSI_IsReady+0x20>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40023800 	.word	0x40023800

08005530 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <LL_RCC_LSE_IsReady+0x20>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
}
 8005546:	4618      	mov	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	40023800 	.word	0x40023800

08005554 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <LL_RCC_GetSysClkSource+0x18>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800

08005570 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005574:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <LL_RCC_GetAHBPrescaler+0x18>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800

0800558c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800

080055a8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055ac:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800

080055c4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80055cc:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <LL_RCC_GetUSARTClockSource+0x24>)
 80055ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	401a      	ands	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	4313      	orrs	r3, r2
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40023800 	.word	0x40023800

080055ec <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <LL_RCC_GetUARTClockSource+0x24>)
 80055f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	401a      	ands	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	4313      	orrs	r3, r2
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40023800 	.word	0x40023800

08005614 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <LL_RCC_PLL_GetMainSource+0x18>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800

08005630 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <LL_RCC_PLL_GetN+0x18>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40023800 	.word	0x40023800

0800564c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005650:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <LL_RCC_PLL_GetP+0x18>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800

08005668 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800566c:	4b04      	ldr	r3, [pc, #16]	@ (8005680 <LL_RCC_PLL_GetDivider+0x18>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800

08005684 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d133      	bne.n	80056fe <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ff94 	bl	80055c4 <LL_RCC_GetUSARTClockSource>
 800569c:	4603      	mov	r3, r0
 800569e:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 80056a2:	d016      	beq.n	80056d2 <LL_RCC_GetUSARTClockFreq+0x4e>
 80056a4:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 80056a8:	d81d      	bhi.n	80056e6 <LL_RCC_GetUSARTClockFreq+0x62>
 80056aa:	4a70      	ldr	r2, [pc, #448]	@ (800586c <LL_RCC_GetUSARTClockFreq+0x1e8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <LL_RCC_GetUSARTClockFreq+0x34>
 80056b0:	4a6f      	ldr	r2, [pc, #444]	@ (8005870 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <LL_RCC_GetUSARTClockFreq+0x3c>
 80056b6:	e016      	b.n	80056e6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80056b8:	f000 f9f2 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80056bc:	60f8      	str	r0, [r7, #12]
        break;
 80056be:	e0cf      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80056c0:	f7ff ff24 	bl	800550c <LL_RCC_HSI_IsReady>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80bb 	beq.w	8005842 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 80056cc:	4b69      	ldr	r3, [pc, #420]	@ (8005874 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80056ce:	60fb      	str	r3, [r7, #12]
        }
        break;
 80056d0:	e0b7      	b.n	8005842 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80056d2:	f7ff ff2d 	bl	8005530 <LL_RCC_LSE_IsReady>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80b4 	beq.w	8005846 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80056e4:	e0af      	b.n	8005846 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80056e6:	f000 f9db 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f9ff 	bl	8005af0 <RCC_GetHCLKClockFreq>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fa25 	bl	8005b44 <RCC_GetPCLK2ClockFreq>
 80056fa:	60f8      	str	r0, [r7, #12]
        break;
 80056fc:	e0b0      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d133      	bne.n	800576c <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff5d 	bl	80055c4 <LL_RCC_GetUSARTClockSource>
 800570a:	4603      	mov	r3, r0
 800570c:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005710:	d016      	beq.n	8005740 <LL_RCC_GetUSARTClockFreq+0xbc>
 8005712:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005716:	d81d      	bhi.n	8005754 <LL_RCC_GetUSARTClockFreq+0xd0>
 8005718:	4a57      	ldr	r2, [pc, #348]	@ (8005878 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <LL_RCC_GetUSARTClockFreq+0xa2>
 800571e:	4a57      	ldr	r2, [pc, #348]	@ (800587c <LL_RCC_GetUSARTClockFreq+0x1f8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <LL_RCC_GetUSARTClockFreq+0xaa>
 8005724:	e016      	b.n	8005754 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005726:	f000 f9bb 	bl	8005aa0 <RCC_GetSystemClockFreq>
 800572a:	60f8      	str	r0, [r7, #12]
        break;
 800572c:	e098      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800572e:	f7ff feed 	bl	800550c <LL_RCC_HSI_IsReady>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8088 	beq.w	800584a <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 800573a:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800573c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800573e:	e084      	b.n	800584a <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005740:	f7ff fef6 	bl	8005530 <LL_RCC_LSE_IsReady>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8081 	beq.w	800584e <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 800574c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005750:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005752:	e07c      	b.n	800584e <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005754:	f000 f9a4 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005758:	4603      	mov	r3, r0
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f9c8 	bl	8005af0 <RCC_GetHCLKClockFreq>
 8005760:	4603      	mov	r3, r0
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f9da 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 8005768:	60f8      	str	r0, [r7, #12]
        break;
 800576a:	e079      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005772:	d131      	bne.n	80057d8 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff25 	bl	80055c4 <LL_RCC_GetUSARTClockSource>
 800577a:	4603      	mov	r3, r0
 800577c:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005780:	d015      	beq.n	80057ae <LL_RCC_GetUSARTClockFreq+0x12a>
 8005782:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005786:	d81b      	bhi.n	80057c0 <LL_RCC_GetUSARTClockFreq+0x13c>
 8005788:	4a3d      	ldr	r2, [pc, #244]	@ (8005880 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <LL_RCC_GetUSARTClockFreq+0x112>
 800578e:	4a3d      	ldr	r2, [pc, #244]	@ (8005884 <LL_RCC_GetUSARTClockFreq+0x200>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <LL_RCC_GetUSARTClockFreq+0x11a>
 8005794:	e014      	b.n	80057c0 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005796:	f000 f983 	bl	8005aa0 <RCC_GetSystemClockFreq>
 800579a:	60f8      	str	r0, [r7, #12]
        break;
 800579c:	e060      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800579e:	f7ff feb5 	bl	800550c <LL_RCC_HSI_IsReady>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d054      	beq.n	8005852 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 80057a8:	4b32      	ldr	r3, [pc, #200]	@ (8005874 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80057aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80057ac:	e051      	b.n	8005852 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80057ae:	f7ff febf 	bl	8005530 <LL_RCC_LSE_IsReady>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d04e      	beq.n	8005856 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 80057b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057bc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80057be:	e04a      	b.n	8005856 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80057c0:	f000 f96e 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f992 	bl	8005af0 <RCC_GetHCLKClockFreq>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9b8 	bl	8005b44 <RCC_GetPCLK2ClockFreq>
 80057d4:	60f8      	str	r0, [r7, #12]
        break;
 80057d6:	e043      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b30      	cmp	r3, #48	@ 0x30
 80057dc:	d140      	bne.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fef0 	bl	80055c4 <LL_RCC_GetUSARTClockSource>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80057ea:	d015      	beq.n	8005818 <LL_RCC_GetUSARTClockFreq+0x194>
 80057ec:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80057f0:	d81b      	bhi.n	800582a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80057f2:	4a25      	ldr	r2, [pc, #148]	@ (8005888 <LL_RCC_GetUSARTClockFreq+0x204>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <LL_RCC_GetUSARTClockFreq+0x17c>
 80057f8:	4a24      	ldr	r2, [pc, #144]	@ (800588c <LL_RCC_GetUSARTClockFreq+0x208>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <LL_RCC_GetUSARTClockFreq+0x184>
 80057fe:	e014      	b.n	800582a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005800:	f000 f94e 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005804:	60f8      	str	r0, [r7, #12]
          break;
 8005806:	e02b      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005808:	f7ff fe80 	bl	800550c <LL_RCC_HSI_IsReady>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d023      	beq.n	800585a <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 8005812:	4b18      	ldr	r3, [pc, #96]	@ (8005874 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005814:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005816:	e020      	b.n	800585a <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005818:	f7ff fe8a 	bl	8005530 <LL_RCC_LSE_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01d      	beq.n	800585e <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 8005822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005826:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005828:	e019      	b.n	800585e <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800582a:	f000 f939 	bl	8005aa0 <RCC_GetSystemClockFreq>
 800582e:	4603      	mov	r3, r0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f95d 	bl	8005af0 <RCC_GetHCLKClockFreq>
 8005836:	4603      	mov	r3, r0
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f96f 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 800583e:	60f8      	str	r0, [r7, #12]
          break;
 8005840:	e00e      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005842:	bf00      	nop
 8005844:	e00c      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005846:	bf00      	nop
 8005848:	e00a      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800584a:	bf00      	nop
 800584c:	e008      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800584e:	bf00      	nop
 8005850:	e006      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005852:	bf00      	nop
 8005854:	e004      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800585e:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 8005860:	68fb      	ldr	r3, [r7, #12]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	00030001 	.word	0x00030001
 8005870:	00030002 	.word	0x00030002
 8005874:	00f42400 	.word	0x00f42400
 8005878:	000c0004 	.word	0x000c0004
 800587c:	000c0008 	.word	0x000c0008
 8005880:	0c000400 	.word	0x0c000400
 8005884:	0c000800 	.word	0x0c000800
 8005888:	00300010 	.word	0x00300010
 800588c:	00300020 	.word	0x00300020

08005890 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2bc0      	cmp	r3, #192	@ 0xc0
 80058a0:	d133      	bne.n	800590a <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fea2 	bl	80055ec <LL_RCC_GetUARTClockSource>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80058ae:	d016      	beq.n	80058de <LL_RCC_GetUARTClockFreq+0x4e>
 80058b0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80058b4:	d81d      	bhi.n	80058f2 <LL_RCC_GetUARTClockFreq+0x62>
 80058b6:	4a71      	ldr	r2, [pc, #452]	@ (8005a7c <LL_RCC_GetUARTClockFreq+0x1ec>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <LL_RCC_GetUARTClockFreq+0x34>
 80058bc:	4a70      	ldr	r2, [pc, #448]	@ (8005a80 <LL_RCC_GetUARTClockFreq+0x1f0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <LL_RCC_GetUARTClockFreq+0x3c>
 80058c2:	e016      	b.n	80058f2 <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80058c4:	f000 f8ec 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80058c8:	60f8      	str	r0, [r7, #12]
        break;
 80058ca:	e0d1      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80058cc:	f7ff fe1e 	bl	800550c <LL_RCC_HSI_IsReady>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80bd 	beq.w	8005a52 <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 80058d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a84 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80058da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80058dc:	e0b9      	b.n	8005a52 <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80058de:	f7ff fe27 	bl	8005530 <LL_RCC_LSE_IsReady>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80b6 	beq.w	8005a56 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80058f0:	e0b1      	b.n	8005a56 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80058f2:	f000 f8d5 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f8f9 	bl	8005af0 <RCC_GetHCLKClockFreq>
 80058fe:	4603      	mov	r3, r0
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f90b 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 8005906:	60f8      	str	r0, [r7, #12]
        break;
 8005908:	e0b2      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005910:	d133      	bne.n	800597a <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fe6a 	bl	80055ec <LL_RCC_GetUARTClockSource>
 8005918:	4603      	mov	r3, r0
 800591a:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800591e:	d016      	beq.n	800594e <LL_RCC_GetUARTClockFreq+0xbe>
 8005920:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005924:	d81d      	bhi.n	8005962 <LL_RCC_GetUARTClockFreq+0xd2>
 8005926:	4a58      	ldr	r2, [pc, #352]	@ (8005a88 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <LL_RCC_GetUARTClockFreq+0xa4>
 800592c:	4a57      	ldr	r2, [pc, #348]	@ (8005a8c <LL_RCC_GetUARTClockFreq+0x1fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <LL_RCC_GetUARTClockFreq+0xac>
 8005932:	e016      	b.n	8005962 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005934:	f000 f8b4 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005938:	60f8      	str	r0, [r7, #12]
        break;
 800593a:	e099      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800593c:	f7ff fde6 	bl	800550c <LL_RCC_HSI_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8089 	beq.w	8005a5a <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8005948:	4b4e      	ldr	r3, [pc, #312]	@ (8005a84 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800594a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800594c:	e085      	b.n	8005a5a <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800594e:	f7ff fdef 	bl	8005530 <LL_RCC_LSE_IsReady>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8082 	beq.w	8005a5e <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005960:	e07d      	b.n	8005a5e <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005962:	f000 f89d 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005966:	4603      	mov	r3, r0
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f8c1 	bl	8005af0 <RCC_GetHCLKClockFreq>
 800596e:	4603      	mov	r3, r0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f8d3 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 8005976:	60f8      	str	r0, [r7, #12]
        break;
 8005978:	e07a      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005980:	d131      	bne.n	80059e6 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fe32 	bl	80055ec <LL_RCC_GetUARTClockSource>
 8005988:	4603      	mov	r3, r0
 800598a:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800598e:	d015      	beq.n	80059bc <LL_RCC_GetUARTClockFreq+0x12c>
 8005990:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005994:	d81b      	bhi.n	80059ce <LL_RCC_GetUARTClockFreq+0x13e>
 8005996:	4a3e      	ldr	r2, [pc, #248]	@ (8005a90 <LL_RCC_GetUARTClockFreq+0x200>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <LL_RCC_GetUARTClockFreq+0x114>
 800599c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a94 <LL_RCC_GetUARTClockFreq+0x204>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <LL_RCC_GetUARTClockFreq+0x11c>
 80059a2:	e014      	b.n	80059ce <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80059a4:	f000 f87c 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80059a8:	60f8      	str	r0, [r7, #12]
        break;
 80059aa:	e061      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80059ac:	f7ff fdae 	bl	800550c <LL_RCC_HSI_IsReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d055      	beq.n	8005a62 <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 80059b6:	4b33      	ldr	r3, [pc, #204]	@ (8005a84 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80059b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80059ba:	e052      	b.n	8005a62 <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80059bc:	f7ff fdb8 	bl	8005530 <LL_RCC_LSE_IsReady>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04f      	beq.n	8005a66 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80059cc:	e04b      	b.n	8005a66 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80059ce:	f000 f867 	bl	8005aa0 <RCC_GetSystemClockFreq>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f88b 	bl	8005af0 <RCC_GetHCLKClockFreq>
 80059da:	4603      	mov	r3, r0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f89d 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 80059e2:	60f8      	str	r0, [r7, #12]
        break;
 80059e4:	e044      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80059ec:	d140      	bne.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fdfc 	bl	80055ec <LL_RCC_GetUARTClockSource>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80059fa:	d015      	beq.n	8005a28 <LL_RCC_GetUARTClockFreq+0x198>
 80059fc:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005a00:	d81b      	bhi.n	8005a3a <LL_RCC_GetUARTClockFreq+0x1aa>
 8005a02:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <LL_RCC_GetUARTClockFreq+0x208>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <LL_RCC_GetUARTClockFreq+0x180>
 8005a08:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <LL_RCC_GetUARTClockFreq+0x20c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <LL_RCC_GetUARTClockFreq+0x188>
 8005a0e:	e014      	b.n	8005a3a <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8005a10:	f000 f846 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005a14:	60f8      	str	r0, [r7, #12]
          break;
 8005a16:	e02b      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005a18:	f7ff fd78 	bl	800550c <LL_RCC_HSI_IsReady>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d023      	beq.n	8005a6a <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 8005a22:	4b18      	ldr	r3, [pc, #96]	@ (8005a84 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005a24:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005a26:	e020      	b.n	8005a6a <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005a28:	f7ff fd82 	bl	8005530 <LL_RCC_LSE_IsReady>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01d      	beq.n	8005a6e <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a36:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005a38:	e019      	b.n	8005a6e <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a3a:	f000 f831 	bl	8005aa0 <RCC_GetSystemClockFreq>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f855 	bl	8005af0 <RCC_GetHCLKClockFreq>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 f867 	bl	8005b1c <RCC_GetPCLK1ClockFreq>
 8005a4e:	60f8      	str	r0, [r7, #12]
          break;
 8005a50:	e00e      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a52:	bf00      	nop
 8005a54:	e00c      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a56:	bf00      	nop
 8005a58:	e00a      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e008      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e006      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a62:	bf00      	nop
 8005a64:	e004      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005a6e:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	00c00040 	.word	0x00c00040
 8005a80:	00c00080 	.word	0x00c00080
 8005a84:	00f42400 	.word	0x00f42400
 8005a88:	03000100 	.word	0x03000100
 8005a8c:	03000200 	.word	0x03000200
 8005a90:	30001000 	.word	0x30001000
 8005a94:	30002000 	.word	0x30002000
 8005a98:	c0004000 	.word	0xc0004000
 8005a9c:	c0008000 	.word	0xc0008000

08005aa0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005aaa:	f7ff fd53 	bl	8005554 <LL_RCC_GetSysClkSource>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d00c      	beq.n	8005ace <RCC_GetSystemClockFreq+0x2e>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d80e      	bhi.n	8005ad6 <RCC_GetSystemClockFreq+0x36>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <RCC_GetSystemClockFreq+0x22>
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d003      	beq.n	8005ac8 <RCC_GetSystemClockFreq+0x28>
 8005ac0:	e009      	b.n	8005ad6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005ac2:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <RCC_GetSystemClockFreq+0x48>)
 8005ac4:	607b      	str	r3, [r7, #4]
      break;
 8005ac6:	e009      	b.n	8005adc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <RCC_GetSystemClockFreq+0x4c>)
 8005aca:	607b      	str	r3, [r7, #4]
      break;
 8005acc:	e006      	b.n	8005adc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005ace:	f000 f84d 	bl	8005b6c <RCC_PLL_GetFreqDomain_SYS>
 8005ad2:	6078      	str	r0, [r7, #4]
      break;
 8005ad4:	e002      	b.n	8005adc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005ad6:	4b04      	ldr	r3, [pc, #16]	@ (8005ae8 <RCC_GetSystemClockFreq+0x48>)
 8005ad8:	607b      	str	r3, [r7, #4]
      break;
 8005ada:	bf00      	nop
  }

  return frequency;
 8005adc:	687b      	ldr	r3, [r7, #4]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	00f42400 	.word	0x00f42400
 8005aec:	007a1200 	.word	0x007a1200

08005af0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005af8:	f7ff fd3a 	bl	8005570 <LL_RCC_GetAHBPrescaler>
 8005afc:	4603      	mov	r3, r0
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <RCC_GetHCLKClockFreq+0x28>)
 8005b06:	5cd3      	ldrb	r3, [r2, r3]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	40d3      	lsrs	r3, r2
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	08009310 	.word	0x08009310

08005b1c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005b24:	f7ff fd32 	bl	800558c <LL_RCC_GetAPB1Prescaler>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	0a9b      	lsrs	r3, r3, #10
 8005b2c:	4a04      	ldr	r2, [pc, #16]	@ (8005b40 <RCC_GetPCLK1ClockFreq+0x24>)
 8005b2e:	5cd3      	ldrb	r3, [r2, r3]
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	40d3      	lsrs	r3, r2
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	08009320 	.word	0x08009320

08005b44 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005b4c:	f7ff fd2c 	bl	80055a8 <LL_RCC_GetAPB2Prescaler>
 8005b50:	4603      	mov	r3, r0
 8005b52:	0b5b      	lsrs	r3, r3, #13
 8005b54:	4a04      	ldr	r2, [pc, #16]	@ (8005b68 <RCC_GetPCLK2ClockFreq+0x24>)
 8005b56:	5cd3      	ldrb	r3, [r2, r3]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	40d3      	lsrs	r3, r2
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08009320 	.word	0x08009320

08005b6c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	2300      	movs	r3, #0
 8005b78:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b7a:	f7ff fd4b 	bl	8005614 <LL_RCC_PLL_GetMainSource>
 8005b7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b8c:	d003      	beq.n	8005b96 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005b8e:	e005      	b.n	8005b9c <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005b92:	607b      	str	r3, [r7, #4]
      break;
 8005b94:	e005      	b.n	8005ba2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8005b98:	607b      	str	r3, [r7, #4]
      break;
 8005b9a:	e002      	b.n	8005ba2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005b9e:	607b      	str	r3, [r7, #4]
      break;
 8005ba0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ba2:	f7ff fd61 	bl	8005668 <LL_RCC_PLL_GetDivider>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	fbb3 f4f2 	udiv	r4, r3, r2
 8005bae:	f7ff fd3f 	bl	8005630 <LL_RCC_PLL_GetN>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	fb03 f404 	mul.w	r4, r3, r4
 8005bb8:	f7ff fd48 	bl	800564c <LL_RCC_PLL_GetP>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <LL_USART_IsEnabled>:
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <LL_USART_IsEnabled+0x18>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <LL_USART_IsEnabled+0x1a>
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <LL_USART_SetStopBitsLength>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	605a      	str	r2, [r3, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_USART_SetHWFlowCtrl>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <LL_USART_SetBaudRate>:
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5e:	d11a      	bne.n	8005c96 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	005a      	lsls	r2, r3, #1
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	441a      	add	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	60da      	str	r2, [r3, #12]
}
 8005c94:	e00a      	b.n	8005cac <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	085a      	lsrs	r2, r3, #1
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	441a      	add	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff84 	bl	8005bd8 <LL_USART_IsEnabled>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d179      	bne.n	8005dca <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <LL_USART_Init+0x11c>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	6851      	ldr	r1, [r2, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	68d2      	ldr	r2, [r2, #12]
 8005ce6:	4311      	orrs	r1, r2
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	6912      	ldr	r2, [r2, #16]
 8005cec:	4311      	orrs	r1, r2
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	6992      	ldr	r2, [r2, #24]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff7c 	bl	8005bfe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff89 	bl	8005c24 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a30      	ldr	r2, [pc, #192]	@ (8005dd8 <LL_USART_Init+0x120>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d104      	bne.n	8005d24 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005d1a:	2003      	movs	r0, #3
 8005d1c:	f7ff fcb2 	bl	8005684 <LL_RCC_GetUSARTClockFreq>
 8005d20:	60b8      	str	r0, [r7, #8]
 8005d22:	e041      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2d      	ldr	r2, [pc, #180]	@ (8005ddc <LL_USART_Init+0x124>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d104      	bne.n	8005d36 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005d2c:	200c      	movs	r0, #12
 8005d2e:	f7ff fca9 	bl	8005684 <LL_RCC_GetUSARTClockFreq>
 8005d32:	60b8      	str	r0, [r7, #8]
 8005d34:	e038      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a29      	ldr	r2, [pc, #164]	@ (8005de0 <LL_USART_Init+0x128>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d104      	bne.n	8005d48 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005d3e:	2030      	movs	r0, #48	@ 0x30
 8005d40:	f7ff fca0 	bl	8005684 <LL_RCC_GetUSARTClockFreq>
 8005d44:	60b8      	str	r0, [r7, #8]
 8005d46:	e02f      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a26      	ldr	r2, [pc, #152]	@ (8005de4 <LL_USART_Init+0x12c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d104      	bne.n	8005d5a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005d50:	20c0      	movs	r0, #192	@ 0xc0
 8005d52:	f7ff fd9d 	bl	8005890 <LL_RCC_GetUARTClockFreq>
 8005d56:	60b8      	str	r0, [r7, #8]
 8005d58:	e026      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <LL_USART_Init+0x130>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d105      	bne.n	8005d6e <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005d62:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8005d66:	f7ff fd93 	bl	8005890 <LL_RCC_GetUARTClockFreq>
 8005d6a:	60b8      	str	r0, [r7, #8]
 8005d6c:	e01c      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <LL_USART_Init+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d105      	bne.n	8005d82 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8005d76:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005d7a:	f7ff fc83 	bl	8005684 <LL_RCC_GetUSARTClockFreq>
 8005d7e:	60b8      	str	r0, [r7, #8]
 8005d80:	e012      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1a      	ldr	r2, [pc, #104]	@ (8005df0 <LL_USART_Init+0x138>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d105      	bne.n	8005d96 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8005d8a:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8005d8e:	f7ff fd7f 	bl	8005890 <LL_RCC_GetUARTClockFreq>
 8005d92:	60b8      	str	r0, [r7, #8]
 8005d94:	e008      	b.n	8005da8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a16      	ldr	r2, [pc, #88]	@ (8005df4 <LL_USART_Init+0x13c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d104      	bne.n	8005da8 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8005d9e:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8005da2:	f7ff fd75 	bl	8005890 <LL_RCC_GetUARTClockFreq>
 8005da6:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff40 	bl	8005c4a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	efff69f3 	.word	0xefff69f3
 8005dd8:	40011000 	.word	0x40011000
 8005ddc:	40004400 	.word	0x40004400
 8005de0:	40004800 	.word	0x40004800
 8005de4:	40004c00 	.word	0x40004c00
 8005de8:	40005000 	.word	0x40005000
 8005dec:	40011400 	.word	0x40011400
 8005df0:	40007800 	.word	0x40007800
 8005df4:	40007c00 	.word	0x40007c00

08005df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005df8:	b084      	sub	sp, #16
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	f107 001c 	add.w	r0, r7, #28
 8005e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d120      	bne.n	8005e52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	4b20      	ldr	r3, [pc, #128]	@ (8005ea4 <USB_CoreInit+0xac>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa96 	bl	8006378 <USB_CoreReset>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
 8005e50:	e010      	b.n	8005e74 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa8a 	bl	8006378 <USB_CoreReset>
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d10b      	bne.n	8005e92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f043 0206 	orr.w	r2, r3, #6
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9e:	b004      	add	sp, #16
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	ffbdffbf 	.word	0xffbdffbf

08005ea8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 0201 	bic.w	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d115      	bne.n	8005f18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ef8:	2001      	movs	r0, #1
 8005efa:	f7fc f879 	bl	8001ff0 <HAL_Delay>
      ms++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa29 	bl	800635c <USB_GetMode>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d01e      	beq.n	8005f4e <USB_SetCurrentMode+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b31      	cmp	r3, #49	@ 0x31
 8005f14:	d9f0      	bls.n	8005ef8 <USB_SetCurrentMode+0x2e>
 8005f16:	e01a      	b.n	8005f4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d115      	bne.n	8005f4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f7fc f860 	bl	8001ff0 <HAL_Delay>
      ms++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa10 	bl	800635c <USB_GetMode>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <USB_SetCurrentMode+0x84>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b31      	cmp	r3, #49	@ 0x31
 8005f46:	d9f0      	bls.n	8005f2a <USB_SetCurrentMode+0x60>
 8005f48:	e001      	b.n	8005f4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e005      	b.n	8005f5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b32      	cmp	r3, #50	@ 0x32
 8005f52:	d101      	bne.n	8005f58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f64:	b084      	sub	sp, #16
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e009      	b.n	8005f98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3340      	adds	r3, #64	@ 0x40
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3301      	adds	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b0e      	cmp	r3, #14
 8005f9c:	d9f2      	bls.n	8005f84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11c      	bne.n	8005fde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e005      	b.n	8005fea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006004:	461a      	mov	r2, r3
 8006006:	680b      	ldr	r3, [r1, #0]
 8006008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10c      	bne.n	800602a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006016:	2100      	movs	r1, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f965 	bl	80062e8 <USB_SetDevSpeed>
 800601e:	e008      	b.n	8006032 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006020:	2101      	movs	r1, #1
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f960 	bl	80062e8 <USB_SetDevSpeed>
 8006028:	e003      	b.n	8006032 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800602a:	2103      	movs	r1, #3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f95b 	bl	80062e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006032:	2110      	movs	r1, #16
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8f3 	bl	8006220 <USB_FlushTxFifo>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f91f 	bl	8006288 <USB_FlushRxFifo>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800605a:	461a      	mov	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006072:	461a      	mov	r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e043      	b.n	8006106 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006094:	d118      	bne.n	80060c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a8:	461a      	mov	r2, r3
 80060aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e013      	b.n	80060da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e008      	b.n	80060da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	461a      	mov	r2, r3
 80060fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3301      	adds	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3b7      	bcc.n	800607e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e043      	b.n	800619c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800612a:	d118      	bne.n	800615e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e013      	b.n	8006170 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e008      	b.n	8006170 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618e:	461a      	mov	r2, r3
 8006190:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3301      	adds	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3b7      	bcc.n	8006114 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80061c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f043 0210 	orr.w	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006218 <USB_DevInit+0x2b4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f043 0208 	orr.w	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d105      	bne.n	8006208 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <USB_DevInit+0x2b8>)
 8006202:	4313      	orrs	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006214:	b004      	add	sp, #16
 8006216:	4770      	bx	lr
 8006218:	803c3800 	.word	0x803c3800
 800621c:	40000004 	.word	0x40000004

08006220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a13      	ldr	r2, [pc, #76]	@ (8006284 <USB_FlushTxFifo+0x64>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e01b      	b.n	8006278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	daf2      	bge.n	800622e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	019b      	lsls	r3, r3, #6
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a08      	ldr	r2, [pc, #32]	@ (8006284 <USB_FlushTxFifo+0x64>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e006      	b.n	8006278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d0f0      	beq.n	8006258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	00030d40 	.word	0x00030d40

08006288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a11      	ldr	r2, [pc, #68]	@ (80062e4 <USB_FlushRxFifo+0x5c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e018      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	daf2      	bge.n	8006294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2210      	movs	r2, #16
 80062b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <USB_FlushRxFifo+0x5c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e006      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d0f0      	beq.n	80062b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	00030d40 	.word	0x00030d40

080062e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f003 0301 	and.w	r3, r3, #1
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <USB_CoreReset+0x64>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e01b      	b.n	80063ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	daf2      	bge.n	8006384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a09      	ldr	r2, [pc, #36]	@ (80063dc <USB_CoreReset+0x64>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e006      	b.n	80063ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d0f0      	beq.n	80063ae <USB_CoreReset+0x36>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	00030d40 	.word	0x00030d40

080063e0 <__cvt>:
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	ed2d 8b02 	vpush	{d8}
 80063e6:	eeb0 8b40 	vmov.f64	d8, d0
 80063ea:	b085      	sub	sp, #20
 80063ec:	4617      	mov	r7, r2
 80063ee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80063f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063f2:	ee18 2a90 	vmov	r2, s17
 80063f6:	f025 0520 	bic.w	r5, r5, #32
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	bfb6      	itet	lt
 80063fe:	222d      	movlt	r2, #45	@ 0x2d
 8006400:	2200      	movge	r2, #0
 8006402:	eeb1 8b40 	vneglt.f64	d8, d0
 8006406:	2d46      	cmp	r5, #70	@ 0x46
 8006408:	460c      	mov	r4, r1
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	d004      	beq.n	8006418 <__cvt+0x38>
 800640e:	2d45      	cmp	r5, #69	@ 0x45
 8006410:	d100      	bne.n	8006414 <__cvt+0x34>
 8006412:	3401      	adds	r4, #1
 8006414:	2102      	movs	r1, #2
 8006416:	e000      	b.n	800641a <__cvt+0x3a>
 8006418:	2103      	movs	r1, #3
 800641a:	ab03      	add	r3, sp, #12
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	ab02      	add	r3, sp, #8
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4622      	mov	r2, r4
 8006424:	4633      	mov	r3, r6
 8006426:	eeb0 0b48 	vmov.f64	d0, d8
 800642a:	f000 ff65 	bl	80072f8 <_dtoa_r>
 800642e:	2d47      	cmp	r5, #71	@ 0x47
 8006430:	d114      	bne.n	800645c <__cvt+0x7c>
 8006432:	07fb      	lsls	r3, r7, #31
 8006434:	d50a      	bpl.n	800644c <__cvt+0x6c>
 8006436:	1902      	adds	r2, r0, r4
 8006438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	bf08      	it	eq
 8006442:	9203      	streq	r2, [sp, #12]
 8006444:	2130      	movs	r1, #48	@ 0x30
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	4293      	cmp	r3, r2
 800644a:	d319      	bcc.n	8006480 <__cvt+0xa0>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006450:	1a1b      	subs	r3, r3, r0
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	b005      	add	sp, #20
 8006456:	ecbd 8b02 	vpop	{d8}
 800645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645c:	2d46      	cmp	r5, #70	@ 0x46
 800645e:	eb00 0204 	add.w	r2, r0, r4
 8006462:	d1e9      	bne.n	8006438 <__cvt+0x58>
 8006464:	7803      	ldrb	r3, [r0, #0]
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d107      	bne.n	800647a <__cvt+0x9a>
 800646a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006472:	bf1c      	itt	ne
 8006474:	f1c4 0401 	rsbne	r4, r4, #1
 8006478:	6034      	strne	r4, [r6, #0]
 800647a:	6833      	ldr	r3, [r6, #0]
 800647c:	441a      	add	r2, r3
 800647e:	e7db      	b.n	8006438 <__cvt+0x58>
 8006480:	1c5c      	adds	r4, r3, #1
 8006482:	9403      	str	r4, [sp, #12]
 8006484:	7019      	strb	r1, [r3, #0]
 8006486:	e7de      	b.n	8006446 <__cvt+0x66>

08006488 <__exponent>:
 8006488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648a:	2900      	cmp	r1, #0
 800648c:	bfba      	itte	lt
 800648e:	4249      	neglt	r1, r1
 8006490:	232d      	movlt	r3, #45	@ 0x2d
 8006492:	232b      	movge	r3, #43	@ 0x2b
 8006494:	2909      	cmp	r1, #9
 8006496:	7002      	strb	r2, [r0, #0]
 8006498:	7043      	strb	r3, [r0, #1]
 800649a:	dd29      	ble.n	80064f0 <__exponent+0x68>
 800649c:	f10d 0307 	add.w	r3, sp, #7
 80064a0:	461d      	mov	r5, r3
 80064a2:	270a      	movs	r7, #10
 80064a4:	461a      	mov	r2, r3
 80064a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80064aa:	fb07 1416 	mls	r4, r7, r6, r1
 80064ae:	3430      	adds	r4, #48	@ 0x30
 80064b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064b4:	460c      	mov	r4, r1
 80064b6:	2c63      	cmp	r4, #99	@ 0x63
 80064b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80064bc:	4631      	mov	r1, r6
 80064be:	dcf1      	bgt.n	80064a4 <__exponent+0x1c>
 80064c0:	3130      	adds	r1, #48	@ 0x30
 80064c2:	1e94      	subs	r4, r2, #2
 80064c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064c8:	1c41      	adds	r1, r0, #1
 80064ca:	4623      	mov	r3, r4
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	d30a      	bcc.n	80064e6 <__exponent+0x5e>
 80064d0:	f10d 0309 	add.w	r3, sp, #9
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	42ac      	cmp	r4, r5
 80064d8:	bf88      	it	hi
 80064da:	2300      	movhi	r3, #0
 80064dc:	3302      	adds	r3, #2
 80064de:	4403      	add	r3, r0
 80064e0:	1a18      	subs	r0, r3, r0
 80064e2:	b003      	add	sp, #12
 80064e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064ee:	e7ed      	b.n	80064cc <__exponent+0x44>
 80064f0:	2330      	movs	r3, #48	@ 0x30
 80064f2:	3130      	adds	r1, #48	@ 0x30
 80064f4:	7083      	strb	r3, [r0, #2]
 80064f6:	70c1      	strb	r1, [r0, #3]
 80064f8:	1d03      	adds	r3, r0, #4
 80064fa:	e7f1      	b.n	80064e0 <__exponent+0x58>
 80064fc:	0000      	movs	r0, r0
	...

08006500 <_printf_float>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	b08d      	sub	sp, #52	@ 0x34
 8006506:	460c      	mov	r4, r1
 8006508:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800650c:	4616      	mov	r6, r2
 800650e:	461f      	mov	r7, r3
 8006510:	4605      	mov	r5, r0
 8006512:	f000 fde3 	bl	80070dc <_localeconv_r>
 8006516:	f8d0 b000 	ldr.w	fp, [r0]
 800651a:	4658      	mov	r0, fp
 800651c:	f7f9 fee0 	bl	80002e0 <strlen>
 8006520:	2300      	movs	r3, #0
 8006522:	930a      	str	r3, [sp, #40]	@ 0x28
 8006524:	f8d8 3000 	ldr.w	r3, [r8]
 8006528:	f894 9018 	ldrb.w	r9, [r4, #24]
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	9005      	str	r0, [sp, #20]
 8006530:	3307      	adds	r3, #7
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	f103 0108 	add.w	r1, r3, #8
 800653a:	f8c8 1000 	str.w	r1, [r8]
 800653e:	ed93 0b00 	vldr	d0, [r3]
 8006542:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80067a0 <_printf_float+0x2a0>
 8006546:	eeb0 7bc0 	vabs.f64	d7, d0
 800654a:	eeb4 7b46 	vcmp.f64	d7, d6
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006556:	dd24      	ble.n	80065a2 <_printf_float+0xa2>
 8006558:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006560:	d502      	bpl.n	8006568 <_printf_float+0x68>
 8006562:	232d      	movs	r3, #45	@ 0x2d
 8006564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006568:	498f      	ldr	r1, [pc, #572]	@ (80067a8 <_printf_float+0x2a8>)
 800656a:	4b90      	ldr	r3, [pc, #576]	@ (80067ac <_printf_float+0x2ac>)
 800656c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006570:	bf94      	ite	ls
 8006572:	4688      	movls	r8, r1
 8006574:	4698      	movhi	r8, r3
 8006576:	f022 0204 	bic.w	r2, r2, #4
 800657a:	2303      	movs	r3, #3
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	6022      	str	r2, [r4, #0]
 8006580:	f04f 0a00 	mov.w	sl, #0
 8006584:	9700      	str	r7, [sp, #0]
 8006586:	4633      	mov	r3, r6
 8006588:	aa0b      	add	r2, sp, #44	@ 0x2c
 800658a:	4621      	mov	r1, r4
 800658c:	4628      	mov	r0, r5
 800658e:	f000 f9d1 	bl	8006934 <_printf_common>
 8006592:	3001      	adds	r0, #1
 8006594:	f040 8089 	bne.w	80066aa <_printf_float+0x1aa>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	b00d      	add	sp, #52	@ 0x34
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	d709      	bvc.n	80065c0 <_printf_float+0xc0>
 80065ac:	ee10 3a90 	vmov	r3, s1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bfbc      	itt	lt
 80065b4:	232d      	movlt	r3, #45	@ 0x2d
 80065b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065ba:	497d      	ldr	r1, [pc, #500]	@ (80067b0 <_printf_float+0x2b0>)
 80065bc:	4b7d      	ldr	r3, [pc, #500]	@ (80067b4 <_printf_float+0x2b4>)
 80065be:	e7d5      	b.n	800656c <_printf_float+0x6c>
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	1c59      	adds	r1, r3, #1
 80065c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80065c8:	d139      	bne.n	800663e <_printf_float+0x13e>
 80065ca:	2306      	movs	r3, #6
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065d2:	2300      	movs	r3, #0
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80065da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80065de:	ab09      	add	r3, sp, #36	@ 0x24
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6861      	ldr	r1, [r4, #4]
 80065e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff fef9 	bl	80063e0 <__cvt>
 80065ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065f4:	4680      	mov	r8, r0
 80065f6:	d129      	bne.n	800664c <_printf_float+0x14c>
 80065f8:	1cc8      	adds	r0, r1, #3
 80065fa:	db02      	blt.n	8006602 <_printf_float+0x102>
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	4299      	cmp	r1, r3
 8006600:	dd41      	ble.n	8006686 <_printf_float+0x186>
 8006602:	f1a9 0902 	sub.w	r9, r9, #2
 8006606:	fa5f f989 	uxtb.w	r9, r9
 800660a:	3901      	subs	r1, #1
 800660c:	464a      	mov	r2, r9
 800660e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006612:	9109      	str	r1, [sp, #36]	@ 0x24
 8006614:	f7ff ff38 	bl	8006488 <__exponent>
 8006618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800661a:	1813      	adds	r3, r2, r0
 800661c:	2a01      	cmp	r2, #1
 800661e:	4682      	mov	sl, r0
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	dc02      	bgt.n	800662a <_printf_float+0x12a>
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	07d2      	lsls	r2, r2, #31
 8006628:	d501      	bpl.n	800662e <_printf_float+0x12e>
 800662a:	3301      	adds	r3, #1
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0a6      	beq.n	8006584 <_printf_float+0x84>
 8006636:	232d      	movs	r3, #45	@ 0x2d
 8006638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663c:	e7a2      	b.n	8006584 <_printf_float+0x84>
 800663e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006642:	d1c4      	bne.n	80065ce <_printf_float+0xce>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1c2      	bne.n	80065ce <_printf_float+0xce>
 8006648:	2301      	movs	r3, #1
 800664a:	e7bf      	b.n	80065cc <_printf_float+0xcc>
 800664c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006650:	d9db      	bls.n	800660a <_printf_float+0x10a>
 8006652:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006656:	d118      	bne.n	800668a <_printf_float+0x18a>
 8006658:	2900      	cmp	r1, #0
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	dd0b      	ble.n	8006676 <_printf_float+0x176>
 800665e:	6121      	str	r1, [r4, #16]
 8006660:	b913      	cbnz	r3, 8006668 <_printf_float+0x168>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	07d0      	lsls	r0, r2, #31
 8006666:	d502      	bpl.n	800666e <_printf_float+0x16e>
 8006668:	3301      	adds	r3, #1
 800666a:	440b      	add	r3, r1
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006670:	f04f 0a00 	mov.w	sl, #0
 8006674:	e7db      	b.n	800662e <_printf_float+0x12e>
 8006676:	b913      	cbnz	r3, 800667e <_printf_float+0x17e>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	07d2      	lsls	r2, r2, #31
 800667c:	d501      	bpl.n	8006682 <_printf_float+0x182>
 800667e:	3302      	adds	r3, #2
 8006680:	e7f4      	b.n	800666c <_printf_float+0x16c>
 8006682:	2301      	movs	r3, #1
 8006684:	e7f2      	b.n	800666c <_printf_float+0x16c>
 8006686:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800668a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668c:	4299      	cmp	r1, r3
 800668e:	db05      	blt.n	800669c <_printf_float+0x19c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	6121      	str	r1, [r4, #16]
 8006694:	07d8      	lsls	r0, r3, #31
 8006696:	d5ea      	bpl.n	800666e <_printf_float+0x16e>
 8006698:	1c4b      	adds	r3, r1, #1
 800669a:	e7e7      	b.n	800666c <_printf_float+0x16c>
 800669c:	2900      	cmp	r1, #0
 800669e:	bfd4      	ite	le
 80066a0:	f1c1 0202 	rsble	r2, r1, #2
 80066a4:	2201      	movgt	r2, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	e7e0      	b.n	800666c <_printf_float+0x16c>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	055a      	lsls	r2, r3, #21
 80066ae:	d407      	bmi.n	80066c0 <_printf_float+0x1c0>
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	4642      	mov	r2, r8
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	d12a      	bne.n	8006714 <_printf_float+0x214>
 80066be:	e76b      	b.n	8006598 <_printf_float+0x98>
 80066c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80066c4:	f240 80e0 	bls.w	8006888 <_printf_float+0x388>
 80066c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80066cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d4:	d133      	bne.n	800673e <_printf_float+0x23e>
 80066d6:	4a38      	ldr	r2, [pc, #224]	@ (80067b8 <_printf_float+0x2b8>)
 80066d8:	2301      	movs	r3, #1
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f af59 	beq.w	8006598 <_printf_float+0x98>
 80066e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066ea:	4543      	cmp	r3, r8
 80066ec:	db02      	blt.n	80066f4 <_printf_float+0x1f4>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	07d8      	lsls	r0, r3, #31
 80066f2:	d50f      	bpl.n	8006714 <_printf_float+0x214>
 80066f4:	9b05      	ldr	r3, [sp, #20]
 80066f6:	465a      	mov	r2, fp
 80066f8:	4631      	mov	r1, r6
 80066fa:	4628      	mov	r0, r5
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	f43f af4a 	beq.w	8006598 <_printf_float+0x98>
 8006704:	f04f 0900 	mov.w	r9, #0
 8006708:	f108 38ff 	add.w	r8, r8, #4294967295
 800670c:	f104 0a1a 	add.w	sl, r4, #26
 8006710:	45c8      	cmp	r8, r9
 8006712:	dc09      	bgt.n	8006728 <_printf_float+0x228>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	079b      	lsls	r3, r3, #30
 8006718:	f100 8107 	bmi.w	800692a <_printf_float+0x42a>
 800671c:	68e0      	ldr	r0, [r4, #12]
 800671e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006720:	4298      	cmp	r0, r3
 8006722:	bfb8      	it	lt
 8006724:	4618      	movlt	r0, r3
 8006726:	e739      	b.n	800659c <_printf_float+0x9c>
 8006728:	2301      	movs	r3, #1
 800672a:	4652      	mov	r2, sl
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af30 	beq.w	8006598 <_printf_float+0x98>
 8006738:	f109 0901 	add.w	r9, r9, #1
 800673c:	e7e8      	b.n	8006710 <_printf_float+0x210>
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	dc3b      	bgt.n	80067bc <_printf_float+0x2bc>
 8006744:	4a1c      	ldr	r2, [pc, #112]	@ (80067b8 <_printf_float+0x2b8>)
 8006746:	2301      	movs	r3, #1
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f af22 	beq.w	8006598 <_printf_float+0x98>
 8006754:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006758:	ea59 0303 	orrs.w	r3, r9, r3
 800675c:	d102      	bne.n	8006764 <_printf_float+0x264>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	07d9      	lsls	r1, r3, #31
 8006762:	d5d7      	bpl.n	8006714 <_printf_float+0x214>
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	465a      	mov	r2, fp
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af12 	beq.w	8006598 <_printf_float+0x98>
 8006774:	f04f 0a00 	mov.w	sl, #0
 8006778:	f104 0b1a 	add.w	fp, r4, #26
 800677c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800677e:	425b      	negs	r3, r3
 8006780:	4553      	cmp	r3, sl
 8006782:	dc01      	bgt.n	8006788 <_printf_float+0x288>
 8006784:	464b      	mov	r3, r9
 8006786:	e794      	b.n	80066b2 <_printf_float+0x1b2>
 8006788:	2301      	movs	r3, #1
 800678a:	465a      	mov	r2, fp
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af00 	beq.w	8006598 <_printf_float+0x98>
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	e7ee      	b.n	800677c <_printf_float+0x27c>
 800679e:	bf00      	nop
 80067a0:	ffffffff 	.word	0xffffffff
 80067a4:	7fefffff 	.word	0x7fefffff
 80067a8:	08009330 	.word	0x08009330
 80067ac:	08009334 	.word	0x08009334
 80067b0:	08009338 	.word	0x08009338
 80067b4:	0800933c 	.word	0x0800933c
 80067b8:	08009340 	.word	0x08009340
 80067bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067c2:	4553      	cmp	r3, sl
 80067c4:	bfa8      	it	ge
 80067c6:	4653      	movge	r3, sl
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	4699      	mov	r9, r3
 80067cc:	dc37      	bgt.n	800683e <_printf_float+0x33e>
 80067ce:	2300      	movs	r3, #0
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067d6:	f104 021a 	add.w	r2, r4, #26
 80067da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067dc:	9907      	ldr	r1, [sp, #28]
 80067de:	9306      	str	r3, [sp, #24]
 80067e0:	eba3 0309 	sub.w	r3, r3, r9
 80067e4:	428b      	cmp	r3, r1
 80067e6:	dc31      	bgt.n	800684c <_printf_float+0x34c>
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	459a      	cmp	sl, r3
 80067ec:	dc3b      	bgt.n	8006866 <_printf_float+0x366>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	07da      	lsls	r2, r3, #31
 80067f2:	d438      	bmi.n	8006866 <_printf_float+0x366>
 80067f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f6:	ebaa 0903 	sub.w	r9, sl, r3
 80067fa:	9b06      	ldr	r3, [sp, #24]
 80067fc:	ebaa 0303 	sub.w	r3, sl, r3
 8006800:	4599      	cmp	r9, r3
 8006802:	bfa8      	it	ge
 8006804:	4699      	movge	r9, r3
 8006806:	f1b9 0f00 	cmp.w	r9, #0
 800680a:	dc34      	bgt.n	8006876 <_printf_float+0x376>
 800680c:	f04f 0800 	mov.w	r8, #0
 8006810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006814:	f104 0b1a 	add.w	fp, r4, #26
 8006818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681a:	ebaa 0303 	sub.w	r3, sl, r3
 800681e:	eba3 0309 	sub.w	r3, r3, r9
 8006822:	4543      	cmp	r3, r8
 8006824:	f77f af76 	ble.w	8006714 <_printf_float+0x214>
 8006828:	2301      	movs	r3, #1
 800682a:	465a      	mov	r2, fp
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f aeb0 	beq.w	8006598 <_printf_float+0x98>
 8006838:	f108 0801 	add.w	r8, r8, #1
 800683c:	e7ec      	b.n	8006818 <_printf_float+0x318>
 800683e:	4642      	mov	r2, r8
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	d1c1      	bne.n	80067ce <_printf_float+0x2ce>
 800684a:	e6a5      	b.n	8006598 <_printf_float+0x98>
 800684c:	2301      	movs	r3, #1
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	9206      	str	r2, [sp, #24]
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f ae9e 	beq.w	8006598 <_printf_float+0x98>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	9a06      	ldr	r2, [sp, #24]
 8006860:	3301      	adds	r3, #1
 8006862:	9307      	str	r3, [sp, #28]
 8006864:	e7b9      	b.n	80067da <_printf_float+0x2da>
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	465a      	mov	r2, fp
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d1bf      	bne.n	80067f4 <_printf_float+0x2f4>
 8006874:	e690      	b.n	8006598 <_printf_float+0x98>
 8006876:	9a06      	ldr	r2, [sp, #24]
 8006878:	464b      	mov	r3, r9
 800687a:	4442      	add	r2, r8
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	d1c2      	bne.n	800680c <_printf_float+0x30c>
 8006886:	e687      	b.n	8006598 <_printf_float+0x98>
 8006888:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800688c:	f1b9 0f01 	cmp.w	r9, #1
 8006890:	dc01      	bgt.n	8006896 <_printf_float+0x396>
 8006892:	07db      	lsls	r3, r3, #31
 8006894:	d536      	bpl.n	8006904 <_printf_float+0x404>
 8006896:	2301      	movs	r3, #1
 8006898:	4642      	mov	r2, r8
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f ae79 	beq.w	8006598 <_printf_float+0x98>
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	465a      	mov	r2, fp
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f ae71 	beq.w	8006598 <_printf_float+0x98>
 80068b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80068ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80068c6:	d018      	beq.n	80068fa <_printf_float+0x3fa>
 80068c8:	464b      	mov	r3, r9
 80068ca:	f108 0201 	add.w	r2, r8, #1
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	d10c      	bne.n	80068f2 <_printf_float+0x3f2>
 80068d8:	e65e      	b.n	8006598 <_printf_float+0x98>
 80068da:	2301      	movs	r3, #1
 80068dc:	465a      	mov	r2, fp
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f ae57 	beq.w	8006598 <_printf_float+0x98>
 80068ea:	f108 0801 	add.w	r8, r8, #1
 80068ee:	45c8      	cmp	r8, r9
 80068f0:	dbf3      	blt.n	80068da <_printf_float+0x3da>
 80068f2:	4653      	mov	r3, sl
 80068f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068f8:	e6dc      	b.n	80066b4 <_printf_float+0x1b4>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	f104 0b1a 	add.w	fp, r4, #26
 8006902:	e7f4      	b.n	80068ee <_printf_float+0x3ee>
 8006904:	2301      	movs	r3, #1
 8006906:	4642      	mov	r2, r8
 8006908:	e7e1      	b.n	80068ce <_printf_float+0x3ce>
 800690a:	2301      	movs	r3, #1
 800690c:	464a      	mov	r2, r9
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae3f 	beq.w	8006598 <_printf_float+0x98>
 800691a:	f108 0801 	add.w	r8, r8, #1
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006922:	1a5b      	subs	r3, r3, r1
 8006924:	4543      	cmp	r3, r8
 8006926:	dcf0      	bgt.n	800690a <_printf_float+0x40a>
 8006928:	e6f8      	b.n	800671c <_printf_float+0x21c>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	f104 0919 	add.w	r9, r4, #25
 8006932:	e7f4      	b.n	800691e <_printf_float+0x41e>

08006934 <_printf_common>:
 8006934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	4616      	mov	r6, r2
 800693a:	4698      	mov	r8, r3
 800693c:	688a      	ldr	r2, [r1, #8]
 800693e:	690b      	ldr	r3, [r1, #16]
 8006940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006944:	4293      	cmp	r3, r2
 8006946:	bfb8      	it	lt
 8006948:	4613      	movlt	r3, r2
 800694a:	6033      	str	r3, [r6, #0]
 800694c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006950:	4607      	mov	r7, r0
 8006952:	460c      	mov	r4, r1
 8006954:	b10a      	cbz	r2, 800695a <_printf_common+0x26>
 8006956:	3301      	adds	r3, #1
 8006958:	6033      	str	r3, [r6, #0]
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	0699      	lsls	r1, r3, #26
 800695e:	bf42      	ittt	mi
 8006960:	6833      	ldrmi	r3, [r6, #0]
 8006962:	3302      	addmi	r3, #2
 8006964:	6033      	strmi	r3, [r6, #0]
 8006966:	6825      	ldr	r5, [r4, #0]
 8006968:	f015 0506 	ands.w	r5, r5, #6
 800696c:	d106      	bne.n	800697c <_printf_common+0x48>
 800696e:	f104 0a19 	add.w	sl, r4, #25
 8006972:	68e3      	ldr	r3, [r4, #12]
 8006974:	6832      	ldr	r2, [r6, #0]
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	42ab      	cmp	r3, r5
 800697a:	dc26      	bgt.n	80069ca <_printf_common+0x96>
 800697c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	3b00      	subs	r3, #0
 8006984:	bf18      	it	ne
 8006986:	2301      	movne	r3, #1
 8006988:	0692      	lsls	r2, r2, #26
 800698a:	d42b      	bmi.n	80069e4 <_printf_common+0xb0>
 800698c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006990:	4641      	mov	r1, r8
 8006992:	4638      	mov	r0, r7
 8006994:	47c8      	blx	r9
 8006996:	3001      	adds	r0, #1
 8006998:	d01e      	beq.n	80069d8 <_printf_common+0xa4>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	6922      	ldr	r2, [r4, #16]
 800699e:	f003 0306 	and.w	r3, r3, #6
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	bf02      	ittt	eq
 80069a6:	68e5      	ldreq	r5, [r4, #12]
 80069a8:	6833      	ldreq	r3, [r6, #0]
 80069aa:	1aed      	subeq	r5, r5, r3
 80069ac:	68a3      	ldr	r3, [r4, #8]
 80069ae:	bf0c      	ite	eq
 80069b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069b4:	2500      	movne	r5, #0
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bfc4      	itt	gt
 80069ba:	1a9b      	subgt	r3, r3, r2
 80069bc:	18ed      	addgt	r5, r5, r3
 80069be:	2600      	movs	r6, #0
 80069c0:	341a      	adds	r4, #26
 80069c2:	42b5      	cmp	r5, r6
 80069c4:	d11a      	bne.n	80069fc <_printf_common+0xc8>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e008      	b.n	80069dc <_printf_common+0xa8>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4652      	mov	r2, sl
 80069ce:	4641      	mov	r1, r8
 80069d0:	4638      	mov	r0, r7
 80069d2:	47c8      	blx	r9
 80069d4:	3001      	adds	r0, #1
 80069d6:	d103      	bne.n	80069e0 <_printf_common+0xac>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	3501      	adds	r5, #1
 80069e2:	e7c6      	b.n	8006972 <_printf_common+0x3e>
 80069e4:	18e1      	adds	r1, r4, r3
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	2030      	movs	r0, #48	@ 0x30
 80069ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ee:	4422      	add	r2, r4
 80069f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069f8:	3302      	adds	r3, #2
 80069fa:	e7c7      	b.n	800698c <_printf_common+0x58>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4622      	mov	r2, r4
 8006a00:	4641      	mov	r1, r8
 8006a02:	4638      	mov	r0, r7
 8006a04:	47c8      	blx	r9
 8006a06:	3001      	adds	r0, #1
 8006a08:	d0e6      	beq.n	80069d8 <_printf_common+0xa4>
 8006a0a:	3601      	adds	r6, #1
 8006a0c:	e7d9      	b.n	80069c2 <_printf_common+0x8e>
	...

08006a10 <_printf_i>:
 8006a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	7e0f      	ldrb	r7, [r1, #24]
 8006a16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a18:	2f78      	cmp	r7, #120	@ 0x78
 8006a1a:	4691      	mov	r9, r2
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	469a      	mov	sl, r3
 8006a22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a26:	d807      	bhi.n	8006a38 <_printf_i+0x28>
 8006a28:	2f62      	cmp	r7, #98	@ 0x62
 8006a2a:	d80a      	bhi.n	8006a42 <_printf_i+0x32>
 8006a2c:	2f00      	cmp	r7, #0
 8006a2e:	f000 80d2 	beq.w	8006bd6 <_printf_i+0x1c6>
 8006a32:	2f58      	cmp	r7, #88	@ 0x58
 8006a34:	f000 80b9 	beq.w	8006baa <_printf_i+0x19a>
 8006a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a40:	e03a      	b.n	8006ab8 <_printf_i+0xa8>
 8006a42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a46:	2b15      	cmp	r3, #21
 8006a48:	d8f6      	bhi.n	8006a38 <_printf_i+0x28>
 8006a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a50 <_printf_i+0x40>)
 8006a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006a39 	.word	0x08006a39
 8006a5c:	08006a39 	.word	0x08006a39
 8006a60:	08006a39 	.word	0x08006a39
 8006a64:	08006a39 	.word	0x08006a39
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006a39 	.word	0x08006a39
 8006a70:	08006a39 	.word	0x08006a39
 8006a74:	08006a39 	.word	0x08006a39
 8006a78:	08006a39 	.word	0x08006a39
 8006a7c:	08006bbd 	.word	0x08006bbd
 8006a80:	08006ae7 	.word	0x08006ae7
 8006a84:	08006b77 	.word	0x08006b77
 8006a88:	08006a39 	.word	0x08006a39
 8006a8c:	08006a39 	.word	0x08006a39
 8006a90:	08006bdf 	.word	0x08006bdf
 8006a94:	08006a39 	.word	0x08006a39
 8006a98:	08006ae7 	.word	0x08006ae7
 8006a9c:	08006a39 	.word	0x08006a39
 8006aa0:	08006a39 	.word	0x08006a39
 8006aa4:	08006b7f 	.word	0x08006b7f
 8006aa8:	6833      	ldr	r3, [r6, #0]
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6032      	str	r2, [r6, #0]
 8006ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e09d      	b.n	8006bf8 <_printf_i+0x1e8>
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	1d19      	adds	r1, r3, #4
 8006ac2:	6031      	str	r1, [r6, #0]
 8006ac4:	0606      	lsls	r6, r0, #24
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0xbc>
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	e003      	b.n	8006ad4 <_printf_i+0xc4>
 8006acc:	0645      	lsls	r5, r0, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0xb8>
 8006ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	da03      	bge.n	8006ae0 <_printf_i+0xd0>
 8006ad8:	232d      	movs	r3, #45	@ 0x2d
 8006ada:	426d      	negs	r5, r5
 8006adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae0:	4859      	ldr	r0, [pc, #356]	@ (8006c48 <_printf_i+0x238>)
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	e011      	b.n	8006b0a <_printf_i+0xfa>
 8006ae6:	6821      	ldr	r1, [r4, #0]
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	0608      	lsls	r0, r1, #24
 8006aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8006af0:	d402      	bmi.n	8006af8 <_printf_i+0xe8>
 8006af2:	0649      	lsls	r1, r1, #25
 8006af4:	bf48      	it	mi
 8006af6:	b2ad      	uxthmi	r5, r5
 8006af8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006afa:	4853      	ldr	r0, [pc, #332]	@ (8006c48 <_printf_i+0x238>)
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	bf14      	ite	ne
 8006b00:	230a      	movne	r3, #10
 8006b02:	2308      	moveq	r3, #8
 8006b04:	2100      	movs	r1, #0
 8006b06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b0a:	6866      	ldr	r6, [r4, #4]
 8006b0c:	60a6      	str	r6, [r4, #8]
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	bfa2      	ittt	ge
 8006b12:	6821      	ldrge	r1, [r4, #0]
 8006b14:	f021 0104 	bicge.w	r1, r1, #4
 8006b18:	6021      	strge	r1, [r4, #0]
 8006b1a:	b90d      	cbnz	r5, 8006b20 <_printf_i+0x110>
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	d04b      	beq.n	8006bb8 <_printf_i+0x1a8>
 8006b20:	4616      	mov	r6, r2
 8006b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b26:	fb03 5711 	mls	r7, r3, r1, r5
 8006b2a:	5dc7      	ldrb	r7, [r0, r7]
 8006b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b30:	462f      	mov	r7, r5
 8006b32:	42bb      	cmp	r3, r7
 8006b34:	460d      	mov	r5, r1
 8006b36:	d9f4      	bls.n	8006b22 <_printf_i+0x112>
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d10b      	bne.n	8006b54 <_printf_i+0x144>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07df      	lsls	r7, r3, #31
 8006b40:	d508      	bpl.n	8006b54 <_printf_i+0x144>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6861      	ldr	r1, [r4, #4]
 8006b46:	4299      	cmp	r1, r3
 8006b48:	bfde      	ittt	le
 8006b4a:	2330      	movle	r3, #48	@ 0x30
 8006b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b54:	1b92      	subs	r2, r2, r6
 8006b56:	6122      	str	r2, [r4, #16]
 8006b58:	f8cd a000 	str.w	sl, [sp]
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	aa03      	add	r2, sp, #12
 8006b60:	4621      	mov	r1, r4
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7ff fee6 	bl	8006934 <_printf_common>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d14a      	bne.n	8006c02 <_printf_i+0x1f2>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	b004      	add	sp, #16
 8006b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f043 0320 	orr.w	r3, r3, #32
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	4833      	ldr	r0, [pc, #204]	@ (8006c4c <_printf_i+0x23c>)
 8006b80:	2778      	movs	r7, #120	@ 0x78
 8006b82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	6831      	ldr	r1, [r6, #0]
 8006b8a:	061f      	lsls	r7, r3, #24
 8006b8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b90:	d402      	bmi.n	8006b98 <_printf_i+0x188>
 8006b92:	065f      	lsls	r7, r3, #25
 8006b94:	bf48      	it	mi
 8006b96:	b2ad      	uxthmi	r5, r5
 8006b98:	6031      	str	r1, [r6, #0]
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	bf44      	itt	mi
 8006b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba2:	6023      	strmi	r3, [r4, #0]
 8006ba4:	b11d      	cbz	r5, 8006bae <_printf_i+0x19e>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	e7ac      	b.n	8006b04 <_printf_i+0xf4>
 8006baa:	4827      	ldr	r0, [pc, #156]	@ (8006c48 <_printf_i+0x238>)
 8006bac:	e7e9      	b.n	8006b82 <_printf_i+0x172>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f023 0320 	bic.w	r3, r3, #32
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	e7f6      	b.n	8006ba6 <_printf_i+0x196>
 8006bb8:	4616      	mov	r6, r2
 8006bba:	e7bd      	b.n	8006b38 <_printf_i+0x128>
 8006bbc:	6833      	ldr	r3, [r6, #0]
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	6961      	ldr	r1, [r4, #20]
 8006bc2:	1d18      	adds	r0, r3, #4
 8006bc4:	6030      	str	r0, [r6, #0]
 8006bc6:	062e      	lsls	r6, r5, #24
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	d501      	bpl.n	8006bd0 <_printf_i+0x1c0>
 8006bcc:	6019      	str	r1, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <_printf_i+0x1c6>
 8006bd0:	0668      	lsls	r0, r5, #25
 8006bd2:	d5fb      	bpl.n	8006bcc <_printf_i+0x1bc>
 8006bd4:	8019      	strh	r1, [r3, #0]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	4616      	mov	r6, r2
 8006bdc:	e7bc      	b.n	8006b58 <_printf_i+0x148>
 8006bde:	6833      	ldr	r3, [r6, #0]
 8006be0:	1d1a      	adds	r2, r3, #4
 8006be2:	6032      	str	r2, [r6, #0]
 8006be4:	681e      	ldr	r6, [r3, #0]
 8006be6:	6862      	ldr	r2, [r4, #4]
 8006be8:	2100      	movs	r1, #0
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7f9 fb28 	bl	8000240 <memchr>
 8006bf0:	b108      	cbz	r0, 8006bf6 <_printf_i+0x1e6>
 8006bf2:	1b80      	subs	r0, r0, r6
 8006bf4:	6060      	str	r0, [r4, #4]
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	6123      	str	r3, [r4, #16]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c00:	e7aa      	b.n	8006b58 <_printf_i+0x148>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	4632      	mov	r2, r6
 8006c06:	4649      	mov	r1, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	47d0      	blx	sl
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d0ad      	beq.n	8006b6c <_printf_i+0x15c>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	079b      	lsls	r3, r3, #30
 8006c14:	d413      	bmi.n	8006c3e <_printf_i+0x22e>
 8006c16:	68e0      	ldr	r0, [r4, #12]
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	4298      	cmp	r0, r3
 8006c1c:	bfb8      	it	lt
 8006c1e:	4618      	movlt	r0, r3
 8006c20:	e7a6      	b.n	8006b70 <_printf_i+0x160>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4632      	mov	r2, r6
 8006c26:	4649      	mov	r1, r9
 8006c28:	4640      	mov	r0, r8
 8006c2a:	47d0      	blx	sl
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d09d      	beq.n	8006b6c <_printf_i+0x15c>
 8006c30:	3501      	adds	r5, #1
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	9903      	ldr	r1, [sp, #12]
 8006c36:	1a5b      	subs	r3, r3, r1
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dcf2      	bgt.n	8006c22 <_printf_i+0x212>
 8006c3c:	e7eb      	b.n	8006c16 <_printf_i+0x206>
 8006c3e:	2500      	movs	r5, #0
 8006c40:	f104 0619 	add.w	r6, r4, #25
 8006c44:	e7f5      	b.n	8006c32 <_printf_i+0x222>
 8006c46:	bf00      	nop
 8006c48:	08009342 	.word	0x08009342
 8006c4c:	08009353 	.word	0x08009353

08006c50 <std>:
 8006c50:	2300      	movs	r3, #0
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	e9c0 3300 	strd	r3, r3, [r0]
 8006c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5e:	6083      	str	r3, [r0, #8]
 8006c60:	8181      	strh	r1, [r0, #12]
 8006c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c64:	81c2      	strh	r2, [r0, #14]
 8006c66:	6183      	str	r3, [r0, #24]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	305c      	adds	r0, #92	@ 0x5c
 8006c6e:	f000 fa2d 	bl	80070cc <memset>
 8006c72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <std+0x58>)
 8006c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <std+0x5c>)
 8006c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <std+0x60>)
 8006c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <std+0x64>)
 8006c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c82:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb8 <std+0x68>)
 8006c84:	6224      	str	r4, [r4, #32]
 8006c86:	429c      	cmp	r4, r3
 8006c88:	d006      	beq.n	8006c98 <std+0x48>
 8006c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c8e:	4294      	cmp	r4, r2
 8006c90:	d002      	beq.n	8006c98 <std+0x48>
 8006c92:	33d0      	adds	r3, #208	@ 0xd0
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d105      	bne.n	8006ca4 <std+0x54>
 8006c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f000 ba90 	b.w	80071c4 <__retarget_lock_init_recursive>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08006f1d 	.word	0x08006f1d
 8006cac:	08006f3f 	.word	0x08006f3f
 8006cb0:	08006f77 	.word	0x08006f77
 8006cb4:	08006f9b 	.word	0x08006f9b
 8006cb8:	20000cb0 	.word	0x20000cb0

08006cbc <stdio_exit_handler>:
 8006cbc:	4a02      	ldr	r2, [pc, #8]	@ (8006cc8 <stdio_exit_handler+0xc>)
 8006cbe:	4903      	ldr	r1, [pc, #12]	@ (8006ccc <stdio_exit_handler+0x10>)
 8006cc0:	4803      	ldr	r0, [pc, #12]	@ (8006cd0 <stdio_exit_handler+0x14>)
 8006cc2:	f000 b869 	b.w	8006d98 <_fwalk_sglue>
 8006cc6:	bf00      	nop
 8006cc8:	20000018 	.word	0x20000018
 8006ccc:	08008ce5 	.word	0x08008ce5
 8006cd0:	20000028 	.word	0x20000028

08006cd4 <cleanup_stdio>:
 8006cd4:	6841      	ldr	r1, [r0, #4]
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d08 <cleanup_stdio+0x34>)
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	d001      	beq.n	8006ce4 <cleanup_stdio+0x10>
 8006ce0:	f002 f800 	bl	8008ce4 <_fflush_r>
 8006ce4:	68a1      	ldr	r1, [r4, #8]
 8006ce6:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <cleanup_stdio+0x38>)
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	d002      	beq.n	8006cf2 <cleanup_stdio+0x1e>
 8006cec:	4620      	mov	r0, r4
 8006cee:	f001 fff9 	bl	8008ce4 <_fflush_r>
 8006cf2:	68e1      	ldr	r1, [r4, #12]
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <cleanup_stdio+0x3c>)
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d004      	beq.n	8006d04 <cleanup_stdio+0x30>
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f001 bff0 	b.w	8008ce4 <_fflush_r>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	20000cb0 	.word	0x20000cb0
 8006d0c:	20000d18 	.word	0x20000d18
 8006d10:	20000d80 	.word	0x20000d80

08006d14 <global_stdio_init.part.0>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <global_stdio_init.part.0+0x30>)
 8006d18:	4c0b      	ldr	r4, [pc, #44]	@ (8006d48 <global_stdio_init.part.0+0x34>)
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d4c <global_stdio_init.part.0+0x38>)
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	2200      	movs	r2, #0
 8006d22:	2104      	movs	r1, #4
 8006d24:	f7ff ff94 	bl	8006c50 <std>
 8006d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2109      	movs	r1, #9
 8006d30:	f7ff ff8e 	bl	8006c50 <std>
 8006d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d38:	2202      	movs	r2, #2
 8006d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d3e:	2112      	movs	r1, #18
 8006d40:	f7ff bf86 	b.w	8006c50 <std>
 8006d44:	20000de8 	.word	0x20000de8
 8006d48:	20000cb0 	.word	0x20000cb0
 8006d4c:	08006cbd 	.word	0x08006cbd

08006d50 <__sfp_lock_acquire>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__sfp_lock_acquire+0x8>)
 8006d52:	f000 ba38 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000df1 	.word	0x20000df1

08006d5c <__sfp_lock_release>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	@ (8006d64 <__sfp_lock_release+0x8>)
 8006d5e:	f000 ba33 	b.w	80071c8 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000df1 	.word	0x20000df1

08006d68 <__sinit>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	f7ff fff0 	bl	8006d50 <__sfp_lock_acquire>
 8006d70:	6a23      	ldr	r3, [r4, #32]
 8006d72:	b11b      	cbz	r3, 8006d7c <__sinit+0x14>
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f7ff bff0 	b.w	8006d5c <__sfp_lock_release>
 8006d7c:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <__sinit+0x28>)
 8006d7e:	6223      	str	r3, [r4, #32]
 8006d80:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <__sinit+0x2c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f5      	bne.n	8006d74 <__sinit+0xc>
 8006d88:	f7ff ffc4 	bl	8006d14 <global_stdio_init.part.0>
 8006d8c:	e7f2      	b.n	8006d74 <__sinit+0xc>
 8006d8e:	bf00      	nop
 8006d90:	08006cd5 	.word	0x08006cd5
 8006d94:	20000de8 	.word	0x20000de8

08006d98 <_fwalk_sglue>:
 8006d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	4688      	mov	r8, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	2600      	movs	r6, #0
 8006da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da8:	f1b9 0901 	subs.w	r9, r9, #1
 8006dac:	d505      	bpl.n	8006dba <_fwalk_sglue+0x22>
 8006dae:	6824      	ldr	r4, [r4, #0]
 8006db0:	2c00      	cmp	r4, #0
 8006db2:	d1f7      	bne.n	8006da4 <_fwalk_sglue+0xc>
 8006db4:	4630      	mov	r0, r6
 8006db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d907      	bls.n	8006dd0 <_fwalk_sglue+0x38>
 8006dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	d003      	beq.n	8006dd0 <_fwalk_sglue+0x38>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4638      	mov	r0, r7
 8006dcc:	47c0      	blx	r8
 8006dce:	4306      	orrs	r6, r0
 8006dd0:	3568      	adds	r5, #104	@ 0x68
 8006dd2:	e7e9      	b.n	8006da8 <_fwalk_sglue+0x10>

08006dd4 <iprintf>:
 8006dd4:	b40f      	push	{r0, r1, r2, r3}
 8006dd6:	b507      	push	{r0, r1, r2, lr}
 8006dd8:	4906      	ldr	r1, [pc, #24]	@ (8006df4 <iprintf+0x20>)
 8006dda:	ab04      	add	r3, sp, #16
 8006ddc:	6808      	ldr	r0, [r1, #0]
 8006dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de2:	6881      	ldr	r1, [r0, #8]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	f001 fde1 	bl	80089ac <_vfiprintf_r>
 8006dea:	b003      	add	sp, #12
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b004      	add	sp, #16
 8006df2:	4770      	bx	lr
 8006df4:	20000024 	.word	0x20000024

08006df8 <_puts_r>:
 8006df8:	6a03      	ldr	r3, [r0, #32]
 8006dfa:	b570      	push	{r4, r5, r6, lr}
 8006dfc:	6884      	ldr	r4, [r0, #8]
 8006dfe:	4605      	mov	r5, r0
 8006e00:	460e      	mov	r6, r1
 8006e02:	b90b      	cbnz	r3, 8006e08 <_puts_r+0x10>
 8006e04:	f7ff ffb0 	bl	8006d68 <__sinit>
 8006e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e0a:	07db      	lsls	r3, r3, #31
 8006e0c:	d405      	bmi.n	8006e1a <_puts_r+0x22>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_puts_r+0x22>
 8006e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e16:	f000 f9d6 	bl	80071c6 <__retarget_lock_acquire_recursive>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	0719      	lsls	r1, r3, #28
 8006e1e:	d502      	bpl.n	8006e26 <_puts_r+0x2e>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d135      	bne.n	8006e92 <_puts_r+0x9a>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f8f9 	bl	8007020 <__swsetup_r>
 8006e2e:	b380      	cbz	r0, 8006e92 <_puts_r+0x9a>
 8006e30:	f04f 35ff 	mov.w	r5, #4294967295
 8006e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e36:	07da      	lsls	r2, r3, #31
 8006e38:	d405      	bmi.n	8006e46 <_puts_r+0x4e>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	059b      	lsls	r3, r3, #22
 8006e3e:	d402      	bmi.n	8006e46 <_puts_r+0x4e>
 8006e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e42:	f000 f9c1 	bl	80071c8 <__retarget_lock_release_recursive>
 8006e46:	4628      	mov	r0, r5
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da04      	bge.n	8006e58 <_puts_r+0x60>
 8006e4e:	69a2      	ldr	r2, [r4, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dc17      	bgt.n	8006e84 <_puts_r+0x8c>
 8006e54:	290a      	cmp	r1, #10
 8006e56:	d015      	beq.n	8006e84 <_puts_r+0x8c>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	7019      	strb	r1, [r3, #0]
 8006e60:	68a3      	ldr	r3, [r4, #8]
 8006e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e66:	3b01      	subs	r3, #1
 8006e68:	60a3      	str	r3, [r4, #8]
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d1ed      	bne.n	8006e4a <_puts_r+0x52>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da11      	bge.n	8006e96 <_puts_r+0x9e>
 8006e72:	4622      	mov	r2, r4
 8006e74:	210a      	movs	r1, #10
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 f893 	bl	8006fa2 <__swbuf_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d0d7      	beq.n	8006e30 <_puts_r+0x38>
 8006e80:	250a      	movs	r5, #10
 8006e82:	e7d7      	b.n	8006e34 <_puts_r+0x3c>
 8006e84:	4622      	mov	r2, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 f88b 	bl	8006fa2 <__swbuf_r>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1e7      	bne.n	8006e60 <_puts_r+0x68>
 8006e90:	e7ce      	b.n	8006e30 <_puts_r+0x38>
 8006e92:	3e01      	subs	r6, #1
 8006e94:	e7e4      	b.n	8006e60 <_puts_r+0x68>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	6022      	str	r2, [r4, #0]
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e7ee      	b.n	8006e80 <_puts_r+0x88>
	...

08006ea4 <puts>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	@ (8006eb0 <puts+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f7ff bfa5 	b.w	8006df8 <_puts_r>
 8006eae:	bf00      	nop
 8006eb0:	20000024 	.word	0x20000024

08006eb4 <sniprintf>:
 8006eb4:	b40c      	push	{r2, r3}
 8006eb6:	b530      	push	{r4, r5, lr}
 8006eb8:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <sniprintf+0x64>)
 8006eba:	1e0c      	subs	r4, r1, #0
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	b09d      	sub	sp, #116	@ 0x74
 8006ec0:	da08      	bge.n	8006ed4 <sniprintf+0x20>
 8006ec2:	238b      	movs	r3, #139	@ 0x8b
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eca:	b01d      	add	sp, #116	@ 0x74
 8006ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ed0:	b002      	add	sp, #8
 8006ed2:	4770      	bx	lr
 8006ed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006edc:	bf14      	ite	ne
 8006ede:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ee2:	4623      	moveq	r3, r4
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	9307      	str	r3, [sp, #28]
 8006ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006eec:	9002      	str	r0, [sp, #8]
 8006eee:	9006      	str	r0, [sp, #24]
 8006ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ef6:	ab21      	add	r3, sp, #132	@ 0x84
 8006ef8:	a902      	add	r1, sp, #8
 8006efa:	4628      	mov	r0, r5
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	f001 fc2f 	bl	8008760 <_svfiprintf_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	bfbc      	itt	lt
 8006f06:	238b      	movlt	r3, #139	@ 0x8b
 8006f08:	602b      	strlt	r3, [r5, #0]
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	d0dd      	beq.n	8006eca <sniprintf+0x16>
 8006f0e:	9b02      	ldr	r3, [sp, #8]
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e7d9      	b.n	8006eca <sniprintf+0x16>
 8006f16:	bf00      	nop
 8006f18:	20000024 	.word	0x20000024

08006f1c <__sread>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f000 f900 	bl	8007128 <_read_r>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f30:	181b      	addge	r3, r3, r0
 8006f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f36:	bfac      	ite	ge
 8006f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f3a:	81a3      	strhlt	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__swrite>:
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	461f      	mov	r7, r3
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	05db      	lsls	r3, r3, #23
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	d505      	bpl.n	8006f5c <__swrite+0x1e>
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	2302      	movs	r3, #2
 8006f56:	2200      	movs	r2, #0
 8006f58:	f000 f8d4 	bl	8007104 <_lseek_r>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f000 b8eb 	b.w	800714c <_write_r>

08006f76 <__sseek>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 f8c1 	bl	8007104 <_lseek_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	bf15      	itete	ne
 8006f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f92:	81a3      	strheq	r3, [r4, #12]
 8006f94:	bf18      	it	ne
 8006f96:	81a3      	strhne	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__sclose>:
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 b8a1 	b.w	80070e4 <_close_r>

08006fa2 <__swbuf_r>:
 8006fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	4605      	mov	r5, r0
 8006faa:	b118      	cbz	r0, 8006fb4 <__swbuf_r+0x12>
 8006fac:	6a03      	ldr	r3, [r0, #32]
 8006fae:	b90b      	cbnz	r3, 8006fb4 <__swbuf_r+0x12>
 8006fb0:	f7ff feda 	bl	8006d68 <__sinit>
 8006fb4:	69a3      	ldr	r3, [r4, #24]
 8006fb6:	60a3      	str	r3, [r4, #8]
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	071a      	lsls	r2, r3, #28
 8006fbc:	d501      	bpl.n	8006fc2 <__swbuf_r+0x20>
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	b943      	cbnz	r3, 8006fd4 <__swbuf_r+0x32>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 f82b 	bl	8007020 <__swsetup_r>
 8006fca:	b118      	cbz	r0, 8006fd4 <__swbuf_r+0x32>
 8006fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	6922      	ldr	r2, [r4, #16]
 8006fd8:	1a98      	subs	r0, r3, r2
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	b2f6      	uxtb	r6, r6
 8006fde:	4283      	cmp	r3, r0
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	dc05      	bgt.n	8006ff0 <__swbuf_r+0x4e>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f001 fe7c 	bl	8008ce4 <_fflush_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d1ed      	bne.n	8006fcc <__swbuf_r+0x2a>
 8006ff0:	68a3      	ldr	r3, [r4, #8]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	6022      	str	r2, [r4, #0]
 8006ffc:	701e      	strb	r6, [r3, #0]
 8006ffe:	6962      	ldr	r2, [r4, #20]
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	429a      	cmp	r2, r3
 8007004:	d004      	beq.n	8007010 <__swbuf_r+0x6e>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d5e1      	bpl.n	8006fd0 <__swbuf_r+0x2e>
 800700c:	2e0a      	cmp	r6, #10
 800700e:	d1df      	bne.n	8006fd0 <__swbuf_r+0x2e>
 8007010:	4621      	mov	r1, r4
 8007012:	4628      	mov	r0, r5
 8007014:	f001 fe66 	bl	8008ce4 <_fflush_r>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0d9      	beq.n	8006fd0 <__swbuf_r+0x2e>
 800701c:	e7d6      	b.n	8006fcc <__swbuf_r+0x2a>
	...

08007020 <__swsetup_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4b29      	ldr	r3, [pc, #164]	@ (80070c8 <__swsetup_r+0xa8>)
 8007024:	4605      	mov	r5, r0
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	460c      	mov	r4, r1
 800702a:	b118      	cbz	r0, 8007034 <__swsetup_r+0x14>
 800702c:	6a03      	ldr	r3, [r0, #32]
 800702e:	b90b      	cbnz	r3, 8007034 <__swsetup_r+0x14>
 8007030:	f7ff fe9a 	bl	8006d68 <__sinit>
 8007034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007038:	0719      	lsls	r1, r3, #28
 800703a:	d422      	bmi.n	8007082 <__swsetup_r+0x62>
 800703c:	06da      	lsls	r2, r3, #27
 800703e:	d407      	bmi.n	8007050 <__swsetup_r+0x30>
 8007040:	2209      	movs	r2, #9
 8007042:	602a      	str	r2, [r5, #0]
 8007044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	e033      	b.n	80070b8 <__swsetup_r+0x98>
 8007050:	0758      	lsls	r0, r3, #29
 8007052:	d512      	bpl.n	800707a <__swsetup_r+0x5a>
 8007054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007056:	b141      	cbz	r1, 800706a <__swsetup_r+0x4a>
 8007058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800705c:	4299      	cmp	r1, r3
 800705e:	d002      	beq.n	8007066 <__swsetup_r+0x46>
 8007060:	4628      	mov	r0, r5
 8007062:	f000 fe9f 	bl	8007da4 <_free_r>
 8007066:	2300      	movs	r3, #0
 8007068:	6363      	str	r3, [r4, #52]	@ 0x34
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	2300      	movs	r3, #0
 8007074:	6063      	str	r3, [r4, #4]
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f043 0308 	orr.w	r3, r3, #8
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	b94b      	cbnz	r3, 800709a <__swsetup_r+0x7a>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800708c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007090:	d003      	beq.n	800709a <__swsetup_r+0x7a>
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f001 fe73 	bl	8008d80 <__smakebuf_r>
 800709a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800709e:	f013 0201 	ands.w	r2, r3, #1
 80070a2:	d00a      	beq.n	80070ba <__swsetup_r+0x9a>
 80070a4:	2200      	movs	r2, #0
 80070a6:	60a2      	str	r2, [r4, #8]
 80070a8:	6962      	ldr	r2, [r4, #20]
 80070aa:	4252      	negs	r2, r2
 80070ac:	61a2      	str	r2, [r4, #24]
 80070ae:	6922      	ldr	r2, [r4, #16]
 80070b0:	b942      	cbnz	r2, 80070c4 <__swsetup_r+0xa4>
 80070b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070b6:	d1c5      	bne.n	8007044 <__swsetup_r+0x24>
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	0799      	lsls	r1, r3, #30
 80070bc:	bf58      	it	pl
 80070be:	6962      	ldrpl	r2, [r4, #20]
 80070c0:	60a2      	str	r2, [r4, #8]
 80070c2:	e7f4      	b.n	80070ae <__swsetup_r+0x8e>
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7f7      	b.n	80070b8 <__swsetup_r+0x98>
 80070c8:	20000024 	.word	0x20000024

080070cc <memset>:
 80070cc:	4402      	add	r2, r0
 80070ce:	4603      	mov	r3, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <_localeconv_r>:
 80070dc:	4800      	ldr	r0, [pc, #0]	@ (80070e0 <_localeconv_r+0x4>)
 80070de:	4770      	bx	lr
 80070e0:	20000164 	.word	0x20000164

080070e4 <_close_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d06      	ldr	r5, [pc, #24]	@ (8007100 <_close_r+0x1c>)
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7fa fe7c 	bl	8001dec <_close>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_close_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_close_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000dec 	.word	0x20000dec

08007104 <_lseek_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	@ (8007124 <_lseek_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fa fe91 	bl	8001e3a <_lseek>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_lseek_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_lseek_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20000dec 	.word	0x20000dec

08007128 <_read_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	@ (8007148 <_read_r+0x20>)
 800712c:	4604      	mov	r4, r0
 800712e:	4608      	mov	r0, r1
 8007130:	4611      	mov	r1, r2
 8007132:	2200      	movs	r2, #0
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f7fa fe3b 	bl	8001db2 <_read>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_read_r+0x1e>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_read_r+0x1e>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	20000dec 	.word	0x20000dec

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	@ (800716c <_write_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fa fac4 	bl	80016e8 <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000dec 	.word	0x20000dec

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	@ (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000024 	.word	0x20000024

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	@ (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	@ (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	@ (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	@ (80071c0 <__libc_init_array+0x44>)
 8007190:	f001 ff64 	bl	800905c <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	080096a8 	.word	0x080096a8
 80071b8:	080096a8 	.word	0x080096a8
 80071bc:	080096a8 	.word	0x080096a8
 80071c0:	080096ac 	.word	0x080096ac

080071c4 <__retarget_lock_init_recursive>:
 80071c4:	4770      	bx	lr

080071c6 <__retarget_lock_acquire_recursive>:
 80071c6:	4770      	bx	lr

080071c8 <__retarget_lock_release_recursive>:
 80071c8:	4770      	bx	lr

080071ca <memcpy>:
 80071ca:	440a      	add	r2, r1
 80071cc:	4291      	cmp	r1, r2
 80071ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d2:	d100      	bne.n	80071d6 <memcpy+0xc>
 80071d4:	4770      	bx	lr
 80071d6:	b510      	push	{r4, lr}
 80071d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e0:	4291      	cmp	r1, r2
 80071e2:	d1f9      	bne.n	80071d8 <memcpy+0xe>
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <quorem>:
 80071e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6903      	ldr	r3, [r0, #16]
 80071ec:	690c      	ldr	r4, [r1, #16]
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	4607      	mov	r7, r0
 80071f2:	db7e      	blt.n	80072f2 <quorem+0x10c>
 80071f4:	3c01      	subs	r4, #1
 80071f6:	f101 0814 	add.w	r8, r1, #20
 80071fa:	00a3      	lsls	r3, r4, #2
 80071fc:	f100 0514 	add.w	r5, r0, #20
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800720c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007210:	3301      	adds	r3, #1
 8007212:	429a      	cmp	r2, r3
 8007214:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007218:	fbb2 f6f3 	udiv	r6, r2, r3
 800721c:	d32e      	bcc.n	800727c <quorem+0x96>
 800721e:	f04f 0a00 	mov.w	sl, #0
 8007222:	46c4      	mov	ip, r8
 8007224:	46ae      	mov	lr, r5
 8007226:	46d3      	mov	fp, sl
 8007228:	f85c 3b04 	ldr.w	r3, [ip], #4
 800722c:	b298      	uxth	r0, r3
 800722e:	fb06 a000 	mla	r0, r6, r0, sl
 8007232:	0c02      	lsrs	r2, r0, #16
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	fb06 2303 	mla	r3, r6, r3, r2
 800723a:	f8de 2000 	ldr.w	r2, [lr]
 800723e:	b280      	uxth	r0, r0
 8007240:	b292      	uxth	r2, r2
 8007242:	1a12      	subs	r2, r2, r0
 8007244:	445a      	add	r2, fp
 8007246:	f8de 0000 	ldr.w	r0, [lr]
 800724a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007254:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007258:	b292      	uxth	r2, r2
 800725a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800725e:	45e1      	cmp	r9, ip
 8007260:	f84e 2b04 	str.w	r2, [lr], #4
 8007264:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007268:	d2de      	bcs.n	8007228 <quorem+0x42>
 800726a:	9b00      	ldr	r3, [sp, #0]
 800726c:	58eb      	ldr	r3, [r5, r3]
 800726e:	b92b      	cbnz	r3, 800727c <quorem+0x96>
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	3b04      	subs	r3, #4
 8007274:	429d      	cmp	r5, r3
 8007276:	461a      	mov	r2, r3
 8007278:	d32f      	bcc.n	80072da <quorem+0xf4>
 800727a:	613c      	str	r4, [r7, #16]
 800727c:	4638      	mov	r0, r7
 800727e:	f001 f90b 	bl	8008498 <__mcmp>
 8007282:	2800      	cmp	r0, #0
 8007284:	db25      	blt.n	80072d2 <quorem+0xec>
 8007286:	4629      	mov	r1, r5
 8007288:	2000      	movs	r0, #0
 800728a:	f858 2b04 	ldr.w	r2, [r8], #4
 800728e:	f8d1 c000 	ldr.w	ip, [r1]
 8007292:	fa1f fe82 	uxth.w	lr, r2
 8007296:	fa1f f38c 	uxth.w	r3, ip
 800729a:	eba3 030e 	sub.w	r3, r3, lr
 800729e:	4403      	add	r3, r0
 80072a0:	0c12      	lsrs	r2, r2, #16
 80072a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072b0:	45c1      	cmp	r9, r8
 80072b2:	f841 3b04 	str.w	r3, [r1], #4
 80072b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ba:	d2e6      	bcs.n	800728a <quorem+0xa4>
 80072bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c4:	b922      	cbnz	r2, 80072d0 <quorem+0xea>
 80072c6:	3b04      	subs	r3, #4
 80072c8:	429d      	cmp	r5, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	d30b      	bcc.n	80072e6 <quorem+0x100>
 80072ce:	613c      	str	r4, [r7, #16]
 80072d0:	3601      	adds	r6, #1
 80072d2:	4630      	mov	r0, r6
 80072d4:	b003      	add	sp, #12
 80072d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	3b04      	subs	r3, #4
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d1cb      	bne.n	800727a <quorem+0x94>
 80072e2:	3c01      	subs	r4, #1
 80072e4:	e7c6      	b.n	8007274 <quorem+0x8e>
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	d1ef      	bne.n	80072ce <quorem+0xe8>
 80072ee:	3c01      	subs	r4, #1
 80072f0:	e7ea      	b.n	80072c8 <quorem+0xe2>
 80072f2:	2000      	movs	r0, #0
 80072f4:	e7ee      	b.n	80072d4 <quorem+0xee>
	...

080072f8 <_dtoa_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	ed2d 8b02 	vpush	{d8}
 8007300:	69c7      	ldr	r7, [r0, #28]
 8007302:	b091      	sub	sp, #68	@ 0x44
 8007304:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007308:	ec55 4b10 	vmov	r4, r5, d0
 800730c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800730e:	9107      	str	r1, [sp, #28]
 8007310:	4681      	mov	r9, r0
 8007312:	9209      	str	r2, [sp, #36]	@ 0x24
 8007314:	930d      	str	r3, [sp, #52]	@ 0x34
 8007316:	b97f      	cbnz	r7, 8007338 <_dtoa_r+0x40>
 8007318:	2010      	movs	r0, #16
 800731a:	f000 fd8d 	bl	8007e38 <malloc>
 800731e:	4602      	mov	r2, r0
 8007320:	f8c9 001c 	str.w	r0, [r9, #28]
 8007324:	b920      	cbnz	r0, 8007330 <_dtoa_r+0x38>
 8007326:	4ba0      	ldr	r3, [pc, #640]	@ (80075a8 <_dtoa_r+0x2b0>)
 8007328:	21ef      	movs	r1, #239	@ 0xef
 800732a:	48a0      	ldr	r0, [pc, #640]	@ (80075ac <_dtoa_r+0x2b4>)
 800732c:	f001 fdb0 	bl	8008e90 <__assert_func>
 8007330:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007334:	6007      	str	r7, [r0, #0]
 8007336:	60c7      	str	r7, [r0, #12]
 8007338:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	b159      	cbz	r1, 8007358 <_dtoa_r+0x60>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	604a      	str	r2, [r1, #4]
 8007344:	2301      	movs	r3, #1
 8007346:	4093      	lsls	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
 800734a:	4648      	mov	r0, r9
 800734c:	f000 fe6a 	bl	8008024 <_Bfree>
 8007350:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	1e2b      	subs	r3, r5, #0
 800735a:	bfbb      	ittet	lt
 800735c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007360:	9303      	strlt	r3, [sp, #12]
 8007362:	2300      	movge	r3, #0
 8007364:	2201      	movlt	r2, #1
 8007366:	bfac      	ite	ge
 8007368:	6033      	strge	r3, [r6, #0]
 800736a:	6032      	strlt	r2, [r6, #0]
 800736c:	4b90      	ldr	r3, [pc, #576]	@ (80075b0 <_dtoa_r+0x2b8>)
 800736e:	9e03      	ldr	r6, [sp, #12]
 8007370:	43b3      	bics	r3, r6
 8007372:	d110      	bne.n	8007396 <_dtoa_r+0x9e>
 8007374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007376:	f242 730f 	movw	r3, #9999	@ 0x270f
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007380:	4323      	orrs	r3, r4
 8007382:	f000 84de 	beq.w	8007d42 <_dtoa_r+0xa4a>
 8007386:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007388:	4f8a      	ldr	r7, [pc, #552]	@ (80075b4 <_dtoa_r+0x2bc>)
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 84e0 	beq.w	8007d50 <_dtoa_r+0xa58>
 8007390:	1cfb      	adds	r3, r7, #3
 8007392:	f000 bcdb 	b.w	8007d4c <_dtoa_r+0xa54>
 8007396:	ed9d 8b02 	vldr	d8, [sp, #8]
 800739a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a2:	d10a      	bne.n	80073ba <_dtoa_r+0xc2>
 80073a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073a6:	2301      	movs	r3, #1
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073ac:	b113      	cbz	r3, 80073b4 <_dtoa_r+0xbc>
 80073ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80073b0:	4b81      	ldr	r3, [pc, #516]	@ (80075b8 <_dtoa_r+0x2c0>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4f81      	ldr	r7, [pc, #516]	@ (80075bc <_dtoa_r+0x2c4>)
 80073b6:	f000 bccb 	b.w	8007d50 <_dtoa_r+0xa58>
 80073ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80073bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80073be:	4648      	mov	r0, r9
 80073c0:	eeb0 0b48 	vmov.f64	d0, d8
 80073c4:	f001 f918 	bl	80085f8 <__d2b>
 80073c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80073cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073ce:	9001      	str	r0, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d045      	beq.n	8007460 <_dtoa_r+0x168>
 80073d4:	eeb0 7b48 	vmov.f64	d7, d8
 80073d8:	ee18 1a90 	vmov	r1, s17
 80073dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80073e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80073e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80073e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80073ec:	2500      	movs	r5, #0
 80073ee:	ee07 1a90 	vmov	s15, r1
 80073f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80073f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007590 <_dtoa_r+0x298>
 80073fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80073fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007598 <_dtoa_r+0x2a0>
 8007402:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007406:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80075a0 <_dtoa_r+0x2a8>
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007412:	eeb0 7b46 	vmov.f64	d7, d6
 8007416:	eea4 7b05 	vfma.f64	d7, d4, d5
 800741a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800741e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	ee16 8a90 	vmov	r8, s13
 800742a:	d508      	bpl.n	800743e <_dtoa_r+0x146>
 800742c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007430:	eeb4 6b47 	vcmp.f64	d6, d7
 8007434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007438:	bf18      	it	ne
 800743a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800743e:	f1b8 0f16 	cmp.w	r8, #22
 8007442:	d82b      	bhi.n	800749c <_dtoa_r+0x1a4>
 8007444:	495e      	ldr	r1, [pc, #376]	@ (80075c0 <_dtoa_r+0x2c8>)
 8007446:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800744a:	ed91 7b00 	vldr	d7, [r1]
 800744e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007456:	d501      	bpl.n	800745c <_dtoa_r+0x164>
 8007458:	f108 38ff 	add.w	r8, r8, #4294967295
 800745c:	2100      	movs	r1, #0
 800745e:	e01e      	b.n	800749e <_dtoa_r+0x1a6>
 8007460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007462:	4413      	add	r3, r2
 8007464:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007468:	2920      	cmp	r1, #32
 800746a:	bfc1      	itttt	gt
 800746c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007470:	408e      	lslgt	r6, r1
 8007472:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007476:	fa24 f101 	lsrgt.w	r1, r4, r1
 800747a:	bfd6      	itet	le
 800747c:	f1c1 0120 	rsble	r1, r1, #32
 8007480:	4331      	orrgt	r1, r6
 8007482:	fa04 f101 	lslle.w	r1, r4, r1
 8007486:	ee07 1a90 	vmov	s15, r1
 800748a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800748e:	3b01      	subs	r3, #1
 8007490:	ee17 1a90 	vmov	r1, s15
 8007494:	2501      	movs	r5, #1
 8007496:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800749a:	e7a8      	b.n	80073ee <_dtoa_r+0xf6>
 800749c:	2101      	movs	r1, #1
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	1e53      	subs	r3, r2, #1
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	bf45      	ittet	mi
 80074a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80074aa:	9305      	strmi	r3, [sp, #20]
 80074ac:	2300      	movpl	r3, #0
 80074ae:	2300      	movmi	r3, #0
 80074b0:	bf4c      	ite	mi
 80074b2:	9306      	strmi	r3, [sp, #24]
 80074b4:	9305      	strpl	r3, [sp, #20]
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80074bc:	db18      	blt.n	80074f0 <_dtoa_r+0x1f8>
 80074be:	9b06      	ldr	r3, [sp, #24]
 80074c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80074c4:	4443      	add	r3, r8
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	2300      	movs	r3, #0
 80074ca:	9a07      	ldr	r2, [sp, #28]
 80074cc:	2a09      	cmp	r2, #9
 80074ce:	d849      	bhi.n	8007564 <_dtoa_r+0x26c>
 80074d0:	2a05      	cmp	r2, #5
 80074d2:	bfc4      	itt	gt
 80074d4:	3a04      	subgt	r2, #4
 80074d6:	9207      	strgt	r2, [sp, #28]
 80074d8:	9a07      	ldr	r2, [sp, #28]
 80074da:	f1a2 0202 	sub.w	r2, r2, #2
 80074de:	bfcc      	ite	gt
 80074e0:	2400      	movgt	r4, #0
 80074e2:	2401      	movle	r4, #1
 80074e4:	2a03      	cmp	r2, #3
 80074e6:	d848      	bhi.n	800757a <_dtoa_r+0x282>
 80074e8:	e8df f002 	tbb	[pc, r2]
 80074ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	2200      	movs	r2, #0
 80074f4:	eba3 0308 	sub.w	r3, r3, r8
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80074fc:	f1c8 0300 	rsb	r3, r8, #0
 8007500:	e7e3      	b.n	80074ca <_dtoa_r+0x1d2>
 8007502:	2200      	movs	r2, #0
 8007504:	9208      	str	r2, [sp, #32]
 8007506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007508:	2a00      	cmp	r2, #0
 800750a:	dc39      	bgt.n	8007580 <_dtoa_r+0x288>
 800750c:	f04f 0b01 	mov.w	fp, #1
 8007510:	46da      	mov	sl, fp
 8007512:	465a      	mov	r2, fp
 8007514:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007518:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800751c:	2100      	movs	r1, #0
 800751e:	2004      	movs	r0, #4
 8007520:	f100 0614 	add.w	r6, r0, #20
 8007524:	4296      	cmp	r6, r2
 8007526:	d930      	bls.n	800758a <_dtoa_r+0x292>
 8007528:	6079      	str	r1, [r7, #4]
 800752a:	4648      	mov	r0, r9
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	f000 fd39 	bl	8007fa4 <_Balloc>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	4607      	mov	r7, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	d146      	bne.n	80075c8 <_dtoa_r+0x2d0>
 800753a:	4b22      	ldr	r3, [pc, #136]	@ (80075c4 <_dtoa_r+0x2cc>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007542:	e6f2      	b.n	800732a <_dtoa_r+0x32>
 8007544:	2201      	movs	r2, #1
 8007546:	e7dd      	b.n	8007504 <_dtoa_r+0x20c>
 8007548:	2200      	movs	r2, #0
 800754a:	9208      	str	r2, [sp, #32]
 800754c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800754e:	eb08 0b02 	add.w	fp, r8, r2
 8007552:	f10b 0a01 	add.w	sl, fp, #1
 8007556:	4652      	mov	r2, sl
 8007558:	2a01      	cmp	r2, #1
 800755a:	bfb8      	it	lt
 800755c:	2201      	movlt	r2, #1
 800755e:	e7db      	b.n	8007518 <_dtoa_r+0x220>
 8007560:	2201      	movs	r2, #1
 8007562:	e7f2      	b.n	800754a <_dtoa_r+0x252>
 8007564:	2401      	movs	r4, #1
 8007566:	2200      	movs	r2, #0
 8007568:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800756c:	f04f 3bff 	mov.w	fp, #4294967295
 8007570:	2100      	movs	r1, #0
 8007572:	46da      	mov	sl, fp
 8007574:	2212      	movs	r2, #18
 8007576:	9109      	str	r1, [sp, #36]	@ 0x24
 8007578:	e7ce      	b.n	8007518 <_dtoa_r+0x220>
 800757a:	2201      	movs	r2, #1
 800757c:	9208      	str	r2, [sp, #32]
 800757e:	e7f5      	b.n	800756c <_dtoa_r+0x274>
 8007580:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007584:	46da      	mov	sl, fp
 8007586:	465a      	mov	r2, fp
 8007588:	e7c6      	b.n	8007518 <_dtoa_r+0x220>
 800758a:	3101      	adds	r1, #1
 800758c:	0040      	lsls	r0, r0, #1
 800758e:	e7c7      	b.n	8007520 <_dtoa_r+0x228>
 8007590:	636f4361 	.word	0x636f4361
 8007594:	3fd287a7 	.word	0x3fd287a7
 8007598:	8b60c8b3 	.word	0x8b60c8b3
 800759c:	3fc68a28 	.word	0x3fc68a28
 80075a0:	509f79fb 	.word	0x509f79fb
 80075a4:	3fd34413 	.word	0x3fd34413
 80075a8:	08009371 	.word	0x08009371
 80075ac:	08009388 	.word	0x08009388
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	0800936d 	.word	0x0800936d
 80075b8:	08009341 	.word	0x08009341
 80075bc:	08009340 	.word	0x08009340
 80075c0:	08009480 	.word	0x08009480
 80075c4:	080093e0 	.word	0x080093e0
 80075c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80075cc:	f1ba 0f0e 	cmp.w	sl, #14
 80075d0:	6010      	str	r0, [r2, #0]
 80075d2:	d86f      	bhi.n	80076b4 <_dtoa_r+0x3bc>
 80075d4:	2c00      	cmp	r4, #0
 80075d6:	d06d      	beq.n	80076b4 <_dtoa_r+0x3bc>
 80075d8:	f1b8 0f00 	cmp.w	r8, #0
 80075dc:	f340 80c2 	ble.w	8007764 <_dtoa_r+0x46c>
 80075e0:	4aca      	ldr	r2, [pc, #808]	@ (800790c <_dtoa_r+0x614>)
 80075e2:	f008 010f 	and.w	r1, r8, #15
 80075e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80075ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80075ee:	ed92 7b00 	vldr	d7, [r2]
 80075f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80075f6:	f000 80a9 	beq.w	800774c <_dtoa_r+0x454>
 80075fa:	4ac5      	ldr	r2, [pc, #788]	@ (8007910 <_dtoa_r+0x618>)
 80075fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8007600:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007604:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007608:	f001 010f 	and.w	r1, r1, #15
 800760c:	2203      	movs	r2, #3
 800760e:	48c0      	ldr	r0, [pc, #768]	@ (8007910 <_dtoa_r+0x618>)
 8007610:	2900      	cmp	r1, #0
 8007612:	f040 809d 	bne.w	8007750 <_dtoa_r+0x458>
 8007616:	ed9d 6b02 	vldr	d6, [sp, #8]
 800761a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800761e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007622:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007628:	2900      	cmp	r1, #0
 800762a:	f000 80c1 	beq.w	80077b0 <_dtoa_r+0x4b8>
 800762e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	f140 80b9 	bpl.w	80077b0 <_dtoa_r+0x4b8>
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	f000 80b5 	beq.w	80077b0 <_dtoa_r+0x4b8>
 8007646:	f1bb 0f00 	cmp.w	fp, #0
 800764a:	dd31      	ble.n	80076b0 <_dtoa_r+0x3b8>
 800764c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007650:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007658:	f108 31ff 	add.w	r1, r8, #4294967295
 800765c:	9104      	str	r1, [sp, #16]
 800765e:	3201      	adds	r2, #1
 8007660:	465c      	mov	r4, fp
 8007662:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007666:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800766a:	ee07 2a90 	vmov	s15, r2
 800766e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007672:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007676:	ee15 2a90 	vmov	r2, s11
 800767a:	ec51 0b15 	vmov	r0, r1, d5
 800767e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007682:	2c00      	cmp	r4, #0
 8007684:	f040 8098 	bne.w	80077b8 <_dtoa_r+0x4c0>
 8007688:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800768c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007690:	ec41 0b17 	vmov	d7, r0, r1
 8007694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769c:	f300 8261 	bgt.w	8007b62 <_dtoa_r+0x86a>
 80076a0:	eeb1 7b47 	vneg.f64	d7, d7
 80076a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	f100 80f5 	bmi.w	800789a <_dtoa_r+0x5a2>
 80076b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	f2c0 812c 	blt.w	8007914 <_dtoa_r+0x61c>
 80076bc:	f1b8 0f0e 	cmp.w	r8, #14
 80076c0:	f300 8128 	bgt.w	8007914 <_dtoa_r+0x61c>
 80076c4:	4b91      	ldr	r3, [pc, #580]	@ (800790c <_dtoa_r+0x614>)
 80076c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076ca:	ed93 6b00 	vldr	d6, [r3]
 80076ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da03      	bge.n	80076dc <_dtoa_r+0x3e4>
 80076d4:	f1ba 0f00 	cmp.w	sl, #0
 80076d8:	f340 80d2 	ble.w	8007880 <_dtoa_r+0x588>
 80076dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80076e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076e4:	463e      	mov	r6, r7
 80076e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80076ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80076ee:	ee15 3a10 	vmov	r3, s10
 80076f2:	3330      	adds	r3, #48	@ 0x30
 80076f4:	f806 3b01 	strb.w	r3, [r6], #1
 80076f8:	1bf3      	subs	r3, r6, r7
 80076fa:	459a      	cmp	sl, r3
 80076fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007700:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007704:	f040 80f8 	bne.w	80078f8 <_dtoa_r+0x600>
 8007708:	ee37 7b07 	vadd.f64	d7, d7, d7
 800770c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007714:	f300 80dd 	bgt.w	80078d2 <_dtoa_r+0x5da>
 8007718:	eeb4 7b46 	vcmp.f64	d7, d6
 800771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007720:	d104      	bne.n	800772c <_dtoa_r+0x434>
 8007722:	ee15 3a10 	vmov	r3, s10
 8007726:	07db      	lsls	r3, r3, #31
 8007728:	f100 80d3 	bmi.w	80078d2 <_dtoa_r+0x5da>
 800772c:	9901      	ldr	r1, [sp, #4]
 800772e:	4648      	mov	r0, r9
 8007730:	f000 fc78 	bl	8008024 <_Bfree>
 8007734:	2300      	movs	r3, #0
 8007736:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007738:	7033      	strb	r3, [r6, #0]
 800773a:	f108 0301 	add.w	r3, r8, #1
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8304 	beq.w	8007d50 <_dtoa_r+0xa58>
 8007748:	601e      	str	r6, [r3, #0]
 800774a:	e301      	b.n	8007d50 <_dtoa_r+0xa58>
 800774c:	2202      	movs	r2, #2
 800774e:	e75e      	b.n	800760e <_dtoa_r+0x316>
 8007750:	07cc      	lsls	r4, r1, #31
 8007752:	d504      	bpl.n	800775e <_dtoa_r+0x466>
 8007754:	ed90 6b00 	vldr	d6, [r0]
 8007758:	3201      	adds	r2, #1
 800775a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800775e:	1049      	asrs	r1, r1, #1
 8007760:	3008      	adds	r0, #8
 8007762:	e755      	b.n	8007610 <_dtoa_r+0x318>
 8007764:	d022      	beq.n	80077ac <_dtoa_r+0x4b4>
 8007766:	f1c8 0100 	rsb	r1, r8, #0
 800776a:	4a68      	ldr	r2, [pc, #416]	@ (800790c <_dtoa_r+0x614>)
 800776c:	f001 000f 	and.w	r0, r1, #15
 8007770:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007774:	ed92 7b00 	vldr	d7, [r2]
 8007778:	ee28 7b07 	vmul.f64	d7, d8, d7
 800777c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007780:	4863      	ldr	r0, [pc, #396]	@ (8007910 <_dtoa_r+0x618>)
 8007782:	1109      	asrs	r1, r1, #4
 8007784:	2400      	movs	r4, #0
 8007786:	2202      	movs	r2, #2
 8007788:	b929      	cbnz	r1, 8007796 <_dtoa_r+0x49e>
 800778a:	2c00      	cmp	r4, #0
 800778c:	f43f af49 	beq.w	8007622 <_dtoa_r+0x32a>
 8007790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007794:	e745      	b.n	8007622 <_dtoa_r+0x32a>
 8007796:	07ce      	lsls	r6, r1, #31
 8007798:	d505      	bpl.n	80077a6 <_dtoa_r+0x4ae>
 800779a:	ed90 6b00 	vldr	d6, [r0]
 800779e:	3201      	adds	r2, #1
 80077a0:	2401      	movs	r4, #1
 80077a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077a6:	1049      	asrs	r1, r1, #1
 80077a8:	3008      	adds	r0, #8
 80077aa:	e7ed      	b.n	8007788 <_dtoa_r+0x490>
 80077ac:	2202      	movs	r2, #2
 80077ae:	e738      	b.n	8007622 <_dtoa_r+0x32a>
 80077b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80077b4:	4654      	mov	r4, sl
 80077b6:	e754      	b.n	8007662 <_dtoa_r+0x36a>
 80077b8:	4a54      	ldr	r2, [pc, #336]	@ (800790c <_dtoa_r+0x614>)
 80077ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80077be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80077c2:	9a08      	ldr	r2, [sp, #32]
 80077c4:	ec41 0b17 	vmov	d7, r0, r1
 80077c8:	443c      	add	r4, r7
 80077ca:	b34a      	cbz	r2, 8007820 <_dtoa_r+0x528>
 80077cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80077d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80077d4:	463e      	mov	r6, r7
 80077d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80077da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80077de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80077e6:	ee14 2a90 	vmov	r2, s9
 80077ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077ee:	3230      	adds	r2, #48	@ 0x30
 80077f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fc:	f806 2b01 	strb.w	r2, [r6], #1
 8007800:	d438      	bmi.n	8007874 <_dtoa_r+0x57c>
 8007802:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007806:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	d462      	bmi.n	80078d6 <_dtoa_r+0x5de>
 8007810:	42a6      	cmp	r6, r4
 8007812:	f43f af4d 	beq.w	80076b0 <_dtoa_r+0x3b8>
 8007816:	ee27 7b03 	vmul.f64	d7, d7, d3
 800781a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800781e:	e7e0      	b.n	80077e2 <_dtoa_r+0x4ea>
 8007820:	4621      	mov	r1, r4
 8007822:	463e      	mov	r6, r7
 8007824:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007828:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800782c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007830:	ee14 2a90 	vmov	r2, s9
 8007834:	3230      	adds	r2, #48	@ 0x30
 8007836:	f806 2b01 	strb.w	r2, [r6], #1
 800783a:	42a6      	cmp	r6, r4
 800783c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007840:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007844:	d119      	bne.n	800787a <_dtoa_r+0x582>
 8007846:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800784a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800784e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007856:	dc3e      	bgt.n	80078d6 <_dtoa_r+0x5de>
 8007858:	ee35 5b47 	vsub.f64	d5, d5, d7
 800785c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007864:	f57f af24 	bpl.w	80076b0 <_dtoa_r+0x3b8>
 8007868:	460e      	mov	r6, r1
 800786a:	3901      	subs	r1, #1
 800786c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d0f9      	beq.n	8007868 <_dtoa_r+0x570>
 8007874:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007878:	e758      	b.n	800772c <_dtoa_r+0x434>
 800787a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800787e:	e7d5      	b.n	800782c <_dtoa_r+0x534>
 8007880:	d10b      	bne.n	800789a <_dtoa_r+0x5a2>
 8007882:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007886:	ee26 6b07 	vmul.f64	d6, d6, d7
 800788a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800788e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007896:	f2c0 8161 	blt.w	8007b5c <_dtoa_r+0x864>
 800789a:	2400      	movs	r4, #0
 800789c:	4625      	mov	r5, r4
 800789e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a0:	43db      	mvns	r3, r3
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	463e      	mov	r6, r7
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	4621      	mov	r1, r4
 80078ac:	4648      	mov	r0, r9
 80078ae:	f000 fbb9 	bl	8008024 <_Bfree>
 80078b2:	2d00      	cmp	r5, #0
 80078b4:	d0de      	beq.n	8007874 <_dtoa_r+0x57c>
 80078b6:	f1b8 0f00 	cmp.w	r8, #0
 80078ba:	d005      	beq.n	80078c8 <_dtoa_r+0x5d0>
 80078bc:	45a8      	cmp	r8, r5
 80078be:	d003      	beq.n	80078c8 <_dtoa_r+0x5d0>
 80078c0:	4641      	mov	r1, r8
 80078c2:	4648      	mov	r0, r9
 80078c4:	f000 fbae 	bl	8008024 <_Bfree>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4648      	mov	r0, r9
 80078cc:	f000 fbaa 	bl	8008024 <_Bfree>
 80078d0:	e7d0      	b.n	8007874 <_dtoa_r+0x57c>
 80078d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80078d6:	4633      	mov	r3, r6
 80078d8:	461e      	mov	r6, r3
 80078da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078de:	2a39      	cmp	r2, #57	@ 0x39
 80078e0:	d106      	bne.n	80078f0 <_dtoa_r+0x5f8>
 80078e2:	429f      	cmp	r7, r3
 80078e4:	d1f8      	bne.n	80078d8 <_dtoa_r+0x5e0>
 80078e6:	9a04      	ldr	r2, [sp, #16]
 80078e8:	3201      	adds	r2, #1
 80078ea:	9204      	str	r2, [sp, #16]
 80078ec:	2230      	movs	r2, #48	@ 0x30
 80078ee:	703a      	strb	r2, [r7, #0]
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	3201      	adds	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7bd      	b.n	8007874 <_dtoa_r+0x57c>
 80078f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007904:	f47f aeef 	bne.w	80076e6 <_dtoa_r+0x3ee>
 8007908:	e710      	b.n	800772c <_dtoa_r+0x434>
 800790a:	bf00      	nop
 800790c:	08009480 	.word	0x08009480
 8007910:	08009458 	.word	0x08009458
 8007914:	9908      	ldr	r1, [sp, #32]
 8007916:	2900      	cmp	r1, #0
 8007918:	f000 80e3 	beq.w	8007ae2 <_dtoa_r+0x7ea>
 800791c:	9907      	ldr	r1, [sp, #28]
 800791e:	2901      	cmp	r1, #1
 8007920:	f300 80c8 	bgt.w	8007ab4 <_dtoa_r+0x7bc>
 8007924:	2d00      	cmp	r5, #0
 8007926:	f000 80c1 	beq.w	8007aac <_dtoa_r+0x7b4>
 800792a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800792e:	9e05      	ldr	r6, [sp, #20]
 8007930:	461c      	mov	r4, r3
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	4413      	add	r3, r2
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	2101      	movs	r1, #1
 800793e:	4413      	add	r3, r2
 8007940:	4648      	mov	r0, r9
 8007942:	9306      	str	r3, [sp, #24]
 8007944:	f000 fc22 	bl	800818c <__i2b>
 8007948:	9b04      	ldr	r3, [sp, #16]
 800794a:	4605      	mov	r5, r0
 800794c:	b166      	cbz	r6, 8007968 <_dtoa_r+0x670>
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	2a00      	cmp	r2, #0
 8007952:	dd09      	ble.n	8007968 <_dtoa_r+0x670>
 8007954:	42b2      	cmp	r2, r6
 8007956:	9905      	ldr	r1, [sp, #20]
 8007958:	bfa8      	it	ge
 800795a:	4632      	movge	r2, r6
 800795c:	1a89      	subs	r1, r1, r2
 800795e:	9105      	str	r1, [sp, #20]
 8007960:	9906      	ldr	r1, [sp, #24]
 8007962:	1ab6      	subs	r6, r6, r2
 8007964:	1a8a      	subs	r2, r1, r2
 8007966:	9206      	str	r2, [sp, #24]
 8007968:	b1fb      	cbz	r3, 80079aa <_dtoa_r+0x6b2>
 800796a:	9a08      	ldr	r2, [sp, #32]
 800796c:	2a00      	cmp	r2, #0
 800796e:	f000 80bc 	beq.w	8007aea <_dtoa_r+0x7f2>
 8007972:	b19c      	cbz	r4, 800799c <_dtoa_r+0x6a4>
 8007974:	4629      	mov	r1, r5
 8007976:	4622      	mov	r2, r4
 8007978:	4648      	mov	r0, r9
 800797a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800797c:	f000 fcc6 	bl	800830c <__pow5mult>
 8007980:	9a01      	ldr	r2, [sp, #4]
 8007982:	4601      	mov	r1, r0
 8007984:	4605      	mov	r5, r0
 8007986:	4648      	mov	r0, r9
 8007988:	f000 fc16 	bl	80081b8 <__multiply>
 800798c:	9901      	ldr	r1, [sp, #4]
 800798e:	9004      	str	r0, [sp, #16]
 8007990:	4648      	mov	r0, r9
 8007992:	f000 fb47 	bl	8008024 <_Bfree>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	1b1a      	subs	r2, r3, r4
 800799e:	d004      	beq.n	80079aa <_dtoa_r+0x6b2>
 80079a0:	9901      	ldr	r1, [sp, #4]
 80079a2:	4648      	mov	r0, r9
 80079a4:	f000 fcb2 	bl	800830c <__pow5mult>
 80079a8:	9001      	str	r0, [sp, #4]
 80079aa:	2101      	movs	r1, #1
 80079ac:	4648      	mov	r0, r9
 80079ae:	f000 fbed 	bl	800818c <__i2b>
 80079b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b4:	4604      	mov	r4, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 81d0 	beq.w	8007d5c <_dtoa_r+0xa64>
 80079bc:	461a      	mov	r2, r3
 80079be:	4601      	mov	r1, r0
 80079c0:	4648      	mov	r0, r9
 80079c2:	f000 fca3 	bl	800830c <__pow5mult>
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	4604      	mov	r4, r0
 80079cc:	f300 8095 	bgt.w	8007afa <_dtoa_r+0x802>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 808b 	bne.w	8007aee <_dtoa_r+0x7f6>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80079de:	2a00      	cmp	r2, #0
 80079e0:	f040 8087 	bne.w	8007af2 <_dtoa_r+0x7fa>
 80079e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80079e8:	0d12      	lsrs	r2, r2, #20
 80079ea:	0512      	lsls	r2, r2, #20
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	f000 8082 	beq.w	8007af6 <_dtoa_r+0x7fe>
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	3301      	adds	r3, #1
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	3301      	adds	r3, #1
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	2301      	movs	r3, #1
 8007a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 81af 	beq.w	8007d68 <_dtoa_r+0xa70>
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007a10:	6910      	ldr	r0, [r2, #16]
 8007a12:	f000 fb6f 	bl	80080f4 <__hi0bits>
 8007a16:	f1c0 0020 	rsb	r0, r0, #32
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	4418      	add	r0, r3
 8007a1e:	f010 001f 	ands.w	r0, r0, #31
 8007a22:	d076      	beq.n	8007b12 <_dtoa_r+0x81a>
 8007a24:	f1c0 0220 	rsb	r2, r0, #32
 8007a28:	2a04      	cmp	r2, #4
 8007a2a:	dd69      	ble.n	8007b00 <_dtoa_r+0x808>
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	f1c0 001c 	rsb	r0, r0, #28
 8007a32:	4403      	add	r3, r0
 8007a34:	9305      	str	r3, [sp, #20]
 8007a36:	9b06      	ldr	r3, [sp, #24]
 8007a38:	4406      	add	r6, r0
 8007a3a:	4403      	add	r3, r0
 8007a3c:	9306      	str	r3, [sp, #24]
 8007a3e:	9b05      	ldr	r3, [sp, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd05      	ble.n	8007a50 <_dtoa_r+0x758>
 8007a44:	9901      	ldr	r1, [sp, #4]
 8007a46:	461a      	mov	r2, r3
 8007a48:	4648      	mov	r0, r9
 8007a4a:	f000 fcb9 	bl	80083c0 <__lshift>
 8007a4e:	9001      	str	r0, [sp, #4]
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dd05      	ble.n	8007a62 <_dtoa_r+0x76a>
 8007a56:	4621      	mov	r1, r4
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f000 fcb0 	bl	80083c0 <__lshift>
 8007a60:	4604      	mov	r4, r0
 8007a62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d056      	beq.n	8007b16 <_dtoa_r+0x81e>
 8007a68:	9801      	ldr	r0, [sp, #4]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f000 fd14 	bl	8008498 <__mcmp>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	da50      	bge.n	8007b16 <_dtoa_r+0x81e>
 8007a74:	f108 33ff 	add.w	r3, r8, #4294967295
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	9901      	ldr	r1, [sp, #4]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	220a      	movs	r2, #10
 8007a80:	4648      	mov	r0, r9
 8007a82:	f000 faf1 	bl	8008068 <__multadd>
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	9001      	str	r0, [sp, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 816e 	beq.w	8007d6c <_dtoa_r+0xa74>
 8007a90:	4629      	mov	r1, r5
 8007a92:	2300      	movs	r3, #0
 8007a94:	220a      	movs	r2, #10
 8007a96:	4648      	mov	r0, r9
 8007a98:	f000 fae6 	bl	8008068 <__multadd>
 8007a9c:	f1bb 0f00 	cmp.w	fp, #0
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	dc64      	bgt.n	8007b6e <_dtoa_r+0x876>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	dc3e      	bgt.n	8007b28 <_dtoa_r+0x830>
 8007aaa:	e060      	b.n	8007b6e <_dtoa_r+0x876>
 8007aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ab2:	e73c      	b.n	800792e <_dtoa_r+0x636>
 8007ab4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	bfbf      	itttt	lt
 8007abc:	1ae2      	sublt	r2, r4, r3
 8007abe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ac0:	189b      	addlt	r3, r3, r2
 8007ac2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007ac4:	bfae      	itee	ge
 8007ac6:	1b1c      	subge	r4, r3, r4
 8007ac8:	4623      	movlt	r3, r4
 8007aca:	2400      	movlt	r4, #0
 8007acc:	f1ba 0f00 	cmp.w	sl, #0
 8007ad0:	bfb5      	itete	lt
 8007ad2:	9a05      	ldrlt	r2, [sp, #20]
 8007ad4:	9e05      	ldrge	r6, [sp, #20]
 8007ad6:	eba2 060a 	sublt.w	r6, r2, sl
 8007ada:	4652      	movge	r2, sl
 8007adc:	bfb8      	it	lt
 8007ade:	2200      	movlt	r2, #0
 8007ae0:	e727      	b.n	8007932 <_dtoa_r+0x63a>
 8007ae2:	9e05      	ldr	r6, [sp, #20]
 8007ae4:	9d08      	ldr	r5, [sp, #32]
 8007ae6:	461c      	mov	r4, r3
 8007ae8:	e730      	b.n	800794c <_dtoa_r+0x654>
 8007aea:	461a      	mov	r2, r3
 8007aec:	e758      	b.n	80079a0 <_dtoa_r+0x6a8>
 8007aee:	2300      	movs	r3, #0
 8007af0:	e786      	b.n	8007a00 <_dtoa_r+0x708>
 8007af2:	9b02      	ldr	r3, [sp, #8]
 8007af4:	e784      	b.n	8007a00 <_dtoa_r+0x708>
 8007af6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007af8:	e783      	b.n	8007a02 <_dtoa_r+0x70a>
 8007afa:	2300      	movs	r3, #0
 8007afc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007afe:	e784      	b.n	8007a0a <_dtoa_r+0x712>
 8007b00:	d09d      	beq.n	8007a3e <_dtoa_r+0x746>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	321c      	adds	r2, #28
 8007b06:	4413      	add	r3, r2
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	4416      	add	r6, r2
 8007b0e:	4413      	add	r3, r2
 8007b10:	e794      	b.n	8007a3c <_dtoa_r+0x744>
 8007b12:	4602      	mov	r2, r0
 8007b14:	e7f5      	b.n	8007b02 <_dtoa_r+0x80a>
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b1e:	46d3      	mov	fp, sl
 8007b20:	dc21      	bgt.n	8007b66 <_dtoa_r+0x86e>
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	dd1e      	ble.n	8007b66 <_dtoa_r+0x86e>
 8007b28:	f1bb 0f00 	cmp.w	fp, #0
 8007b2c:	f47f aeb7 	bne.w	800789e <_dtoa_r+0x5a6>
 8007b30:	4621      	mov	r1, r4
 8007b32:	465b      	mov	r3, fp
 8007b34:	2205      	movs	r2, #5
 8007b36:	4648      	mov	r0, r9
 8007b38:	f000 fa96 	bl	8008068 <__multadd>
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	9801      	ldr	r0, [sp, #4]
 8007b42:	f000 fca9 	bl	8008498 <__mcmp>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f77f aea9 	ble.w	800789e <_dtoa_r+0x5a6>
 8007b4c:	463e      	mov	r6, r7
 8007b4e:	2331      	movs	r3, #49	@ 0x31
 8007b50:	f806 3b01 	strb.w	r3, [r6], #1
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	3301      	adds	r3, #1
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	e6a4      	b.n	80078a6 <_dtoa_r+0x5ae>
 8007b5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b60:	4654      	mov	r4, sl
 8007b62:	4625      	mov	r5, r4
 8007b64:	e7f2      	b.n	8007b4c <_dtoa_r+0x854>
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8103 	beq.w	8007d74 <_dtoa_r+0xa7c>
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	dd05      	ble.n	8007b7e <_dtoa_r+0x886>
 8007b72:	4629      	mov	r1, r5
 8007b74:	4632      	mov	r2, r6
 8007b76:	4648      	mov	r0, r9
 8007b78:	f000 fc22 	bl	80083c0 <__lshift>
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d058      	beq.n	8007c36 <_dtoa_r+0x93e>
 8007b84:	6869      	ldr	r1, [r5, #4]
 8007b86:	4648      	mov	r0, r9
 8007b88:	f000 fa0c 	bl	8007fa4 <_Balloc>
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	b928      	cbnz	r0, 8007b9c <_dtoa_r+0x8a4>
 8007b90:	4b82      	ldr	r3, [pc, #520]	@ (8007d9c <_dtoa_r+0xaa4>)
 8007b92:	4602      	mov	r2, r0
 8007b94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b98:	f7ff bbc7 	b.w	800732a <_dtoa_r+0x32>
 8007b9c:	692a      	ldr	r2, [r5, #16]
 8007b9e:	3202      	adds	r2, #2
 8007ba0:	0092      	lsls	r2, r2, #2
 8007ba2:	f105 010c 	add.w	r1, r5, #12
 8007ba6:	300c      	adds	r0, #12
 8007ba8:	f7ff fb0f 	bl	80071ca <memcpy>
 8007bac:	2201      	movs	r2, #1
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4648      	mov	r0, r9
 8007bb2:	f000 fc05 	bl	80083c0 <__lshift>
 8007bb6:	1c7b      	adds	r3, r7, #1
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	eb07 030b 	add.w	r3, r7, fp
 8007bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	46a8      	mov	r8, r5
 8007bc8:	9308      	str	r3, [sp, #32]
 8007bca:	4605      	mov	r5, r0
 8007bcc:	9b05      	ldr	r3, [sp, #20]
 8007bce:	9801      	ldr	r0, [sp, #4]
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007bd6:	f7ff fb06 	bl	80071e6 <quorem>
 8007bda:	4641      	mov	r1, r8
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007be2:	9801      	ldr	r0, [sp, #4]
 8007be4:	f000 fc58 	bl	8008498 <__mcmp>
 8007be8:	462a      	mov	r2, r5
 8007bea:	9006      	str	r0, [sp, #24]
 8007bec:	4621      	mov	r1, r4
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f000 fc6e 	bl	80084d0 <__mdiff>
 8007bf4:	68c2      	ldr	r2, [r0, #12]
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	b9fa      	cbnz	r2, 8007c3a <_dtoa_r+0x942>
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	9801      	ldr	r0, [sp, #4]
 8007bfe:	f000 fc4b 	bl	8008498 <__mcmp>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4631      	mov	r1, r6
 8007c06:	4648      	mov	r0, r9
 8007c08:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c0a:	f000 fa0b 	bl	8008024 <_Bfree>
 8007c0e:	9b07      	ldr	r3, [sp, #28]
 8007c10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c12:	9e05      	ldr	r6, [sp, #20]
 8007c14:	ea43 0102 	orr.w	r1, r3, r2
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	4319      	orrs	r1, r3
 8007c1c:	d10f      	bne.n	8007c3e <_dtoa_r+0x946>
 8007c1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c22:	d028      	beq.n	8007c76 <_dtoa_r+0x97e>
 8007c24:	9b06      	ldr	r3, [sp, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd02      	ble.n	8007c30 <_dtoa_r+0x938>
 8007c2a:	9b02      	ldr	r3, [sp, #8]
 8007c2c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007c30:	f88b a000 	strb.w	sl, [fp]
 8007c34:	e639      	b.n	80078aa <_dtoa_r+0x5b2>
 8007c36:	4628      	mov	r0, r5
 8007c38:	e7bd      	b.n	8007bb6 <_dtoa_r+0x8be>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	e7e2      	b.n	8007c04 <_dtoa_r+0x90c>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <_dtoa_r+0x956>
 8007c44:	9907      	ldr	r1, [sp, #28]
 8007c46:	430b      	orrs	r3, r1
 8007c48:	9908      	ldr	r1, [sp, #32]
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	d120      	bne.n	8007c90 <_dtoa_r+0x998>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	ddee      	ble.n	8007c30 <_dtoa_r+0x938>
 8007c52:	9901      	ldr	r1, [sp, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	4648      	mov	r0, r9
 8007c58:	f000 fbb2 	bl	80083c0 <__lshift>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	f000 fc1a 	bl	8008498 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc03      	bgt.n	8007c70 <_dtoa_r+0x978>
 8007c68:	d1e2      	bne.n	8007c30 <_dtoa_r+0x938>
 8007c6a:	f01a 0f01 	tst.w	sl, #1
 8007c6e:	d0df      	beq.n	8007c30 <_dtoa_r+0x938>
 8007c70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c74:	d1d9      	bne.n	8007c2a <_dtoa_r+0x932>
 8007c76:	2339      	movs	r3, #57	@ 0x39
 8007c78:	f88b 3000 	strb.w	r3, [fp]
 8007c7c:	4633      	mov	r3, r6
 8007c7e:	461e      	mov	r6, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c86:	2a39      	cmp	r2, #57	@ 0x39
 8007c88:	d053      	beq.n	8007d32 <_dtoa_r+0xa3a>
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e60c      	b.n	80078aa <_dtoa_r+0x5b2>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd07      	ble.n	8007ca4 <_dtoa_r+0x9ac>
 8007c94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c98:	d0ed      	beq.n	8007c76 <_dtoa_r+0x97e>
 8007c9a:	f10a 0301 	add.w	r3, sl, #1
 8007c9e:	f88b 3000 	strb.w	r3, [fp]
 8007ca2:	e602      	b.n	80078aa <_dtoa_r+0x5b2>
 8007ca4:	9b05      	ldr	r3, [sp, #20]
 8007ca6:	9a05      	ldr	r2, [sp, #20]
 8007ca8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d029      	beq.n	8007d06 <_dtoa_r+0xa0e>
 8007cb2:	9901      	ldr	r1, [sp, #4]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f000 f9d5 	bl	8008068 <__multadd>
 8007cbe:	45a8      	cmp	r8, r5
 8007cc0:	9001      	str	r0, [sp, #4]
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	f04f 020a 	mov.w	r2, #10
 8007cca:	4641      	mov	r1, r8
 8007ccc:	4648      	mov	r0, r9
 8007cce:	d107      	bne.n	8007ce0 <_dtoa_r+0x9e8>
 8007cd0:	f000 f9ca 	bl	8008068 <__multadd>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	9b05      	ldr	r3, [sp, #20]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	e775      	b.n	8007bcc <_dtoa_r+0x8d4>
 8007ce0:	f000 f9c2 	bl	8008068 <__multadd>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4648      	mov	r0, r9
 8007cee:	f000 f9bb 	bl	8008068 <__multadd>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	e7f0      	b.n	8007cd8 <_dtoa_r+0x9e0>
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	bfcc      	ite	gt
 8007cfc:	465e      	movgt	r6, fp
 8007cfe:	2601      	movle	r6, #1
 8007d00:	443e      	add	r6, r7
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	9901      	ldr	r1, [sp, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	4648      	mov	r0, r9
 8007d0c:	f000 fb58 	bl	80083c0 <__lshift>
 8007d10:	4621      	mov	r1, r4
 8007d12:	9001      	str	r0, [sp, #4]
 8007d14:	f000 fbc0 	bl	8008498 <__mcmp>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	dcaf      	bgt.n	8007c7c <_dtoa_r+0x984>
 8007d1c:	d102      	bne.n	8007d24 <_dtoa_r+0xa2c>
 8007d1e:	f01a 0f01 	tst.w	sl, #1
 8007d22:	d1ab      	bne.n	8007c7c <_dtoa_r+0x984>
 8007d24:	4633      	mov	r3, r6
 8007d26:	461e      	mov	r6, r3
 8007d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2c:	2a30      	cmp	r2, #48	@ 0x30
 8007d2e:	d0fa      	beq.n	8007d26 <_dtoa_r+0xa2e>
 8007d30:	e5bb      	b.n	80078aa <_dtoa_r+0x5b2>
 8007d32:	429f      	cmp	r7, r3
 8007d34:	d1a3      	bne.n	8007c7e <_dtoa_r+0x986>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	2331      	movs	r3, #49	@ 0x31
 8007d3e:	703b      	strb	r3, [r7, #0]
 8007d40:	e5b3      	b.n	80078aa <_dtoa_r+0x5b2>
 8007d42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007d44:	4f16      	ldr	r7, [pc, #88]	@ (8007da0 <_dtoa_r+0xaa8>)
 8007d46:	b11b      	cbz	r3, 8007d50 <_dtoa_r+0xa58>
 8007d48:	f107 0308 	add.w	r3, r7, #8
 8007d4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4638      	mov	r0, r7
 8007d52:	b011      	add	sp, #68	@ 0x44
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	9b07      	ldr	r3, [sp, #28]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	f77f ae36 	ble.w	80079d0 <_dtoa_r+0x6d8>
 8007d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d68:	2001      	movs	r0, #1
 8007d6a:	e656      	b.n	8007a1a <_dtoa_r+0x722>
 8007d6c:	f1bb 0f00 	cmp.w	fp, #0
 8007d70:	f77f aed7 	ble.w	8007b22 <_dtoa_r+0x82a>
 8007d74:	463e      	mov	r6, r7
 8007d76:	9801      	ldr	r0, [sp, #4]
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f7ff fa34 	bl	80071e6 <quorem>
 8007d7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007d82:	f806 ab01 	strb.w	sl, [r6], #1
 8007d86:	1bf2      	subs	r2, r6, r7
 8007d88:	4593      	cmp	fp, r2
 8007d8a:	ddb4      	ble.n	8007cf6 <_dtoa_r+0x9fe>
 8007d8c:	9901      	ldr	r1, [sp, #4]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4648      	mov	r0, r9
 8007d94:	f000 f968 	bl	8008068 <__multadd>
 8007d98:	9001      	str	r0, [sp, #4]
 8007d9a:	e7ec      	b.n	8007d76 <_dtoa_r+0xa7e>
 8007d9c:	080093e0 	.word	0x080093e0
 8007da0:	08009364 	.word	0x08009364

08007da4 <_free_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4605      	mov	r5, r0
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d041      	beq.n	8007e30 <_free_r+0x8c>
 8007dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db0:	1f0c      	subs	r4, r1, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bfb8      	it	lt
 8007db6:	18e4      	addlt	r4, r4, r3
 8007db8:	f000 f8e8 	bl	8007f8c <__malloc_lock>
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <_free_r+0x90>)
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	b933      	cbnz	r3, 8007dd0 <_free_r+0x2c>
 8007dc2:	6063      	str	r3, [r4, #4]
 8007dc4:	6014      	str	r4, [r2, #0]
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dcc:	f000 b8e4 	b.w	8007f98 <__malloc_unlock>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d908      	bls.n	8007de6 <_free_r+0x42>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	1821      	adds	r1, r4, r0
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf01      	itttt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	1809      	addeq	r1, r1, r0
 8007de2:	6021      	streq	r1, [r4, #0]
 8007de4:	e7ed      	b.n	8007dc2 <_free_r+0x1e>
 8007de6:	461a      	mov	r2, r3
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b10b      	cbz	r3, 8007df0 <_free_r+0x4c>
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	d9fa      	bls.n	8007de6 <_free_r+0x42>
 8007df0:	6811      	ldr	r1, [r2, #0]
 8007df2:	1850      	adds	r0, r2, r1
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d10b      	bne.n	8007e10 <_free_r+0x6c>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	4401      	add	r1, r0
 8007dfc:	1850      	adds	r0, r2, r1
 8007dfe:	4283      	cmp	r3, r0
 8007e00:	6011      	str	r1, [r2, #0]
 8007e02:	d1e0      	bne.n	8007dc6 <_free_r+0x22>
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	6053      	str	r3, [r2, #4]
 8007e0a:	4408      	add	r0, r1
 8007e0c:	6010      	str	r0, [r2, #0]
 8007e0e:	e7da      	b.n	8007dc6 <_free_r+0x22>
 8007e10:	d902      	bls.n	8007e18 <_free_r+0x74>
 8007e12:	230c      	movs	r3, #12
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	e7d6      	b.n	8007dc6 <_free_r+0x22>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	1821      	adds	r1, r4, r0
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf04      	itt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	bf04      	itt	eq
 8007e28:	1809      	addeq	r1, r1, r0
 8007e2a:	6021      	streq	r1, [r4, #0]
 8007e2c:	6054      	str	r4, [r2, #4]
 8007e2e:	e7ca      	b.n	8007dc6 <_free_r+0x22>
 8007e30:	bd38      	pop	{r3, r4, r5, pc}
 8007e32:	bf00      	nop
 8007e34:	20000df8 	.word	0x20000df8

08007e38 <malloc>:
 8007e38:	4b02      	ldr	r3, [pc, #8]	@ (8007e44 <malloc+0xc>)
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	f000 b825 	b.w	8007e8c <_malloc_r>
 8007e42:	bf00      	nop
 8007e44:	20000024 	.word	0x20000024

08007e48 <sbrk_aligned>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e88 <sbrk_aligned+0x40>)
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6831      	ldr	r1, [r6, #0]
 8007e50:	4605      	mov	r5, r0
 8007e52:	b911      	cbnz	r1, 8007e5a <sbrk_aligned+0x12>
 8007e54:	f001 f80c 	bl	8008e70 <_sbrk_r>
 8007e58:	6030      	str	r0, [r6, #0]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f001 f807 	bl	8008e70 <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d103      	bne.n	8007e6e <sbrk_aligned+0x26>
 8007e66:	f04f 34ff 	mov.w	r4, #4294967295
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	1cc4      	adds	r4, r0, #3
 8007e70:	f024 0403 	bic.w	r4, r4, #3
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d0f8      	beq.n	8007e6a <sbrk_aligned+0x22>
 8007e78:	1a21      	subs	r1, r4, r0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f000 fff8 	bl	8008e70 <_sbrk_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d1f2      	bne.n	8007e6a <sbrk_aligned+0x22>
 8007e84:	e7ef      	b.n	8007e66 <sbrk_aligned+0x1e>
 8007e86:	bf00      	nop
 8007e88:	20000df4 	.word	0x20000df4

08007e8c <_malloc_r>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d904      	bls.n	8007eb2 <_malloc_r+0x26>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	6033      	str	r3, [r6, #0]
 8007eac:	2000      	movs	r0, #0
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f88 <_malloc_r+0xfc>
 8007eb6:	f000 f869 	bl	8007f8c <__malloc_lock>
 8007eba:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebe:	461c      	mov	r4, r3
 8007ec0:	bb44      	cbnz	r4, 8007f14 <_malloc_r+0x88>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ffbf 	bl	8007e48 <sbrk_aligned>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	4604      	mov	r4, r0
 8007ece:	d158      	bne.n	8007f82 <_malloc_r+0xf6>
 8007ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed4:	4627      	mov	r7, r4
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	d143      	bne.n	8007f62 <_malloc_r+0xd6>
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	d04b      	beq.n	8007f76 <_malloc_r+0xea>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	eb04 0903 	add.w	r9, r4, r3
 8007ee8:	f000 ffc2 	bl	8008e70 <_sbrk_r>
 8007eec:	4581      	cmp	r9, r0
 8007eee:	d142      	bne.n	8007f76 <_malloc_r+0xea>
 8007ef0:	6821      	ldr	r1, [r4, #0]
 8007ef2:	1a6d      	subs	r5, r5, r1
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7ff ffa6 	bl	8007e48 <sbrk_aligned>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d03a      	beq.n	8007f76 <_malloc_r+0xea>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	442b      	add	r3, r5
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	bb62      	cbnz	r2, 8007f68 <_malloc_r+0xdc>
 8007f0e:	f8c8 7000 	str.w	r7, [r8]
 8007f12:	e00f      	b.n	8007f34 <_malloc_r+0xa8>
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	1b52      	subs	r2, r2, r5
 8007f18:	d420      	bmi.n	8007f5c <_malloc_r+0xd0>
 8007f1a:	2a0b      	cmp	r2, #11
 8007f1c:	d917      	bls.n	8007f4e <_malloc_r+0xc2>
 8007f1e:	1961      	adds	r1, r4, r5
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	6025      	str	r5, [r4, #0]
 8007f24:	bf18      	it	ne
 8007f26:	6059      	strne	r1, [r3, #4]
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	bf08      	it	eq
 8007f2c:	f8c8 1000 	streq.w	r1, [r8]
 8007f30:	5162      	str	r2, [r4, r5]
 8007f32:	604b      	str	r3, [r1, #4]
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f82f 	bl	8007f98 <__malloc_unlock>
 8007f3a:	f104 000b 	add.w	r0, r4, #11
 8007f3e:	1d23      	adds	r3, r4, #4
 8007f40:	f020 0007 	bic.w	r0, r0, #7
 8007f44:	1ac2      	subs	r2, r0, r3
 8007f46:	bf1c      	itt	ne
 8007f48:	1a1b      	subne	r3, r3, r0
 8007f4a:	50a3      	strne	r3, [r4, r2]
 8007f4c:	e7af      	b.n	8007eae <_malloc_r+0x22>
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	bf0c      	ite	eq
 8007f54:	f8c8 2000 	streq.w	r2, [r8]
 8007f58:	605a      	strne	r2, [r3, #4]
 8007f5a:	e7eb      	b.n	8007f34 <_malloc_r+0xa8>
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	6864      	ldr	r4, [r4, #4]
 8007f60:	e7ae      	b.n	8007ec0 <_malloc_r+0x34>
 8007f62:	463c      	mov	r4, r7
 8007f64:	687f      	ldr	r7, [r7, #4]
 8007f66:	e7b6      	b.n	8007ed6 <_malloc_r+0x4a>
 8007f68:	461a      	mov	r2, r3
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d1fb      	bne.n	8007f68 <_malloc_r+0xdc>
 8007f70:	2300      	movs	r3, #0
 8007f72:	6053      	str	r3, [r2, #4]
 8007f74:	e7de      	b.n	8007f34 <_malloc_r+0xa8>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f80c 	bl	8007f98 <__malloc_unlock>
 8007f80:	e794      	b.n	8007eac <_malloc_r+0x20>
 8007f82:	6005      	str	r5, [r0, #0]
 8007f84:	e7d6      	b.n	8007f34 <_malloc_r+0xa8>
 8007f86:	bf00      	nop
 8007f88:	20000df8 	.word	0x20000df8

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	@ (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f7ff b91a 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	20000df0 	.word	0x20000df0

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	@ (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f7ff b915 	b.w	80071c8 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20000df0 	.word	0x20000df0

08007fa4 <_Balloc>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	69c6      	ldr	r6, [r0, #28]
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	b976      	cbnz	r6, 8007fcc <_Balloc+0x28>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f7ff ff42 	bl	8007e38 <malloc>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	61e0      	str	r0, [r4, #28]
 8007fb8:	b920      	cbnz	r0, 8007fc4 <_Balloc+0x20>
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <_Balloc+0x78>)
 8007fbc:	4818      	ldr	r0, [pc, #96]	@ (8008020 <_Balloc+0x7c>)
 8007fbe:	216b      	movs	r1, #107	@ 0x6b
 8007fc0:	f000 ff66 	bl	8008e90 <__assert_func>
 8007fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc8:	6006      	str	r6, [r0, #0]
 8007fca:	60c6      	str	r6, [r0, #12]
 8007fcc:	69e6      	ldr	r6, [r4, #28]
 8007fce:	68f3      	ldr	r3, [r6, #12]
 8007fd0:	b183      	cbz	r3, 8007ff4 <_Balloc+0x50>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fda:	b9b8      	cbnz	r0, 800800c <_Balloc+0x68>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe2:	1d72      	adds	r2, r6, #5
 8007fe4:	0092      	lsls	r2, r2, #2
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 ff70 	bl	8008ecc <_calloc_r>
 8007fec:	b160      	cbz	r0, 8008008 <_Balloc+0x64>
 8007fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff2:	e00e      	b.n	8008012 <_Balloc+0x6e>
 8007ff4:	2221      	movs	r2, #33	@ 0x21
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 ff67 	bl	8008ecc <_calloc_r>
 8007ffe:	69e3      	ldr	r3, [r4, #28]
 8008000:	60f0      	str	r0, [r6, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <_Balloc+0x2e>
 8008008:	2000      	movs	r0, #0
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008012:	2300      	movs	r3, #0
 8008014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008018:	e7f7      	b.n	800800a <_Balloc+0x66>
 800801a:	bf00      	nop
 800801c:	08009371 	.word	0x08009371
 8008020:	080093f1 	.word	0x080093f1

08008024 <_Bfree>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	69c6      	ldr	r6, [r0, #28]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b976      	cbnz	r6, 800804c <_Bfree+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7ff ff02 	bl	8007e38 <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	61e8      	str	r0, [r5, #28]
 8008038:	b920      	cbnz	r0, 8008044 <_Bfree+0x20>
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <_Bfree+0x3c>)
 800803c:	4809      	ldr	r0, [pc, #36]	@ (8008064 <_Bfree+0x40>)
 800803e:	218f      	movs	r1, #143	@ 0x8f
 8008040:	f000 ff26 	bl	8008e90 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	b13c      	cbz	r4, 800805e <_Bfree+0x3a>
 800804e:	69eb      	ldr	r3, [r5, #28]
 8008050:	6862      	ldr	r2, [r4, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	08009371 	.word	0x08009371
 8008064:	080093f1 	.word	0x080093f1

08008068 <__multadd>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	690d      	ldr	r5, [r1, #16]
 800806e:	4607      	mov	r7, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461e      	mov	r6, r3
 8008074:	f101 0c14 	add.w	ip, r1, #20
 8008078:	2000      	movs	r0, #0
 800807a:	f8dc 3000 	ldr.w	r3, [ip]
 800807e:	b299      	uxth	r1, r3
 8008080:	fb02 6101 	mla	r1, r2, r1, r6
 8008084:	0c1e      	lsrs	r6, r3, #16
 8008086:	0c0b      	lsrs	r3, r1, #16
 8008088:	fb02 3306 	mla	r3, r2, r6, r3
 800808c:	b289      	uxth	r1, r1
 800808e:	3001      	adds	r0, #1
 8008090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008094:	4285      	cmp	r5, r0
 8008096:	f84c 1b04 	str.w	r1, [ip], #4
 800809a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809e:	dcec      	bgt.n	800807a <__multadd+0x12>
 80080a0:	b30e      	cbz	r6, 80080e6 <__multadd+0x7e>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc19      	bgt.n	80080dc <__multadd+0x74>
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	4638      	mov	r0, r7
 80080ac:	3101      	adds	r1, #1
 80080ae:	f7ff ff79 	bl	8007fa4 <_Balloc>
 80080b2:	4680      	mov	r8, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__multadd+0x5a>
 80080b6:	4602      	mov	r2, r0
 80080b8:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <__multadd+0x84>)
 80080ba:	480d      	ldr	r0, [pc, #52]	@ (80080f0 <__multadd+0x88>)
 80080bc:	21ba      	movs	r1, #186	@ 0xba
 80080be:	f000 fee7 	bl	8008e90 <__assert_func>
 80080c2:	6922      	ldr	r2, [r4, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	f104 010c 	add.w	r1, r4, #12
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f7ff f87c 	bl	80071ca <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ffa5 	bl	8008024 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615e      	str	r6, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	080093e0 	.word	0x080093e0
 80080f0:	080093f1 	.word	0x080093f1

080080f4 <__hi0bits>:
 80080f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080f8:	4603      	mov	r3, r0
 80080fa:	bf36      	itet	cc
 80080fc:	0403      	lslcc	r3, r0, #16
 80080fe:	2000      	movcs	r0, #0
 8008100:	2010      	movcc	r0, #16
 8008102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008106:	bf3c      	itt	cc
 8008108:	021b      	lslcc	r3, r3, #8
 800810a:	3008      	addcc	r0, #8
 800810c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008110:	bf3c      	itt	cc
 8008112:	011b      	lslcc	r3, r3, #4
 8008114:	3004      	addcc	r0, #4
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	bf3c      	itt	cc
 800811c:	009b      	lslcc	r3, r3, #2
 800811e:	3002      	addcc	r0, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	db05      	blt.n	8008130 <__hi0bits+0x3c>
 8008124:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008128:	f100 0001 	add.w	r0, r0, #1
 800812c:	bf08      	it	eq
 800812e:	2020      	moveq	r0, #32
 8008130:	4770      	bx	lr

08008132 <__lo0bits>:
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	4602      	mov	r2, r0
 8008136:	f013 0007 	ands.w	r0, r3, #7
 800813a:	d00b      	beq.n	8008154 <__lo0bits+0x22>
 800813c:	07d9      	lsls	r1, r3, #31
 800813e:	d421      	bmi.n	8008184 <__lo0bits+0x52>
 8008140:	0798      	lsls	r0, r3, #30
 8008142:	bf49      	itett	mi
 8008144:	085b      	lsrmi	r3, r3, #1
 8008146:	089b      	lsrpl	r3, r3, #2
 8008148:	2001      	movmi	r0, #1
 800814a:	6013      	strmi	r3, [r2, #0]
 800814c:	bf5c      	itt	pl
 800814e:	6013      	strpl	r3, [r2, #0]
 8008150:	2002      	movpl	r0, #2
 8008152:	4770      	bx	lr
 8008154:	b299      	uxth	r1, r3
 8008156:	b909      	cbnz	r1, 800815c <__lo0bits+0x2a>
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	2010      	movs	r0, #16
 800815c:	b2d9      	uxtb	r1, r3
 800815e:	b909      	cbnz	r1, 8008164 <__lo0bits+0x32>
 8008160:	3008      	adds	r0, #8
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	0719      	lsls	r1, r3, #28
 8008166:	bf04      	itt	eq
 8008168:	091b      	lsreq	r3, r3, #4
 800816a:	3004      	addeq	r0, #4
 800816c:	0799      	lsls	r1, r3, #30
 800816e:	bf04      	itt	eq
 8008170:	089b      	lsreq	r3, r3, #2
 8008172:	3002      	addeq	r0, #2
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d403      	bmi.n	8008180 <__lo0bits+0x4e>
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	f100 0001 	add.w	r0, r0, #1
 800817e:	d003      	beq.n	8008188 <__lo0bits+0x56>
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	4770      	bx	lr
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr
 8008188:	2020      	movs	r0, #32
 800818a:	4770      	bx	lr

0800818c <__i2b>:
 800818c:	b510      	push	{r4, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	2101      	movs	r1, #1
 8008192:	f7ff ff07 	bl	8007fa4 <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__i2b+0x1a>
 800819a:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <__i2b+0x24>)
 800819c:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <__i2b+0x28>)
 800819e:	f240 1145 	movw	r1, #325	@ 0x145
 80081a2:	f000 fe75 	bl	8008e90 <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	6144      	str	r4, [r0, #20]
 80081aa:	6103      	str	r3, [r0, #16]
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	080093e0 	.word	0x080093e0
 80081b4:	080093f1 	.word	0x080093f1

080081b8 <__multiply>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4614      	mov	r4, r2
 80081be:	690a      	ldr	r2, [r1, #16]
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bfa8      	it	ge
 80081c6:	4623      	movge	r3, r4
 80081c8:	460f      	mov	r7, r1
 80081ca:	bfa4      	itt	ge
 80081cc:	460c      	movge	r4, r1
 80081ce:	461f      	movge	r7, r3
 80081d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081d8:	68a3      	ldr	r3, [r4, #8]
 80081da:	6861      	ldr	r1, [r4, #4]
 80081dc:	eb0a 0609 	add.w	r6, sl, r9
 80081e0:	42b3      	cmp	r3, r6
 80081e2:	b085      	sub	sp, #20
 80081e4:	bfb8      	it	lt
 80081e6:	3101      	addlt	r1, #1
 80081e8:	f7ff fedc 	bl	8007fa4 <_Balloc>
 80081ec:	b930      	cbnz	r0, 80081fc <__multiply+0x44>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b44      	ldr	r3, [pc, #272]	@ (8008304 <__multiply+0x14c>)
 80081f2:	4845      	ldr	r0, [pc, #276]	@ (8008308 <__multiply+0x150>)
 80081f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081f8:	f000 fe4a 	bl	8008e90 <__assert_func>
 80081fc:	f100 0514 	add.w	r5, r0, #20
 8008200:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008204:	462b      	mov	r3, r5
 8008206:	2200      	movs	r2, #0
 8008208:	4543      	cmp	r3, r8
 800820a:	d321      	bcc.n	8008250 <__multiply+0x98>
 800820c:	f107 0114 	add.w	r1, r7, #20
 8008210:	f104 0214 	add.w	r2, r4, #20
 8008214:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008218:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	1b13      	subs	r3, r2, r4
 8008220:	3b15      	subs	r3, #21
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	3304      	adds	r3, #4
 8008228:	f104 0715 	add.w	r7, r4, #21
 800822c:	42ba      	cmp	r2, r7
 800822e:	bf38      	it	cc
 8008230:	2304      	movcc	r3, #4
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	9103      	str	r1, [sp, #12]
 8008238:	428b      	cmp	r3, r1
 800823a:	d80c      	bhi.n	8008256 <__multiply+0x9e>
 800823c:	2e00      	cmp	r6, #0
 800823e:	dd03      	ble.n	8008248 <__multiply+0x90>
 8008240:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008244:	2b00      	cmp	r3, #0
 8008246:	d05b      	beq.n	8008300 <__multiply+0x148>
 8008248:	6106      	str	r6, [r0, #16]
 800824a:	b005      	add	sp, #20
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	f843 2b04 	str.w	r2, [r3], #4
 8008254:	e7d8      	b.n	8008208 <__multiply+0x50>
 8008256:	f8b1 a000 	ldrh.w	sl, [r1]
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	d024      	beq.n	80082aa <__multiply+0xf2>
 8008260:	f104 0e14 	add.w	lr, r4, #20
 8008264:	46a9      	mov	r9, r5
 8008266:	f04f 0c00 	mov.w	ip, #0
 800826a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800826e:	f8d9 3000 	ldr.w	r3, [r9]
 8008272:	fa1f fb87 	uxth.w	fp, r7
 8008276:	b29b      	uxth	r3, r3
 8008278:	fb0a 330b 	mla	r3, sl, fp, r3
 800827c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008280:	f8d9 7000 	ldr.w	r7, [r9]
 8008284:	4463      	add	r3, ip
 8008286:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800828a:	fb0a c70b 	mla	r7, sl, fp, ip
 800828e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008292:	b29b      	uxth	r3, r3
 8008294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008298:	4572      	cmp	r2, lr
 800829a:	f849 3b04 	str.w	r3, [r9], #4
 800829e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082a2:	d8e2      	bhi.n	800826a <__multiply+0xb2>
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	f845 c003 	str.w	ip, [r5, r3]
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082b0:	3104      	adds	r1, #4
 80082b2:	f1b9 0f00 	cmp.w	r9, #0
 80082b6:	d021      	beq.n	80082fc <__multiply+0x144>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	f104 0c14 	add.w	ip, r4, #20
 80082be:	46ae      	mov	lr, r5
 80082c0:	f04f 0a00 	mov.w	sl, #0
 80082c4:	f8bc b000 	ldrh.w	fp, [ip]
 80082c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082cc:	fb09 770b 	mla	r7, r9, fp, r7
 80082d0:	4457      	add	r7, sl
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082d8:	f84e 3b04 	str.w	r3, [lr], #4
 80082dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e4:	f8be 3000 	ldrh.w	r3, [lr]
 80082e8:	fb09 330a 	mla	r3, r9, sl, r3
 80082ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082f0:	4562      	cmp	r2, ip
 80082f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f6:	d8e5      	bhi.n	80082c4 <__multiply+0x10c>
 80082f8:	9f01      	ldr	r7, [sp, #4]
 80082fa:	51eb      	str	r3, [r5, r7]
 80082fc:	3504      	adds	r5, #4
 80082fe:	e799      	b.n	8008234 <__multiply+0x7c>
 8008300:	3e01      	subs	r6, #1
 8008302:	e79b      	b.n	800823c <__multiply+0x84>
 8008304:	080093e0 	.word	0x080093e0
 8008308:	080093f1 	.word	0x080093f1

0800830c <__pow5mult>:
 800830c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008310:	4615      	mov	r5, r2
 8008312:	f012 0203 	ands.w	r2, r2, #3
 8008316:	4607      	mov	r7, r0
 8008318:	460e      	mov	r6, r1
 800831a:	d007      	beq.n	800832c <__pow5mult+0x20>
 800831c:	4c25      	ldr	r4, [pc, #148]	@ (80083b4 <__pow5mult+0xa8>)
 800831e:	3a01      	subs	r2, #1
 8008320:	2300      	movs	r3, #0
 8008322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008326:	f7ff fe9f 	bl	8008068 <__multadd>
 800832a:	4606      	mov	r6, r0
 800832c:	10ad      	asrs	r5, r5, #2
 800832e:	d03d      	beq.n	80083ac <__pow5mult+0xa0>
 8008330:	69fc      	ldr	r4, [r7, #28]
 8008332:	b97c      	cbnz	r4, 8008354 <__pow5mult+0x48>
 8008334:	2010      	movs	r0, #16
 8008336:	f7ff fd7f 	bl	8007e38 <malloc>
 800833a:	4602      	mov	r2, r0
 800833c:	61f8      	str	r0, [r7, #28]
 800833e:	b928      	cbnz	r0, 800834c <__pow5mult+0x40>
 8008340:	4b1d      	ldr	r3, [pc, #116]	@ (80083b8 <__pow5mult+0xac>)
 8008342:	481e      	ldr	r0, [pc, #120]	@ (80083bc <__pow5mult+0xb0>)
 8008344:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008348:	f000 fda2 	bl	8008e90 <__assert_func>
 800834c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008350:	6004      	str	r4, [r0, #0]
 8008352:	60c4      	str	r4, [r0, #12]
 8008354:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800835c:	b94c      	cbnz	r4, 8008372 <__pow5mult+0x66>
 800835e:	f240 2171 	movw	r1, #625	@ 0x271
 8008362:	4638      	mov	r0, r7
 8008364:	f7ff ff12 	bl	800818c <__i2b>
 8008368:	2300      	movs	r3, #0
 800836a:	f8c8 0008 	str.w	r0, [r8, #8]
 800836e:	4604      	mov	r4, r0
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	07eb      	lsls	r3, r5, #31
 8008378:	d50a      	bpl.n	8008390 <__pow5mult+0x84>
 800837a:	4631      	mov	r1, r6
 800837c:	4622      	mov	r2, r4
 800837e:	4638      	mov	r0, r7
 8008380:	f7ff ff1a 	bl	80081b8 <__multiply>
 8008384:	4631      	mov	r1, r6
 8008386:	4680      	mov	r8, r0
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff fe4b 	bl	8008024 <_Bfree>
 800838e:	4646      	mov	r6, r8
 8008390:	106d      	asrs	r5, r5, #1
 8008392:	d00b      	beq.n	80083ac <__pow5mult+0xa0>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	b938      	cbnz	r0, 80083a8 <__pow5mult+0x9c>
 8008398:	4622      	mov	r2, r4
 800839a:	4621      	mov	r1, r4
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff ff0b 	bl	80081b8 <__multiply>
 80083a2:	6020      	str	r0, [r4, #0]
 80083a4:	f8c0 9000 	str.w	r9, [r0]
 80083a8:	4604      	mov	r4, r0
 80083aa:	e7e4      	b.n	8008376 <__pow5mult+0x6a>
 80083ac:	4630      	mov	r0, r6
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	bf00      	nop
 80083b4:	0800944c 	.word	0x0800944c
 80083b8:	08009371 	.word	0x08009371
 80083bc:	080093f1 	.word	0x080093f1

080083c0 <__lshift>:
 80083c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	460c      	mov	r4, r1
 80083c6:	6849      	ldr	r1, [r1, #4]
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	4607      	mov	r7, r0
 80083d2:	4691      	mov	r9, r2
 80083d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083d8:	f108 0601 	add.w	r6, r8, #1
 80083dc:	42b3      	cmp	r3, r6
 80083de:	db0b      	blt.n	80083f8 <__lshift+0x38>
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff fddf 	bl	8007fa4 <_Balloc>
 80083e6:	4605      	mov	r5, r0
 80083e8:	b948      	cbnz	r0, 80083fe <__lshift+0x3e>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4b28      	ldr	r3, [pc, #160]	@ (8008490 <__lshift+0xd0>)
 80083ee:	4829      	ldr	r0, [pc, #164]	@ (8008494 <__lshift+0xd4>)
 80083f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083f4:	f000 fd4c 	bl	8008e90 <__assert_func>
 80083f8:	3101      	adds	r1, #1
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	e7ee      	b.n	80083dc <__lshift+0x1c>
 80083fe:	2300      	movs	r3, #0
 8008400:	f100 0114 	add.w	r1, r0, #20
 8008404:	f100 0210 	add.w	r2, r0, #16
 8008408:	4618      	mov	r0, r3
 800840a:	4553      	cmp	r3, sl
 800840c:	db33      	blt.n	8008476 <__lshift+0xb6>
 800840e:	6920      	ldr	r0, [r4, #16]
 8008410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008414:	f104 0314 	add.w	r3, r4, #20
 8008418:	f019 091f 	ands.w	r9, r9, #31
 800841c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008424:	d02b      	beq.n	800847e <__lshift+0xbe>
 8008426:	f1c9 0e20 	rsb	lr, r9, #32
 800842a:	468a      	mov	sl, r1
 800842c:	2200      	movs	r2, #0
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	fa00 f009 	lsl.w	r0, r0, r9
 8008434:	4310      	orrs	r0, r2
 8008436:	f84a 0b04 	str.w	r0, [sl], #4
 800843a:	f853 2b04 	ldr.w	r2, [r3], #4
 800843e:	459c      	cmp	ip, r3
 8008440:	fa22 f20e 	lsr.w	r2, r2, lr
 8008444:	d8f3      	bhi.n	800842e <__lshift+0x6e>
 8008446:	ebac 0304 	sub.w	r3, ip, r4
 800844a:	3b15      	subs	r3, #21
 800844c:	f023 0303 	bic.w	r3, r3, #3
 8008450:	3304      	adds	r3, #4
 8008452:	f104 0015 	add.w	r0, r4, #21
 8008456:	4584      	cmp	ip, r0
 8008458:	bf38      	it	cc
 800845a:	2304      	movcc	r3, #4
 800845c:	50ca      	str	r2, [r1, r3]
 800845e:	b10a      	cbz	r2, 8008464 <__lshift+0xa4>
 8008460:	f108 0602 	add.w	r6, r8, #2
 8008464:	3e01      	subs	r6, #1
 8008466:	4638      	mov	r0, r7
 8008468:	612e      	str	r6, [r5, #16]
 800846a:	4621      	mov	r1, r4
 800846c:	f7ff fdda 	bl	8008024 <_Bfree>
 8008470:	4628      	mov	r0, r5
 8008472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008476:	f842 0f04 	str.w	r0, [r2, #4]!
 800847a:	3301      	adds	r3, #1
 800847c:	e7c5      	b.n	800840a <__lshift+0x4a>
 800847e:	3904      	subs	r1, #4
 8008480:	f853 2b04 	ldr.w	r2, [r3], #4
 8008484:	f841 2f04 	str.w	r2, [r1, #4]!
 8008488:	459c      	cmp	ip, r3
 800848a:	d8f9      	bhi.n	8008480 <__lshift+0xc0>
 800848c:	e7ea      	b.n	8008464 <__lshift+0xa4>
 800848e:	bf00      	nop
 8008490:	080093e0 	.word	0x080093e0
 8008494:	080093f1 	.word	0x080093f1

08008498 <__mcmp>:
 8008498:	690a      	ldr	r2, [r1, #16]
 800849a:	4603      	mov	r3, r0
 800849c:	6900      	ldr	r0, [r0, #16]
 800849e:	1a80      	subs	r0, r0, r2
 80084a0:	b530      	push	{r4, r5, lr}
 80084a2:	d10e      	bne.n	80084c2 <__mcmp+0x2a>
 80084a4:	3314      	adds	r3, #20
 80084a6:	3114      	adds	r1, #20
 80084a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084b8:	4295      	cmp	r5, r2
 80084ba:	d003      	beq.n	80084c4 <__mcmp+0x2c>
 80084bc:	d205      	bcs.n	80084ca <__mcmp+0x32>
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	bd30      	pop	{r4, r5, pc}
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d3f3      	bcc.n	80084b0 <__mcmp+0x18>
 80084c8:	e7fb      	b.n	80084c2 <__mcmp+0x2a>
 80084ca:	2001      	movs	r0, #1
 80084cc:	e7f9      	b.n	80084c2 <__mcmp+0x2a>
	...

080084d0 <__mdiff>:
 80084d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4689      	mov	r9, r1
 80084d6:	4606      	mov	r6, r0
 80084d8:	4611      	mov	r1, r2
 80084da:	4648      	mov	r0, r9
 80084dc:	4614      	mov	r4, r2
 80084de:	f7ff ffdb 	bl	8008498 <__mcmp>
 80084e2:	1e05      	subs	r5, r0, #0
 80084e4:	d112      	bne.n	800850c <__mdiff+0x3c>
 80084e6:	4629      	mov	r1, r5
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff fd5b 	bl	8007fa4 <_Balloc>
 80084ee:	4602      	mov	r2, r0
 80084f0:	b928      	cbnz	r0, 80084fe <__mdiff+0x2e>
 80084f2:	4b3f      	ldr	r3, [pc, #252]	@ (80085f0 <__mdiff+0x120>)
 80084f4:	f240 2137 	movw	r1, #567	@ 0x237
 80084f8:	483e      	ldr	r0, [pc, #248]	@ (80085f4 <__mdiff+0x124>)
 80084fa:	f000 fcc9 	bl	8008e90 <__assert_func>
 80084fe:	2301      	movs	r3, #1
 8008500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008504:	4610      	mov	r0, r2
 8008506:	b003      	add	sp, #12
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850c:	bfbc      	itt	lt
 800850e:	464b      	movlt	r3, r9
 8008510:	46a1      	movlt	r9, r4
 8008512:	4630      	mov	r0, r6
 8008514:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008518:	bfba      	itte	lt
 800851a:	461c      	movlt	r4, r3
 800851c:	2501      	movlt	r5, #1
 800851e:	2500      	movge	r5, #0
 8008520:	f7ff fd40 	bl	8007fa4 <_Balloc>
 8008524:	4602      	mov	r2, r0
 8008526:	b918      	cbnz	r0, 8008530 <__mdiff+0x60>
 8008528:	4b31      	ldr	r3, [pc, #196]	@ (80085f0 <__mdiff+0x120>)
 800852a:	f240 2145 	movw	r1, #581	@ 0x245
 800852e:	e7e3      	b.n	80084f8 <__mdiff+0x28>
 8008530:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008534:	6926      	ldr	r6, [r4, #16]
 8008536:	60c5      	str	r5, [r0, #12]
 8008538:	f109 0310 	add.w	r3, r9, #16
 800853c:	f109 0514 	add.w	r5, r9, #20
 8008540:	f104 0e14 	add.w	lr, r4, #20
 8008544:	f100 0b14 	add.w	fp, r0, #20
 8008548:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800854c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	46d9      	mov	r9, fp
 8008554:	f04f 0c00 	mov.w	ip, #0
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800855e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	fa1f f38a 	uxth.w	r3, sl
 8008568:	4619      	mov	r1, r3
 800856a:	b283      	uxth	r3, r0
 800856c:	1acb      	subs	r3, r1, r3
 800856e:	0c00      	lsrs	r0, r0, #16
 8008570:	4463      	add	r3, ip
 8008572:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008576:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800857a:	b29b      	uxth	r3, r3
 800857c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008580:	4576      	cmp	r6, lr
 8008582:	f849 3b04 	str.w	r3, [r9], #4
 8008586:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800858a:	d8e5      	bhi.n	8008558 <__mdiff+0x88>
 800858c:	1b33      	subs	r3, r6, r4
 800858e:	3b15      	subs	r3, #21
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	3415      	adds	r4, #21
 8008596:	3304      	adds	r3, #4
 8008598:	42a6      	cmp	r6, r4
 800859a:	bf38      	it	cc
 800859c:	2304      	movcc	r3, #4
 800859e:	441d      	add	r5, r3
 80085a0:	445b      	add	r3, fp
 80085a2:	461e      	mov	r6, r3
 80085a4:	462c      	mov	r4, r5
 80085a6:	4544      	cmp	r4, r8
 80085a8:	d30e      	bcc.n	80085c8 <__mdiff+0xf8>
 80085aa:	f108 0103 	add.w	r1, r8, #3
 80085ae:	1b49      	subs	r1, r1, r5
 80085b0:	f021 0103 	bic.w	r1, r1, #3
 80085b4:	3d03      	subs	r5, #3
 80085b6:	45a8      	cmp	r8, r5
 80085b8:	bf38      	it	cc
 80085ba:	2100      	movcc	r1, #0
 80085bc:	440b      	add	r3, r1
 80085be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085c2:	b191      	cbz	r1, 80085ea <__mdiff+0x11a>
 80085c4:	6117      	str	r7, [r2, #16]
 80085c6:	e79d      	b.n	8008504 <__mdiff+0x34>
 80085c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80085cc:	46e6      	mov	lr, ip
 80085ce:	0c08      	lsrs	r0, r1, #16
 80085d0:	fa1c fc81 	uxtah	ip, ip, r1
 80085d4:	4471      	add	r1, lr
 80085d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085da:	b289      	uxth	r1, r1
 80085dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e0:	f846 1b04 	str.w	r1, [r6], #4
 80085e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085e8:	e7dd      	b.n	80085a6 <__mdiff+0xd6>
 80085ea:	3f01      	subs	r7, #1
 80085ec:	e7e7      	b.n	80085be <__mdiff+0xee>
 80085ee:	bf00      	nop
 80085f0:	080093e0 	.word	0x080093e0
 80085f4:	080093f1 	.word	0x080093f1

080085f8 <__d2b>:
 80085f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	460f      	mov	r7, r1
 80085fe:	2101      	movs	r1, #1
 8008600:	ec59 8b10 	vmov	r8, r9, d0
 8008604:	4616      	mov	r6, r2
 8008606:	f7ff fccd 	bl	8007fa4 <_Balloc>
 800860a:	4604      	mov	r4, r0
 800860c:	b930      	cbnz	r0, 800861c <__d2b+0x24>
 800860e:	4602      	mov	r2, r0
 8008610:	4b23      	ldr	r3, [pc, #140]	@ (80086a0 <__d2b+0xa8>)
 8008612:	4824      	ldr	r0, [pc, #144]	@ (80086a4 <__d2b+0xac>)
 8008614:	f240 310f 	movw	r1, #783	@ 0x30f
 8008618:	f000 fc3a 	bl	8008e90 <__assert_func>
 800861c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008624:	b10d      	cbz	r5, 800862a <__d2b+0x32>
 8008626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	f1b8 0300 	subs.w	r3, r8, #0
 8008630:	d023      	beq.n	800867a <__d2b+0x82>
 8008632:	4668      	mov	r0, sp
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	f7ff fd7c 	bl	8008132 <__lo0bits>
 800863a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800863e:	b1d0      	cbz	r0, 8008676 <__d2b+0x7e>
 8008640:	f1c0 0320 	rsb	r3, r0, #32
 8008644:	fa02 f303 	lsl.w	r3, r2, r3
 8008648:	430b      	orrs	r3, r1
 800864a:	40c2      	lsrs	r2, r0
 800864c:	6163      	str	r3, [r4, #20]
 800864e:	9201      	str	r2, [sp, #4]
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	61a3      	str	r3, [r4, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bf0c      	ite	eq
 8008658:	2201      	moveq	r2, #1
 800865a:	2202      	movne	r2, #2
 800865c:	6122      	str	r2, [r4, #16]
 800865e:	b1a5      	cbz	r5, 800868a <__d2b+0x92>
 8008660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008664:	4405      	add	r5, r0
 8008666:	603d      	str	r5, [r7, #0]
 8008668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800866c:	6030      	str	r0, [r6, #0]
 800866e:	4620      	mov	r0, r4
 8008670:	b003      	add	sp, #12
 8008672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008676:	6161      	str	r1, [r4, #20]
 8008678:	e7ea      	b.n	8008650 <__d2b+0x58>
 800867a:	a801      	add	r0, sp, #4
 800867c:	f7ff fd59 	bl	8008132 <__lo0bits>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	3020      	adds	r0, #32
 8008686:	2201      	movs	r2, #1
 8008688:	e7e8      	b.n	800865c <__d2b+0x64>
 800868a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800868e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008692:	6038      	str	r0, [r7, #0]
 8008694:	6918      	ldr	r0, [r3, #16]
 8008696:	f7ff fd2d 	bl	80080f4 <__hi0bits>
 800869a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800869e:	e7e5      	b.n	800866c <__d2b+0x74>
 80086a0:	080093e0 	.word	0x080093e0
 80086a4:	080093f1 	.word	0x080093f1

080086a8 <__ssputs_r>:
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	688e      	ldr	r6, [r1, #8]
 80086ae:	461f      	mov	r7, r3
 80086b0:	42be      	cmp	r6, r7
 80086b2:	680b      	ldr	r3, [r1, #0]
 80086b4:	4682      	mov	sl, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	4690      	mov	r8, r2
 80086ba:	d82d      	bhi.n	8008718 <__ssputs_r+0x70>
 80086bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086c4:	d026      	beq.n	8008714 <__ssputs_r+0x6c>
 80086c6:	6965      	ldr	r5, [r4, #20]
 80086c8:	6909      	ldr	r1, [r1, #16]
 80086ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ce:	eba3 0901 	sub.w	r9, r3, r1
 80086d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d6:	1c7b      	adds	r3, r7, #1
 80086d8:	444b      	add	r3, r9
 80086da:	106d      	asrs	r5, r5, #1
 80086dc:	429d      	cmp	r5, r3
 80086de:	bf38      	it	cc
 80086e0:	461d      	movcc	r5, r3
 80086e2:	0553      	lsls	r3, r2, #21
 80086e4:	d527      	bpl.n	8008736 <__ssputs_r+0x8e>
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7ff fbd0 	bl	8007e8c <_malloc_r>
 80086ec:	4606      	mov	r6, r0
 80086ee:	b360      	cbz	r0, 800874a <__ssputs_r+0xa2>
 80086f0:	6921      	ldr	r1, [r4, #16]
 80086f2:	464a      	mov	r2, r9
 80086f4:	f7fe fd69 	bl	80071ca <memcpy>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	6126      	str	r6, [r4, #16]
 8008706:	6165      	str	r5, [r4, #20]
 8008708:	444e      	add	r6, r9
 800870a:	eba5 0509 	sub.w	r5, r5, r9
 800870e:	6026      	str	r6, [r4, #0]
 8008710:	60a5      	str	r5, [r4, #8]
 8008712:	463e      	mov	r6, r7
 8008714:	42be      	cmp	r6, r7
 8008716:	d900      	bls.n	800871a <__ssputs_r+0x72>
 8008718:	463e      	mov	r6, r7
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	4632      	mov	r2, r6
 800871e:	4641      	mov	r1, r8
 8008720:	f000 fb6a 	bl	8008df8 <memmove>
 8008724:	68a3      	ldr	r3, [r4, #8]
 8008726:	1b9b      	subs	r3, r3, r6
 8008728:	60a3      	str	r3, [r4, #8]
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4433      	add	r3, r6
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	2000      	movs	r0, #0
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	462a      	mov	r2, r5
 8008738:	f000 fbee 	bl	8008f18 <_realloc_r>
 800873c:	4606      	mov	r6, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d1e0      	bne.n	8008704 <__ssputs_r+0x5c>
 8008742:	6921      	ldr	r1, [r4, #16]
 8008744:	4650      	mov	r0, sl
 8008746:	f7ff fb2d 	bl	8007da4 <_free_r>
 800874a:	230c      	movs	r3, #12
 800874c:	f8ca 3000 	str.w	r3, [sl]
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	e7e9      	b.n	8008732 <__ssputs_r+0x8a>
	...

08008760 <_svfiprintf_r>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	4698      	mov	r8, r3
 8008766:	898b      	ldrh	r3, [r1, #12]
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	b09d      	sub	sp, #116	@ 0x74
 800876c:	4607      	mov	r7, r0
 800876e:	460d      	mov	r5, r1
 8008770:	4614      	mov	r4, r2
 8008772:	d510      	bpl.n	8008796 <_svfiprintf_r+0x36>
 8008774:	690b      	ldr	r3, [r1, #16]
 8008776:	b973      	cbnz	r3, 8008796 <_svfiprintf_r+0x36>
 8008778:	2140      	movs	r1, #64	@ 0x40
 800877a:	f7ff fb87 	bl	8007e8c <_malloc_r>
 800877e:	6028      	str	r0, [r5, #0]
 8008780:	6128      	str	r0, [r5, #16]
 8008782:	b930      	cbnz	r0, 8008792 <_svfiprintf_r+0x32>
 8008784:	230c      	movs	r3, #12
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	b01d      	add	sp, #116	@ 0x74
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008792:	2340      	movs	r3, #64	@ 0x40
 8008794:	616b      	str	r3, [r5, #20]
 8008796:	2300      	movs	r3, #0
 8008798:	9309      	str	r3, [sp, #36]	@ 0x24
 800879a:	2320      	movs	r3, #32
 800879c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a4:	2330      	movs	r3, #48	@ 0x30
 80087a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008944 <_svfiprintf_r+0x1e4>
 80087aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ae:	f04f 0901 	mov.w	r9, #1
 80087b2:	4623      	mov	r3, r4
 80087b4:	469a      	mov	sl, r3
 80087b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ba:	b10a      	cbz	r2, 80087c0 <_svfiprintf_r+0x60>
 80087bc:	2a25      	cmp	r2, #37	@ 0x25
 80087be:	d1f9      	bne.n	80087b4 <_svfiprintf_r+0x54>
 80087c0:	ebba 0b04 	subs.w	fp, sl, r4
 80087c4:	d00b      	beq.n	80087de <_svfiprintf_r+0x7e>
 80087c6:	465b      	mov	r3, fp
 80087c8:	4622      	mov	r2, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff ff6b 	bl	80086a8 <__ssputs_r>
 80087d2:	3001      	adds	r0, #1
 80087d4:	f000 80a7 	beq.w	8008926 <_svfiprintf_r+0x1c6>
 80087d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087da:	445a      	add	r2, fp
 80087dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80087de:	f89a 3000 	ldrb.w	r3, [sl]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 809f 	beq.w	8008926 <_svfiprintf_r+0x1c6>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f2:	f10a 0a01 	add.w	sl, sl, #1
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008800:	4654      	mov	r4, sl
 8008802:	2205      	movs	r2, #5
 8008804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008808:	484e      	ldr	r0, [pc, #312]	@ (8008944 <_svfiprintf_r+0x1e4>)
 800880a:	f7f7 fd19 	bl	8000240 <memchr>
 800880e:	9a04      	ldr	r2, [sp, #16]
 8008810:	b9d8      	cbnz	r0, 800884a <_svfiprintf_r+0xea>
 8008812:	06d0      	lsls	r0, r2, #27
 8008814:	bf44      	itt	mi
 8008816:	2320      	movmi	r3, #32
 8008818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800881c:	0711      	lsls	r1, r2, #28
 800881e:	bf44      	itt	mi
 8008820:	232b      	movmi	r3, #43	@ 0x2b
 8008822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008826:	f89a 3000 	ldrb.w	r3, [sl]
 800882a:	2b2a      	cmp	r3, #42	@ 0x2a
 800882c:	d015      	beq.n	800885a <_svfiprintf_r+0xfa>
 800882e:	9a07      	ldr	r2, [sp, #28]
 8008830:	4654      	mov	r4, sl
 8008832:	2000      	movs	r0, #0
 8008834:	f04f 0c0a 	mov.w	ip, #10
 8008838:	4621      	mov	r1, r4
 800883a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883e:	3b30      	subs	r3, #48	@ 0x30
 8008840:	2b09      	cmp	r3, #9
 8008842:	d94b      	bls.n	80088dc <_svfiprintf_r+0x17c>
 8008844:	b1b0      	cbz	r0, 8008874 <_svfiprintf_r+0x114>
 8008846:	9207      	str	r2, [sp, #28]
 8008848:	e014      	b.n	8008874 <_svfiprintf_r+0x114>
 800884a:	eba0 0308 	sub.w	r3, r0, r8
 800884e:	fa09 f303 	lsl.w	r3, r9, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	46a2      	mov	sl, r4
 8008858:	e7d2      	b.n	8008800 <_svfiprintf_r+0xa0>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	1d19      	adds	r1, r3, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	9103      	str	r1, [sp, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfbb      	ittet	lt
 8008866:	425b      	neglt	r3, r3
 8008868:	f042 0202 	orrlt.w	r2, r2, #2
 800886c:	9307      	strge	r3, [sp, #28]
 800886e:	9307      	strlt	r3, [sp, #28]
 8008870:	bfb8      	it	lt
 8008872:	9204      	strlt	r2, [sp, #16]
 8008874:	7823      	ldrb	r3, [r4, #0]
 8008876:	2b2e      	cmp	r3, #46	@ 0x2e
 8008878:	d10a      	bne.n	8008890 <_svfiprintf_r+0x130>
 800887a:	7863      	ldrb	r3, [r4, #1]
 800887c:	2b2a      	cmp	r3, #42	@ 0x2a
 800887e:	d132      	bne.n	80088e6 <_svfiprintf_r+0x186>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9203      	str	r2, [sp, #12]
 8008888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800888c:	3402      	adds	r4, #2
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008954 <_svfiprintf_r+0x1f4>
 8008894:	7821      	ldrb	r1, [r4, #0]
 8008896:	2203      	movs	r2, #3
 8008898:	4650      	mov	r0, sl
 800889a:	f7f7 fcd1 	bl	8000240 <memchr>
 800889e:	b138      	cbz	r0, 80088b0 <_svfiprintf_r+0x150>
 80088a0:	9b04      	ldr	r3, [sp, #16]
 80088a2:	eba0 000a 	sub.w	r0, r0, sl
 80088a6:	2240      	movs	r2, #64	@ 0x40
 80088a8:	4082      	lsls	r2, r0
 80088aa:	4313      	orrs	r3, r2
 80088ac:	3401      	adds	r4, #1
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	4824      	ldr	r0, [pc, #144]	@ (8008948 <_svfiprintf_r+0x1e8>)
 80088b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088ba:	2206      	movs	r2, #6
 80088bc:	f7f7 fcc0 	bl	8000240 <memchr>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d036      	beq.n	8008932 <_svfiprintf_r+0x1d2>
 80088c4:	4b21      	ldr	r3, [pc, #132]	@ (800894c <_svfiprintf_r+0x1ec>)
 80088c6:	bb1b      	cbnz	r3, 8008910 <_svfiprintf_r+0x1b0>
 80088c8:	9b03      	ldr	r3, [sp, #12]
 80088ca:	3307      	adds	r3, #7
 80088cc:	f023 0307 	bic.w	r3, r3, #7
 80088d0:	3308      	adds	r3, #8
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d6:	4433      	add	r3, r6
 80088d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088da:	e76a      	b.n	80087b2 <_svfiprintf_r+0x52>
 80088dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e0:	460c      	mov	r4, r1
 80088e2:	2001      	movs	r0, #1
 80088e4:	e7a8      	b.n	8008838 <_svfiprintf_r+0xd8>
 80088e6:	2300      	movs	r3, #0
 80088e8:	3401      	adds	r4, #1
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	4619      	mov	r1, r3
 80088ee:	f04f 0c0a 	mov.w	ip, #10
 80088f2:	4620      	mov	r0, r4
 80088f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f8:	3a30      	subs	r2, #48	@ 0x30
 80088fa:	2a09      	cmp	r2, #9
 80088fc:	d903      	bls.n	8008906 <_svfiprintf_r+0x1a6>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0c6      	beq.n	8008890 <_svfiprintf_r+0x130>
 8008902:	9105      	str	r1, [sp, #20]
 8008904:	e7c4      	b.n	8008890 <_svfiprintf_r+0x130>
 8008906:	fb0c 2101 	mla	r1, ip, r1, r2
 800890a:	4604      	mov	r4, r0
 800890c:	2301      	movs	r3, #1
 800890e:	e7f0      	b.n	80088f2 <_svfiprintf_r+0x192>
 8008910:	ab03      	add	r3, sp, #12
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	462a      	mov	r2, r5
 8008916:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <_svfiprintf_r+0x1f0>)
 8008918:	a904      	add	r1, sp, #16
 800891a:	4638      	mov	r0, r7
 800891c:	f7fd fdf0 	bl	8006500 <_printf_float>
 8008920:	1c42      	adds	r2, r0, #1
 8008922:	4606      	mov	r6, r0
 8008924:	d1d6      	bne.n	80088d4 <_svfiprintf_r+0x174>
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	065b      	lsls	r3, r3, #25
 800892a:	f53f af2d 	bmi.w	8008788 <_svfiprintf_r+0x28>
 800892e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008930:	e72c      	b.n	800878c <_svfiprintf_r+0x2c>
 8008932:	ab03      	add	r3, sp, #12
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	462a      	mov	r2, r5
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <_svfiprintf_r+0x1f0>)
 800893a:	a904      	add	r1, sp, #16
 800893c:	4638      	mov	r0, r7
 800893e:	f7fe f867 	bl	8006a10 <_printf_i>
 8008942:	e7ed      	b.n	8008920 <_svfiprintf_r+0x1c0>
 8008944:	08009548 	.word	0x08009548
 8008948:	08009552 	.word	0x08009552
 800894c:	08006501 	.word	0x08006501
 8008950:	080086a9 	.word	0x080086a9
 8008954:	0800954e 	.word	0x0800954e

08008958 <__sfputc_r>:
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	b410      	push	{r4}
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	da08      	bge.n	8008976 <__sfputc_r+0x1e>
 8008964:	6994      	ldr	r4, [r2, #24]
 8008966:	42a3      	cmp	r3, r4
 8008968:	db01      	blt.n	800896e <__sfputc_r+0x16>
 800896a:	290a      	cmp	r1, #10
 800896c:	d103      	bne.n	8008976 <__sfputc_r+0x1e>
 800896e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008972:	f7fe bb16 	b.w	8006fa2 <__swbuf_r>
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	1c58      	adds	r0, r3, #1
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	7019      	strb	r1, [r3, #0]
 800897e:	4608      	mov	r0, r1
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	4770      	bx	lr

08008986 <__sfputs_r>:
 8008986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4614      	mov	r4, r2
 800898e:	18d5      	adds	r5, r2, r3
 8008990:	42ac      	cmp	r4, r5
 8008992:	d101      	bne.n	8008998 <__sfputs_r+0x12>
 8008994:	2000      	movs	r0, #0
 8008996:	e007      	b.n	80089a8 <__sfputs_r+0x22>
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	463a      	mov	r2, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffda 	bl	8008958 <__sfputc_r>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d1f3      	bne.n	8008990 <__sfputs_r+0xa>
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ac <_vfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460d      	mov	r5, r1
 80089b2:	b09d      	sub	sp, #116	@ 0x74
 80089b4:	4614      	mov	r4, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	4606      	mov	r6, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_vfiprintf_r+0x18>
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	b90b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x18>
 80089c0:	f7fe f9d2 	bl	8006d68 <__sinit>
 80089c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089c6:	07d9      	lsls	r1, r3, #31
 80089c8:	d405      	bmi.n	80089d6 <_vfiprintf_r+0x2a>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	059a      	lsls	r2, r3, #22
 80089ce:	d402      	bmi.n	80089d6 <_vfiprintf_r+0x2a>
 80089d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d2:	f7fe fbf8 	bl	80071c6 <__retarget_lock_acquire_recursive>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	071b      	lsls	r3, r3, #28
 80089da:	d501      	bpl.n	80089e0 <_vfiprintf_r+0x34>
 80089dc:	692b      	ldr	r3, [r5, #16]
 80089de:	b99b      	cbnz	r3, 8008a08 <_vfiprintf_r+0x5c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7fe fb1c 	bl	8007020 <__swsetup_r>
 80089e8:	b170      	cbz	r0, 8008a08 <_vfiprintf_r+0x5c>
 80089ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ec:	07dc      	lsls	r4, r3, #31
 80089ee:	d504      	bpl.n	80089fa <_vfiprintf_r+0x4e>
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	b01d      	add	sp, #116	@ 0x74
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	0598      	lsls	r0, r3, #22
 80089fe:	d4f7      	bmi.n	80089f0 <_vfiprintf_r+0x44>
 8008a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a02:	f7fe fbe1 	bl	80071c8 <__retarget_lock_release_recursive>
 8008a06:	e7f3      	b.n	80089f0 <_vfiprintf_r+0x44>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a16:	2330      	movs	r3, #48	@ 0x30
 8008a18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bc8 <_vfiprintf_r+0x21c>
 8008a1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a20:	f04f 0901 	mov.w	r9, #1
 8008a24:	4623      	mov	r3, r4
 8008a26:	469a      	mov	sl, r3
 8008a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_vfiprintf_r+0x86>
 8008a2e:	2a25      	cmp	r2, #37	@ 0x25
 8008a30:	d1f9      	bne.n	8008a26 <_vfiprintf_r+0x7a>
 8008a32:	ebba 0b04 	subs.w	fp, sl, r4
 8008a36:	d00b      	beq.n	8008a50 <_vfiprintf_r+0xa4>
 8008a38:	465b      	mov	r3, fp
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ffa1 	bl	8008986 <__sfputs_r>
 8008a44:	3001      	adds	r0, #1
 8008a46:	f000 80a7 	beq.w	8008b98 <_vfiprintf_r+0x1ec>
 8008a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4c:	445a      	add	r2, fp
 8008a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a50:	f89a 3000 	ldrb.w	r3, [sl]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 809f 	beq.w	8008b98 <_vfiprintf_r+0x1ec>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a64:	f10a 0a01 	add.w	sl, sl, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	9307      	str	r3, [sp, #28]
 8008a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a72:	4654      	mov	r4, sl
 8008a74:	2205      	movs	r2, #5
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	4853      	ldr	r0, [pc, #332]	@ (8008bc8 <_vfiprintf_r+0x21c>)
 8008a7c:	f7f7 fbe0 	bl	8000240 <memchr>
 8008a80:	9a04      	ldr	r2, [sp, #16]
 8008a82:	b9d8      	cbnz	r0, 8008abc <_vfiprintf_r+0x110>
 8008a84:	06d1      	lsls	r1, r2, #27
 8008a86:	bf44      	itt	mi
 8008a88:	2320      	movmi	r3, #32
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a8e:	0713      	lsls	r3, r2, #28
 8008a90:	bf44      	itt	mi
 8008a92:	232b      	movmi	r3, #43	@ 0x2b
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a98:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a9e:	d015      	beq.n	8008acc <_vfiprintf_r+0x120>
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f04f 0c0a 	mov.w	ip, #10
 8008aaa:	4621      	mov	r1, r4
 8008aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab0:	3b30      	subs	r3, #48	@ 0x30
 8008ab2:	2b09      	cmp	r3, #9
 8008ab4:	d94b      	bls.n	8008b4e <_vfiprintf_r+0x1a2>
 8008ab6:	b1b0      	cbz	r0, 8008ae6 <_vfiprintf_r+0x13a>
 8008ab8:	9207      	str	r2, [sp, #28]
 8008aba:	e014      	b.n	8008ae6 <_vfiprintf_r+0x13a>
 8008abc:	eba0 0308 	sub.w	r3, r0, r8
 8008ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	46a2      	mov	sl, r4
 8008aca:	e7d2      	b.n	8008a72 <_vfiprintf_r+0xc6>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1d19      	adds	r1, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	9103      	str	r1, [sp, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfbb      	ittet	lt
 8008ad8:	425b      	neglt	r3, r3
 8008ada:	f042 0202 	orrlt.w	r2, r2, #2
 8008ade:	9307      	strge	r3, [sp, #28]
 8008ae0:	9307      	strlt	r3, [sp, #28]
 8008ae2:	bfb8      	it	lt
 8008ae4:	9204      	strlt	r2, [sp, #16]
 8008ae6:	7823      	ldrb	r3, [r4, #0]
 8008ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aea:	d10a      	bne.n	8008b02 <_vfiprintf_r+0x156>
 8008aec:	7863      	ldrb	r3, [r4, #1]
 8008aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af0:	d132      	bne.n	8008b58 <_vfiprintf_r+0x1ac>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	9203      	str	r2, [sp, #12]
 8008afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008afe:	3402      	adds	r4, #2
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bd8 <_vfiprintf_r+0x22c>
 8008b06:	7821      	ldrb	r1, [r4, #0]
 8008b08:	2203      	movs	r2, #3
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f7f7 fb98 	bl	8000240 <memchr>
 8008b10:	b138      	cbz	r0, 8008b22 <_vfiprintf_r+0x176>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	eba0 000a 	sub.w	r0, r0, sl
 8008b18:	2240      	movs	r2, #64	@ 0x40
 8008b1a:	4082      	lsls	r2, r0
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	3401      	adds	r4, #1
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b26:	4829      	ldr	r0, [pc, #164]	@ (8008bcc <_vfiprintf_r+0x220>)
 8008b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b2c:	2206      	movs	r2, #6
 8008b2e:	f7f7 fb87 	bl	8000240 <memchr>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d03f      	beq.n	8008bb6 <_vfiprintf_r+0x20a>
 8008b36:	4b26      	ldr	r3, [pc, #152]	@ (8008bd0 <_vfiprintf_r+0x224>)
 8008b38:	bb1b      	cbnz	r3, 8008b82 <_vfiprintf_r+0x1d6>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	f023 0307 	bic.w	r3, r3, #7
 8008b42:	3308      	adds	r3, #8
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b48:	443b      	add	r3, r7
 8008b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4c:	e76a      	b.n	8008a24 <_vfiprintf_r+0x78>
 8008b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b52:	460c      	mov	r4, r1
 8008b54:	2001      	movs	r0, #1
 8008b56:	e7a8      	b.n	8008aaa <_vfiprintf_r+0xfe>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f04f 0c0a 	mov.w	ip, #10
 8008b64:	4620      	mov	r0, r4
 8008b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6a:	3a30      	subs	r2, #48	@ 0x30
 8008b6c:	2a09      	cmp	r2, #9
 8008b6e:	d903      	bls.n	8008b78 <_vfiprintf_r+0x1cc>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0c6      	beq.n	8008b02 <_vfiprintf_r+0x156>
 8008b74:	9105      	str	r1, [sp, #20]
 8008b76:	e7c4      	b.n	8008b02 <_vfiprintf_r+0x156>
 8008b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7f0      	b.n	8008b64 <_vfiprintf_r+0x1b8>
 8008b82:	ab03      	add	r3, sp, #12
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	462a      	mov	r2, r5
 8008b88:	4b12      	ldr	r3, [pc, #72]	@ (8008bd4 <_vfiprintf_r+0x228>)
 8008b8a:	a904      	add	r1, sp, #16
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7fd fcb7 	bl	8006500 <_printf_float>
 8008b92:	4607      	mov	r7, r0
 8008b94:	1c78      	adds	r0, r7, #1
 8008b96:	d1d6      	bne.n	8008b46 <_vfiprintf_r+0x19a>
 8008b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9a:	07d9      	lsls	r1, r3, #31
 8008b9c:	d405      	bmi.n	8008baa <_vfiprintf_r+0x1fe>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	059a      	lsls	r2, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_vfiprintf_r+0x1fe>
 8008ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba6:	f7fe fb0f 	bl	80071c8 <__retarget_lock_release_recursive>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	065b      	lsls	r3, r3, #25
 8008bae:	f53f af1f 	bmi.w	80089f0 <_vfiprintf_r+0x44>
 8008bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb4:	e71e      	b.n	80089f4 <_vfiprintf_r+0x48>
 8008bb6:	ab03      	add	r3, sp, #12
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	462a      	mov	r2, r5
 8008bbc:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <_vfiprintf_r+0x228>)
 8008bbe:	a904      	add	r1, sp, #16
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7fd ff25 	bl	8006a10 <_printf_i>
 8008bc6:	e7e4      	b.n	8008b92 <_vfiprintf_r+0x1e6>
 8008bc8:	08009548 	.word	0x08009548
 8008bcc:	08009552 	.word	0x08009552
 8008bd0:	08006501 	.word	0x08006501
 8008bd4:	08008987 	.word	0x08008987
 8008bd8:	0800954e 	.word	0x0800954e

08008bdc <__sflush_r>:
 8008bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	0716      	lsls	r6, r2, #28
 8008be6:	4605      	mov	r5, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	d454      	bmi.n	8008c96 <__sflush_r+0xba>
 8008bec:	684b      	ldr	r3, [r1, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dc02      	bgt.n	8008bf8 <__sflush_r+0x1c>
 8008bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd48      	ble.n	8008c8a <__sflush_r+0xae>
 8008bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	d045      	beq.n	8008c8a <__sflush_r+0xae>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c04:	682f      	ldr	r7, [r5, #0]
 8008c06:	6a21      	ldr	r1, [r4, #32]
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	d030      	beq.n	8008c6e <__sflush_r+0x92>
 8008c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	0759      	lsls	r1, r3, #29
 8008c12:	d505      	bpl.n	8008c20 <__sflush_r+0x44>
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c1a:	b10b      	cbz	r3, 8008c20 <__sflush_r+0x44>
 8008c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	2300      	movs	r3, #0
 8008c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b0      	blx	r6
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	d106      	bne.n	8008c3e <__sflush_r+0x62>
 8008c30:	6829      	ldr	r1, [r5, #0]
 8008c32:	291d      	cmp	r1, #29
 8008c34:	d82b      	bhi.n	8008c8e <__sflush_r+0xb2>
 8008c36:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce0 <__sflush_r+0x104>)
 8008c38:	410a      	asrs	r2, r1
 8008c3a:	07d6      	lsls	r6, r2, #31
 8008c3c:	d427      	bmi.n	8008c8e <__sflush_r+0xb2>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6062      	str	r2, [r4, #4]
 8008c42:	04d9      	lsls	r1, r3, #19
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	d504      	bpl.n	8008c54 <__sflush_r+0x78>
 8008c4a:	1c42      	adds	r2, r0, #1
 8008c4c:	d101      	bne.n	8008c52 <__sflush_r+0x76>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	b903      	cbnz	r3, 8008c54 <__sflush_r+0x78>
 8008c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c56:	602f      	str	r7, [r5, #0]
 8008c58:	b1b9      	cbz	r1, 8008c8a <__sflush_r+0xae>
 8008c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__sflush_r+0x8c>
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7ff f89e 	bl	8007da4 <_free_r>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6c:	e00d      	b.n	8008c8a <__sflush_r+0xae>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	4602      	mov	r2, r0
 8008c76:	1c50      	adds	r0, r2, #1
 8008c78:	d1c9      	bne.n	8008c0e <__sflush_r+0x32>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0c6      	beq.n	8008c0e <__sflush_r+0x32>
 8008c80:	2b1d      	cmp	r3, #29
 8008c82:	d001      	beq.n	8008c88 <__sflush_r+0xac>
 8008c84:	2b16      	cmp	r3, #22
 8008c86:	d11e      	bne.n	8008cc6 <__sflush_r+0xea>
 8008c88:	602f      	str	r7, [r5, #0]
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e022      	b.n	8008cd4 <__sflush_r+0xf8>
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	b21b      	sxth	r3, r3
 8008c94:	e01b      	b.n	8008cce <__sflush_r+0xf2>
 8008c96:	690f      	ldr	r7, [r1, #16]
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	d0f6      	beq.n	8008c8a <__sflush_r+0xae>
 8008c9c:	0793      	lsls	r3, r2, #30
 8008c9e:	680e      	ldr	r6, [r1, #0]
 8008ca0:	bf08      	it	eq
 8008ca2:	694b      	ldreq	r3, [r1, #20]
 8008ca4:	600f      	str	r7, [r1, #0]
 8008ca6:	bf18      	it	ne
 8008ca8:	2300      	movne	r3, #0
 8008caa:	eba6 0807 	sub.w	r8, r6, r7
 8008cae:	608b      	str	r3, [r1, #8]
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	dde9      	ble.n	8008c8a <__sflush_r+0xae>
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cba:	4643      	mov	r3, r8
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b0      	blx	r6
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	dc08      	bgt.n	8008cd8 <__sflush_r+0xfc>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	4407      	add	r7, r0
 8008cda:	eba8 0800 	sub.w	r8, r8, r0
 8008cde:	e7e7      	b.n	8008cb0 <__sflush_r+0xd4>
 8008ce0:	dfbffffe 	.word	0xdfbffffe

08008ce4 <_fflush_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	690b      	ldr	r3, [r1, #16]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b913      	cbnz	r3, 8008cf4 <_fflush_r+0x10>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	b118      	cbz	r0, 8008cfe <_fflush_r+0x1a>
 8008cf6:	6a03      	ldr	r3, [r0, #32]
 8008cf8:	b90b      	cbnz	r3, 8008cfe <_fflush_r+0x1a>
 8008cfa:	f7fe f835 	bl	8006d68 <__sinit>
 8008cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f3      	beq.n	8008cee <_fflush_r+0xa>
 8008d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d08:	07d0      	lsls	r0, r2, #31
 8008d0a:	d404      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d0c:	0599      	lsls	r1, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d12:	f7fe fa58 	bl	80071c6 <__retarget_lock_acquire_recursive>
 8008d16:	4628      	mov	r0, r5
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f7ff ff5f 	bl	8008bdc <__sflush_r>
 8008d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d20:	07da      	lsls	r2, r3, #31
 8008d22:	4605      	mov	r5, r0
 8008d24:	d4e4      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	059b      	lsls	r3, r3, #22
 8008d2a:	d4e1      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d2e:	f7fe fa4b 	bl	80071c8 <__retarget_lock_release_recursive>
 8008d32:	e7dd      	b.n	8008cf0 <_fflush_r+0xc>

08008d34 <__swhatbuf_r>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	b096      	sub	sp, #88	@ 0x58
 8008d40:	4615      	mov	r5, r2
 8008d42:	461e      	mov	r6, r3
 8008d44:	da0d      	bge.n	8008d62 <__swhatbuf_r+0x2e>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d4c:	f04f 0100 	mov.w	r1, #0
 8008d50:	bf14      	ite	ne
 8008d52:	2340      	movne	r3, #64	@ 0x40
 8008d54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d58:	2000      	movs	r0, #0
 8008d5a:	6031      	str	r1, [r6, #0]
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	b016      	add	sp, #88	@ 0x58
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
 8008d62:	466a      	mov	r2, sp
 8008d64:	f000 f862 	bl	8008e2c <_fstat_r>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dbec      	blt.n	8008d46 <__swhatbuf_r+0x12>
 8008d6c:	9901      	ldr	r1, [sp, #4]
 8008d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d76:	4259      	negs	r1, r3
 8008d78:	4159      	adcs	r1, r3
 8008d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d7e:	e7eb      	b.n	8008d58 <__swhatbuf_r+0x24>

08008d80 <__smakebuf_r>:
 8008d80:	898b      	ldrh	r3, [r1, #12]
 8008d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d84:	079d      	lsls	r5, r3, #30
 8008d86:	4606      	mov	r6, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d507      	bpl.n	8008d9c <__smakebuf_r+0x1c>
 8008d8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2301      	movs	r3, #1
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	b003      	add	sp, #12
 8008d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9c:	ab01      	add	r3, sp, #4
 8008d9e:	466a      	mov	r2, sp
 8008da0:	f7ff ffc8 	bl	8008d34 <__swhatbuf_r>
 8008da4:	9f00      	ldr	r7, [sp, #0]
 8008da6:	4605      	mov	r5, r0
 8008da8:	4639      	mov	r1, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff f86e 	bl	8007e8c <_malloc_r>
 8008db0:	b948      	cbnz	r0, 8008dc6 <__smakebuf_r+0x46>
 8008db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db6:	059a      	lsls	r2, r3, #22
 8008db8:	d4ee      	bmi.n	8008d98 <__smakebuf_r+0x18>
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	f043 0302 	orr.w	r3, r3, #2
 8008dc2:	81a3      	strh	r3, [r4, #12]
 8008dc4:	e7e2      	b.n	8008d8c <__smakebuf_r+0xc>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	6020      	str	r0, [r4, #0]
 8008dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dd6:	b15b      	cbz	r3, 8008df0 <__smakebuf_r+0x70>
 8008dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f000 f837 	bl	8008e50 <_isatty_r>
 8008de2:	b128      	cbz	r0, 8008df0 <__smakebuf_r+0x70>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f023 0303 	bic.w	r3, r3, #3
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	431d      	orrs	r5, r3
 8008df4:	81a5      	strh	r5, [r4, #12]
 8008df6:	e7cf      	b.n	8008d98 <__smakebuf_r+0x18>

08008df8 <memmove>:
 8008df8:	4288      	cmp	r0, r1
 8008dfa:	b510      	push	{r4, lr}
 8008dfc:	eb01 0402 	add.w	r4, r1, r2
 8008e00:	d902      	bls.n	8008e08 <memmove+0x10>
 8008e02:	4284      	cmp	r4, r0
 8008e04:	4623      	mov	r3, r4
 8008e06:	d807      	bhi.n	8008e18 <memmove+0x20>
 8008e08:	1e43      	subs	r3, r0, #1
 8008e0a:	42a1      	cmp	r1, r4
 8008e0c:	d008      	beq.n	8008e20 <memmove+0x28>
 8008e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e16:	e7f8      	b.n	8008e0a <memmove+0x12>
 8008e18:	4402      	add	r2, r0
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	428a      	cmp	r2, r1
 8008e1e:	d100      	bne.n	8008e22 <memmove+0x2a>
 8008e20:	bd10      	pop	{r4, pc}
 8008e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e2a:	e7f7      	b.n	8008e1c <memmove+0x24>

08008e2c <_fstat_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	@ (8008e4c <_fstat_r+0x20>)
 8008e30:	2300      	movs	r3, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	4611      	mov	r1, r2
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	f7f8 ffe3 	bl	8001e04 <_fstat>
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	d102      	bne.n	8008e48 <_fstat_r+0x1c>
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	b103      	cbz	r3, 8008e48 <_fstat_r+0x1c>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	bd38      	pop	{r3, r4, r5, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000dec 	.word	0x20000dec

08008e50 <_isatty_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_isatty_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f8 ffe2 	bl	8001e24 <_isatty>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_isatty_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_isatty_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20000dec 	.word	0x20000dec

08008e70 <_sbrk_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	@ (8008e8c <_sbrk_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f8 ffea 	bl	8001e54 <_sbrk>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_sbrk_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_sbrk_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000dec 	.word	0x20000dec

08008e90 <__assert_func>:
 8008e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e92:	4614      	mov	r4, r2
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b09      	ldr	r3, [pc, #36]	@ (8008ebc <__assert_func+0x2c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	68d8      	ldr	r0, [r3, #12]
 8008e9e:	b954      	cbnz	r4, 8008eb6 <__assert_func+0x26>
 8008ea0:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <__assert_func+0x30>)
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea8:	9100      	str	r1, [sp, #0]
 8008eaa:	462b      	mov	r3, r5
 8008eac:	4905      	ldr	r1, [pc, #20]	@ (8008ec4 <__assert_func+0x34>)
 8008eae:	f000 f86f 	bl	8008f90 <fiprintf>
 8008eb2:	f000 f87f 	bl	8008fb4 <abort>
 8008eb6:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <__assert_func+0x38>)
 8008eb8:	e7f4      	b.n	8008ea4 <__assert_func+0x14>
 8008eba:	bf00      	nop
 8008ebc:	20000024 	.word	0x20000024
 8008ec0:	0800959e 	.word	0x0800959e
 8008ec4:	08009570 	.word	0x08009570
 8008ec8:	08009563 	.word	0x08009563

08008ecc <_calloc_r>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	fba1 5402 	umull	r5, r4, r1, r2
 8008ed2:	b93c      	cbnz	r4, 8008ee4 <_calloc_r+0x18>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7fe ffd9 	bl	8007e8c <_malloc_r>
 8008eda:	4606      	mov	r6, r0
 8008edc:	b928      	cbnz	r0, 8008eea <_calloc_r+0x1e>
 8008ede:	2600      	movs	r6, #0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	6002      	str	r2, [r0, #0]
 8008ee8:	e7f9      	b.n	8008ede <_calloc_r+0x12>
 8008eea:	462a      	mov	r2, r5
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7fe f8ed 	bl	80070cc <memset>
 8008ef2:	e7f5      	b.n	8008ee0 <_calloc_r+0x14>

08008ef4 <__ascii_mbtowc>:
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	b901      	cbnz	r1, 8008efa <__ascii_mbtowc+0x6>
 8008ef8:	a901      	add	r1, sp, #4
 8008efa:	b142      	cbz	r2, 8008f0e <__ascii_mbtowc+0x1a>
 8008efc:	b14b      	cbz	r3, 8008f12 <__ascii_mbtowc+0x1e>
 8008efe:	7813      	ldrb	r3, [r2, #0]
 8008f00:	600b      	str	r3, [r1, #0]
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	1e10      	subs	r0, r2, #0
 8008f06:	bf18      	it	ne
 8008f08:	2001      	movne	r0, #1
 8008f0a:	b002      	add	sp, #8
 8008f0c:	4770      	bx	lr
 8008f0e:	4610      	mov	r0, r2
 8008f10:	e7fb      	b.n	8008f0a <__ascii_mbtowc+0x16>
 8008f12:	f06f 0001 	mvn.w	r0, #1
 8008f16:	e7f8      	b.n	8008f0a <__ascii_mbtowc+0x16>

08008f18 <_realloc_r>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4615      	mov	r5, r2
 8008f20:	460c      	mov	r4, r1
 8008f22:	b921      	cbnz	r1, 8008f2e <_realloc_r+0x16>
 8008f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f28:	4611      	mov	r1, r2
 8008f2a:	f7fe bfaf 	b.w	8007e8c <_malloc_r>
 8008f2e:	b92a      	cbnz	r2, 8008f3c <_realloc_r+0x24>
 8008f30:	f7fe ff38 	bl	8007da4 <_free_r>
 8008f34:	2400      	movs	r4, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	f000 f841 	bl	8008fc2 <_malloc_usable_size_r>
 8008f40:	4285      	cmp	r5, r0
 8008f42:	4606      	mov	r6, r0
 8008f44:	d802      	bhi.n	8008f4c <_realloc_r+0x34>
 8008f46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f4a:	d8f4      	bhi.n	8008f36 <_realloc_r+0x1e>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f7fe ff9c 	bl	8007e8c <_malloc_r>
 8008f54:	4607      	mov	r7, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0ec      	beq.n	8008f34 <_realloc_r+0x1c>
 8008f5a:	42b5      	cmp	r5, r6
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4621      	mov	r1, r4
 8008f60:	bf28      	it	cs
 8008f62:	4632      	movcs	r2, r6
 8008f64:	f7fe f931 	bl	80071ca <memcpy>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7fe ff1a 	bl	8007da4 <_free_r>
 8008f70:	463c      	mov	r4, r7
 8008f72:	e7e0      	b.n	8008f36 <_realloc_r+0x1e>

08008f74 <__ascii_wctomb>:
 8008f74:	4603      	mov	r3, r0
 8008f76:	4608      	mov	r0, r1
 8008f78:	b141      	cbz	r1, 8008f8c <__ascii_wctomb+0x18>
 8008f7a:	2aff      	cmp	r2, #255	@ 0xff
 8008f7c:	d904      	bls.n	8008f88 <__ascii_wctomb+0x14>
 8008f7e:	228a      	movs	r2, #138	@ 0x8a
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	4770      	bx	lr
 8008f88:	700a      	strb	r2, [r1, #0]
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	4770      	bx	lr
	...

08008f90 <fiprintf>:
 8008f90:	b40e      	push	{r1, r2, r3}
 8008f92:	b503      	push	{r0, r1, lr}
 8008f94:	4601      	mov	r1, r0
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	4805      	ldr	r0, [pc, #20]	@ (8008fb0 <fiprintf+0x20>)
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	6800      	ldr	r0, [r0, #0]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f7ff fd03 	bl	80089ac <_vfiprintf_r>
 8008fa6:	b002      	add	sp, #8
 8008fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fac:	b003      	add	sp, #12
 8008fae:	4770      	bx	lr
 8008fb0:	20000024 	.word	0x20000024

08008fb4 <abort>:
 8008fb4:	b508      	push	{r3, lr}
 8008fb6:	2006      	movs	r0, #6
 8008fb8:	f000 f834 	bl	8009024 <raise>
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f7f8 feed 	bl	8001d9c <_exit>

08008fc2 <_malloc_usable_size_r>:
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	1f18      	subs	r0, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bfbc      	itt	lt
 8008fcc:	580b      	ldrlt	r3, [r1, r0]
 8008fce:	18c0      	addlt	r0, r0, r3
 8008fd0:	4770      	bx	lr

08008fd2 <_raise_r>:
 8008fd2:	291f      	cmp	r1, #31
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d904      	bls.n	8008fe6 <_raise_r+0x14>
 8008fdc:	2316      	movs	r3, #22
 8008fde:	6003      	str	r3, [r0, #0]
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fe8:	b112      	cbz	r2, 8008ff0 <_raise_r+0x1e>
 8008fea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fee:	b94b      	cbnz	r3, 8009004 <_raise_r+0x32>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f831 	bl	8009058 <_getpid_r>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009000:	f000 b818 	b.w	8009034 <_kill_r>
 8009004:	2b01      	cmp	r3, #1
 8009006:	d00a      	beq.n	800901e <_raise_r+0x4c>
 8009008:	1c59      	adds	r1, r3, #1
 800900a:	d103      	bne.n	8009014 <_raise_r+0x42>
 800900c:	2316      	movs	r3, #22
 800900e:	6003      	str	r3, [r0, #0]
 8009010:	2001      	movs	r0, #1
 8009012:	e7e7      	b.n	8008fe4 <_raise_r+0x12>
 8009014:	2100      	movs	r1, #0
 8009016:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800901a:	4620      	mov	r0, r4
 800901c:	4798      	blx	r3
 800901e:	2000      	movs	r0, #0
 8009020:	e7e0      	b.n	8008fe4 <_raise_r+0x12>
	...

08009024 <raise>:
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <raise+0xc>)
 8009026:	4601      	mov	r1, r0
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f7ff bfd2 	b.w	8008fd2 <_raise_r>
 800902e:	bf00      	nop
 8009030:	20000024 	.word	0x20000024

08009034 <_kill_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d07      	ldr	r5, [pc, #28]	@ (8009054 <_kill_r+0x20>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	f7f8 fe9b 	bl	8001d7c <_kill>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d102      	bne.n	8009050 <_kill_r+0x1c>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	b103      	cbz	r3, 8009050 <_kill_r+0x1c>
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	bd38      	pop	{r3, r4, r5, pc}
 8009052:	bf00      	nop
 8009054:	20000dec 	.word	0x20000dec

08009058 <_getpid_r>:
 8009058:	f7f8 be88 	b.w	8001d6c <_getpid>

0800905c <_init>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr

08009068 <_fini>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr
