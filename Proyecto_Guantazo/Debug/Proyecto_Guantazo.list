
Proyecto_Guantazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d148  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800d348  0800d348  0000e348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d988  0800d988  0000f420  2**0
                  CONTENTS
  4 .ARM          00000008  0800d988  0800d988  0000e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d990  0800d990  0000f420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d990  0800d990  0000e990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d994  0800d994  0000e994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  0800d998  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002e0  0800dc78  0000f2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000380  0800dd18  0000f380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001df8  20000420  0800ddb8  0000f420  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  20002218  0800ddb8  00010218  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000f420  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cfdc  00000000  00000000  0000f44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043ea  00000000  00000000  0002c42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016b0  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001158  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c970  00000000  00000000  00033020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001da98  00000000  00000000  0005f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001004a8  00000000  00000000  0007d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017d8d0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ca4  00000000  00000000  0017d914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  001845b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000420 	.word	0x20000420
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d330 	.word	0x0800d330

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000424 	.word	0x20000424
 800023c:	0800d330 	.word	0x0800d330

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 f9fc 	bl	80009ec <bno055_writeData>
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4619      	mov	r1, r3
 800060a:	203d      	movs	r0, #61	@ 0x3d
 800060c:	f000 f9ee 	bl	80009ec <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000616:	2013      	movs	r0, #19
 8000618:	f000 f9dc 	bl	80009d4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800061c:	e002      	b.n	8000624 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800061e:	2007      	movs	r0, #7
 8000620:	f000 f9d8 	bl	80009d4 <bno055_delay>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffe3 	bl	80005fc <bno055_setOperationMode>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800063e:	200c      	movs	r0, #12
 8000640:	f7ff ffdc 	bl	80005fc <bno055_setOperationMode>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800064c:	2120      	movs	r1, #32
 800064e:	203f      	movs	r0, #63	@ 0x3f
 8000650:	f000 f9cc 	bl	80009ec <bno055_writeData>
  bno055_delay(700);
 8000654:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000658:	f000 f9bc 	bl	80009d4 <bno055_delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  bno055_reset();
 8000666:	f7ff ffef 	bl	8000648 <bno055_reset>

  uint8_t id = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f000 faa5 	bl	8000bc4 <bno055_readData>
  if (id != BNO055_ID) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2ba0      	cmp	r3, #160	@ 0xa0
 800067e:	d004      	beq.n	800068a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <bno055_setup+0x4c>)
 8000686:	f00a ffa1 	bl	800b5cc <iprintf>
  }
  bno055_setPage(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffa8 	bl	80005e0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000690:	2100      	movs	r1, #0
 8000692:	203f      	movs	r0, #63	@ 0x3f
 8000694:	f000 f9aa 	bl	80009ec <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000698:	f7ff ffc8 	bl	800062c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 f999 	bl	80009d4 <bno055_delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	0800d348 	.word	0x0800d348

080006b0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b09e      	sub	sp, #120	@ 0x78
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff8e 	bl	80005e0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d108      	bne.n	80006de <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006d4:	2208      	movs	r2, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa74 	bl	8000bc4 <bno055_readData>
 80006dc:	e007      	b.n	80006ee <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006de:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006e6:	2206      	movs	r2, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fa6b 	bl	8000bc4 <bno055_readData>

  double scale = 1;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	4b7d      	ldr	r3, [pc, #500]	@ (80008e8 <bno055_getVector+0x238>)
 80006f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80006f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d108      	bne.n	8000712 <bno055_getVector+0x62>
    scale = magScale;
 8000700:	4b7a      	ldr	r3, [pc, #488]	@ (80008ec <bno055_getVector+0x23c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800070c:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000710:	e03a      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000716:	2b08      	cmp	r3, #8
 8000718:	d007      	beq.n	800072a <bno055_getVector+0x7a>
 800071a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800071e:	2b28      	cmp	r3, #40	@ 0x28
 8000720:	d003      	beq.n	800072a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000726:	2b2e      	cmp	r3, #46	@ 0x2e
 8000728:	d108      	bne.n	800073c <bno055_getVector+0x8c>
    scale = accelScale;
 800072a:	4b71      	ldr	r3, [pc, #452]	@ (80008f0 <bno055_getVector+0x240>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000736:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800073a:	e025      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800073c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000740:	2b14      	cmp	r3, #20
 8000742:	d108      	bne.n	8000756 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000744:	4b6b      	ldr	r3, [pc, #428]	@ (80008f4 <bno055_getVector+0x244>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000750:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000754:	e018      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800075a:	2b1a      	cmp	r3, #26
 800075c:	d108      	bne.n	8000770 <bno055_getVector+0xc0>
    scale = eulerScale;
 800075e:	4b66      	ldr	r3, [pc, #408]	@ (80008f8 <bno055_getVector+0x248>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800076a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800076e:	e00b      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000774:	2b20      	cmp	r3, #32
 8000776:	d107      	bne.n	8000788 <bno055_getVector+0xd8>
    scale = quaScale;
 8000778:	4b60      	ldr	r3, [pc, #384]	@ (80008fc <bno055_getVector+0x24c>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000784:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz;/* = {.w = 0, .x = 0, .y = 0, .z = 0};*/
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800078c:	2b20      	cmp	r3, #32
 800078e:	d14c      	bne.n	800082a <bno055_getVector+0x17a>

    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000790:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b21a      	sxth	r2, r3
 8000798:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007aa:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007b2:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21a      	sxth	r2, r3
 80007be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007d0:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007d8:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	ee07 3a90 	vmov	s15, r3
 80007f2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007f6:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007fe:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000802:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	b21a      	sxth	r2, r3
 800080a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b21b      	sxth	r3, r3
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800081c:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000820:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000824:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000828:	e038      	b.n	800089c <bno055_getVector+0x1ec>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800082a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	b21a      	sxth	r2, r3
 8000832:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000844:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000848:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800084c:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000850:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21a      	sxth	r2, r3
 8000858:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800086a:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800086e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000872:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000876:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21b      	sxth	r3, r3
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000890:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000894:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000898:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 800089c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80008a0:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80008a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008b0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80008b4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80008b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80008bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80008c0:	ec49 8b14 	vmov	d4, r8, r9
 80008c4:	ec45 4b15 	vmov	d5, r4, r5
 80008c8:	ec41 0b16 	vmov	d6, r0, r1
 80008cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80008d0:	eeb0 0b44 	vmov.f64	d0, d4
 80008d4:	eeb0 1b45 	vmov.f64	d1, d5
 80008d8:	eeb0 2b46 	vmov.f64	d2, d6
 80008dc:	eeb0 3b47 	vmov.f64	d3, d7
 80008e0:	3778      	adds	r7, #120	@ 0x78
 80008e2:	46bd      	mov	sp, r7
 80008e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80008e8:	3ff00000 	.word	0x3ff00000
 80008ec:	20000006 	.word	0x20000006
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000002 	.word	0x20000002
 80008f8:	20000004 	.word	0x20000004
 80008fc:	20000008 	.word	0x20000008

08000900 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000904:	b090      	sub	sp, #64	@ 0x40
 8000906:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000908:	2020      	movs	r0, #32
 800090a:	f7ff fed1 	bl	80006b0 <bno055_getVector>
 800090e:	eeb0 4b40 	vmov.f64	d4, d0
 8000912:	eeb0 5b41 	vmov.f64	d5, d1
 8000916:	eeb0 6b42 	vmov.f64	d6, d2
 800091a:	eeb0 7b43 	vmov.f64	d7, d3
 800091e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000922:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000926:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800092a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800092e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000932:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000936:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800093a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800093e:	ec49 8b14 	vmov	d4, r8, r9
 8000942:	ec45 4b15 	vmov	d5, r4, r5
 8000946:	ec41 0b16 	vmov	d6, r0, r1
 800094a:	ec43 2b17 	vmov	d7, r2, r3
}
 800094e:	eeb0 0b44 	vmov.f64	d0, d4
 8000952:	eeb0 1b45 	vmov.f64	d1, d5
 8000956:	eeb0 2b46 	vmov.f64	d2, d6
 800095a:	eeb0 3b47 	vmov.f64	d3, d7
 800095e:	3740      	adds	r7, #64	@ 0x40
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000966 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800096e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000972:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d013      	beq.n	80009a6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800097e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000982:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000986:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800098e:	e000      	b.n	8000992 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000990:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000992:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800099c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009a6:	687b      	ldr	r3, [r7, #4]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <bno055_assignI2C+0x1c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000043c 	.word	0x2000043c

080009d4 <bno055_delay>:

void bno055_delay(int time) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 ff40 	bl	8001864 <HAL_Delay>
#endif
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	733b      	strb	r3, [r7, #12]
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000a04:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <bno055_writeData+0x184>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f107 020c 	add.w	r2, r7, #12
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2302      	movs	r3, #2
 8000a12:	2150      	movs	r1, #80	@ 0x50
 8000a14:	f002 f8dc 	bl	8002bd0 <HAL_I2C_Master_Transmit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 80a0 	beq.w	8000b64 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d103      	bne.n	8000a32 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000a2a:	4852      	ldr	r0, [pc, #328]	@ (8000b74 <bno055_writeData+0x188>)
 8000a2c:	f00a fe36 	bl	800b69c <puts>
 8000a30:	e012      	b.n	8000a58 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d103      	bne.n	8000a40 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000a38:	484f      	ldr	r0, [pc, #316]	@ (8000b78 <bno055_writeData+0x18c>)
 8000a3a:	f00a fe2f 	bl	800b69c <puts>
 8000a3e:	e00b      	b.n	8000a58 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d103      	bne.n	8000a4e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000a46:	484d      	ldr	r0, [pc, #308]	@ (8000b7c <bno055_writeData+0x190>)
 8000a48:	f00a fe28 	bl	800b69c <puts>
 8000a4c:	e004      	b.n	8000a58 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	4619      	mov	r1, r3
 8000a52:	484b      	ldr	r0, [pc, #300]	@ (8000b80 <bno055_writeData+0x194>)
 8000a54:	f00a fdba 	bl	800b5cc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000a58:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <bno055_writeData+0x184>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 faaf 	bl	8002fc0 <HAL_I2C_GetError>
 8000a62:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d07e      	beq.n	8000b68 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d103      	bne.n	8000a78 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000a70:	4844      	ldr	r0, [pc, #272]	@ (8000b84 <bno055_writeData+0x198>)
 8000a72:	f00a fe13 	bl	800b69c <puts>
 8000a76:	e021      	b.n	8000abc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d103      	bne.n	8000a86 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000a7e:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <bno055_writeData+0x19c>)
 8000a80:	f00a fe0c 	bl	800b69c <puts>
 8000a84:	e01a      	b.n	8000abc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d103      	bne.n	8000a94 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000a8c:	483f      	ldr	r0, [pc, #252]	@ (8000b8c <bno055_writeData+0x1a0>)
 8000a8e:	f00a fe05 	bl	800b69c <puts>
 8000a92:	e013      	b.n	8000abc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d103      	bne.n	8000aa2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000a9a:	483d      	ldr	r0, [pc, #244]	@ (8000b90 <bno055_writeData+0x1a4>)
 8000a9c:	f00a fdfe 	bl	800b69c <puts>
 8000aa0:	e00c      	b.n	8000abc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d103      	bne.n	8000ab0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000aa8:	483a      	ldr	r0, [pc, #232]	@ (8000b94 <bno055_writeData+0x1a8>)
 8000aaa:	f00a fdf7 	bl	800b69c <puts>
 8000aae:	e005      	b.n	8000abc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b20      	cmp	r3, #32
 8000ab4:	d102      	bne.n	8000abc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000ab6:	4838      	ldr	r0, [pc, #224]	@ (8000b98 <bno055_writeData+0x1ac>)
 8000ab8:	f00a fdf0 	bl	800b69c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <bno055_writeData+0x184>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fa6f 	bl	8002fa4 <HAL_I2C_GetState>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ad0:	4832      	ldr	r0, [pc, #200]	@ (8000b9c <bno055_writeData+0x1b0>)
 8000ad2:	f00a fde3 	bl	800b69c <puts>
 8000ad6:	e048      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d103      	bne.n	8000ae6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ade:	482f      	ldr	r0, [pc, #188]	@ (8000b9c <bno055_writeData+0x1b0>)
 8000ae0:	f00a fddc 	bl	800b69c <puts>
 8000ae4:	e041      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b24      	cmp	r3, #36	@ 0x24
 8000aea:	d103      	bne.n	8000af4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000aec:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <bno055_writeData+0x1b4>)
 8000aee:	f00a fdd5 	bl	800b69c <puts>
 8000af2:	e03a      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b21      	cmp	r3, #33	@ 0x21
 8000af8:	d103      	bne.n	8000b02 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000afa:	482a      	ldr	r0, [pc, #168]	@ (8000ba4 <bno055_writeData+0x1b8>)
 8000afc:	f00a fdce 	bl	800b69c <puts>
 8000b00:	e033      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	2b22      	cmp	r3, #34	@ 0x22
 8000b06:	d103      	bne.n	8000b10 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000b08:	4827      	ldr	r0, [pc, #156]	@ (8000ba8 <bno055_writeData+0x1bc>)
 8000b0a:	f00a fdc7 	bl	800b69c <puts>
 8000b0e:	e02c      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b28      	cmp	r3, #40	@ 0x28
 8000b14:	d103      	bne.n	8000b1e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000b16:	4825      	ldr	r0, [pc, #148]	@ (8000bac <bno055_writeData+0x1c0>)
 8000b18:	f00a fdc0 	bl	800b69c <puts>
 8000b1c:	e025      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b29      	cmp	r3, #41	@ 0x29
 8000b22:	d103      	bne.n	8000b2c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000b24:	4822      	ldr	r0, [pc, #136]	@ (8000bb0 <bno055_writeData+0x1c4>)
 8000b26:	f00a fdb9 	bl	800b69c <puts>
 8000b2a:	e01e      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b30:	d103      	bne.n	8000b3a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000b32:	4820      	ldr	r0, [pc, #128]	@ (8000bb4 <bno055_writeData+0x1c8>)
 8000b34:	f00a fdb2 	bl	800b69c <puts>
 8000b38:	e017      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b60      	cmp	r3, #96	@ 0x60
 8000b3e:	d103      	bne.n	8000b48 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000b40:	481d      	ldr	r0, [pc, #116]	@ (8000bb8 <bno055_writeData+0x1cc>)
 8000b42:	f00a fdab 	bl	800b69c <puts>
 8000b46:	e010      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b4c:	d103      	bne.n	8000b56 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000b4e:	481b      	ldr	r0, [pc, #108]	@ (8000bbc <bno055_writeData+0x1d0>)
 8000b50:	f00a fda4 	bl	800b69c <puts>
 8000b54:	e009      	b.n	8000b6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2be0      	cmp	r3, #224	@ 0xe0
 8000b5a:	d106      	bne.n	8000b6a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <bno055_writeData+0x1d4>)
 8000b5e:	f00a fd9d 	bl	800b69c <puts>
 8000b62:	e002      	b.n	8000b6a <bno055_writeData+0x17e>
    return;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <bno055_writeData+0x17e>
    return;
 8000b68:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000043c 	.word	0x2000043c
 8000b74:	0800d384 	.word	0x0800d384
 8000b78:	0800d3a8 	.word	0x0800d3a8
 8000b7c:	0800d3d0 	.word	0x0800d3d0
 8000b80:	0800d3f4 	.word	0x0800d3f4
 8000b84:	0800d40c 	.word	0x0800d40c
 8000b88:	0800d420 	.word	0x0800d420
 8000b8c:	0800d434 	.word	0x0800d434
 8000b90:	0800d448 	.word	0x0800d448
 8000b94:	0800d45c 	.word	0x0800d45c
 8000b98:	0800d470 	.word	0x0800d470
 8000b9c:	0800d488 	.word	0x0800d488
 8000ba0:	0800d4a0 	.word	0x0800d4a0
 8000ba4:	0800d4b4 	.word	0x0800d4b4
 8000ba8:	0800d4cc 	.word	0x0800d4cc
 8000bac:	0800d4e4 	.word	0x0800d4e4
 8000bb0:	0800d4fc 	.word	0x0800d4fc
 8000bb4:	0800d51c 	.word	0x0800d51c
 8000bb8:	0800d53c 	.word	0x0800d53c
 8000bbc:	0800d554 	.word	0x0800d554
 8000bc0:	0800d56c 	.word	0x0800d56c

08000bc4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <bno055_readData+0x40>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	2150      	movs	r1, #80	@ 0x50
 8000be2:	f001 fff5 	bl	8002bd0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <bno055_readData+0x40>)
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	2264      	movs	r2, #100	@ 0x64
 8000bf0:	9200      	str	r2, [sp, #0]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	2150      	movs	r1, #80	@ 0x50
 8000bf6:	f002 f8df 	bl	8002db8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000043c 	.word	0x2000043c

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c0c:	b08e      	sub	sp, #56	@ 0x38
 8000c0e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c10:	f000 fdcb 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c14:	f000 f87c 	bl	8000d10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000c18:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <main+0xe4>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f9cd 	bl	8000fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000c22:	f000 f9a5 	bl	8000f70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c26:	f000 f973 	bl	8000f10 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000c2a:	f000 f931 	bl	8000e90 <MX_I2C1_Init>
  MX_ETH_Init();
 8000c2e:	f000 f8e1 	bl	8000df4 <MX_ETH_Init>
  MX_USB_DEVICE_Init();
 8000c32:	f009 f987 	bl	8009f44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  ITM_Port32(31) = 2;
 8000c36:	4b2d      	ldr	r3, [pc, #180]	@ (8000cec <main+0xe4>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]

  bno055_assignI2C(&hi2c1);
 8000c3c:	482c      	ldr	r0, [pc, #176]	@ (8000cf0 <main+0xe8>)
 8000c3e:	f7ff feb9 	bl	80009b4 <bno055_assignI2C>
  bno055_setup();
 8000c42:	f7ff fd0d 	bl	8000660 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000c46:	f7ff fcf8 	bl	800063a <bno055_setOperationModeNDOF>


  printf("W,X,Y,Z,Tipo\r\n");
 8000c4a:	482a      	ldr	r0, [pc, #168]	@ (8000cf4 <main+0xec>)
 8000c4c:	f00a fd26 	bl	800b69c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	4829      	ldr	r0, [pc, #164]	@ (8000cf8 <main+0xf0>)
 8000c54:	f001 ff11 	bl	8002a7a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000c58:	2064      	movs	r0, #100	@ 0x64
 8000c5a:	f000 fe03 	bl	8001864 <HAL_Delay>
	  bno055_vector_t v = bno055_getVectorQuaternion();
 8000c5e:	f7ff fe4f 	bl	8000900 <bno055_getVectorQuaternion>
 8000c62:	eeb0 4b40 	vmov.f64	d4, d0
 8000c66:	eeb0 5b41 	vmov.f64	d5, d1
 8000c6a:	eeb0 6b42 	vmov.f64	d6, d2
 8000c6e:	eeb0 7b43 	vmov.f64	d7, d3
 8000c72:	ed87 4b00 	vstr	d4, [r7]
 8000c76:	ed87 5b02 	vstr	d5, [r7, #8]
 8000c7a:	ed87 6b04 	vstr	d6, [r7, #16]
 8000c7e:	ed87 7b06 	vstr	d7, [r7, #24]
	  w = v.w;
 8000c82:	ed97 7b00 	vldr	d7, [r7]
 8000c86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <main+0xf4>)
 8000c8c:	edc3 7a00 	vstr	s15, [r3]
	  x = v.x;
 8000c90:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <main+0xf8>)
 8000c9a:	edc3 7a00 	vstr	s15, [r3]
	  y = v.y;
 8000c9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ca2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <main+0xfc>)
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
	  z = v.z;
 8000cac:	ed97 7b06 	vldr	d7, [r7, #24]
 8000cb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <main+0x100>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
	  printf("%.6f,%.6f,%.6f,%.6f,\r\n", v.w, v.x, v.y, v.z);
 8000cba:	e9d7 8900 	ldrd	r8, r9, [r7]
 8000cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cc6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000cca:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000cd2:	e9cd 2300 	strd	r2, r3, [sp]
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	464b      	mov	r3, r9
 8000cda:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <main+0x104>)
 8000cdc:	f00a fc76 	bl	800b5cc <iprintf>
	  HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce4:	f000 fdbe 	bl	8001864 <HAL_Delay>
  {
 8000ce8:	bf00      	nop
 8000cea:	e7b1      	b.n	8000c50 <main+0x48>
 8000cec:	e000007c 	.word	0xe000007c
 8000cf0:	20000528 	.word	0x20000528
 8000cf4:	0800d584 	.word	0x0800d584
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	200006c4 	.word	0x200006c4
 8000d00:	200006c8 	.word	0x200006c8
 8000d04:	200006cc 	.word	0x200006cc
 8000d08:	200006d0 	.word	0x200006d0
 8000d0c:	0800d594 	.word	0x0800d594

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	@ 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2234      	movs	r2, #52	@ 0x34
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00a fd9c 	bl	800b85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d34:	f003 ff0c 	bl	8004b50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d76:	2302      	movs	r3, #2
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d84:	2360      	movs	r3, #96	@ 0x60
 8000d86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 ff39 	bl	8004c10 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000da4:	f000 f9c8 	bl	8001138 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000da8:	f003 fee2 	bl	8004b70 <HAL_PWREx_EnableOverDrive>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000db2:	f000 f9c1 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f9ca 	bl	800516c <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000dde:	f000 f9ab 	bl	8001138 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	@ 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000dfa:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <MX_ETH_Init+0x88>)
 8000dfc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e0c:	22e1      	movs	r2, #225	@ 0xe1
 8000e0e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <MX_ETH_Init+0x8c>)
 8000e26:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e2e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e32:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <MX_ETH_Init+0x90>)
 8000e34:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e38:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <MX_ETH_Init+0x94>)
 8000e3a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e3e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000e42:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <MX_ETH_Init+0x84>)
 8000e46:	f001 f92d 	bl	80020a4 <HAL_ETH_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f972 	bl	8001138 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e54:	2238      	movs	r2, #56	@ 0x38
 8000e56:	2100      	movs	r1, #0
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_ETH_Init+0x98>)
 8000e5a:	f00a fcff 	bl	800b85c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_ETH_Init+0x98>)
 8000e60:	2221      	movs	r2, #33	@ 0x21
 8000e62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_ETH_Init+0x98>)
 8000e66:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000e6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <MX_ETH_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000478 	.word	0x20000478
 8000e7c:	40028000 	.word	0x40028000
 8000e80:	200006d4 	.word	0x200006d4
 8000e84:	20000380 	.word	0x20000380
 8000e88:	200002e0 	.word	0x200002e0
 8000e8c:	20000440 	.word	0x20000440

08000e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <MX_I2C1_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ecc:	f001 fdf0 	bl	8002ab0 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 f92f 	bl	8001138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ede:	f002 fae7 	bl	80034b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f926 	bl	8001138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_I2C1_Init+0x74>)
 8000ef0:	f002 fb29 	bl	8003546 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f91d 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000528 	.word	0x20000528
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	20303e5d 	.word	0x20303e5d

08000f10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <MX_USART3_UART_Init+0x5c>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART3_UART_Init+0x58>)
 8000f54:	f004 ff58 	bl	8005e08 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f000 f8eb 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000063c 	.word	0x2000063c
 8000f6c:	40004800 	.word	0x40004800

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_DMA_Init+0x48>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <MX_DMA_Init+0x48>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <MX_DMA_Init+0x48>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200b      	movs	r0, #11
 8000f94:	f000 fd65 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f98:	200b      	movs	r0, #11
 8000f9a:	f000 fd7e 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2011      	movs	r0, #17
 8000fa4:	f000 fd5d 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fa8:	2011      	movs	r0, #17
 8000faa:	f000 fd76 	bl	8001a9a <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	@ 0x30
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a46      	ldr	r2, [pc, #280]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b44      	ldr	r3, [pc, #272]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	4b41      	ldr	r3, [pc, #260]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a40      	ldr	r2, [pc, #256]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a3a      	ldr	r2, [pc, #232]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <MX_GPIO_Init+0x134>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a34      	ldr	r2, [pc, #208]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a2e      	ldr	r2, [pc, #184]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <MX_GPIO_Init+0x134>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <MX_GPIO_Init+0x134>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001068:	4822      	ldr	r0, [pc, #136]	@ (80010f4 <MX_GPIO_Init+0x138>)
 800106a:	f001 fced 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	@ 0x40
 8001072:	4821      	ldr	r0, [pc, #132]	@ (80010f8 <MX_GPIO_Init+0x13c>)
 8001074:	f001 fce8 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	481b      	ldr	r0, [pc, #108]	@ (80010fc <MX_GPIO_Init+0x140>)
 8001090:	f001 fb2e 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001094:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <MX_GPIO_Init+0x138>)
 80010ae:	f001 fb1f 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010b2:	2340      	movs	r3, #64	@ 0x40
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <MX_GPIO_Init+0x13c>)
 80010ca:	f001 fb11 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_GPIO_Init+0x13c>)
 80010e2:	f001 fb05 	bl	80026f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	@ 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40020800 	.word	0x40020800

08001100 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e009      	b.n	8001126 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fc23 	bl	8000966 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbf1      	blt.n	8001112 <_write+0x12>
	}
	return len;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x44>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x44>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x44>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_ETH_MspInit+0x158>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f040 8096 	bne.w	80012dc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011b0:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a4c      	ldr	r2, [pc, #304]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b4a      	ldr	r3, [pc, #296]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	4a46      	ldr	r2, [pc, #280]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d4:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	4a40      	ldr	r2, [pc, #256]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ec:	4b3e      	ldr	r3, [pc, #248]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	4a3a      	ldr	r2, [pc, #232]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6313      	str	r3, [r2, #48]	@ 0x30
 8001204:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b35      	ldr	r3, [pc, #212]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	4a34      	ldr	r2, [pc, #208]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6313      	str	r3, [r2, #48]	@ 0x30
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a2e      	ldr	r2, [pc, #184]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 8001246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124a:	6313      	str	r3, [r2, #48]	@ 0x30
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <HAL_ETH_MspInit+0x15c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001258:	2332      	movs	r3, #50	@ 0x32
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001268:	230b      	movs	r3, #11
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	481e      	ldr	r0, [pc, #120]	@ (80012ec <HAL_ETH_MspInit+0x160>)
 8001274:	f001 fa3c 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001278:	2386      	movs	r3, #134	@ 0x86
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001288:	230b      	movs	r3, #11
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4817      	ldr	r0, [pc, #92]	@ (80012f0 <HAL_ETH_MspInit+0x164>)
 8001294:	f001 fa2c 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001298:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012aa:	230b      	movs	r3, #11
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	480f      	ldr	r0, [pc, #60]	@ (80012f4 <HAL_ETH_MspInit+0x168>)
 80012b6:	f001 fa1b 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012cc:	230b      	movs	r3, #11
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <HAL_ETH_MspInit+0x16c>)
 80012d8:	f001 fa0a 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3738      	adds	r7, #56	@ 0x38
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40028000 	.word	0x40028000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40021800 	.word	0x40021800

080012fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2290      	movs	r2, #144	@ 0x90
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00a fa9d 	bl	800b85c <memset>
  if(hi2c->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a50      	ldr	r2, [pc, #320]	@ (8001468 <HAL_I2C_MspInit+0x16c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 8099 	bne.w	8001460 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001332:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f004 f93b 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001348:	f7ff fef6 	bl	8001138 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b47      	ldr	r3, [pc, #284]	@ (800146c <HAL_I2C_MspInit+0x170>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a46      	ldr	r2, [pc, #280]	@ (800146c <HAL_I2C_MspInit+0x170>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30
 8001358:	4b44      	ldr	r3, [pc, #272]	@ (800146c <HAL_I2C_MspInit+0x170>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137e:	2304      	movs	r3, #4
 8001380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001388:	4619      	mov	r1, r3
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <HAL_I2C_MspInit+0x174>)
 800138c:	f001 f9b0 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001390:	4b36      	ldr	r3, [pc, #216]	@ (800146c <HAL_I2C_MspInit+0x170>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a35      	ldr	r2, [pc, #212]	@ (800146c <HAL_I2C_MspInit+0x170>)
 8001396:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <HAL_I2C_MspInit+0x170>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80013a8:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013aa:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <HAL_I2C_MspInit+0x17c>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80013ae:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013e8:	4822      	ldr	r0, [pc, #136]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013ea:	f000 fb71 	bl	8001ad0 <HAL_DMA_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80013f4:	f7ff fea0 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <HAL_I2C_MspInit+0x184>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_I2C_MspInit+0x180>)
 800140c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001410:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001414:	2240      	movs	r2, #64	@ 0x40
 8001416:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_I2C_MspInit+0x180>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001420:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_I2C_MspInit+0x180>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_I2C_MspInit+0x180>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001446:	f000 fb43 	bl	8001ad0 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001450:	f7ff fe72 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a09      	ldr	r2, [pc, #36]	@ (800147c <HAL_I2C_MspInit+0x180>)
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_I2C_MspInit+0x180>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	37b8      	adds	r7, #184	@ 0xb8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40005400 	.word	0x40005400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020400 	.word	0x40020400
 8001474:	2000057c 	.word	0x2000057c
 8001478:	40026010 	.word	0x40026010
 800147c:	200005dc 	.word	0x200005dc
 8001480:	400260a0 	.word	0x400260a0

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ae      	sub	sp, #184	@ 0xb8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2290      	movs	r2, #144	@ 0x90
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a f9d9 	bl	800b85c <memset>
  if(huart->Instance==USART3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <HAL_UART_MspInit+0xb4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d13c      	bne.n	800152e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 f878 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014ce:	f7ff fe33 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_UART_MspInit+0xb8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151c:	2307      	movs	r3, #7
 800151e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <HAL_UART_MspInit+0xbc>)
 800152a:	f001 f8e1 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	37b8      	adds	r7, #184	@ 0xb8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40004800 	.word	0x40004800
 800153c:	40023800 	.word	0x40023800
 8001540:	40020c00 	.word	0x40020c00

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <NMI_Handler+0x4>

0800154c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <UsageFault_Handler+0x4>

0800156c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159a:	f000 f943 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <DMA1_Stream0_IRQHandler+0x10>)
 80015aa:	f000 fb3f 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000057c 	.word	0x2000057c

080015b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <DMA1_Stream6_IRQHandler+0x10>)
 80015be:	f000 fb35 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200005dc 	.word	0x200005dc

080015cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <OTG_FS_IRQHandler+0x10>)
 80015d2:	f002 f94a 	bl	800386a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20001bc4 	.word	0x20001bc4

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f00a f991 	bl	800b920 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001688:	605a      	str	r2, [r3, #4]
  return 0;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f00a f912 	bl	800b920 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20080000 	.word	0x20080000
 8001728:	00000400 	.word	0x00000400
 800172c:	200006dc 	.word	0x200006dc
 8001730:	20002218 	.word	0x20002218

08001734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800175e:	490e      	ldr	r1, [pc, #56]	@ (8001798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001760:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001774:	4c0b      	ldr	r4, [pc, #44]	@ (80017a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001782:	f7ff ffd7 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f00a f8d1 	bl	800b92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fa3d 	bl	8000c08 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 800179c:	0800d998 	.word	0x0800d998
  ldr r2, =_sbss
 80017a0:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 80017a4:	20002218 	.word	0x20002218

080017a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>

080017aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 f94c 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f805 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fcc3 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f967 	bl	8001ab6 <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f92f 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000014 	.word	0x20000014
 8001820:	20000010 	.word	0x20000010

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000014 	.word	0x20000014
 8001848:	200006e0 	.word	0x200006e0

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200006e0 	.word	0x200006e0

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000014 	.word	0x20000014

080018ac <__NVIC_SetPriorityGrouping>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	05fa0000 	.word	0x05fa0000

080018f4 <__NVIC_GetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	@ (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff feb6 	bl	800184c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e099      	b.n	8001c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	e00f      	b.n	8001b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fe9d 	bl	800184c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d908      	bls.n	8001b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e078      	b.n	8001c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e8      	bne.n	8001b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_DMA_Init+0x158>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4313      	orrs	r3, r2
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d117      	bne.n	8001bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f9e9 	bl	8001fac <DMA_CheckFifoParam>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e016      	b.n	8001c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f9a0 	bl	8001f40 <DMA_CalcBaseAndBitshift>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	223f      	movs	r2, #63	@ 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	e010803f 	.word	0xe010803f

08001c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c38:	4b8e      	ldr	r3, [pc, #568]	@ (8001e74 <HAL_DMA_IRQHandler+0x248>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e78 <HAL_DMA_IRQHandler+0x24c>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	2208      	movs	r2, #8
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	2210      	movs	r2, #16
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d043      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03c      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	2210      	movs	r2, #16
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d024      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	e01f      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e016      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0208 	bic.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	2220      	movs	r2, #32
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808f 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8087 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d136      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x1da>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	223f      	movs	r2, #63	@ 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d07e      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
        }
        return;
 8001e42:	e079      	b.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01d      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d031      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
 8001e70:	e02c      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
 8001e72:	bf00      	nop
 8001e74:	2000000c 	.word	0x2000000c
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e01e      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10f      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0210 	bic.w	r2, r2, #16
 8001eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d032      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2205      	movs	r2, #5
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d307      	bcc.n	8001f14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x2cc>
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f38:	bf00      	nop
    }
  }
}
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3b10      	subs	r3, #16
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <DMA_CalcBaseAndBitshift+0x60>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f5a:	4a12      	ldr	r2, [pc, #72]	@ (8001fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d908      	bls.n	8001f80 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	1d1a      	adds	r2, r3, #4
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f7e:	e006      	b.n	8001f8e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	aaaaaaab 	.word	0xaaaaaaab
 8001fa4:	0800d60c 	.word	0x0800d60c
 8001fa8:	fffffc00 	.word	0xfffffc00

08001fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11f      	bne.n	8002006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d856      	bhi.n	800207a <DMA_CheckFifoParam+0xce>
 8001fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <DMA_CheckFifoParam+0x28>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08001ff7 	.word	0x08001ff7
 8001fdc:	08001fe5 	.word	0x08001fe5
 8001fe0:	0800207b 	.word	0x0800207b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff4:	e043      	b.n	800207e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ffe:	d140      	bne.n	8002082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002004:	e03d      	b.n	8002082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800200e:	d121      	bne.n	8002054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d837      	bhi.n	8002086 <DMA_CheckFifoParam+0xda>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <DMA_CheckFifoParam+0x70>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800202d 	.word	0x0800202d
 8002020:	08002033 	.word	0x08002033
 8002024:	0800202d 	.word	0x0800202d
 8002028:	08002045 	.word	0x08002045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      break;
 8002030:	e030      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d025      	beq.n	800208a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002042:	e022      	b.n	800208a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002052:	e01c      	b.n	800208e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d903      	bls.n	8002062 <DMA_CheckFifoParam+0xb6>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d003      	beq.n	8002068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002060:	e018      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      break;
 8002066:	e015      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e00b      	b.n	8002092 <DMA_CheckFifoParam+0xe6>
      break;
 800207a:	bf00      	nop
 800207c:	e00a      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e008      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e006      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e004      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e002      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;   
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
    }
  } 
  
  return status; 
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06a      	b.n	800218c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2223      	movs	r2, #35	@ 0x23
 80020c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff f85f 	bl	800118c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <HAL_ETH_Init+0xf0>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a30      	ldr	r2, [pc, #192]	@ (8002194 <HAL_ETH_Init+0xf0>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <HAL_ETH_Init+0xf0>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <HAL_ETH_Init+0xf4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <HAL_ETH_Init+0xf4>)
 80020ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020f0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <HAL_ETH_Init+0xf4>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4927      	ldr	r1, [pc, #156]	@ (8002198 <HAL_ETH_Init+0xf4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_ETH_Init+0xf4>)
 8002102:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800211a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff fb96 	bl	800184c <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002122:	e011      	b.n	8002148 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002124:	f7ff fb92 	bl	800184c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002132:	d909      	bls.n	8002148 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	22e0      	movs	r2, #224	@ 0xe0
 8002140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e021      	b.n	800218c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e4      	bne.n	8002124 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f958 	bl	8002410 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f9ff 	bl	8002564 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa55 	bl	8002616 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	461a      	mov	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f9bd 	bl	80024f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2210      	movs	r2, #16
 8002186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800

0800219c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <ETH_SetMACConfig+0x15c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7c1b      	ldrb	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <ETH_SetMACConfig+0x28>
 80021be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021c2:	e000      	b.n	80021c6 <ETH_SetMACConfig+0x2a>
 80021c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7c5b      	ldrb	r3, [r3, #17]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <ETH_SetMACConfig+0x38>
 80021ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d2:	e000      	b.n	80021d6 <ETH_SetMACConfig+0x3a>
 80021d4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7fdb      	ldrb	r3, [r3, #31]
 80021e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	7f92      	ldrb	r2, [r2, #30]
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	d102      	bne.n	80021fa <ETH_SetMACConfig+0x5e>
 80021f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f8:	e000      	b.n	80021fc <ETH_SetMACConfig+0x60>
 80021fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80021fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002204:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800220a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002212:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	f892 2020 	ldrb.w	r2, [r2, #32]
 800221a:	2a00      	cmp	r2, #0
 800221c:	d102      	bne.n	8002224 <ETH_SetMACConfig+0x88>
 800221e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002222:	e000      	b.n	8002226 <ETH_SetMACConfig+0x8a>
 8002224:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002226:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7bdb      	ldrb	r3, [r3, #15]
 800222c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800222e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800223c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800223e:	4313      	orrs	r3, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff fb04 	bl	8001864 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002272:	4013      	ands	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002282:	2a00      	cmp	r2, #0
 8002284:	d101      	bne.n	800228a <ETH_SetMACConfig+0xee>
 8002286:	2280      	movs	r2, #128	@ 0x80
 8002288:	e000      	b.n	800228c <ETH_SetMACConfig+0xf0>
 800228a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800228c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002292:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800229a:	2a01      	cmp	r2, #1
 800229c:	d101      	bne.n	80022a2 <ETH_SetMACConfig+0x106>
 800229e:	2208      	movs	r2, #8
 80022a0:	e000      	b.n	80022a4 <ETH_SetMACConfig+0x108>
 80022a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80022ac:	2a01      	cmp	r2, #1
 80022ae:	d101      	bne.n	80022b4 <ETH_SetMACConfig+0x118>
 80022b0:	2204      	movs	r2, #4
 80022b2:	e000      	b.n	80022b6 <ETH_SetMACConfig+0x11a>
 80022b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80022be:	2a01      	cmp	r2, #1
 80022c0:	d101      	bne.n	80022c6 <ETH_SetMACConfig+0x12a>
 80022c2:	2202      	movs	r2, #2
 80022c4:	e000      	b.n	80022c8 <ETH_SetMACConfig+0x12c>
 80022c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff fabf 	bl	8001864 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	ff20810f 	.word	0xff20810f

080022fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4b3d      	ldr	r3, [pc, #244]	@ (800240c <ETH_SetDMAConfig+0x110>)
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7b1b      	ldrb	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <ETH_SetDMAConfig+0x2c>
 8002322:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002326:	e000      	b.n	800232a <ETH_SetDMAConfig+0x2e>
 8002328:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7b5b      	ldrb	r3, [r3, #13]
 800232e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002330:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	7f52      	ldrb	r2, [r2, #29]
 8002336:	2a00      	cmp	r2, #0
 8002338:	d102      	bne.n	8002340 <ETH_SetDMAConfig+0x44>
 800233a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800233e:	e000      	b.n	8002342 <ETH_SetDMAConfig+0x46>
 8002340:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002342:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7b9b      	ldrb	r3, [r3, #14]
 8002348:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800234a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002350:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7f1b      	ldrb	r3, [r3, #28]
 8002356:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002358:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7f9b      	ldrb	r3, [r3, #30]
 800235e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002360:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002366:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800236e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002370:	4313      	orrs	r3, r2
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002380:	461a      	mov	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff fa66 	bl	8001864 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a0:	461a      	mov	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	791b      	ldrb	r3, [r3, #4]
 80023aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fa37 	bl	8001864 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	f8de3f23 	.word	0xf8de3f23

08002410 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a6      	sub	sp, #152	@ 0x98
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002424:	2300      	movs	r3, #0
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800244c:	2300      	movs	r3, #0
 800244e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002456:	2300      	movs	r3, #0
 8002458:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002472:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002478:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800247c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fe86 	bl	800219c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002490:	2301      	movs	r3, #1
 8002492:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002494:	2301      	movs	r3, #1
 8002496:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800249e:	2301      	movs	r3, #1
 80024a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024bc:	2301      	movs	r3, #1
 80024be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff08 	bl	80022fc <ETH_SetDMAConfig>
}
 80024ec:	bf00      	nop
 80024ee:	3798      	adds	r7, #152	@ 0x98
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3305      	adds	r3, #5
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	3204      	adds	r2, #4
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <ETH_MACAddressConfig+0x68>)
 8002516:	4413      	add	r3, r2
 8002518:	461a      	mov	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3303      	adds	r3, #3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	061a      	lsls	r2, r3, #24
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3302      	adds	r3, #2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3301      	adds	r3, #1
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	4313      	orrs	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <ETH_MACAddressConfig+0x6c>)
 8002546:	4413      	add	r3, r2
 8002548:	461a      	mov	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6013      	str	r3, [r2, #0]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40028040 	.word	0x40028040
 8002560:	40028044 	.word	0x40028044

08002564 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e03e      	b.n	80025f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68d9      	ldr	r1, [r3, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	3206      	adds	r2, #6
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d80c      	bhi.n	80025d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	e004      	b.n	80025de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d9bd      	bls.n	8002572 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002608:	611a      	str	r2, [r3, #16]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e046      	b.n	80026b2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002660:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002668:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	3212      	adds	r2, #18
 800267e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d80c      	bhi.n	80026a2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	e004      	b.n	80026ac <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d9b5      	bls.n	8002624 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e2:	60da      	str	r2, [r3, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e175      	b.n	80029fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8164 	bne.w	80029f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d005      	beq.n	8002746 <HAL_GPIO_Init+0x56>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d130      	bne.n	80027a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 0201 	and.w	r2, r3, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d017      	beq.n	80027e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d123      	bne.n	8002838 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80be 	beq.w	80029f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_GPIO_Init+0x324>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a65      	ldr	r2, [pc, #404]	@ (8002a14 <HAL_GPIO_Init+0x324>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
 8002886:	4b63      	ldr	r3, [pc, #396]	@ (8002a14 <HAL_GPIO_Init+0x324>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002892:	4a61      	ldr	r2, [pc, #388]	@ (8002a18 <HAL_GPIO_Init+0x328>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d037      	beq.n	800292e <HAL_GPIO_Init+0x23e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d031      	beq.n	800292a <HAL_GPIO_Init+0x23a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a56      	ldr	r2, [pc, #344]	@ (8002a24 <HAL_GPIO_Init+0x334>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x236>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a55      	ldr	r2, [pc, #340]	@ (8002a28 <HAL_GPIO_Init+0x338>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x232>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a54      	ldr	r2, [pc, #336]	@ (8002a2c <HAL_GPIO_Init+0x33c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x22e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a53      	ldr	r2, [pc, #332]	@ (8002a30 <HAL_GPIO_Init+0x340>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x22a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	@ (8002a34 <HAL_GPIO_Init+0x344>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a51      	ldr	r2, [pc, #324]	@ (8002a38 <HAL_GPIO_Init+0x348>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a50      	ldr	r2, [pc, #320]	@ (8002a3c <HAL_GPIO_Init+0x34c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4f      	ldr	r2, [pc, #316]	@ (8002a40 <HAL_GPIO_Init+0x350>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x21a>
 8002906:	2309      	movs	r3, #9
 8002908:	e012      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800290a:	230a      	movs	r3, #10
 800290c:	e010      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800290e:	2308      	movs	r3, #8
 8002910:	e00e      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002912:	2307      	movs	r3, #7
 8002914:	e00c      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002916:	2306      	movs	r3, #6
 8002918:	e00a      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800291a:	2305      	movs	r3, #5
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800291e:	2304      	movs	r3, #4
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <HAL_GPIO_Init+0x328>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002972:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299c:	4a29      	ldr	r2, [pc, #164]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a2:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <HAL_GPIO_Init+0x354>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f ae86 	bls.w	8002710 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40022400 	.word	0x40022400
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	041a      	lsls	r2, r3, #16
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe fc10 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	@ 0x24
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	e006      	b.n	8002b38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d104      	bne.n	8002b4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_I2C_Init+0x11c>)
 8002b56:	430b      	orrs	r3, r1
 8002b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69d9      	ldr	r1, [r3, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	02008000 	.word	0x02008000

08002bd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
 8002be0:	4613      	mov	r3, r2
 8002be2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	f040 80da 	bne.w	8002da6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_I2C_Master_Transmit+0x30>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0d3      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe fe20 	bl	800184c <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa00 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0be      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2221      	movs	r2, #33	@ 0x21
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2210      	movs	r2, #16
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	893a      	ldrh	r2, [r7, #8]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2bff      	cmp	r3, #255	@ 0xff
 8002c5a:	d90e      	bls.n	8002c7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	22ff      	movs	r2, #255	@ 0xff
 8002c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	4b51      	ldr	r3, [pc, #324]	@ (8002db0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fbea 	bl	800344c <I2C_TransferConfig>
 8002c78:	e06c      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	4b48      	ldr	r3, [pc, #288]	@ (8002db0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fbd9 	bl	800344c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c9a:	e05b      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f9fd 	bl	80030a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e07b      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d034      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x184>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d130      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2180      	movs	r1, #128	@ 0x80
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f98f 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04d      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2bff      	cmp	r3, #255	@ 0xff
 8002d14:	d90e      	bls.n	8002d34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	@ 0xff
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	2300      	movs	r3, #0
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fb8d 	bl	800344c <I2C_TransferConfig>
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fb7c 	bl	800344c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d19e      	bne.n	8002c9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f9dc 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e01a      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2220      	movs	r2, #32
 8002d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e000      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	80002000 	.word	0x80002000
 8002db4:	fe00e800 	.word	0xfe00e800

08002db8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	f040 80db 	bne.w	8002f90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2C_Master_Receive+0x30>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0d4      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df0:	f7fe fd2c 	bl	800184c <HAL_GetTick>
 8002df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2319      	movs	r3, #25
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f90c 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0bf      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2222      	movs	r2, #34	@ 0x22
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	893a      	ldrh	r2, [r7, #8]
 8002e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2bff      	cmp	r3, #255	@ 0xff
 8002e42:	d90e      	bls.n	8002e62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	4b52      	ldr	r3, [pc, #328]	@ (8002f9c <HAL_I2C_Master_Receive+0x1e4>)
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 faf6 	bl	800344c <I2C_TransferConfig>
 8002e60:	e06d      	b.n	8002f3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b49      	ldr	r3, [pc, #292]	@ (8002f9c <HAL_I2C_Master_Receive+0x1e4>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fae5 	bl	800344c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e82:	e05c      	b.n	8002f3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	6a39      	ldr	r1, [r7, #32]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f985 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e07c      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d034      	beq.n	8002f3e <HAL_I2C_Master_Receive+0x186>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d130      	bne.n	8002f3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f89a 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e04d      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2bff      	cmp	r3, #255	@ 0xff
 8002efe:	d90e      	bls.n	8002f1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22ff      	movs	r2, #255	@ 0xff
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa98 	bl	800344c <I2C_TransferConfig>
 8002f1c:	e00f      	b.n	8002f3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fa87 	bl	800344c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d19d      	bne.n	8002e84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	6a39      	ldr	r1, [r7, #32]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f8e7 	bl	8003120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01a      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2220      	movs	r2, #32
 8002f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <HAL_I2C_Master_Receive+0x1e8>)
 8002f70:	400b      	ands	r3, r1
 8002f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	80002400 	.word	0x80002400
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d103      	bne.n	8002ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d007      	beq.n	8003014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	619a      	str	r2, [r3, #24]
  }
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003030:	e022      	b.n	8003078 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d01e      	beq.n	8003078 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fe fc07 	bl	800184c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d113      	bne.n	8003078 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00f      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d0cd      	beq.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030ac:	e02c      	b.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8ea 	bl	800328c <I2C_IsErrorOccurred>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e02a      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d01e      	beq.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7fe fbbf 	bl	800184c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d113      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d1cb      	bne.n	80030ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	e028      	b.n	8003180 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8aa 	bl	800328c <I2C_IsErrorOccurred>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e026      	b.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe fb83 	bl	800184c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d113      	bne.n	8003180 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d1cf      	bne.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a4:	e064      	b.n	8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f86e 	bl	800328c <I2C_IsErrorOccurred>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e062      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d138      	bne.n	800323a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d105      	bne.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e04e      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d107      	bne.n	8003200 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2204      	movs	r2, #4
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80031fe:	e002      	b.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800321a:	400b      	ands	r3, r1
 800321c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e022      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fb07 	bl	800184c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10f      	bne.n	8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e007      	b.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d193      	bne.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	fe00e800 	.word	0xfe00e800

0800328c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d068      	beq.n	800338a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2210      	movs	r2, #16
 80032be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032c0:	e049      	b.n	8003356 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d045      	beq.n	8003356 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe fabf 	bl	800184c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_IsErrorOccurred+0x54>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d13a      	bne.n	8003356 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003302:	d121      	bne.n	8003348 <I2C_IsErrorOccurred+0xbc>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800330a:	d01d      	beq.n	8003348 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d01a      	beq.n	8003348 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003320:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003322:	f7fe fa93 	bl	800184c <HAL_GetTick>
 8003326:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e00e      	b.n	8003348 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800332a:	f7fe fa8f 	bl	800184c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b19      	cmp	r3, #25
 8003336:	d907      	bls.n	8003348 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f043 0320 	orr.w	r3, r3, #32
 800333e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003346:	e006      	b.n	8003356 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d1e9      	bne.n	800332a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	d003      	beq.n	800336c <I2C_IsErrorOccurred+0xe0>
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0aa      	beq.n	80032c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800336c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fde9 	bl	8002fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <I2C_IsErrorOccurred+0x1bc>)
 8003412:	400b      	ands	r3, r1
 8003414:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800343a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800343e:	4618      	mov	r0, r3
 8003440:	3728      	adds	r7, #40	@ 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	fe00e800 	.word	0xfe00e800

0800344c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	4613      	mov	r3, r2
 800345c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003464:	7a7b      	ldrb	r3, [r7, #9]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800346c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	4313      	orrs	r3, r2
 8003476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800347a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	0d5b      	lsrs	r3, r3, #21
 8003486:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <I2C_TransferConfig+0x60>)
 800348c:	430b      	orrs	r3, r1
 800348e:	43db      	mvns	r3, r3
 8003490:	ea02 0103 	and.w	r1, r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	03ff63ff 	.word	0x03ff63ff

080034b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d138      	bne.n	8003538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e032      	b.n	800353a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	d139      	bne.n	80035d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003566:	2302      	movs	r3, #2
 8003568:	e033      	b.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2224      	movs	r2, #36	@ 0x24
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e0:	b08f      	sub	sp, #60	@ 0x3c
 80035e2:	af0a      	add	r7, sp, #40	@ 0x28
 80035e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e116      	b.n	800381e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f006 fea8 	bl	800a360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f003 f95d 	bl	80068ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	687e      	ldr	r6, [r7, #4]
 800363c:	466d      	mov	r5, sp
 800363e:	f106 0410 	add.w	r4, r6, #16
 8003642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800364e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003652:	1d33      	adds	r3, r6, #4
 8003654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f003 f83e 	bl	80066d8 <USB_CoreInit>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0d7      	b.n	800381e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f003 f94b 	bl	8006910 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e04a      	b.n	8003716 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	333d      	adds	r3, #61	@ 0x3d
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	333c      	adds	r3, #60	@ 0x3c
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	b298      	uxth	r0, r3
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3344      	adds	r3, #68	@ 0x44
 80036bc:	4602      	mov	r2, r0
 80036be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3340      	adds	r3, #64	@ 0x40
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3348      	adds	r3, #72	@ 0x48
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334c      	adds	r3, #76	@ 0x4c
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3354      	adds	r3, #84	@ 0x54
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d3af      	bcc.n	8003680 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e044      	b.n	80037b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3301      	adds	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3b5      	bcc.n	8003726 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	687e      	ldr	r6, [r7, #4]
 80037c2:	466d      	mov	r5, sp
 80037c4:	f106 0410 	add.w	r4, r6, #16
 80037c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037d8:	1d33      	adds	r3, r6, #4
 80037da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f003 f8e3 	bl	80069a8 <USB_DevInit>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e014      	b.n	800381e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f001 f97b 	bl	8004b08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fa31 	bl	8007c7e <USB_DevDisconnect>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003826 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_PCD_Start+0x16>
 8003838:	2302      	movs	r3, #2
 800383a:	e012      	b.n	8003862 <HAL_PCD_Start+0x3c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f003 f83f 	bl	80068cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 f9f2 	bl	8007c3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800386a:	b590      	push	{r4, r7, lr}
 800386c:	b08d      	sub	sp, #52	@ 0x34
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f004 fab0 	bl	8007de6 <USB_GetMode>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 84b7 	bne.w	80041fc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f004 fa14 	bl	8007cc0 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 84ad 	beq.w	80041fa <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 fa01 	bl	8007cc0 <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d107      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 0202 	and.w	r2, r2, #2
 80038d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 f9ef 	bl	8007cc0 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d161      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0210 	bic.w	r2, r2, #16
 80038fa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	3304      	adds	r3, #4
 800391a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	0c5b      	lsrs	r3, r3, #17
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2b02      	cmp	r3, #2
 8003926:	d124      	bne.n	8003972 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d035      	beq.n	80039a0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800393e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6a38      	ldr	r0, [r7, #32]
 8003948:	f004 f826 	bl	8007998 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	441a      	add	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396a:	441a      	add	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
 8003970:	e016      	b.n	80039a0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	0c5b      	lsrs	r3, r3, #17
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2b06      	cmp	r3, #6
 800397c:	d110      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003984:	2208      	movs	r2, #8
 8003986:	4619      	mov	r1, r3
 8003988:	6a38      	ldr	r0, [r7, #32]
 800398a:	f004 f805 	bl	8007998 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800399a:	441a      	add	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0210 	orr.w	r2, r2, #16
 80039ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f004 f983 	bl	8007cc0 <USB_ReadInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039c4:	f040 80a7 	bne.w	8003b16 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f004 f988 	bl	8007ce6 <USB_ReadDevAllOutEpInterrupt>
 80039d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80039d8:	e099      	b.n	8003b0e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 808e 	beq.w	8003b02 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 f9ac 	bl	8007d4e <USB_ReadDevOutEPInterrupt>
 80039f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2301      	movs	r3, #1
 8003a12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fef0 	bl	80047fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	2308      	movs	r3, #8
 8003a36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 ffc6 	bl	80049cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2310      	movs	r3, #16
 8003a5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d030      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d109      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	78db      	ldrb	r3, [r3, #3]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f006 fd89 	bl	800a5c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afa:	461a      	mov	r2, r3
 8003afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f47f af62 	bne.w	80039da <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 f8d0 	bl	8007cc0 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2a:	f040 80db 	bne.w	8003ce4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 f8f1 	bl	8007d1a <USB_ReadDevAllInEpInterrupt>
 8003b38:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b3e:	e0cd      	b.n	8003cdc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80c2 	beq.w	8003cd0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f917 	bl	8007d8a <USB_ReadDevInEPInterrupt>
 8003b5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d057      	beq.n	8003c18 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	2201      	movs	r2, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69f9      	ldr	r1, [r7, #28]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d132      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334c      	adds	r3, #76	@ 0x4c
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4403      	add	r3, r0
 8003bc6:	3348      	adds	r3, #72	@ 0x48
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4419      	add	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4403      	add	r3, r0
 8003bda:	334c      	adds	r3, #76	@ 0x4c
 8003bdc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x3a2>
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3354      	adds	r3, #84	@ 0x54
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003c04:	461a      	mov	r2, r3
 8003c06:	2101      	movs	r1, #1
 8003c08:	f004 f920 	bl	8007e4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f006 fc53 	bl	800a4be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2308      	movs	r3, #8
 8003c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c66:	461a      	mov	r2, r3
 8003c68:	2340      	movs	r3, #64	@ 0x40
 8003c6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c78:	6a38      	ldr	r0, [r7, #32]
 8003c7a:	f002 fff3 	bl	8006c64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	3338      	adds	r3, #56	@ 0x38
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	78db      	ldrb	r3, [r3, #3]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f006 fca0 	bl	800a5ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2302      	movs	r3, #2
 8003cbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fd08 	bl	80046e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f47f af2e 	bne.w	8003b40 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 ffe9 	bl	8007cc0 <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cf8:	d122      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d20:	2100      	movs	r1, #0
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f006 fe1a 	bl	800a95c <HAL_PCDEx_LPM_Callback>
 8003d28:	e002      	b.n	8003d30 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f006 fc3e 	bl	800a5ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 ffbb 	bl	8007cc0 <USB_ReadInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d54:	d112      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f006 fbfa 	bl	800a560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 ff9d 	bl	8007cc0 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d90:	d121      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003da0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f006 fdc7 	bl	800a95c <HAL_PCDEx_LPM_Callback>
 8003dce:	e002      	b.n	8003dd6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f006 fbc5 	bl	800a560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f003 ff70 	bl	8007cc0 <USB_ReadInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dea:	f040 80b7 	bne.w	8003f5c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2110      	movs	r1, #16
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 ff2b 	bl	8006c64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e12:	e046      	b.n	8003ea2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e20:	461a      	mov	r2, r3
 8003e22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3b3      	bcc.n	8003e14 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ebe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d016      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ed8:	f043 030b 	orr.w	r3, r3, #11
 8003edc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eee:	f043 030b 	orr.w	r3, r3, #11
 8003ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef4:	e015      	b.n	8003f22 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f04:	4619      	mov	r1, r3
 8003f06:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f1c:	f043 030b 	orr.w	r3, r3, #11
 8003f20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f30:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f003 ff80 	bl	8007e4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 fead 	bl	8007cc0 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f70:	d124      	bne.n	8003fbc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 ff44 	bl	8007e04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 feec 	bl	8006d5e <USB_GetDevSpeed>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681c      	ldr	r4, [r3, #0]
 8003f92:	f001 fadd 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8003f96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f002 fbf1 	bl	8006788 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f006 fab1 	bl	800a50e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f003 fe7d 	bl	8007cc0 <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10a      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 fa8e 	bl	800a4f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 0208 	and.w	r2, r2, #8
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fe68 	bl	8007cc0 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b80      	cmp	r3, #128	@ 0x80
 8003ff8:	d122      	bne.n	8004040 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004006:	2301      	movs	r3, #1
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
 800400a:	e014      	b.n	8004036 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fb27 	bl	800467e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	3301      	adds	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	429a      	cmp	r2, r3
 800403e:	d3e5      	bcc.n	800400c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f003 fe3b 	bl	8007cc0 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004054:	d13b      	bne.n	80040ce <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004056:	2301      	movs	r3, #1
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
 800405a:	e02b      	b.n	80040b4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	3340      	adds	r3, #64	@ 0x40
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d115      	bne.n	80040ae <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004082:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	da12      	bge.n	80040ae <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	333f      	adds	r3, #63	@ 0x3f
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fae8 	bl	800467e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	3301      	adds	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d3ce      	bcc.n	800405c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80040cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 fdf4 	bl	8007cc0 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040e2:	d155      	bne.n	8004190 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e8:	e045      	b.n	8004176 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d12e      	bne.n	8004170 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004112:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004114:	2b00      	cmp	r3, #0
 8004116:	da2b      	bge.n	8004170 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004124:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004128:	429a      	cmp	r2, r3
 800412a:	d121      	bne.n	8004170 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800416c:	6053      	str	r3, [r2, #4]
            break;
 800416e:	e007      	b.n	8004180 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	3301      	adds	r3, #1
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	429a      	cmp	r2, r3
 800417e:	d3b4      	bcc.n	80040ea <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800418e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 fd93 	bl	8007cc0 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a4:	d10a      	bne.n	80041bc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f006 fa32 	bl	800a610 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 fd7d 	bl	8007cc0 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d115      	bne.n	80041fc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f006 fa22 	bl	800a62c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	e000      	b.n	80041fc <HAL_PCD_IRQHandler+0x992>
      return;
 80041fa:	bf00      	nop
    }
  }
}
 80041fc:	3734      	adds	r7, #52	@ 0x34
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}

08004202 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_PCD_SetAddress+0x1a>
 8004218:	2302      	movs	r3, #2
 800421a:	e013      	b.n	8004244 <HAL_PCD_SetAddress+0x42>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f003 fcdb 	bl	8007bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	70fb      	strb	r3, [r7, #3]
 800425e:	460b      	mov	r3, r1
 8004260:	803b      	strh	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800426a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da0f      	bge.n	8004292 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 020f 	and.w	r2, r3, #15
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	3338      	adds	r3, #56	@ 0x38
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	3304      	adds	r3, #4
 8004288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	705a      	strb	r2, [r3, #1]
 8004290:	e00f      	b.n	80042b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042be:	883a      	ldrh	r2, [r7, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	78ba      	ldrb	r2, [r7, #2]
 80042c8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042dc:	78bb      	ldrb	r3, [r7, #2]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d102      	bne.n	80042e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_PCD_EP_Open+0xaa>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e00e      	b.n	8004314 <HAL_PCD_EP_Open+0xc8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	4618      	mov	r0, r3
 8004306:	f002 fd4f 	bl	8006da8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004312:	7afb      	ldrb	r3, [r7, #11]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	da0f      	bge.n	8004350 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3338      	adds	r3, #56	@ 0x38
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	705a      	strb	r2, [r3, #1]
 800434e:	e00f      	b.n	8004370 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_PCD_EP_Close+0x6e>
 8004386:	2302      	movs	r3, #2
 8004388:	e00e      	b.n	80043a8 <HAL_PCD_EP_Close+0x8c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	4618      	mov	r0, r3
 800439a:	f002 fd8d 	bl	8006eb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	460b      	mov	r3, r1
 80043be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	3304      	adds	r3, #4
 80043d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	f003 f874 	bl	8007510 <USB_EP0StartXfer>
 8004428:	e008      	b.n	800443c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	f002 fe1a 	bl	8007070 <USB_EPStartXfer>
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8004468:	681b      	ldr	r3, [r3, #0]
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	460b      	mov	r3, r1
 8004484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3338      	adds	r3, #56	@ 0x38
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d102      	bne.n	80044d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044d0:	7afb      	ldrb	r3, [r7, #11]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	f003 f812 	bl	8007510 <USB_EP0StartXfer>
 80044ec:	e008      	b.n	8004500 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	f002 fdb8 	bl	8007070 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d901      	bls.n	8004528 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e050      	b.n	80045ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452c:	2b00      	cmp	r3, #0
 800452e:	da0f      	bge.n	8004550 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	3338      	adds	r3, #56	@ 0x38
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	3304      	adds	r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	705a      	strb	r2, [r3, #1]
 800454e:	e00d      	b.n	800456c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_PCD_EP_SetStall+0x82>
 8004588:	2302      	movs	r3, #2
 800458a:	e01e      	b.n	80045ca <HAL_PCD_EP_SetStall+0xc0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fa54 	bl	8007a48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	b2d9      	uxtb	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80045ba:	461a      	mov	r2, r3
 80045bc:	f003 fc46 	bl	8007e4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d901      	bls.n	80045f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e042      	b.n	8004676 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0f      	bge.n	8004618 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3338      	adds	r3, #56	@ 0x38
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	3304      	adds	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	705a      	strb	r2, [r3, #1]
 8004616:	e00f      	b.n	8004638 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_PCD_EP_ClrStall+0x86>
 8004654:	2302      	movs	r3, #2
 8004656:	e00e      	b.n	8004676 <HAL_PCD_EP_ClrStall+0xa4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fa5c 	bl	8007b24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800468a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800468e:	2b00      	cmp	r3, #0
 8004690:	da0c      	bge.n	80046ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 020f 	and.w	r2, r3, #15
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	3338      	adds	r3, #56	@ 0x38
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e00c      	b.n	80046c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	3304      	adds	r3, #4
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 f87b 	bl	80077c8 <USB_EPStopXfer>
 80046d2:	4603      	mov	r3, r0
 80046d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046d6:	7afb      	ldrb	r3, [r7, #11]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	3338      	adds	r3, #56	@ 0x38
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	3304      	adds	r3, #4
 8004706:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1a      	ldr	r2, [r3, #32]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d901      	bls.n	8004718 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e06c      	b.n	80047f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	429a      	cmp	r2, r3
 800472c:	d902      	bls.n	8004734 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	3303      	adds	r3, #3
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800473c:	e02b      	b.n	8004796 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	429a      	cmp	r2, r3
 8004752:	d902      	bls.n	800475a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3303      	adds	r3, #3
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6919      	ldr	r1, [r3, #16]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004772:	b2db      	uxtb	r3, r3
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4603      	mov	r3, r0
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f003 f8cf 	bl	800791c <USB_WritePacket>

    ep->xfer_buff  += len;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d809      	bhi.n	80047c0 <PCD_WriteEmptyTxFifo+0xe0>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d203      	bcs.n	80047c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1be      	bne.n	800473e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d811      	bhi.n	80047f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	2201      	movs	r2, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047ec:	4013      	ands	r3, r2
 80047ee:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	333c      	adds	r3, #60	@ 0x3c
 8004814:	3304      	adds	r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d17b      	bne.n	800492a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	4a61      	ldr	r2, [pc, #388]	@ (80049c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	f240 80b9 	bls.w	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80b3 	beq.w	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	e0a7      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	2320      	movs	r3, #32
 8004882:	6093      	str	r3, [r2, #8]
 8004884:	e098      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8093 	bne.w	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	4a4b      	ldr	r2, [pc, #300]	@ (80049c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d90f      	bls.n	80048ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b0:	461a      	mov	r2, r3
 80048b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b6:	6093      	str	r3, [r2, #8]
 80048b8:	e07e      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	0159      	lsls	r1, r3, #5
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	440b      	add	r3, r1
 80048dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d114      	bne.n	800491c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004904:	461a      	mov	r2, r3
 8004906:	2101      	movs	r1, #1
 8004908:	f003 faa0 	bl	8007e4c <USB_EP0_OutStart>
 800490c:	e006      	b.n	800491c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f005 fdb0 	bl	800a488 <HAL_PCD_DataOutStageCallback>
 8004928:	e046      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	4a26      	ldr	r2, [pc, #152]	@ (80049c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d124      	bne.n	800497c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004948:	461a      	mov	r2, r3
 800494a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	e032      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	2320      	movs	r3, #32
 800496c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f005 fd87 	bl	800a488 <HAL_PCD_DataOutStageCallback>
 800497a:	e01d      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d114      	bne.n	80049ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80049a4:	461a      	mov	r2, r3
 80049a6:	2100      	movs	r1, #0
 80049a8:	f003 fa50 	bl	8007e4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f005 fd68 	bl	800a488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	4f54300a 	.word	0x4f54300a
 80049c8:	4f54310a 	.word	0x4f54310a

080049cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	333c      	adds	r3, #60	@ 0x3c
 80049e4:	3304      	adds	r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <PCD_EP_OutSetupPacket_int+0x88>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d90e      	bls.n	8004a20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f005 fd1f 	bl	800a464 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d90c      	bls.n	8004a48 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a40:	461a      	mov	r2, r3
 8004a42:	2101      	movs	r1, #1
 8004a44:	f003 fa02 	bl	8007e4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	4f54300a 	.word	0x4f54300a

08004a58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
 8004a64:	4613      	mov	r3, r2
 8004a66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a76:	883b      	ldrh	r3, [r7, #0]
 8004a78:	0419      	lsls	r1, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a84:	e028      	b.n	8004ad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e00d      	b.n	8004ab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3340      	adds	r3, #64	@ 0x40
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3ec      	bcc.n	8004a9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ac0:	883b      	ldrh	r3, [r7, #0]
 8004ac2:	0418      	lsls	r0, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4302      	orrs	r2, r0
 8004ad0:	3340      	adds	r3, #64	@ 0x40
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_PCDEx_ActivateLPM+0x44>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	10000003 	.word	0x10000003

08004b50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40007000 	.word	0x40007000

08004b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b23      	ldr	r3, [pc, #140]	@ (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	4a22      	ldr	r2, [pc, #136]	@ (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b92:	4b1e      	ldr	r3, [pc, #120]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9e:	f7fc fe55 	bl	800184c <HAL_GetTick>
 8004ba2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba4:	e009      	b.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ba6:	f7fc fe51 	bl	800184c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bb4:	d901      	bls.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e022      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bba:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc6:	d1ee      	bne.n	8004ba6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bc8:	4b10      	ldr	r3, [pc, #64]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd4:	f7fc fe3a 	bl	800184c <HAL_GetTick>
 8004bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bda:	e009      	b.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bdc:	f7fc fe36 	bl	800184c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bea:	d901      	bls.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e007      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf0:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e29b      	b.n	800515e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	4b96      	ldr	r3, [pc, #600]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c40:	4b93      	ldr	r3, [pc, #588]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
 8004c4c:	4b90      	ldr	r3, [pc, #576]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x130>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e275      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x7a>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02e      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x9c>
 8004c92:	4b7f      	ldr	r3, [pc, #508]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7b      	ldr	r2, [pc, #492]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc0>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a72      	ldr	r2, [pc, #456]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fdac 	bl	800184c <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fc fda8 	bl	800184c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e229      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b61      	ldr	r3, [pc, #388]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe8>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fd98 	bl	800184c <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fc fd94 	bl	800184c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	@ 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e215      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b57      	ldr	r3, [pc, #348]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x110>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4e:	4b50      	ldr	r3, [pc, #320]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
 8004d66:	4b4a      	ldr	r3, [pc, #296]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b47      	ldr	r3, [pc, #284]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1e9      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b41      	ldr	r3, [pc, #260]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	493d      	ldr	r1, [pc, #244]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e040      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d023      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b39      	ldr	r3, [pc, #228]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fd4a 	bl	800184c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fd46 	bl	800184c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1c7      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b30      	ldr	r3, [pc, #192]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b2d      	ldr	r3, [pc, #180]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4929      	ldr	r1, [pc, #164]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e018      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df0:	4b27      	ldr	r3, [pc, #156]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a26      	ldr	r2, [pc, #152]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc fd26 	bl	800184c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fc fd22 	bl	800184c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1a3      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d038      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d019      	beq.n	8004e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b16      	ldr	r3, [pc, #88]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3a:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fc fd03 	bl	800184c <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fc fcff 	bl	800184c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e180      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x23a>
 8004e68:	e01a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6a:	4b09      	ldr	r3, [pc, #36]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6e:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fce9 	bl	800184c <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fc fce5 	bl	800184c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d903      	bls.n	8004e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e166      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
 8004e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b92      	ldr	r3, [pc, #584]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a4 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b8c      	ldr	r3, [pc, #560]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b89      	ldr	r3, [pc, #548]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	4a88      	ldr	r2, [pc, #544]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec6:	4b86      	ldr	r3, [pc, #536]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed6:	4b83      	ldr	r3, [pc, #524]	@ (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ee2:	4b80      	ldr	r3, [pc, #512]	@ (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fc fcad 	bl	800184c <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fc fca9 	bl	800184c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b64      	cmp	r3, #100	@ 0x64
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e12a      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_OscConfig+0x31a>
 8004f1c:	4b70      	ldr	r3, [pc, #448]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a6f      	ldr	r2, [pc, #444]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f28:	e02d      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x33c>
 8004f32:	4b6b      	ldr	r3, [pc, #428]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	4a6a      	ldr	r2, [pc, #424]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3e:	4b68      	ldr	r3, [pc, #416]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	4a67      	ldr	r2, [pc, #412]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4a:	e01c      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_OscConfig+0x35e>
 8004f54:	4b62      	ldr	r3, [pc, #392]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a61      	ldr	r2, [pc, #388]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f60:	4b5f      	ldr	r3, [pc, #380]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a5e      	ldr	r2, [pc, #376]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a5b      	ldr	r2, [pc, #364]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	4a58      	ldr	r2, [pc, #352]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fc5d 	bl	800184c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fc fc59 	bl	800184c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0d8      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b4c      	ldr	r3, [pc, #304]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCC_OscConfig+0x386>
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fc fc47 	bl	800184c <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fc fc43 	bl	800184c <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0c2      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	4b41      	ldr	r3, [pc, #260]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fea:	4b3d      	ldr	r3, [pc, #244]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	4a3c      	ldr	r2, [pc, #240]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80ae 	beq.w	800515c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005000:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d06d      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d14b      	bne.n	80050ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b32      	ldr	r3, [pc, #200]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a31      	ldr	r2, [pc, #196]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc fc14 	bl	800184c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fc10 	bl	800184c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e091      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	491b      	ldr	r1, [pc, #108]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	4b19      	ldr	r3, [pc, #100]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a18      	ldr	r2, [pc, #96]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fbe2 	bl	800184c <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fc fbde 	bl	800184c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e05f      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x47c>
 80050aa:	e057      	b.n	800515c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ac:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0b      	ldr	r2, [pc, #44]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc fbc8 	bl	800184c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fc fbc4 	bl	800184c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e045      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4b0>
 80050de:	e03d      	b.n	800515c <HAL_RCC_OscConfig+0x54c>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005168 <HAL_RCC_OscConfig+0x558>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d030      	beq.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d129      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d122      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800511e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005120:	4293      	cmp	r3, r2
 8005122:	d119      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	3b01      	subs	r3, #1
 8005132:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d10f      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d0      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	4965      	ldr	r1, [pc, #404]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b63      	ldr	r3, [pc, #396]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0b8      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051cc:	4b59      	ldr	r3, [pc, #356]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a58      	ldr	r2, [pc, #352]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e4:	4b53      	ldr	r3, [pc, #332]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4a52      	ldr	r2, [pc, #328]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f0:	4b50      	ldr	r3, [pc, #320]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	494d      	ldr	r1, [pc, #308]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d040      	beq.n	8005290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b41      	ldr	r3, [pc, #260]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e073      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b3d      	ldr	r3, [pc, #244]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06b      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b39      	ldr	r3, [pc, #228]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4936      	ldr	r1, [pc, #216]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005260:	f7fc faf4 	bl	800184c <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fc faf0 	bl	800184c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e053      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b2d      	ldr	r3, [pc, #180]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b27      	ldr	r3, [pc, #156]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d210      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 020f 	bic.w	r2, r3, #15
 80052a6:	4922      	ldr	r1, [pc, #136]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e032      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4916      	ldr	r1, [pc, #88]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ea:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490e      	ldr	r1, [pc, #56]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052fe:	f000 f821 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490a      	ldr	r1, [pc, #40]	@ (8005338 <HAL_RCC_ClockConfig+0x1cc>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	4a09      	ldr	r2, [pc, #36]	@ (800533c <HAL_RCC_ClockConfig+0x1d0>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800531a:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1d4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc fa50 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00
 8005334:	40023800 	.word	0x40023800
 8005338:	0800d5f4 	.word	0x0800d5f4
 800533c:	2000000c 	.word	0x2000000c
 8005340:	20000010 	.word	0x20000010

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b094      	sub	sp, #80	@ 0x50
 800534a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005350:	2300      	movs	r3, #0
 8005352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005354:	2300      	movs	r3, #0
 8005356:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535c:	4b79      	ldr	r3, [pc, #484]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d00d      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x40>
 8005368:	2b08      	cmp	r3, #8
 800536a:	f200 80e1 	bhi.w	8005530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x34>
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x3a>
 8005376:	e0db      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b73      	ldr	r3, [pc, #460]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x204>)
 800537a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800537c:	e0db      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800537e:	4b73      	ldr	r3, [pc, #460]	@ (800554c <HAL_RCC_GetSysClockFreq+0x208>)
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005382:	e0d8      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005384:	4b6f      	ldr	r3, [pc, #444]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800538c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800538e:	4b6d      	ldr	r3, [pc, #436]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b6a      	ldr	r3, [pc, #424]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	2200      	movs	r2, #0
 80053a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	f04f 0000 	mov.w	r0, #0
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	0159      	lsls	r1, r3, #5
 80053c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c8:	0150      	lsls	r0, r2, #5
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4621      	mov	r1, r4
 80053d0:	1a51      	subs	r1, r2, r1
 80053d2:	6139      	str	r1, [r7, #16]
 80053d4:	4629      	mov	r1, r5
 80053d6:	eb63 0301 	sbc.w	r3, r3, r1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e8:	4659      	mov	r1, fp
 80053ea:	018b      	lsls	r3, r1, #6
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f2:	4651      	mov	r1, sl
 80053f4:	018a      	lsls	r2, r1, #6
 80053f6:	4651      	mov	r1, sl
 80053f8:	ebb2 0801 	subs.w	r8, r2, r1
 80053fc:	4659      	mov	r1, fp
 80053fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005416:	4690      	mov	r8, r2
 8005418:	4699      	mov	r9, r3
 800541a:	4623      	mov	r3, r4
 800541c:	eb18 0303 	adds.w	r3, r8, r3
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	462b      	mov	r3, r5
 8005424:	eb49 0303 	adc.w	r3, r9, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005436:	4629      	mov	r1, r5
 8005438:	024b      	lsls	r3, r1, #9
 800543a:	4621      	mov	r1, r4
 800543c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005440:	4621      	mov	r1, r4
 8005442:	024a      	lsls	r2, r1, #9
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	2200      	movs	r2, #0
 800544c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800544e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005454:	f7fa ff4c 	bl	80002f0 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4613      	mov	r3, r2
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005460:	e058      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005462:	4b38      	ldr	r3, [pc, #224]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	2200      	movs	r2, #0
 800546a:	4618      	mov	r0, r3
 800546c:	4611      	mov	r1, r2
 800546e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
 8005478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	f04f 0000 	mov.w	r0, #0
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	0159      	lsls	r1, r3, #5
 800548a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548e:	0150      	lsls	r0, r2, #5
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4641      	mov	r1, r8
 8005496:	ebb2 0a01 	subs.w	sl, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b4:	ebb2 040a 	subs.w	r4, r2, sl
 80054b8:	eb63 050b 	sbc.w	r5, r3, fp
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	00eb      	lsls	r3, r5, #3
 80054c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ca:	00e2      	lsls	r2, r4, #3
 80054cc:	4614      	mov	r4, r2
 80054ce:	461d      	mov	r5, r3
 80054d0:	4643      	mov	r3, r8
 80054d2:	18e3      	adds	r3, r4, r3
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	464b      	mov	r3, r9
 80054d8:	eb45 0303 	adc.w	r3, r5, r3
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ea:	4629      	mov	r1, r5
 80054ec:	028b      	lsls	r3, r1, #10
 80054ee:	4621      	mov	r1, r4
 80054f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f4:	4621      	mov	r1, r4
 80054f6:	028a      	lsls	r2, r1, #10
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fe:	2200      	movs	r2, #0
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	61fa      	str	r2, [r7, #28]
 8005504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005508:	f7fa fef2 	bl	80002f0 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x204>)
 8005532:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005538:	4618      	mov	r0, r3
 800553a:	3750      	adds	r7, #80	@ 0x50
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	00f42400 	.word	0x00f42400
 800554c:	007a1200 	.word	0x007a1200

08005550 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a9b      	lsrs	r3, r3, #10
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	@ (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	0800d604 	.word	0x0800d604

08005590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005594:	f7ff ffdc 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0b5b      	lsrs	r3, r3, #13
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4903      	ldr	r1, [pc, #12]	@ (80055b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	0800d604 	.word	0x0800d604

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055e0:	4b69      	ldr	r3, [pc, #420]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a68      	ldr	r2, [pc, #416]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80055ea:	6093      	str	r3, [r2, #8]
 80055ec:	4b66      	ldr	r3, [pc, #408]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f4:	4964      	ldr	r1, [pc, #400]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005602:	2301      	movs	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d017      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005612:	4b5d      	ldr	r3, [pc, #372]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005618:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	4959      	ldr	r1, [pc, #356]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005630:	d101      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800563e:	2301      	movs	r3, #1
 8005640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d017      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800564e:	4b4e      	ldr	r3, [pc, #312]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005654:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	494a      	ldr	r1, [pc, #296]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800566c:	d101      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800567a:	2301      	movs	r3, #1
 800567c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 808b 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b3a      	ldr	r3, [pc, #232]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	4a39      	ldr	r2, [pc, #228]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80056a8:	4b37      	ldr	r3, [pc, #220]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056b4:	4b35      	ldr	r3, [pc, #212]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a34      	ldr	r2, [pc, #208]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fc f8c4 	bl	800184c <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c8:	f7fc f8c0 	bl	800184c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	@ 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e38f      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056da:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e6:	4b28      	ldr	r3, [pc, #160]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d035      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d02e      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005704:	4b20      	ldr	r3, [pc, #128]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800570e:	4b1e      	ldr	r3, [pc, #120]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800571a:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005724:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005726:	4a18      	ldr	r2, [pc, #96]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800572c:	4b16      	ldr	r3, [pc, #88]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d114      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fc f888 	bl	800184c <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573e:	e00a      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fc f884 	bl	800184c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e351      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005756:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ee      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800576a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800576e:	d111      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800577e:	400b      	ands	r3, r1
 8005780:	4901      	ldr	r1, [pc, #4]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
 8005786:	e00b      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005788:	40023800 	.word	0x40023800
 800578c:	40007000 	.word	0x40007000
 8005790:	0ffffcff 	.word	0x0ffffcff
 8005794:	4bac      	ldr	r3, [pc, #688]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4aab      	ldr	r2, [pc, #684]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800579e:	6093      	str	r3, [r2, #8]
 80057a0:	4ba9      	ldr	r3, [pc, #676]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ac:	49a6      	ldr	r1, [pc, #664]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057be:	4ba2      	ldr	r3, [pc, #648]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c4:	4aa0      	ldr	r2, [pc, #640]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	499b      	ldr	r1, [pc, #620]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057ec:	4b96      	ldr	r3, [pc, #600]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057fa:	4993      	ldr	r1, [pc, #588]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800580e:	4b8e      	ldr	r3, [pc, #568]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800581c:	498a      	ldr	r1, [pc, #552]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005830:	4b85      	ldr	r3, [pc, #532]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800583e:	4982      	ldr	r1, [pc, #520]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005852:	4b7d      	ldr	r3, [pc, #500]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005858:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	4979      	ldr	r1, [pc, #484]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005874:	4b74      	ldr	r3, [pc, #464]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587a:	f023 0203 	bic.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	4971      	ldr	r1, [pc, #452]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005896:	4b6c      	ldr	r3, [pc, #432]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589c:	f023 020c 	bic.w	r2, r3, #12
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a4:	4968      	ldr	r1, [pc, #416]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058b8:	4b63      	ldr	r3, [pc, #396]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c6:	4960      	ldr	r1, [pc, #384]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058da:	4b5b      	ldr	r3, [pc, #364]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e8:	4957      	ldr	r1, [pc, #348]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058fc:	4b52      	ldr	r3, [pc, #328]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005902:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	494f      	ldr	r1, [pc, #316]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800591e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005924:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592c:	4946      	ldr	r1, [pc, #280]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005940:	4b41      	ldr	r3, [pc, #260]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005946:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594e:	493e      	ldr	r1, [pc, #248]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005962:	4b39      	ldr	r3, [pc, #228]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005968:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005970:	4935      	ldr	r1, [pc, #212]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005984:	4b30      	ldr	r3, [pc, #192]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005992:	492d      	ldr	r1, [pc, #180]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059a6:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b4:	4924      	ldr	r1, [pc, #144]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c4:	d101      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e6:	4b18      	ldr	r3, [pc, #96]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f4:	4914      	ldr	r1, [pc, #80]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a08:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a18:	490b      	ldr	r1, [pc, #44]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a3c:	4902      	ldr	r1, [pc, #8]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00b      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a58:	4b8a      	ldr	r3, [pc, #552]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a68:	4986      	ldr	r1, [pc, #536]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a7c:	4b81      	ldr	r3, [pc, #516]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a8c:	497d      	ldr	r1, [pc, #500]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d006      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80d6 	beq.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005aa8:	4b76      	ldr	r3, [pc, #472]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a75      	ldr	r2, [pc, #468]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fb feca 	bl	800184c <HAL_GetTick>
 8005ab8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005abc:	f7fb fec6 	bl	800184c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	@ 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e195      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ace:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d021      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11d      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005aee:	4b65      	ldr	r3, [pc, #404]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005afc:	4b61      	ldr	r3, [pc, #388]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b02:	0e1b      	lsrs	r3, r3, #24
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	019a      	lsls	r2, r3, #6
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	071b      	lsls	r3, r3, #28
 8005b22:	4958      	ldr	r1, [pc, #352]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02e      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b54:	d129      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b56:	4b4b      	ldr	r3, [pc, #300]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b64:	4b47      	ldr	r3, [pc, #284]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6a:	0f1b      	lsrs	r3, r3, #28
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	019a      	lsls	r2, r3, #6
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	061b      	lsls	r3, r3, #24
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	071b      	lsls	r3, r3, #28
 8005b8a:	493e      	ldr	r1, [pc, #248]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b92:	4b3c      	ldr	r3, [pc, #240]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b98:	f023 021f 	bic.w	r2, r3, #31
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	4938      	ldr	r1, [pc, #224]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bb6:	4b33      	ldr	r3, [pc, #204]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bca:	0f1b      	lsrs	r3, r3, #28
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	019a      	lsls	r2, r3, #6
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	071b      	lsls	r3, r3, #28
 8005bea:	4926      	ldr	r1, [pc, #152]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d011      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	019a      	lsls	r2, r3, #6
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	061b      	lsls	r3, r3, #24
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	071b      	lsls	r3, r3, #28
 8005c1a:	491a      	ldr	r1, [pc, #104]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c22:	4b18      	ldr	r3, [pc, #96]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a17      	ldr	r2, [pc, #92]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2e:	f7fb fe0d 	bl	800184c <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c36:	f7fb fe09 	bl	800184c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b64      	cmp	r3, #100	@ 0x64
 8005c42:	d901      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e0d8      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c48:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	f040 80ce 	bne.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c68:	f7fb fdf0 	bl	800184c <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c70:	f7fb fdec 	bl	800184c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d904      	bls.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0bb      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c82:	bf00      	nop
 8005c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c88:	4b5e      	ldr	r3, [pc, #376]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c94:	d0ec      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d02e      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d12a      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cbe:	4b51      	ldr	r3, [pc, #324]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	0f1b      	lsrs	r3, r3, #28
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	019a      	lsls	r2, r3, #6
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	071b      	lsls	r3, r3, #28
 8005cf2:	4944      	ldr	r1, [pc, #272]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cfa:	4b42      	ldr	r3, [pc, #264]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	493d      	ldr	r1, [pc, #244]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d022      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d28:	d11d      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d2a:	4b36      	ldr	r3, [pc, #216]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d30:	0e1b      	lsrs	r3, r3, #24
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d38:	4b32      	ldr	r3, [pc, #200]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3e:	0f1b      	lsrs	r3, r3, #28
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	019a      	lsls	r2, r3, #6
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	431a      	orrs	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	071b      	lsls	r3, r3, #28
 8005d5e:	4929      	ldr	r1, [pc, #164]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d028      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d72:	4b24      	ldr	r3, [pc, #144]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d78:	0e1b      	lsrs	r3, r3, #24
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	019a      	lsls	r2, r3, #6
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	061b      	lsls	r3, r3, #24
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	071b      	lsls	r3, r3, #28
 8005da6:	4917      	ldr	r1, [pc, #92]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4911      	ldr	r1, [pc, #68]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd0:	f7fb fd3c 	bl	800184c <HAL_GetTick>
 8005dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dd8:	f7fb fd38 	bl	800184c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	@ 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e007      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df6:	d1ef      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e040      	b.n	8005e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fb fb2a 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	@ 0x24
 8005e34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f82c 	bl	8005ea4 <UART_SetConfig>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e022      	b.n	8005e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa84 	bl	800636c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb0b 	bl	80064b0 <UART_CheckIdleState>
 8005e9a:	4603      	mov	r3, r0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4ba6      	ldr	r3, [pc, #664]	@ (8006168 <UART_SetConfig+0x2c4>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a94      	ldr	r2, [pc, #592]	@ (800616c <UART_SetConfig+0x2c8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d120      	bne.n	8005f62 <UART_SetConfig+0xbe>
 8005f20:	4b93      	ldr	r3, [pc, #588]	@ (8006170 <UART_SetConfig+0x2cc>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d816      	bhi.n	8005f5c <UART_SetConfig+0xb8>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <UART_SetConfig+0x90>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f4b 	.word	0x08005f4b
 8005f40:	08005f57 	.word	0x08005f57
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e150      	b.n	80061ec <UART_SetConfig+0x348>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e14d      	b.n	80061ec <UART_SetConfig+0x348>
 8005f50:	2304      	movs	r3, #4
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e14a      	b.n	80061ec <UART_SetConfig+0x348>
 8005f56:	2308      	movs	r3, #8
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e147      	b.n	80061ec <UART_SetConfig+0x348>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e144      	b.n	80061ec <UART_SetConfig+0x348>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a83      	ldr	r2, [pc, #524]	@ (8006174 <UART_SetConfig+0x2d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d132      	bne.n	8005fd2 <UART_SetConfig+0x12e>
 8005f6c:	4b80      	ldr	r3, [pc, #512]	@ (8006170 <UART_SetConfig+0x2cc>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d828      	bhi.n	8005fcc <UART_SetConfig+0x128>
 8005f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <UART_SetConfig+0xdc>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fbb 	.word	0x08005fbb
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fc7 	.word	0x08005fc7
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e118      	b.n	80061ec <UART_SetConfig+0x348>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e115      	b.n	80061ec <UART_SetConfig+0x348>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e112      	b.n	80061ec <UART_SetConfig+0x348>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e10f      	b.n	80061ec <UART_SetConfig+0x348>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e10c      	b.n	80061ec <UART_SetConfig+0x348>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a68      	ldr	r2, [pc, #416]	@ (8006178 <UART_SetConfig+0x2d4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d120      	bne.n	800601e <UART_SetConfig+0x17a>
 8005fdc:	4b64      	ldr	r3, [pc, #400]	@ (8006170 <UART_SetConfig+0x2cc>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fe6:	2b30      	cmp	r3, #48	@ 0x30
 8005fe8:	d013      	beq.n	8006012 <UART_SetConfig+0x16e>
 8005fea:	2b30      	cmp	r3, #48	@ 0x30
 8005fec:	d814      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d009      	beq.n	8006006 <UART_SetConfig+0x162>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d810      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x15c>
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x168>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x174>
 8006000:	2300      	movs	r3, #0
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e0f2      	b.n	80061ec <UART_SetConfig+0x348>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e0ef      	b.n	80061ec <UART_SetConfig+0x348>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0ec      	b.n	80061ec <UART_SetConfig+0x348>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0e9      	b.n	80061ec <UART_SetConfig+0x348>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0e6      	b.n	80061ec <UART_SetConfig+0x348>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a56      	ldr	r2, [pc, #344]	@ (800617c <UART_SetConfig+0x2d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0x1c6>
 8006028:	4b51      	ldr	r3, [pc, #324]	@ (8006170 <UART_SetConfig+0x2cc>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006032:	2bc0      	cmp	r3, #192	@ 0xc0
 8006034:	d013      	beq.n	800605e <UART_SetConfig+0x1ba>
 8006036:	2bc0      	cmp	r3, #192	@ 0xc0
 8006038:	d814      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x1ae>
 800603e:	2b80      	cmp	r3, #128	@ 0x80
 8006040:	d810      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x1a8>
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d006      	beq.n	8006058 <UART_SetConfig+0x1b4>
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x1c0>
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e0cc      	b.n	80061ec <UART_SetConfig+0x348>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e0c9      	b.n	80061ec <UART_SetConfig+0x348>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0c6      	b.n	80061ec <UART_SetConfig+0x348>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0c3      	b.n	80061ec <UART_SetConfig+0x348>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0c0      	b.n	80061ec <UART_SetConfig+0x348>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a44      	ldr	r2, [pc, #272]	@ (8006180 <UART_SetConfig+0x2dc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0x21c>
 8006074:	4b3e      	ldr	r3, [pc, #248]	@ (8006170 <UART_SetConfig+0x2cc>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006082:	d017      	beq.n	80060b4 <UART_SetConfig+0x210>
 8006084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006088:	d817      	bhi.n	80060ba <UART_SetConfig+0x216>
 800608a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800608e:	d00b      	beq.n	80060a8 <UART_SetConfig+0x204>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006094:	d811      	bhi.n	80060ba <UART_SetConfig+0x216>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <UART_SetConfig+0x1fe>
 800609a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800609e:	d006      	beq.n	80060ae <UART_SetConfig+0x20a>
 80060a0:	e00b      	b.n	80060ba <UART_SetConfig+0x216>
 80060a2:	2300      	movs	r3, #0
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0a1      	b.n	80061ec <UART_SetConfig+0x348>
 80060a8:	2302      	movs	r3, #2
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e09e      	b.n	80061ec <UART_SetConfig+0x348>
 80060ae:	2304      	movs	r3, #4
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e09b      	b.n	80061ec <UART_SetConfig+0x348>
 80060b4:	2308      	movs	r3, #8
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e098      	b.n	80061ec <UART_SetConfig+0x348>
 80060ba:	2310      	movs	r3, #16
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e095      	b.n	80061ec <UART_SetConfig+0x348>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006184 <UART_SetConfig+0x2e0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d125      	bne.n	8006116 <UART_SetConfig+0x272>
 80060ca:	4b29      	ldr	r3, [pc, #164]	@ (8006170 <UART_SetConfig+0x2cc>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060d8:	d017      	beq.n	800610a <UART_SetConfig+0x266>
 80060da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060de:	d817      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e4:	d00b      	beq.n	80060fe <UART_SetConfig+0x25a>
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ea:	d811      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <UART_SetConfig+0x254>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d006      	beq.n	8006104 <UART_SetConfig+0x260>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x26c>
 80060f8:	2301      	movs	r3, #1
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e076      	b.n	80061ec <UART_SetConfig+0x348>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e073      	b.n	80061ec <UART_SetConfig+0x348>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e070      	b.n	80061ec <UART_SetConfig+0x348>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e06d      	b.n	80061ec <UART_SetConfig+0x348>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e06a      	b.n	80061ec <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1b      	ldr	r2, [pc, #108]	@ (8006188 <UART_SetConfig+0x2e4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d138      	bne.n	8006192 <UART_SetConfig+0x2ee>
 8006120:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006126:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800612a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800612e:	d017      	beq.n	8006160 <UART_SetConfig+0x2bc>
 8006130:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006134:	d82a      	bhi.n	800618c <UART_SetConfig+0x2e8>
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800613a:	d00b      	beq.n	8006154 <UART_SetConfig+0x2b0>
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d824      	bhi.n	800618c <UART_SetConfig+0x2e8>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <UART_SetConfig+0x2aa>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614a:	d006      	beq.n	800615a <UART_SetConfig+0x2b6>
 800614c:	e01e      	b.n	800618c <UART_SetConfig+0x2e8>
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e04b      	b.n	80061ec <UART_SetConfig+0x348>
 8006154:	2302      	movs	r3, #2
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e048      	b.n	80061ec <UART_SetConfig+0x348>
 800615a:	2304      	movs	r3, #4
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e045      	b.n	80061ec <UART_SetConfig+0x348>
 8006160:	2308      	movs	r3, #8
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e042      	b.n	80061ec <UART_SetConfig+0x348>
 8006166:	bf00      	nop
 8006168:	efff69f3 	.word	0xefff69f3
 800616c:	40011000 	.word	0x40011000
 8006170:	40023800 	.word	0x40023800
 8006174:	40004400 	.word	0x40004400
 8006178:	40004800 	.word	0x40004800
 800617c:	40004c00 	.word	0x40004c00
 8006180:	40005000 	.word	0x40005000
 8006184:	40011400 	.word	0x40011400
 8006188:	40007800 	.word	0x40007800
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e02c      	b.n	80061ec <UART_SetConfig+0x348>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a72      	ldr	r2, [pc, #456]	@ (8006360 <UART_SetConfig+0x4bc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d125      	bne.n	80061e8 <UART_SetConfig+0x344>
 800619c:	4b71      	ldr	r3, [pc, #452]	@ (8006364 <UART_SetConfig+0x4c0>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80061a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80061aa:	d017      	beq.n	80061dc <UART_SetConfig+0x338>
 80061ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80061b0:	d817      	bhi.n	80061e2 <UART_SetConfig+0x33e>
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b6:	d00b      	beq.n	80061d0 <UART_SetConfig+0x32c>
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061bc:	d811      	bhi.n	80061e2 <UART_SetConfig+0x33e>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <UART_SetConfig+0x326>
 80061c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061c6:	d006      	beq.n	80061d6 <UART_SetConfig+0x332>
 80061c8:	e00b      	b.n	80061e2 <UART_SetConfig+0x33e>
 80061ca:	2300      	movs	r3, #0
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e00d      	b.n	80061ec <UART_SetConfig+0x348>
 80061d0:	2302      	movs	r3, #2
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e00a      	b.n	80061ec <UART_SetConfig+0x348>
 80061d6:	2304      	movs	r3, #4
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e007      	b.n	80061ec <UART_SetConfig+0x348>
 80061dc:	2308      	movs	r3, #8
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e004      	b.n	80061ec <UART_SetConfig+0x348>
 80061e2:	2310      	movs	r3, #16
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e001      	b.n	80061ec <UART_SetConfig+0x348>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f4:	d15b      	bne.n	80062ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d828      	bhi.n	800624e <UART_SetConfig+0x3aa>
 80061fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <UART_SetConfig+0x360>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	0800624f 	.word	0x0800624f
 8006214:	0800623f 	.word	0x0800623f
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
 8006224:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7ff f99e 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 800622c:	61b8      	str	r0, [r7, #24]
        break;
 800622e:	e013      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7ff f9ae 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8006234:	61b8      	str	r0, [r7, #24]
        break;
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b4b      	ldr	r3, [pc, #300]	@ (8006368 <UART_SetConfig+0x4c4>)
 800623a:	61bb      	str	r3, [r7, #24]
        break;
 800623c:	e00c      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7ff f881 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8006242:	61b8      	str	r0, [r7, #24]
        break;
 8006244:	e008      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800624a:	61bb      	str	r3, [r7, #24]
        break;
 800624c:	e004      	b.n	8006258 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	77bb      	strb	r3, [r7, #30]
        break;
 8006256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d074      	beq.n	8006348 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	005a      	lsls	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d916      	bls.n	80062a8 <UART_SetConfig+0x404>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006280:	d212      	bcs.n	80062a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f023 030f 	bic.w	r3, r3, #15
 800628a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	b29a      	uxth	r2, r3
 8006298:	89fb      	ldrh	r3, [r7, #14]
 800629a:	4313      	orrs	r3, r2
 800629c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	89fa      	ldrh	r2, [r7, #14]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	e04f      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	77bb      	strb	r3, [r7, #30]
 80062ac:	e04c      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d828      	bhi.n	8006306 <UART_SetConfig+0x462>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0x418>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	08006307 	.word	0x08006307
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006307 	.word	0x08006307
 80062dc:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7ff f942 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e013      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7ff f952 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 80062ec:	61b8      	str	r0, [r7, #24]
        break;
 80062ee:	e00f      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <UART_SetConfig+0x4c4>)
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e00c      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7ff f825 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80062fa:	61b8      	str	r0, [r7, #24]
        break;
 80062fc:	e008      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e004      	b.n	8006310 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77bb      	strb	r3, [r7, #30]
        break;
 800630e:	bf00      	nop
    }

    if (pclk != 0U)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d018      	beq.n	8006348 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	085a      	lsrs	r2, r3, #1
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	441a      	add	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d909      	bls.n	8006344 <UART_SetConfig+0x4a0>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006336:	d205      	bcs.n	8006344 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	e001      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006354:	7fbb      	ldrb	r3, [r7, #30]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40007c00 	.word	0x40007c00
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400

0800636c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01a      	beq.n	8006482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800646a:	d10a      	bne.n	8006482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c0:	f7fb f9c4 	bl	800184c <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d10e      	bne.n	80064f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f831 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e027      	b.n	8006542 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d10e      	bne.n	800651e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f81b 	bl	800654a <UART_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e011      	b.n	8006542 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b09c      	sub	sp, #112	@ 0x70
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	e0a7      	b.n	80066ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	f000 80a3 	beq.w	80066ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fb f971 	bl	800184c <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <UART_WaitOnFlagUntilTimeout+0x32>
 8006576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006578:	2b00      	cmp	r3, #0
 800657a:	d13f      	bne.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800658a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800658c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006590:	667b      	str	r3, [r7, #100]	@ 0x64
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800659a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800659c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80065a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e6      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065ce:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e5      	bne.n	80065ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e068      	b.n	80066ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d050      	beq.n	80066ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006618:	d148      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006622:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006638:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
 8006644:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e6      	bne.n	8006624 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	613b      	str	r3, [r7, #16]
   return(result);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006676:	623a      	str	r2, [r7, #32]
 8006678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	69f9      	ldr	r1, [r7, #28]
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	61bb      	str	r3, [r7, #24]
   return(result);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e5      	bne.n	8006656 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e010      	b.n	80066ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4013      	ands	r3, r2
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f43f af48 	beq.w	800655c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3770      	adds	r7, #112	@ 0x70
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d8:	b084      	sub	sp, #16
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	f107 001c 	add.w	r0, r7, #28
 80066e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d120      	bne.n	8006732 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <USB_CoreInit+0xac>)
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d105      	bne.n	8006726 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fbee 	bl	8007f08 <USB_CoreReset>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
 8006730:	e010      	b.n	8006754 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fbe2 	bl	8007f08 <USB_CoreReset>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	2b01      	cmp	r3, #1
 8006758:	d10b      	bne.n	8006772 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f043 0206 	orr.w	r2, r3, #6
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f043 0220 	orr.w	r2, r3, #32
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800677e:	b004      	add	sp, #16
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	ffbdffbf 	.word	0xffbdffbf

08006788 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d165      	bne.n	8006868 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4a41      	ldr	r2, [pc, #260]	@ (80068a4 <USB_SetTurnaroundTime+0x11c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d906      	bls.n	80067b2 <USB_SetTurnaroundTime+0x2a>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4a40      	ldr	r2, [pc, #256]	@ (80068a8 <USB_SetTurnaroundTime+0x120>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d202      	bcs.n	80067b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067ac:	230f      	movs	r3, #15
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e062      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4a3c      	ldr	r2, [pc, #240]	@ (80068a8 <USB_SetTurnaroundTime+0x120>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d306      	bcc.n	80067c8 <USB_SetTurnaroundTime+0x40>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4a3b      	ldr	r2, [pc, #236]	@ (80068ac <USB_SetTurnaroundTime+0x124>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d202      	bcs.n	80067c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067c2:	230e      	movs	r3, #14
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e057      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a38      	ldr	r2, [pc, #224]	@ (80068ac <USB_SetTurnaroundTime+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d306      	bcc.n	80067de <USB_SetTurnaroundTime+0x56>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a37      	ldr	r2, [pc, #220]	@ (80068b0 <USB_SetTurnaroundTime+0x128>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d202      	bcs.n	80067de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067d8:	230d      	movs	r3, #13
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e04c      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4a33      	ldr	r2, [pc, #204]	@ (80068b0 <USB_SetTurnaroundTime+0x128>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d306      	bcc.n	80067f4 <USB_SetTurnaroundTime+0x6c>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4a32      	ldr	r2, [pc, #200]	@ (80068b4 <USB_SetTurnaroundTime+0x12c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d802      	bhi.n	80067f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80067ee:	230c      	movs	r3, #12
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e041      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4a2f      	ldr	r2, [pc, #188]	@ (80068b4 <USB_SetTurnaroundTime+0x12c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d906      	bls.n	800680a <USB_SetTurnaroundTime+0x82>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a2e      	ldr	r2, [pc, #184]	@ (80068b8 <USB_SetTurnaroundTime+0x130>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d802      	bhi.n	800680a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006804:	230b      	movs	r3, #11
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e036      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4a2a      	ldr	r2, [pc, #168]	@ (80068b8 <USB_SetTurnaroundTime+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d906      	bls.n	8006820 <USB_SetTurnaroundTime+0x98>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4a29      	ldr	r2, [pc, #164]	@ (80068bc <USB_SetTurnaroundTime+0x134>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d802      	bhi.n	8006820 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800681a:	230a      	movs	r3, #10
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	e02b      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a26      	ldr	r2, [pc, #152]	@ (80068bc <USB_SetTurnaroundTime+0x134>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d906      	bls.n	8006836 <USB_SetTurnaroundTime+0xae>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a25      	ldr	r2, [pc, #148]	@ (80068c0 <USB_SetTurnaroundTime+0x138>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d202      	bcs.n	8006836 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006830:	2309      	movs	r3, #9
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e020      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4a21      	ldr	r2, [pc, #132]	@ (80068c0 <USB_SetTurnaroundTime+0x138>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d306      	bcc.n	800684c <USB_SetTurnaroundTime+0xc4>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a20      	ldr	r2, [pc, #128]	@ (80068c4 <USB_SetTurnaroundTime+0x13c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d802      	bhi.n	800684c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006846:	2308      	movs	r3, #8
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	e015      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4a1d      	ldr	r2, [pc, #116]	@ (80068c4 <USB_SetTurnaroundTime+0x13c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d906      	bls.n	8006862 <USB_SetTurnaroundTime+0xda>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4a1c      	ldr	r2, [pc, #112]	@ (80068c8 <USB_SetTurnaroundTime+0x140>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d202      	bcs.n	8006862 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800685c:	2307      	movs	r3, #7
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e00a      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006862:	2306      	movs	r3, #6
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e007      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800686e:	2309      	movs	r3, #9
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e001      	b.n	8006878 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006874:	2309      	movs	r3, #9
 8006876:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	00d8acbf 	.word	0x00d8acbf
 80068a8:	00e4e1c0 	.word	0x00e4e1c0
 80068ac:	00f42400 	.word	0x00f42400
 80068b0:	01067380 	.word	0x01067380
 80068b4:	011a499f 	.word	0x011a499f
 80068b8:	01312cff 	.word	0x01312cff
 80068bc:	014ca43f 	.word	0x014ca43f
 80068c0:	016e3600 	.word	0x016e3600
 80068c4:	01a6ab1f 	.word	0x01a6ab1f
 80068c8:	01e84800 	.word	0x01e84800

080068cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f043 0201 	orr.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d115      	bne.n	800695e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800693e:	2001      	movs	r0, #1
 8006940:	f7fa ff90 	bl	8001864 <HAL_Delay>
      ms++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fa4b 	bl	8007de6 <USB_GetMode>
 8006950:	4603      	mov	r3, r0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d01e      	beq.n	8006994 <USB_SetCurrentMode+0x84>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b31      	cmp	r3, #49	@ 0x31
 800695a:	d9f0      	bls.n	800693e <USB_SetCurrentMode+0x2e>
 800695c:	e01a      	b.n	8006994 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d115      	bne.n	8006990 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006970:	2001      	movs	r0, #1
 8006972:	f7fa ff77 	bl	8001864 <HAL_Delay>
      ms++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fa32 	bl	8007de6 <USB_GetMode>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <USB_SetCurrentMode+0x84>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b31      	cmp	r3, #49	@ 0x31
 800698c:	d9f0      	bls.n	8006970 <USB_SetCurrentMode+0x60>
 800698e:	e001      	b.n	8006994 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e005      	b.n	80069a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b32      	cmp	r3, #50	@ 0x32
 8006998:	d101      	bne.n	800699e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a8:	b084      	sub	sp, #16
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80069b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e009      	b.n	80069dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3340      	adds	r3, #64	@ 0x40
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b0e      	cmp	r3, #14
 80069e0:	d9f2      	bls.n	80069c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11c      	bne.n	8006a22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069f6:	f043 0302 	orr.w	r3, r3, #2
 80069fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e005      	b.n	8006a2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a40:	4619      	mov	r1, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a48:	461a      	mov	r2, r3
 8006a4a:	680b      	ldr	r3, [r1, #0]
 8006a4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d10c      	bne.n	8006a6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f965 	bl	8006d2c <USB_SetDevSpeed>
 8006a62:	e008      	b.n	8006a76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a64:	2101      	movs	r1, #1
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f960 	bl	8006d2c <USB_SetDevSpeed>
 8006a6c:	e003      	b.n	8006a76 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a6e:	2103      	movs	r1, #3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f95b 	bl	8006d2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a76:	2110      	movs	r1, #16
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8f3 	bl	8006c64 <USB_FlushTxFifo>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f91f 	bl	8006ccc <USB_FlushRxFifo>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e043      	b.n	8006b4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ad8:	d118      	bne.n	8006b0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aec:	461a      	mov	r2, r3
 8006aee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e013      	b.n	8006b1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b02:	461a      	mov	r2, r3
 8006b04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e008      	b.n	8006b1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3301      	adds	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d3b7      	bcc.n	8006ac2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	e043      	b.n	8006be0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b6e:	d118      	bne.n	8006ba2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b82:	461a      	mov	r2, r3
 8006b84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e013      	b.n	8006bb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e008      	b.n	8006bb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d3b7      	bcc.n	8006b58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f043 0210 	orr.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	4b0e      	ldr	r3, [pc, #56]	@ (8006c5c <USB_DevInit+0x2b4>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f043 0208 	orr.w	r2, r3, #8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <USB_DevInit+0x2b8>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c58:	b004      	add	sp, #16
 8006c5a:	4770      	bx	lr
 8006c5c:	803c3800 	.word	0x803c3800
 8006c60:	40000004 	.word	0x40000004

08006c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a13      	ldr	r2, [pc, #76]	@ (8006cc8 <USB_FlushTxFifo+0x64>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e01b      	b.n	8006cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	daf2      	bge.n	8006c72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	019b      	lsls	r3, r3, #6
 8006c94:	f043 0220 	orr.w	r2, r3, #32
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a08      	ldr	r2, [pc, #32]	@ (8006cc8 <USB_FlushTxFifo+0x64>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e006      	b.n	8006cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d0f0      	beq.n	8006c9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	00030d40 	.word	0x00030d40

08006ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a11      	ldr	r2, [pc, #68]	@ (8006d28 <USB_FlushRxFifo+0x5c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e018      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	daf2      	bge.n	8006cd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <USB_FlushRxFifo+0x5c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d0f0      	beq.n	8006cfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	00030d40 	.word	0x00030d40

08006d2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0306 	and.w	r3, r3, #6
 8006d76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e00a      	b.n	8006d9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d002      	beq.n	8006d90 <USB_GetDevSpeed+0x32>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b06      	cmp	r3, #6
 8006d8e:	d102      	bne.n	8006d96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d90:	2302      	movs	r3, #2
 8006d92:	75fb      	strb	r3, [r7, #23]
 8006d94:	e001      	b.n	8006d9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d96:	230f      	movs	r3, #15
 8006d98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d139      	bne.n	8006e38 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	68f9      	ldr	r1, [r7, #12]
 8006dde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d153      	bne.n	8006ea4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	059b      	lsls	r3, r3, #22
 8006e1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	0159      	lsls	r1, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	440b      	add	r3, r1
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4b20      	ldr	r3, [pc, #128]	@ (8006eb4 <USB_ActivateEndpoint+0x10c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]
 8006e36:	e035      	b.n	8006ea4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	2101      	movs	r1, #1
 8006e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d119      	bne.n	8006ea4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	791b      	ldrb	r3, [r3, #4]
 8006e8a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	0159      	lsls	r1, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	440b      	add	r3, r1
 8006e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <USB_ActivateEndpoint+0x10c>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	10008000 	.word	0x10008000

08006eb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d161      	bne.n	8006f98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eea:	d11f      	bne.n	8006f2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	43db      	mvns	r3, r3
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	43db      	mvns	r3, r3
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f70:	4013      	ands	r3, r2
 8006f72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	440b      	add	r3, r1
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4b35      	ldr	r3, [pc, #212]	@ (8007068 <USB_DeactivateEndpoint+0x1b0>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]
 8006f96:	e060      	b.n	800705a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fae:	d11f      	bne.n	8006ff0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	2101      	movs	r1, #1
 8007002:	fa01 f303 	lsl.w	r3, r1, r3
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	43db      	mvns	r3, r3
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007010:	4013      	ands	r3, r2
 8007012:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	2101      	movs	r1, #1
 8007026:	fa01 f303 	lsl.w	r3, r1, r3
 800702a:	041b      	lsls	r3, r3, #16
 800702c:	43db      	mvns	r3, r3
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007034:	4013      	ands	r3, r2
 8007036:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	0159      	lsls	r1, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	440b      	add	r3, r1
 800704e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007052:	4619      	mov	r1, r3
 8007054:	4b05      	ldr	r3, [pc, #20]	@ (800706c <USB_DeactivateEndpoint+0x1b4>)
 8007056:	4013      	ands	r3, r2
 8007058:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	ec337800 	.word	0xec337800
 800706c:	eff37800 	.word	0xeff37800

08007070 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	@ 0x28
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	f040 8163 	bne.w	8007358 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d132      	bne.n	8007100 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	0159      	lsls	r1, r3, #5
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b4:	4619      	mov	r1, r3
 80070b6:	4ba5      	ldr	r3, [pc, #660]	@ (800734c <USB_EPStartXfer+0x2dc>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	0159      	lsls	r1, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f6:	4619      	mov	r1, r3
 80070f8:	4b95      	ldr	r3, [pc, #596]	@ (8007350 <USB_EPStartXfer+0x2e0>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	610b      	str	r3, [r1, #16]
 80070fe:	e074      	b.n	80071ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	0159      	lsls	r1, r3, #5
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	440b      	add	r3, r1
 8007116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800711a:	4619      	mov	r1, r3
 800711c:	4b8c      	ldr	r3, [pc, #560]	@ (8007350 <USB_EPStartXfer+0x2e0>)
 800711e:	4013      	ands	r3, r2
 8007120:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	0159      	lsls	r1, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	440b      	add	r3, r1
 8007138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800713c:	4619      	mov	r1, r3
 800713e:	4b83      	ldr	r3, [pc, #524]	@ (800734c <USB_EPStartXfer+0x2dc>)
 8007140:	4013      	ands	r3, r2
 8007142:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007150:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6999      	ldr	r1, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	440b      	add	r3, r1
 800715c:	1e59      	subs	r1, r3, #1
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	fbb1 f3f3 	udiv	r3, r1, r3
 8007166:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007168:	4b7a      	ldr	r3, [pc, #488]	@ (8007354 <USB_EPStartXfer+0x2e4>)
 800716a:	400b      	ands	r3, r1
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	0148      	lsls	r0, r1, #5
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	4401      	add	r1, r0
 8007174:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007178:	4313      	orrs	r3, r2
 800717a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007192:	69b9      	ldr	r1, [r7, #24]
 8007194:	0148      	lsls	r0, r1, #5
 8007196:	69f9      	ldr	r1, [r7, #28]
 8007198:	4401      	add	r1, r0
 800719a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800719e:	4313      	orrs	r3, r2
 80071a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	791b      	ldrb	r3, [r3, #4]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d11f      	bne.n	80071ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80071c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d14b      	bne.n	8007288 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007204:	461a      	mov	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d128      	bne.n	8007266 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d110      	bne.n	8007246 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	e00f      	b.n	8007266 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007264:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007280:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e137      	b.n	80074f8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	791b      	ldrb	r3, [r3, #4]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d015      	beq.n	80072dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 811f 	beq.w	80074f8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	2101      	movs	r1, #1
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	69f9      	ldr	r1, [r7, #28]
 80072d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072d6:	4313      	orrs	r3, r2
 80072d8:	634b      	str	r3, [r1, #52]	@ 0x34
 80072da:	e10d      	b.n	80074f8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d110      	bne.n	800730e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007306:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	e00f      	b.n	800732e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800732c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6919      	ldr	r1, [r3, #16]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	b298      	uxth	r0, r3
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4603      	mov	r3, r0
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 faea 	bl	800791c <USB_WritePacket>
 8007348:	e0d6      	b.n	80074f8 <USB_EPStartXfer+0x488>
 800734a:	bf00      	nop
 800734c:	e007ffff 	.word	0xe007ffff
 8007350:	fff80000 	.word	0xfff80000
 8007354:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	0159      	lsls	r1, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	440b      	add	r3, r1
 800736e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007372:	4619      	mov	r1, r3
 8007374:	4b63      	ldr	r3, [pc, #396]	@ (8007504 <USB_EPStartXfer+0x494>)
 8007376:	4013      	ands	r3, r2
 8007378:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	0159      	lsls	r1, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	440b      	add	r3, r1
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	4619      	mov	r1, r3
 8007396:	4b5c      	ldr	r3, [pc, #368]	@ (8007508 <USB_EPStartXfer+0x498>)
 8007398:	4013      	ands	r3, r2
 800739a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d123      	bne.n	80073ec <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ba:	69b9      	ldr	r1, [r7, #24]
 80073bc:	0148      	lsls	r0, r1, #5
 80073be:	69f9      	ldr	r1, [r7, #28]
 80073c0:	4401      	add	r1, r0
 80073c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073c6:	4313      	orrs	r3, r2
 80073c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073e8:	6113      	str	r3, [r2, #16]
 80073ea:	e037      	b.n	800745c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	1e5a      	subs	r2, r3, #1
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	8afa      	ldrh	r2, [r7, #22]
 8007408:	fb03 f202 	mul.w	r2, r3, r2
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	8afb      	ldrh	r3, [r7, #22]
 8007420:	04d9      	lsls	r1, r3, #19
 8007422:	4b3a      	ldr	r3, [pc, #232]	@ (800750c <USB_EPStartXfer+0x49c>)
 8007424:	400b      	ands	r3, r1
 8007426:	69b9      	ldr	r1, [r7, #24]
 8007428:	0148      	lsls	r0, r1, #5
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	4401      	add	r1, r0
 800742e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007432:	4313      	orrs	r3, r2
 8007434:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744c:	69b9      	ldr	r1, [r7, #24]
 800744e:	0148      	lsls	r0, r1, #5
 8007450:	69f9      	ldr	r1, [r7, #28]
 8007452:	4401      	add	r1, r0
 8007454:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007458:	4313      	orrs	r3, r2
 800745a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10d      	bne.n	800747e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6919      	ldr	r1, [r3, #16]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747a:	460a      	mov	r2, r1
 800747c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d128      	bne.n	80074d8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d110      	bne.n	80074b8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e00f      	b.n	80074d8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	fff80000 	.word	0xfff80000
 8007508:	e007ffff 	.word	0xe007ffff
 800750c:	1ff80000 	.word	0x1ff80000

08007510 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b01      	cmp	r3, #1
 800752e:	f040 80ce 	bne.w	80076ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d132      	bne.n	80075a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	0159      	lsls	r1, r3, #5
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	440b      	add	r3, r1
 8007550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007554:	4619      	mov	r1, r3
 8007556:	4b9a      	ldr	r3, [pc, #616]	@ (80077c0 <USB_EP0StartXfer+0x2b0>)
 8007558:	4013      	ands	r3, r2
 800755a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007576:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800757a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	0159      	lsls	r1, r3, #5
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	440b      	add	r3, r1
 8007592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007596:	4619      	mov	r1, r3
 8007598:	4b8a      	ldr	r3, [pc, #552]	@ (80077c4 <USB_EP0StartXfer+0x2b4>)
 800759a:	4013      	ands	r3, r2
 800759c:	610b      	str	r3, [r1, #16]
 800759e:	e04e      	b.n	800763e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	0159      	lsls	r1, r3, #5
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	440b      	add	r3, r1
 80075b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ba:	4619      	mov	r1, r3
 80075bc:	4b81      	ldr	r3, [pc, #516]	@ (80077c4 <USB_EP0StartXfer+0x2b4>)
 80075be:	4013      	ands	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	0159      	lsls	r1, r3, #5
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	440b      	add	r3, r1
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	4619      	mov	r1, r3
 80075de:	4b78      	ldr	r3, [pc, #480]	@ (80077c0 <USB_EP0StartXfer+0x2b0>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d903      	bls.n	80075f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007612:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762e:	6939      	ldr	r1, [r7, #16]
 8007630:	0148      	lsls	r0, r1, #5
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	4401      	add	r1, r0
 8007636:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800763a:	4313      	orrs	r3, r2
 800763c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d11e      	bne.n	8007682 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007658:	461a      	mov	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e097      	b.n	80077b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800769c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8083 	beq.w	80077b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	2101      	movs	r1, #1
 80076be:	fa01 f303 	lsl.w	r3, r1, r3
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c8:	4313      	orrs	r3, r2
 80076ca:	634b      	str	r3, [r1, #52]	@ 0x34
 80076cc:	e071      	b.n	80077b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	0159      	lsls	r1, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	440b      	add	r3, r1
 80076e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e8:	4619      	mov	r1, r3
 80076ea:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <USB_EP0StartXfer+0x2b4>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	0159      	lsls	r1, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	440b      	add	r3, r1
 8007706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770a:	4619      	mov	r1, r3
 800770c:	4b2c      	ldr	r3, [pc, #176]	@ (80077c0 <USB_EP0StartXfer+0x2b0>)
 800770e:	4013      	ands	r3, r2
 8007710:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007760:	6939      	ldr	r1, [r7, #16]
 8007762:	0148      	lsls	r0, r1, #5
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	4401      	add	r1, r0
 8007768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800776c:	4313      	orrs	r3, r2
 800776e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10d      	bne.n	8007792 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6919      	ldr	r1, [r3, #16]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778e:	460a      	mov	r2, r1
 8007790:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	e007ffff 	.word	0xe007ffff
 80077c4:	fff80000 	.word	0xfff80000

080077c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d14a      	bne.n	800787c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077fe:	f040 8086 	bne.w	800790e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007820:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007824:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007848:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007856:	4293      	cmp	r3, r2
 8007858:	d902      	bls.n	8007860 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e056      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007878:	d0e7      	beq.n	800784a <USB_EPStopXfer+0x82>
 800787a:	e048      	b.n	800790e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007894:	d13b      	bne.n	800790e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d902      	bls.n	80078f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
          break;
 80078f2:	e00c      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800790c:	d0e7      	beq.n	80078de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	@ 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	4613      	mov	r3, r2
 8007930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800793a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d123      	bne.n	800798a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007942:	88bb      	ldrh	r3, [r7, #4]
 8007944:	3303      	adds	r3, #3
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e018      	b.n	8007982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	031a      	lsls	r2, r3, #12
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800795c:	461a      	mov	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3301      	adds	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3301      	adds	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3301      	adds	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	3301      	adds	r3, #1
 800797a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	429a      	cmp	r2, r3
 8007988:	d3e2      	bcc.n	8007950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3724      	adds	r7, #36	@ 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007998:	b480      	push	{r7}
 800799a:	b08b      	sub	sp, #44	@ 0x2c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	089b      	lsrs	r3, r3, #2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e014      	b.n	80079ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	3301      	adds	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	3301      	adds	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	3301      	adds	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	3301      	adds	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e6      	bcc.n	80079c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a06:	461a      	mov	r2, r3
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	701a      	strb	r2, [r3, #0]
      i++;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	3301      	adds	r3, #1
 8007a26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007a2e:	8bfb      	ldrh	r3, [r7, #30]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a34:	8bfb      	ldrh	r3, [r7, #30]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ea      	bne.n	8007a10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	372c      	adds	r7, #44	@ 0x2c
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d12c      	bne.n	8007abe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db12      	blt.n	8007a9c <USB_EPSetStall+0x54>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e02b      	b.n	8007b16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	db12      	blt.n	8007af6 <USB_EPSetStall+0xae>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00f      	beq.n	8007af6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007af4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d128      	bne.n	8007b92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d003      	beq.n	8007b70 <USB_EPClearStall+0x4c>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d138      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e027      	b.n	8007be2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	791b      	ldrb	r3, [r3, #4]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d003      	beq.n	8007bc2 <USB_EPClearStall+0x9e>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d10f      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6a:	f023 0302 	bic.w	r3, r3, #2
 8007c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c98:	f023 0303 	bic.w	r3, r3, #3
 8007c9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	0c1b      	lsrs	r3, r3, #16
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	b29b      	uxth	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0301 	and.w	r3, r3, #1
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <USB_ActivateSetup+0x44>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	fffff800 	.word	0xfffff800

08007e4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	460b      	mov	r3, r1
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	333c      	adds	r3, #60	@ 0x3c
 8007e62:	3304      	adds	r3, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4a26      	ldr	r2, [pc, #152]	@ (8007f04 <USB_EP0_OutStart+0xb8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d90a      	bls.n	8007e86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e80:	d101      	bne.n	8007e86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e037      	b.n	8007ef6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb4:	f043 0318 	orr.w	r3, r3, #24
 8007eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ecc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ece:	7afb      	ldrb	r3, [r7, #11]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10f      	bne.n	8007ef4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	4f54300a 	.word	0x4f54300a

08007f08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4a13      	ldr	r2, [pc, #76]	@ (8007f6c <USB_CoreReset+0x64>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d901      	bls.n	8007f26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e01b      	b.n	8007f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	daf2      	bge.n	8007f14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f043 0201 	orr.w	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4a09      	ldr	r2, [pc, #36]	@ (8007f6c <USB_CoreReset+0x64>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d0f0      	beq.n	8007f3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	00030d40 	.word	0x00030d40

08007f70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007f80:	f002 fd6c 	bl	800aa5c <malloc>
 8007f84:	4603      	mov	r3, r0
 8007f86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32b0      	adds	r2, #176	@ 0xb0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e0d4      	b.n	800814c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007fa2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f003 fc57 	bl	800b85c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32b0      	adds	r2, #176	@ 0xb0
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	32b0      	adds	r2, #176	@ 0xb0
 8007fc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d138      	bne.n	800804c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fda:	4b5e      	ldr	r3, [pc, #376]	@ (8008154 <USBD_CDC_Init+0x1e4>)
 8007fdc:	7819      	ldrb	r1, [r3, #0]
 8007fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f002 fb96 	bl	800a716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fea:	4b5a      	ldr	r3, [pc, #360]	@ (8008154 <USBD_CDC_Init+0x1e4>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 020f 	and.w	r2, r3, #15
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3324      	adds	r3, #36	@ 0x24
 8008000:	2201      	movs	r2, #1
 8008002:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008004:	4b54      	ldr	r3, [pc, #336]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 8008006:	7819      	ldrb	r1, [r3, #0]
 8008008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800800c:	2202      	movs	r2, #2
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f002 fb81 	bl	800a716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008014:	4b50      	ldr	r3, [pc, #320]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 020f 	and.w	r2, r3, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800802c:	2201      	movs	r2, #1
 800802e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008030:	4b4a      	ldr	r3, [pc, #296]	@ (800815c <USBD_CDC_Init+0x1ec>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3326      	adds	r3, #38	@ 0x26
 8008046:	2210      	movs	r2, #16
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e035      	b.n	80080b8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800804c:	4b41      	ldr	r3, [pc, #260]	@ (8008154 <USBD_CDC_Init+0x1e4>)
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	2340      	movs	r3, #64	@ 0x40
 8008052:	2202      	movs	r2, #2
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f002 fb5e 	bl	800a716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800805a:	4b3e      	ldr	r3, [pc, #248]	@ (8008154 <USBD_CDC_Init+0x1e4>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 020f 	and.w	r2, r3, #15
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	3324      	adds	r3, #36	@ 0x24
 8008070:	2201      	movs	r2, #1
 8008072:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008074:	4b38      	ldr	r3, [pc, #224]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 8008076:	7819      	ldrb	r1, [r3, #0]
 8008078:	2340      	movs	r3, #64	@ 0x40
 800807a:	2202      	movs	r2, #2
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f002 fb4a 	bl	800a716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008082:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	f003 020f 	and.w	r2, r3, #15
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800809a:	2201      	movs	r2, #1
 800809c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800809e:	4b2f      	ldr	r3, [pc, #188]	@ (800815c <USBD_CDC_Init+0x1ec>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 020f 	and.w	r2, r3, #15
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3326      	adds	r3, #38	@ 0x26
 80080b4:	2210      	movs	r2, #16
 80080b6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080b8:	4b28      	ldr	r3, [pc, #160]	@ (800815c <USBD_CDC_Init+0x1ec>)
 80080ba:	7819      	ldrb	r1, [r3, #0]
 80080bc:	2308      	movs	r3, #8
 80080be:	2203      	movs	r2, #3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f002 fb28 	bl	800a716 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80080c6:	4b25      	ldr	r3, [pc, #148]	@ (800815c <USBD_CDC_Init+0x1ec>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f003 020f 	and.w	r2, r3, #15
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	3324      	adds	r3, #36	@ 0x24
 80080dc:	2201      	movs	r2, #1
 80080de:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	33b0      	adds	r3, #176	@ 0xb0
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008116:	2302      	movs	r3, #2
 8008118:	e018      	b.n	800814c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7c1b      	ldrb	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 8008124:	7819      	ldrb	r1, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800812c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 fbdf 	bl	800a8f4 <USBD_LL_PrepareReceive>
 8008136:	e008      	b.n	800814a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008138:	4b07      	ldr	r3, [pc, #28]	@ (8008158 <USBD_CDC_Init+0x1e8>)
 800813a:	7819      	ldrb	r1, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008142:	2340      	movs	r3, #64	@ 0x40
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f002 fbd5 	bl	800a8f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	2000009f 	.word	0x2000009f
 8008158:	200000a0 	.word	0x200000a0
 800815c:	200000a1 	.word	0x200000a1

08008160 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800816c:	4b3a      	ldr	r3, [pc, #232]	@ (8008258 <USBD_CDC_DeInit+0xf8>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 faf5 	bl	800a762 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008178:	4b37      	ldr	r3, [pc, #220]	@ (8008258 <USBD_CDC_DeInit+0xf8>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 020f 	and.w	r2, r3, #15
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	3324      	adds	r3, #36	@ 0x24
 800818e:	2200      	movs	r2, #0
 8008190:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008192:	4b32      	ldr	r3, [pc, #200]	@ (800825c <USBD_CDC_DeInit+0xfc>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f002 fae2 	bl	800a762 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800819e:	4b2f      	ldr	r3, [pc, #188]	@ (800825c <USBD_CDC_DeInit+0xfc>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 020f 	and.w	r2, r3, #15
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081b6:	2200      	movs	r2, #0
 80081b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081ba:	4b29      	ldr	r3, [pc, #164]	@ (8008260 <USBD_CDC_DeInit+0x100>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f002 face 	bl	800a762 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80081c6:	4b26      	ldr	r3, [pc, #152]	@ (8008260 <USBD_CDC_DeInit+0x100>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	f003 020f 	and.w	r2, r3, #15
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	3324      	adds	r3, #36	@ 0x24
 80081dc:	2200      	movs	r2, #0
 80081de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081e0:	4b1f      	ldr	r3, [pc, #124]	@ (8008260 <USBD_CDC_DeInit+0x100>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3326      	adds	r3, #38	@ 0x26
 80081f6:	2200      	movs	r2, #0
 80081f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32b0      	adds	r2, #176	@ 0xb0
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01f      	beq.n	800824c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	33b0      	adds	r3, #176	@ 0xb0
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32b0      	adds	r2, #176	@ 0xb0
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	4618      	mov	r0, r3
 8008230:	f002 fc1c 	bl	800aa6c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32b0      	adds	r2, #176	@ 0xb0
 800823e:	2100      	movs	r1, #0
 8008240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	2000009f 	.word	0x2000009f
 800825c:	200000a0 	.word	0x200000a0
 8008260:	200000a1 	.word	0x200000a1

08008264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32b0      	adds	r2, #176	@ 0xb0
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	e0bf      	b.n	8008414 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800829c:	2b00      	cmp	r3, #0
 800829e:	d050      	beq.n	8008342 <USBD_CDC_Setup+0xde>
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	f040 80af 	bne.w	8008404 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	88db      	ldrh	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d03a      	beq.n	8008324 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b25b      	sxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	da1b      	bge.n	80082f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	33b0      	adds	r3, #176	@ 0xb0
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	88d2      	ldrh	r2, [r2, #6]
 80082d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b07      	cmp	r3, #7
 80082dc:	bf28      	it	cs
 80082de:	2307      	movcs	r3, #7
 80082e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	89fa      	ldrh	r2, [r7, #14]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fdab 	bl	8009e44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082ee:	e090      	b.n	8008412 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	785a      	ldrb	r2, [r3, #1]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	88db      	ldrh	r3, [r3, #6]
 80082fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8008300:	d803      	bhi.n	800830a <USBD_CDC_Setup+0xa6>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	e000      	b.n	800830c <USBD_CDC_Setup+0xa8>
 800830a:	2240      	movs	r2, #64	@ 0x40
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008312:	6939      	ldr	r1, [r7, #16]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800831a:	461a      	mov	r2, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fdbd 	bl	8009e9c <USBD_CtlPrepareRx>
      break;
 8008322:	e076      	b.n	8008412 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	33b0      	adds	r3, #176	@ 0xb0
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	7850      	ldrb	r0, [r2, #1]
 800833a:	2200      	movs	r2, #0
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	4798      	blx	r3
      break;
 8008340:	e067      	b.n	8008412 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	2b0b      	cmp	r3, #11
 8008348:	d851      	bhi.n	80083ee <USBD_CDC_Setup+0x18a>
 800834a:	a201      	add	r2, pc, #4	@ (adr r2, 8008350 <USBD_CDC_Setup+0xec>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	08008381 	.word	0x08008381
 8008354:	080083fd 	.word	0x080083fd
 8008358:	080083ef 	.word	0x080083ef
 800835c:	080083ef 	.word	0x080083ef
 8008360:	080083ef 	.word	0x080083ef
 8008364:	080083ef 	.word	0x080083ef
 8008368:	080083ef 	.word	0x080083ef
 800836c:	080083ef 	.word	0x080083ef
 8008370:	080083ef 	.word	0x080083ef
 8008374:	080083ef 	.word	0x080083ef
 8008378:	080083ab 	.word	0x080083ab
 800837c:	080083d5 	.word	0x080083d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b03      	cmp	r3, #3
 800838a:	d107      	bne.n	800839c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800838c:	f107 030a 	add.w	r3, r7, #10
 8008390:	2202      	movs	r2, #2
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fd55 	bl	8009e44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800839a:	e032      	b.n	8008402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fcdf 	bl	8009d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	75fb      	strb	r3, [r7, #23]
          break;
 80083a8:	e02b      	b.n	8008402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d107      	bne.n	80083c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083b6:	f107 030d 	add.w	r3, r7, #13
 80083ba:	2201      	movs	r2, #1
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fd40 	bl	8009e44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c4:	e01d      	b.n	8008402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fcca 	bl	8009d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80083ce:	2303      	movs	r3, #3
 80083d0:	75fb      	strb	r3, [r7, #23]
          break;
 80083d2:	e016      	b.n	8008402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d00f      	beq.n	8008400 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fcbd 	bl	8009d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80083e8:	2303      	movs	r3, #3
 80083ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083ec:	e008      	b.n	8008400 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 fcb6 	bl	8009d62 <USBD_CtlError>
          ret = USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	75fb      	strb	r3, [r7, #23]
          break;
 80083fa:	e002      	b.n	8008402 <USBD_CDC_Setup+0x19e>
          break;
 80083fc:	bf00      	nop
 80083fe:	e008      	b.n	8008412 <USBD_CDC_Setup+0x1ae>
          break;
 8008400:	bf00      	nop
      }
      break;
 8008402:	e006      	b.n	8008412 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fcab 	bl	8009d62 <USBD_CtlError>
      ret = USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	75fb      	strb	r3, [r7, #23]
      break;
 8008410:	bf00      	nop
  }

  return (uint8_t)ret;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800842e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	32b0      	adds	r2, #176	@ 0xb0
 800843a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	e065      	b.n	8008512 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	32b0      	adds	r2, #176	@ 0xb0
 8008450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	3318      	adds	r3, #24
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02f      	beq.n	80084d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	f003 020f 	and.w	r2, r3, #15
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	3318      	adds	r3, #24
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	f003 010f 	and.w	r1, r3, #15
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	460b      	mov	r3, r1
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	440b      	add	r3, r1
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4403      	add	r3, r0
 8008498:	3348      	adds	r3, #72	@ 0x48
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	fbb2 f1f3 	udiv	r1, r2, r3
 80084a0:	fb01 f303 	mul.w	r3, r1, r3
 80084a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d112      	bne.n	80084d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	3318      	adds	r3, #24
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084c2:	78f9      	ldrb	r1, [r7, #3]
 80084c4:	2300      	movs	r3, #0
 80084c6:	2200      	movs	r2, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f002 f9f2 	bl	800a8b2 <USBD_LL_Transmit>
 80084ce:	e01f      	b.n	8008510 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	33b0      	adds	r3, #176	@ 0xb0
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d010      	beq.n	8008510 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	33b0      	adds	r3, #176	@ 0xb0
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	32b0      	adds	r2, #176	@ 0xb0
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	32b0      	adds	r2, #176	@ 0xb0
 8008540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	e01a      	b.n	8008582 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f002 f9f0 	bl	800a936 <USBD_LL_GetRxDataSize>
 8008556:	4602      	mov	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	33b0      	adds	r3, #176	@ 0xb0
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800857c:	4611      	mov	r1, r2
 800857e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	32b0      	adds	r2, #176	@ 0xb0
 800859c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e024      	b.n	80085f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	33b0      	adds	r3, #176	@ 0xb0
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d019      	beq.n	80085f4 <USBD_CDC_EP0_RxReady+0x6a>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80085c6:	2bff      	cmp	r3, #255	@ 0xff
 80085c8:	d014      	beq.n	80085f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	33b0      	adds	r3, #176	@ 0xb0
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80085e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	@ 0xff
 80085f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008608:	2182      	movs	r1, #130	@ 0x82
 800860a:	4818      	ldr	r0, [pc, #96]	@ (800866c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800860c:	f000 fd49 	bl	80090a2 <USBD_GetEpDesc>
 8008610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008612:	2101      	movs	r1, #1
 8008614:	4815      	ldr	r0, [pc, #84]	@ (800866c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008616:	f000 fd44 	bl	80090a2 <USBD_GetEpDesc>
 800861a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800861c:	2181      	movs	r1, #129	@ 0x81
 800861e:	4813      	ldr	r0, [pc, #76]	@ (800866c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008620:	f000 fd3f 	bl	80090a2 <USBD_GetEpDesc>
 8008624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2210      	movs	r2, #16
 8008630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d006      	beq.n	8008646 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2200      	movs	r2, #0
 800863c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008640:	711a      	strb	r2, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d006      	beq.n	800865a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008654:	711a      	strb	r2, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2243      	movs	r2, #67	@ 0x43
 800865e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008660:	4b02      	ldr	r3, [pc, #8]	@ (800866c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	2000005c 	.word	0x2000005c

08008670 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008678:	2182      	movs	r1, #130	@ 0x82
 800867a:	4818      	ldr	r0, [pc, #96]	@ (80086dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800867c:	f000 fd11 	bl	80090a2 <USBD_GetEpDesc>
 8008680:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008682:	2101      	movs	r1, #1
 8008684:	4815      	ldr	r0, [pc, #84]	@ (80086dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008686:	f000 fd0c 	bl	80090a2 <USBD_GetEpDesc>
 800868a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800868c:	2181      	movs	r1, #129	@ 0x81
 800868e:	4813      	ldr	r0, [pc, #76]	@ (80086dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008690:	f000 fd07 	bl	80090a2 <USBD_GetEpDesc>
 8008694:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2210      	movs	r2, #16
 80086a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d006      	beq.n	80086b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2200      	movs	r2, #0
 80086ac:	711a      	strb	r2, [r3, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f042 0202 	orr.w	r2, r2, #2
 80086b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d006      	beq.n	80086ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	711a      	strb	r2, [r3, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f042 0202 	orr.w	r2, r2, #2
 80086c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2243      	movs	r2, #67	@ 0x43
 80086ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	2000005c 	.word	0x2000005c

080086e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086e8:	2182      	movs	r1, #130	@ 0x82
 80086ea:	4818      	ldr	r0, [pc, #96]	@ (800874c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086ec:	f000 fcd9 	bl	80090a2 <USBD_GetEpDesc>
 80086f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086f2:	2101      	movs	r1, #1
 80086f4:	4815      	ldr	r0, [pc, #84]	@ (800874c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086f6:	f000 fcd4 	bl	80090a2 <USBD_GetEpDesc>
 80086fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086fc:	2181      	movs	r1, #129	@ 0x81
 80086fe:	4813      	ldr	r0, [pc, #76]	@ (800874c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008700:	f000 fccf 	bl	80090a2 <USBD_GetEpDesc>
 8008704:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2210      	movs	r2, #16
 8008710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2200      	movs	r2, #0
 800871c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008720:	711a      	strb	r2, [r3, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d006      	beq.n	800873a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008734:	711a      	strb	r2, [r3, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2243      	movs	r2, #67	@ 0x43
 800873e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	2000005c 	.word	0x2000005c

08008750 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	220a      	movs	r2, #10
 800875c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000018 	.word	0x20000018

08008770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e009      	b.n	8008798 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33b0      	adds	r3, #176	@ 0xb0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	32b0      	adds	r2, #176	@ 0xb0
 80087ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e008      	b.n	80087dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	32b0      	adds	r2, #176	@ 0xb0
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e004      	b.n	8008816 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	32b0      	adds	r2, #176	@ 0xb0
 8008836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800883c:	2301      	movs	r3, #1
 800883e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	e025      	b.n	8008896 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008850:	2b00      	cmp	r3, #0
 8008852:	d11f      	bne.n	8008894 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2201      	movs	r2, #1
 8008858:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800885c:	4b10      	ldr	r3, [pc, #64]	@ (80088a0 <USBD_CDC_TransmitPacket+0x7c>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4403      	add	r3, r0
 8008876:	3318      	adds	r3, #24
 8008878:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800887a:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <USBD_CDC_TransmitPacket+0x7c>)
 800887c:	7819      	ldrb	r1, [r3, #0]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f002 f811 	bl	800a8b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	2000009f 	.word	0x2000009f

080088a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	32b0      	adds	r2, #176	@ 0xb0
 80088b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	32b0      	adds	r2, #176	@ 0xb0
 80088c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e018      	b.n	8008904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7c1b      	ldrb	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088da:	4b0c      	ldr	r3, [pc, #48]	@ (800890c <USBD_CDC_ReceivePacket+0x68>)
 80088dc:	7819      	ldrb	r1, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f002 f803 	bl	800a8f4 <USBD_LL_PrepareReceive>
 80088ee:	e008      	b.n	8008902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <USBD_CDC_ReceivePacket+0x68>)
 80088f2:	7819      	ldrb	r1, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088fa:	2340      	movs	r3, #64	@ 0x40
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fff9 	bl	800a8f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	200000a0 	.word	0x200000a0

08008910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	e01f      	b.n	8008968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	79fa      	ldrb	r2, [r7, #7]
 800895a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f001 fe73 	bl	800a648 <USBD_LL_Init>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e025      	b.n	80089d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	@ 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00f      	beq.n	80089c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	32ae      	adds	r2, #174	@ 0xae
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	f107 020e 	add.w	r2, r7, #14
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	4602      	mov	r2, r0
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fe7b 	bl	800a6e0 <USBD_LL_Start>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d009      	beq.n	8008a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	4798      	blx	r3
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 f930 	bl	8009cee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008aaa:	f003 031f 	and.w	r3, r3, #31
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d01a      	beq.n	8008ae8 <USBD_LL_SetupStage+0x72>
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d822      	bhi.n	8008afc <USBD_LL_SetupStage+0x86>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <USBD_LL_SetupStage+0x4a>
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d00a      	beq.n	8008ad4 <USBD_LL_SetupStage+0x5e>
 8008abe:	e01d      	b.n	8008afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb5d 	bl	8009188 <USBD_StdDevReq>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad2:	e020      	b.n	8008b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fbc5 	bl	800926c <USBD_StdItfReq>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae6:	e016      	b.n	8008b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc27 	bl	8009344 <USBD_StdEPReq>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]
      break;
 8008afa:	e00c      	b.n	8008b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fe48 	bl	800a7a0 <USBD_LL_StallEP>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	bf00      	nop
  }

  return ret;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d16e      	bne.n	8008c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	f040 8098 	bne.w	8008c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d913      	bls.n	8008b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	1ad2      	subs	r2, r2, r3
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	bf28      	it	cs
 8008b72:	4613      	movcs	r3, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f001 f9ac 	bl	8009ed6 <USBD_CtlContinueRx>
 8008b7e:	e07d      	b.n	8008c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b86:	f003 031f 	and.w	r3, r3, #31
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d014      	beq.n	8008bb8 <USBD_LL_DataOutStage+0x98>
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d81d      	bhi.n	8008bce <USBD_LL_DataOutStage+0xae>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <USBD_LL_DataOutStage+0x7c>
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d003      	beq.n	8008ba2 <USBD_LL_DataOutStage+0x82>
 8008b9a:	e018      	b.n	8008bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8008ba0:	e018      	b.n	8008bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	4619      	mov	r1, r3
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fa5e 	bl	800906e <USBD_CoreFindIF>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8008bb6:	e00d      	b.n	8008bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fa60 	bl	8009088 <USBD_CoreFindEP>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75bb      	strb	r3, [r7, #22]
            break;
 8008bcc:	e002      	b.n	8008bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8008bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bd4:	7dbb      	ldrb	r3, [r7, #22]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d119      	bne.n	8008c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d113      	bne.n	8008c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008be6:	7dba      	ldrb	r2, [r7, #22]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	32ae      	adds	r2, #174	@ 0xae
 8008bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bf6:	7dba      	ldrb	r2, [r7, #22]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bfe:	7dba      	ldrb	r2, [r7, #22]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	32ae      	adds	r2, #174	@ 0xae
 8008c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 f972 	bl	8009ef8 <USBD_CtlSendStatus>
 8008c14:	e032      	b.n	8008c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	4619      	mov	r1, r3
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fa31 	bl	8009088 <USBD_CoreFindEP>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
 8008c2c:	2bff      	cmp	r3, #255	@ 0xff
 8008c2e:	d025      	beq.n	8008c7c <USBD_LL_DataOutStage+0x15c>
 8008c30:	7dbb      	ldrb	r3, [r7, #22]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d122      	bne.n	8008c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d117      	bne.n	8008c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c42:	7dba      	ldrb	r2, [r7, #22]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	32ae      	adds	r2, #174	@ 0xae
 8008c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00f      	beq.n	8008c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c52:	7dba      	ldrb	r2, [r7, #22]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c5a:	7dba      	ldrb	r2, [r7, #22]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	32ae      	adds	r2, #174	@ 0xae
 8008c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	7afa      	ldrb	r2, [r7, #11]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	4798      	blx	r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	e000      	b.n	8008c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d16f      	bne.n	8008d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3314      	adds	r3, #20
 8008c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d15a      	bne.n	8008d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d914      	bls.n	8008ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 f8d4 	bl	8009e7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 fe0b 	bl	800a8f4 <USBD_LL_PrepareReceive>
 8008cde:	e03f      	b.n	8008d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d11c      	bne.n	8008d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d316      	bcc.n	8008d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d20f      	bcs.n	8008d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f001 f8b5 	bl	8009e7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f001 fde8 	bl	800a8f4 <USBD_LL_PrepareReceive>
 8008d24:	e01c      	b.n	8008d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d10f      	bne.n	8008d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d52:	2180      	movs	r1, #128	@ 0x80
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 fd23 	bl	800a7a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f001 f8df 	bl	8009f1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d03a      	beq.n	8008de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff fe42 	bl	80089f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d78:	e032      	b.n	8008de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
 8008d7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f97f 	bl	8009088 <USBD_CoreFindEP>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2bff      	cmp	r3, #255	@ 0xff
 8008d92:	d025      	beq.n	8008de0 <USBD_LL_DataInStage+0x15a>
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d122      	bne.n	8008de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d11c      	bne.n	8008de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008da6:	7dfa      	ldrb	r2, [r7, #23]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	32ae      	adds	r2, #174	@ 0xae
 8008dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d014      	beq.n	8008de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008db6:	7dfa      	ldrb	r2, [r7, #23]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008dbe:	7dfa      	ldrb	r2, [r7, #23]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	32ae      	adds	r2, #174	@ 0xae
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	7afa      	ldrb	r2, [r7, #11]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008dd6:	7dbb      	ldrb	r3, [r7, #22]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ddc:	7dbb      	ldrb	r3, [r7, #22]
 8008dde:	e000      	b.n	8008de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d014      	beq.n	8008e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6852      	ldr	r2, [r2, #4]
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	4611      	mov	r1, r2
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e50:	2340      	movs	r3, #64	@ 0x40
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 fc5d 	bl	800a716 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2240      	movs	r2, #64	@ 0x40
 8008e68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2180      	movs	r1, #128	@ 0x80
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 fc4f 	bl	800a716 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2240      	movs	r2, #64	@ 0x40
 8008e82:	621a      	str	r2, [r3, #32]

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d106      	bne.n	8008efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d110      	bne.n	8008f40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	32ae      	adds	r2, #174	@ 0xae
 8008f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e01c      	b.n	8008fa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d115      	bne.n	8008fa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	32ae      	adds	r2, #174	@ 0xae
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32ae      	adds	r2, #174	@ 0xae
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32ae      	adds	r2, #174	@ 0xae
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e01c      	b.n	800900a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d115      	bne.n	8009008 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32ae      	adds	r2, #174	@ 0xae
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	@ 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00e      	beq.n	8009064 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6852      	ldr	r2, [r2, #4]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	4611      	mov	r1, r2
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800907a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009094:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d91f      	bls.n	8009108 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090ce:	e013      	b.n	80090f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090d0:	f107 030a 	add.w	r3, r7, #10
 80090d4:	4619      	mov	r1, r3
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f000 f81b 	bl	8009112 <USBD_GetNextDesc>
 80090dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d108      	bne.n	80090f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	789b      	ldrb	r3, [r3, #2]
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d008      	beq.n	8009106 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	885b      	ldrh	r3, [r3, #2]
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	429a      	cmp	r2, r3
 8009102:	d8e5      	bhi.n	80090d0 <USBD_GetEpDesc+0x2e>
 8009104:	e000      	b.n	8009108 <USBD_GetEpDesc+0x66>
          break;
 8009106:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009108:	693b      	ldr	r3, [r7, #16]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	7812      	ldrb	r2, [r2, #0]
 8009128:	4413      	add	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800914a:	b480      	push	{r7}
 800914c:	b087      	sub	sp, #28
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	3301      	adds	r3, #1
 8009160:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009168:	8a3b      	ldrh	r3, [r7, #16]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	b21a      	sxth	r2, r3
 800916e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009172:	4313      	orrs	r3, r2
 8009174:	b21b      	sxth	r3, r3
 8009176:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009178:	89fb      	ldrh	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800919e:	2b40      	cmp	r3, #64	@ 0x40
 80091a0:	d005      	beq.n	80091ae <USBD_StdDevReq+0x26>
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	d857      	bhi.n	8009256 <USBD_StdDevReq+0xce>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00f      	beq.n	80091ca <USBD_StdDevReq+0x42>
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d153      	bne.n	8009256 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	32ae      	adds	r2, #174	@ 0xae
 80091b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]
      break;
 80091c8:	e04a      	b.n	8009260 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d83b      	bhi.n	800924a <USBD_StdDevReq+0xc2>
 80091d2:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <USBD_StdDevReq+0x50>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	0800922d 	.word	0x0800922d
 80091dc:	08009241 	.word	0x08009241
 80091e0:	0800924b 	.word	0x0800924b
 80091e4:	08009237 	.word	0x08009237
 80091e8:	0800924b 	.word	0x0800924b
 80091ec:	0800920b 	.word	0x0800920b
 80091f0:	08009201 	.word	0x08009201
 80091f4:	0800924b 	.word	0x0800924b
 80091f8:	08009223 	.word	0x08009223
 80091fc:	08009215 	.word	0x08009215
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa3c 	bl	8009680 <USBD_GetDescriptor>
          break;
 8009208:	e024      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fbcb 	bl	80099a8 <USBD_SetAddress>
          break;
 8009212:	e01f      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fc0a 	bl	8009a30 <USBD_SetConfig>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]
          break;
 8009220:	e018      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fcad 	bl	8009b84 <USBD_GetConfig>
          break;
 800922a:	e013      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fcde 	bl	8009bf0 <USBD_GetStatus>
          break;
 8009234:	e00e      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fd0d 	bl	8009c58 <USBD_SetFeature>
          break;
 800923e:	e009      	b.n	8009254 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fd31 	bl	8009caa <USBD_ClrFeature>
          break;
 8009248:	e004      	b.n	8009254 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fd88 	bl	8009d62 <USBD_CtlError>
          break;
 8009252:	bf00      	nop
      }
      break;
 8009254:	e004      	b.n	8009260 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fd82 	bl	8009d62 <USBD_CtlError>
      break;
 800925e:	bf00      	nop
  }

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop

0800926c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009282:	2b40      	cmp	r3, #64	@ 0x40
 8009284:	d005      	beq.n	8009292 <USBD_StdItfReq+0x26>
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d852      	bhi.n	8009330 <USBD_StdItfReq+0xc4>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <USBD_StdItfReq+0x26>
 800928e:	2b20      	cmp	r3, #32
 8009290:	d14e      	bne.n	8009330 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	2b02      	cmp	r3, #2
 800929e:	d840      	bhi.n	8009322 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	889b      	ldrh	r3, [r3, #4]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d836      	bhi.n	8009318 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	889b      	ldrh	r3, [r3, #4]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff fedb 	bl	800906e <USBD_CoreFindIF>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2bff      	cmp	r3, #255	@ 0xff
 80092c0:	d01d      	beq.n	80092fe <USBD_StdItfReq+0x92>
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d11a      	bne.n	80092fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092c8:	7bba      	ldrb	r2, [r7, #14]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	32ae      	adds	r2, #174	@ 0xae
 80092ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00f      	beq.n	80092f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092d8:	7bba      	ldrb	r2, [r7, #14]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092e0:	7bba      	ldrb	r2, [r7, #14]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32ae      	adds	r2, #174	@ 0xae
 80092e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092f6:	e004      	b.n	8009302 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092fc:	e001      	b.n	8009302 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	88db      	ldrh	r3, [r3, #6]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d110      	bne.n	800932c <USBD_StdItfReq+0xc0>
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10d      	bne.n	800932c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fdf1 	bl	8009ef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009316:	e009      	b.n	800932c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fd21 	bl	8009d62 <USBD_CtlError>
          break;
 8009320:	e004      	b.n	800932c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd1c 	bl	8009d62 <USBD_CtlError>
          break;
 800932a:	e000      	b.n	800932e <USBD_StdItfReq+0xc2>
          break;
 800932c:	bf00      	nop
      }
      break;
 800932e:	e004      	b.n	800933a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fd15 	bl	8009d62 <USBD_CtlError>
      break;
 8009338:	bf00      	nop
  }

  return ret;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	889b      	ldrh	r3, [r3, #4]
 8009356:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009360:	2b40      	cmp	r3, #64	@ 0x40
 8009362:	d007      	beq.n	8009374 <USBD_StdEPReq+0x30>
 8009364:	2b40      	cmp	r3, #64	@ 0x40
 8009366:	f200 817f 	bhi.w	8009668 <USBD_StdEPReq+0x324>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d02a      	beq.n	80093c4 <USBD_StdEPReq+0x80>
 800936e:	2b20      	cmp	r3, #32
 8009370:	f040 817a 	bne.w	8009668 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fe85 	bl	8009088 <USBD_CoreFindEP>
 800937e:	4603      	mov	r3, r0
 8009380:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009382:	7b7b      	ldrb	r3, [r7, #13]
 8009384:	2bff      	cmp	r3, #255	@ 0xff
 8009386:	f000 8174 	beq.w	8009672 <USBD_StdEPReq+0x32e>
 800938a:	7b7b      	ldrb	r3, [r7, #13]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8170 	bne.w	8009672 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009392:	7b7a      	ldrb	r2, [r7, #13]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800939a:	7b7a      	ldrb	r2, [r7, #13]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	32ae      	adds	r2, #174	@ 0xae
 80093a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 8163 	beq.w	8009672 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093ac:	7b7a      	ldrb	r2, [r7, #13]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	32ae      	adds	r2, #174	@ 0xae
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093c2:	e156      	b.n	8009672 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d008      	beq.n	80093de <USBD_StdEPReq+0x9a>
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	f300 8145 	bgt.w	800965c <USBD_StdEPReq+0x318>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 809b 	beq.w	800950e <USBD_StdEPReq+0x1ca>
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d03c      	beq.n	8009456 <USBD_StdEPReq+0x112>
 80093dc:	e13e      	b.n	800965c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d002      	beq.n	80093f0 <USBD_StdEPReq+0xac>
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d016      	beq.n	800941c <USBD_StdEPReq+0xd8>
 80093ee:	e02c      	b.n	800944a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00d      	beq.n	8009412 <USBD_StdEPReq+0xce>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b80      	cmp	r3, #128	@ 0x80
 80093fa:	d00a      	beq.n	8009412 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 f9cd 	bl	800a7a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009406:	2180      	movs	r1, #128	@ 0x80
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 f9c9 	bl	800a7a0 <USBD_LL_StallEP>
 800940e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009410:	e020      	b.n	8009454 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fca4 	bl	8009d62 <USBD_CtlError>
              break;
 800941a:	e01b      	b.n	8009454 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	885b      	ldrh	r3, [r3, #2]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10e      	bne.n	8009442 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <USBD_StdEPReq+0xfe>
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	2b80      	cmp	r3, #128	@ 0x80
 800942e:	d008      	beq.n	8009442 <USBD_StdEPReq+0xfe>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	88db      	ldrh	r3, [r3, #6]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f001 f9af 	bl	800a7a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fd58 	bl	8009ef8 <USBD_CtlSendStatus>

              break;
 8009448:	e004      	b.n	8009454 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc88 	bl	8009d62 <USBD_CtlError>
              break;
 8009452:	bf00      	nop
          }
          break;
 8009454:	e107      	b.n	8009666 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d002      	beq.n	8009468 <USBD_StdEPReq+0x124>
 8009462:	2b03      	cmp	r3, #3
 8009464:	d016      	beq.n	8009494 <USBD_StdEPReq+0x150>
 8009466:	e04b      	b.n	8009500 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00d      	beq.n	800948a <USBD_StdEPReq+0x146>
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b80      	cmp	r3, #128	@ 0x80
 8009472:	d00a      	beq.n	800948a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f991 	bl	800a7a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800947e:	2180      	movs	r1, #128	@ 0x80
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 f98d 	bl	800a7a0 <USBD_LL_StallEP>
 8009486:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009488:	e040      	b.n	800950c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fc68 	bl	8009d62 <USBD_CtlError>
              break;
 8009492:	e03b      	b.n	800950c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	885b      	ldrh	r3, [r3, #2]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d136      	bne.n	800950a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 f997 	bl	800a7de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fd21 	bl	8009ef8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fde4 	bl	8009088 <USBD_CoreFindEP>
 80094c0:	4603      	mov	r3, r0
 80094c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c4:	7b7b      	ldrb	r3, [r7, #13]
 80094c6:	2bff      	cmp	r3, #255	@ 0xff
 80094c8:	d01f      	beq.n	800950a <USBD_StdEPReq+0x1c6>
 80094ca:	7b7b      	ldrb	r3, [r7, #13]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11c      	bne.n	800950a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094d0:	7b7a      	ldrb	r2, [r7, #13]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094d8:	7b7a      	ldrb	r2, [r7, #13]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	32ae      	adds	r2, #174	@ 0xae
 80094de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d010      	beq.n	800950a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094e8:	7b7a      	ldrb	r2, [r7, #13]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	32ae      	adds	r2, #174	@ 0xae
 80094ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094fe:	e004      	b.n	800950a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fc2d 	bl	8009d62 <USBD_CtlError>
              break;
 8009508:	e000      	b.n	800950c <USBD_StdEPReq+0x1c8>
              break;
 800950a:	bf00      	nop
          }
          break;
 800950c:	e0ab      	b.n	8009666 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b02      	cmp	r3, #2
 8009518:	d002      	beq.n	8009520 <USBD_StdEPReq+0x1dc>
 800951a:	2b03      	cmp	r3, #3
 800951c:	d032      	beq.n	8009584 <USBD_StdEPReq+0x240>
 800951e:	e097      	b.n	8009650 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <USBD_StdEPReq+0x1f2>
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b80      	cmp	r3, #128	@ 0x80
 800952a:	d004      	beq.n	8009536 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fc17 	bl	8009d62 <USBD_CtlError>
                break;
 8009534:	e091      	b.n	800965a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953a:	2b00      	cmp	r3, #0
 800953c:	da0b      	bge.n	8009556 <USBD_StdEPReq+0x212>
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	3310      	adds	r3, #16
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	3304      	adds	r3, #4
 8009554:	e00b      	b.n	800956e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	4413      	add	r3, r2
 800956c:	3304      	adds	r3, #4
 800956e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2202      	movs	r2, #2
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fc61 	bl	8009e44 <USBD_CtlSendData>
              break;
 8009582:	e06a      	b.n	800965a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	da11      	bge.n	80095b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	f003 020f 	and.w	r2, r3, #15
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	3324      	adds	r3, #36	@ 0x24
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d117      	bne.n	80095d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fbda 	bl	8009d62 <USBD_CtlError>
                  break;
 80095ae:	e054      	b.n	800965a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	f003 020f 	and.w	r2, r3, #15
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fbc7 	bl	8009d62 <USBD_CtlError>
                  break;
 80095d4:	e041      	b.n	800965a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da0b      	bge.n	80095f6 <USBD_StdEPReq+0x2b2>
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	3310      	adds	r3, #16
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	3304      	adds	r3, #4
 80095f4:	e00b      	b.n	800960e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	3304      	adds	r3, #4
 800960e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <USBD_StdEPReq+0x2d8>
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b80      	cmp	r3, #128	@ 0x80
 800961a:	d103      	bne.n	8009624 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e00e      	b.n	8009642 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 f8f7 	bl	800a81c <USBD_LL_IsStallEP>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d003      	beq.n	800963c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2201      	movs	r2, #1
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	e002      	b.n	8009642 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2202      	movs	r2, #2
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fbfb 	bl	8009e44 <USBD_CtlSendData>
              break;
 800964e:	e004      	b.n	800965a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fb85 	bl	8009d62 <USBD_CtlError>
              break;
 8009658:	bf00      	nop
          }
          break;
 800965a:	e004      	b.n	8009666 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fb7f 	bl	8009d62 <USBD_CtlError>
          break;
 8009664:	bf00      	nop
      }
      break;
 8009666:	e005      	b.n	8009674 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb79 	bl	8009d62 <USBD_CtlError>
      break;
 8009670:	e000      	b.n	8009674 <USBD_StdEPReq+0x330>
      break;
 8009672:	bf00      	nop
  }

  return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	885b      	ldrh	r3, [r3, #2]
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	2b0e      	cmp	r3, #14
 80096a2:	f200 8152 	bhi.w	800994a <USBD_GetDescriptor+0x2ca>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <USBD_GetDescriptor+0x2c>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	0800971d 	.word	0x0800971d
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009775 	.word	0x08009775
 80096b8:	0800994b 	.word	0x0800994b
 80096bc:	0800994b 	.word	0x0800994b
 80096c0:	080098eb 	.word	0x080098eb
 80096c4:	08009917 	.word	0x08009917
 80096c8:	0800994b 	.word	0x0800994b
 80096cc:	0800994b 	.word	0x0800994b
 80096d0:	0800994b 	.word	0x0800994b
 80096d4:	0800994b 	.word	0x0800994b
 80096d8:	0800994b 	.word	0x0800994b
 80096dc:	0800994b 	.word	0x0800994b
 80096e0:	0800994b 	.word	0x0800994b
 80096e4:	080096e9 	.word	0x080096e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800970a:	e126      	b.n	800995a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb27 	bl	8009d62 <USBD_CtlError>
        err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
      break;
 800971a:	e11e      	b.n	800995a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	7c12      	ldrb	r2, [r2, #16]
 8009728:	f107 0108 	add.w	r1, r7, #8
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	60f8      	str	r0, [r7, #12]
      break;
 8009732:	e112      	b.n	800995a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7c1b      	ldrb	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10d      	bne.n	8009758 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009744:	f107 0208 	add.w	r2, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	2202      	movs	r2, #2
 8009754:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009756:	e100      	b.n	800995a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009760:	f107 0208 	add.w	r2, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	2202      	movs	r2, #2
 8009770:	701a      	strb	r2, [r3, #0]
      break;
 8009772:	e0f2      	b.n	800995a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	885b      	ldrh	r3, [r3, #2]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b05      	cmp	r3, #5
 800977c:	f200 80ac 	bhi.w	80098d8 <USBD_GetDescriptor+0x258>
 8009780:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <USBD_GetDescriptor+0x108>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097a1 	.word	0x080097a1
 800978c:	080097d5 	.word	0x080097d5
 8009790:	08009809 	.word	0x08009809
 8009794:	0800983d 	.word	0x0800983d
 8009798:	08009871 	.word	0x08009871
 800979c:	080098a5 	.word	0x080098a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c2:	e091      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 facb 	bl	8009d62 <USBD_CtlError>
            err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
          break;
 80097d2:	e089      	b.n	80098e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7c12      	ldrb	r2, [r2, #16]
 80097ec:	f107 0108 	add.w	r1, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f6:	e077      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fab1 	bl	8009d62 <USBD_CtlError>
            err++;
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	3301      	adds	r3, #1
 8009804:	72fb      	strb	r3, [r7, #11]
          break;
 8009806:	e06f      	b.n	80098e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982a:	e05d      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa97 	bl	8009d62 <USBD_CtlError>
            err++;
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	3301      	adds	r3, #1
 8009838:	72fb      	strb	r3, [r7, #11]
          break;
 800983a:	e055      	b.n	80098e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	7c12      	ldrb	r2, [r2, #16]
 8009854:	f107 0108 	add.w	r1, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985e:	e043      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa7d 	bl	8009d62 <USBD_CtlError>
            err++;
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	3301      	adds	r3, #1
 800986c:	72fb      	strb	r3, [r7, #11]
          break;
 800986e:	e03b      	b.n	80098e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c12      	ldrb	r2, [r2, #16]
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009892:	e029      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa63 	bl	8009d62 <USBD_CtlError>
            err++;
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	3301      	adds	r3, #1
 80098a0:	72fb      	strb	r3, [r7, #11]
          break;
 80098a2:	e021      	b.n	80098e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00b      	beq.n	80098c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7c12      	ldrb	r2, [r2, #16]
 80098bc:	f107 0108 	add.w	r1, r7, #8
 80098c0:	4610      	mov	r0, r2
 80098c2:	4798      	blx	r3
 80098c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098c6:	e00f      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa49 	bl	8009d62 <USBD_CtlError>
            err++;
 80098d0:	7afb      	ldrb	r3, [r7, #11]
 80098d2:	3301      	adds	r3, #1
 80098d4:	72fb      	strb	r3, [r7, #11]
          break;
 80098d6:	e007      	b.n	80098e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa41 	bl	8009d62 <USBD_CtlError>
          err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80098e6:	bf00      	nop
      }
      break;
 80098e8:	e037      	b.n	800995a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	7c1b      	ldrb	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fa:	f107 0208 	add.w	r2, r7, #8
 80098fe:	4610      	mov	r0, r2
 8009900:	4798      	blx	r3
 8009902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009904:	e029      	b.n	800995a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fa2a 	bl	8009d62 <USBD_CtlError>
        err++;
 800990e:	7afb      	ldrb	r3, [r7, #11]
 8009910:	3301      	adds	r3, #1
 8009912:	72fb      	strb	r3, [r7, #11]
      break;
 8009914:	e021      	b.n	800995a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7c1b      	ldrb	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10d      	bne.n	800993a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009926:	f107 0208 	add.w	r2, r7, #8
 800992a:	4610      	mov	r0, r2
 800992c:	4798      	blx	r3
 800992e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	2207      	movs	r2, #7
 8009936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009938:	e00f      	b.n	800995a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fa10 	bl	8009d62 <USBD_CtlError>
        err++;
 8009942:	7afb      	ldrb	r3, [r7, #11]
 8009944:	3301      	adds	r3, #1
 8009946:	72fb      	strb	r3, [r7, #11]
      break;
 8009948:	e007      	b.n	800995a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa08 	bl	8009d62 <USBD_CtlError>
      err++;
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	3301      	adds	r3, #1
 8009956:	72fb      	strb	r3, [r7, #11]
      break;
 8009958:	bf00      	nop
  }

  if (err != 0U)
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d11e      	bne.n	800999e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	88db      	ldrh	r3, [r3, #6]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d016      	beq.n	8009996 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009968:	893b      	ldrh	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88da      	ldrh	r2, [r3, #6]
 8009972:	893b      	ldrh	r3, [r7, #8]
 8009974:	4293      	cmp	r3, r2
 8009976:	bf28      	it	cs
 8009978:	4613      	movcs	r3, r2
 800997a:	b29b      	uxth	r3, r3
 800997c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800997e:	893b      	ldrh	r3, [r7, #8]
 8009980:	461a      	mov	r2, r3
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fa5d 	bl	8009e44 <USBD_CtlSendData>
 800998a:	e009      	b.n	80099a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9e7 	bl	8009d62 <USBD_CtlError>
 8009994:	e004      	b.n	80099a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 faae 	bl	8009ef8 <USBD_CtlSendStatus>
 800999c:	e000      	b.n	80099a0 <USBD_GetDescriptor+0x320>
    return;
 800999e:	bf00      	nop
  }
}
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	889b      	ldrh	r3, [r3, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d131      	bne.n	8009a1e <USBD_SetAddress+0x76>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d12d      	bne.n	8009a1e <USBD_SetAddress+0x76>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80099c8:	d829      	bhi.n	8009a1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d104      	bne.n	80099ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f9bc 	bl	8009d62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ea:	e01d      	b.n	8009a28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7bfa      	ldrb	r2, [r7, #15]
 80099f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 ff3b 	bl	800a874 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa7a 	bl	8009ef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	e009      	b.n	8009a28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1c:	e004      	b.n	8009a28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f99e 	bl	8009d62 <USBD_CtlError>
  }
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	885b      	ldrh	r3, [r3, #2]
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	4b4e      	ldr	r3, [pc, #312]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a48:	4b4d      	ldr	r3, [pc, #308]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d905      	bls.n	8009a5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f985 	bl	8009d62 <USBD_CtlError>
    return USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e08c      	b.n	8009b76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d002      	beq.n	8009a6e <USBD_SetConfig+0x3e>
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d029      	beq.n	8009ac0 <USBD_SetConfig+0x90>
 8009a6c:	e075      	b.n	8009b5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a6e:	4b44      	ldr	r3, [pc, #272]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d020      	beq.n	8009ab8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a76:	4b42      	ldr	r3, [pc, #264]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a80:	4b3f      	ldr	r3, [pc, #252]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fe ffbf 	bl	8008a0a <USBD_SetClassConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f962 	bl	8009d62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009aa6:	e065      	b.n	8009b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fa25 	bl	8009ef8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ab6:	e05d      	b.n	8009b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fa1d 	bl	8009ef8 <USBD_CtlSendStatus>
      break;
 8009abe:	e059      	b.n	8009b74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d112      	bne.n	8009aee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ada:	4b29      	ldr	r3, [pc, #164]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fe ffae 	bl	8008a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa06 	bl	8009ef8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009aec:	e042      	b.n	8009b74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009aee:	4b24      	ldr	r3, [pc, #144]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d02a      	beq.n	8009b52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fe ff9c 	bl	8008a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b14:	4b1a      	ldr	r3, [pc, #104]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fe ff75 	bl	8008a0a <USBD_SetClassConfig>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00f      	beq.n	8009b4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f918 	bl	8009d62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7fe ff81 	bl	8008a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b48:	e014      	b.n	8009b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f9d4 	bl	8009ef8 <USBD_CtlSendStatus>
      break;
 8009b50:	e010      	b.n	8009b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f9d0 	bl	8009ef8 <USBD_CtlSendStatus>
      break;
 8009b58:	e00c      	b.n	8009b74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f900 	bl	8009d62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b62:	4b07      	ldr	r3, [pc, #28]	@ (8009b80 <USBD_SetConfig+0x150>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7fe ff6a 	bl	8008a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	73fb      	strb	r3, [r7, #15]
      break;
 8009b72:	bf00      	nop
  }

  return ret;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	200006e4 	.word	0x200006e4

08009b84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	88db      	ldrh	r3, [r3, #6]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d004      	beq.n	8009ba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8e2 	bl	8009d62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b9e:	e023      	b.n	8009be8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	dc02      	bgt.n	8009bb2 <USBD_GetConfig+0x2e>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dc03      	bgt.n	8009bb8 <USBD_GetConfig+0x34>
 8009bb0:	e015      	b.n	8009bde <USBD_GetConfig+0x5a>
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d00b      	beq.n	8009bce <USBD_GetConfig+0x4a>
 8009bb6:	e012      	b.n	8009bde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f93c 	bl	8009e44 <USBD_CtlSendData>
        break;
 8009bcc:	e00c      	b.n	8009be8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f934 	bl	8009e44 <USBD_CtlSendData>
        break;
 8009bdc:	e004      	b.n	8009be8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f8be 	bl	8009d62 <USBD_CtlError>
        break;
 8009be6:	bf00      	nop
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d81e      	bhi.n	8009c46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	88db      	ldrh	r3, [r3, #6]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d004      	beq.n	8009c1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f8a5 	bl	8009d62 <USBD_CtlError>
        break;
 8009c18:	e01a      	b.n	8009c50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d005      	beq.n	8009c36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f043 0202 	orr.w	r2, r3, #2
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f900 	bl	8009e44 <USBD_CtlSendData>
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f88a 	bl	8009d62 <USBD_CtlError>
      break;
 8009c4e:	bf00      	nop
  }
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d107      	bne.n	8009c7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f940 	bl	8009ef8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c78:	e013      	b.n	8009ca2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d10b      	bne.n	8009c9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	889b      	ldrh	r3, [r3, #4]
 8009c86:	0a1b      	lsrs	r3, r3, #8
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f930 	bl	8009ef8 <USBD_CtlSendStatus>
}
 8009c98:	e003      	b.n	8009ca2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f860 	bl	8009d62 <USBD_CtlError>
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d80b      	bhi.n	8009cda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	885b      	ldrh	r3, [r3, #2]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d10c      	bne.n	8009ce4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f910 	bl	8009ef8 <USBD_CtlSendStatus>
      }
      break;
 8009cd8:	e004      	b.n	8009ce4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f840 	bl	8009d62 <USBD_CtlError>
      break;
 8009ce2:	e000      	b.n	8009ce6 <USBD_ClrFeature+0x3c>
      break;
 8009ce4:	bf00      	nop
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3301      	adds	r3, #1
 8009d08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fa16 	bl	800914a <SWAPBYTE>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	461a      	mov	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff fa09 	bl	800914a <SWAPBYTE>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3301      	adds	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff f9fc 	bl	800914a <SWAPBYTE>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	80da      	strh	r2, [r3, #6]
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d6c:	2180      	movs	r1, #128	@ 0x80
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fd16 	bl	800a7a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d74:	2100      	movs	r1, #0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fd12 	bl	800a7a0 <USBD_LL_StallEP>
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d036      	beq.n	8009e08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d9e:	6938      	ldr	r0, [r7, #16]
 8009da0:	f000 f836 	bl	8009e10 <USBD_GetLen>
 8009da4:	4603      	mov	r3, r0
 8009da6:	3301      	adds	r3, #1
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	4413      	add	r3, r2
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	7812      	ldrb	r2, [r2, #0]
 8009dbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	2203      	movs	r2, #3
 8009dcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dd4:	e013      	b.n	8009dfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	4413      	add	r3, r2
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	7812      	ldrb	r2, [r2, #0]
 8009de0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	3301      	adds	r3, #1
 8009de6:	613b      	str	r3, [r7, #16]
    idx++;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	3301      	adds	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e7      	bne.n	8009dd6 <USBD_GetString+0x52>
 8009e06:	e000      	b.n	8009e0a <USBD_GetString+0x86>
    return;
 8009e08:	bf00      	nop
  }
}
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e20:	e005      	b.n	8009e2e <USBD_GetLen+0x1e>
  {
    len++;
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	3301      	adds	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1f5      	bne.n	8009e22 <USBD_GetLen+0x12>
  }

  return len;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fd21 	bl	800a8b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fd10 	bl	800a8b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fd14 	bl	800a8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fd03 	bl	800a8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2204      	movs	r2, #4
 8009f04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fccf 	bl	800a8b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2205      	movs	r2, #5
 8009f2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fcdd 	bl	800a8f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4912      	ldr	r1, [pc, #72]	@ (8009f94 <MX_USB_DEVICE_Init+0x50>)
 8009f4c:	4812      	ldr	r0, [pc, #72]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f4e:	f7fe fcdf 	bl	8008910 <USBD_Init>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f58:	f7f7 f8ee 	bl	8001138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f5c:	490f      	ldr	r1, [pc, #60]	@ (8009f9c <MX_USB_DEVICE_Init+0x58>)
 8009f5e:	480e      	ldr	r0, [pc, #56]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f60:	f7fe fd06 	bl	8008970 <USBD_RegisterClass>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f6a:	f7f7 f8e5 	bl	8001138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f6e:	490c      	ldr	r1, [pc, #48]	@ (8009fa0 <MX_USB_DEVICE_Init+0x5c>)
 8009f70:	4809      	ldr	r0, [pc, #36]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f72:	f7fe fbfd 	bl	8008770 <USBD_CDC_RegisterInterface>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f7c:	f7f7 f8dc 	bl	8001138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f80:	4805      	ldr	r0, [pc, #20]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f82:	f7fe fd2b 	bl	80089dc <USBD_Start>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f8c:	f7f7 f8d4 	bl	8001138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f90:	bf00      	nop
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	200000b8 	.word	0x200000b8
 8009f98:	200006e8 	.word	0x200006e8
 8009f9c:	20000024 	.word	0x20000024
 8009fa0:	200000a4 	.word	0x200000a4

08009fa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4905      	ldr	r1, [pc, #20]	@ (8009fc0 <CDC_Init_FS+0x1c>)
 8009fac:	4805      	ldr	r0, [pc, #20]	@ (8009fc4 <CDC_Init_FS+0x20>)
 8009fae:	f7fe fbf9 	bl	80087a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fb2:	4905      	ldr	r1, [pc, #20]	@ (8009fc8 <CDC_Init_FS+0x24>)
 8009fb4:	4803      	ldr	r0, [pc, #12]	@ (8009fc4 <CDC_Init_FS+0x20>)
 8009fb6:	f7fe fc17 	bl	80087e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200011c4 	.word	0x200011c4
 8009fc4:	200006e8 	.word	0x200006e8
 8009fc8:	200009c4 	.word	0x200009c4

08009fcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	2b23      	cmp	r3, #35	@ 0x23
 8009ff0:	d84a      	bhi.n	800a088 <CDC_Control_FS+0xac>
 8009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <CDC_Control_FS+0x1c>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a089 	.word	0x0800a089
 8009ffc:	0800a089 	.word	0x0800a089
 800a000:	0800a089 	.word	0x0800a089
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a089 	.word	0x0800a089
 800a00c:	0800a089 	.word	0x0800a089
 800a010:	0800a089 	.word	0x0800a089
 800a014:	0800a089 	.word	0x0800a089
 800a018:	0800a089 	.word	0x0800a089
 800a01c:	0800a089 	.word	0x0800a089
 800a020:	0800a089 	.word	0x0800a089
 800a024:	0800a089 	.word	0x0800a089
 800a028:	0800a089 	.word	0x0800a089
 800a02c:	0800a089 	.word	0x0800a089
 800a030:	0800a089 	.word	0x0800a089
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a089 	.word	0x0800a089
 800a03c:	0800a089 	.word	0x0800a089
 800a040:	0800a089 	.word	0x0800a089
 800a044:	0800a089 	.word	0x0800a089
 800a048:	0800a089 	.word	0x0800a089
 800a04c:	0800a089 	.word	0x0800a089
 800a050:	0800a089 	.word	0x0800a089
 800a054:	0800a089 	.word	0x0800a089
 800a058:	0800a089 	.word	0x0800a089
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a089 	.word	0x0800a089
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	0800a089 	.word	0x0800a089
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a089 	.word	0x0800a089
 800a07c:	0800a089 	.word	0x0800a089
 800a080:	0800a089 	.word	0x0800a089
 800a084:	0800a089 	.word	0x0800a089
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a088:	bf00      	nop
  }

  return (USBD_OK);
 800a08a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4808      	ldr	r0, [pc, #32]	@ (800a0c8 <CDC_Receive_FS+0x30>)
 800a0a6:	f7fe fb9f 	bl	80087e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0aa:	4807      	ldr	r0, [pc, #28]	@ (800a0c8 <CDC_Receive_FS+0x30>)
 800a0ac:	f7fe fbfa 	bl	80088a4 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f807 	bl	800a0cc <CDC_Transmit_FS>
	return (USBD_OK);
 800a0be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	200006e8 	.word	0x200006e8

0800a0cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a114 <CDC_Transmit_FS+0x48>)
 800a0de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e00b      	b.n	800a10a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0f2:	887b      	ldrh	r3, [r7, #2]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4806      	ldr	r0, [pc, #24]	@ (800a114 <CDC_Transmit_FS+0x48>)
 800a0fa:	f7fe fb53 	bl	80087a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0fe:	4805      	ldr	r0, [pc, #20]	@ (800a114 <CDC_Transmit_FS+0x48>)
 800a100:	f7fe fb90 	bl	8008824 <USBD_CDC_TransmitPacket>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	200006e8 	.word	0x200006e8

0800a118 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a12a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2212      	movs	r2, #18
 800a14c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a14e:	4b03      	ldr	r3, [pc, #12]	@ (800a15c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	200000d8 	.word	0x200000d8

0800a160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2204      	movs	r2, #4
 800a170:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a172:	4b03      	ldr	r3, [pc, #12]	@ (800a180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	200000f8 	.word	0x200000f8

0800a184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d105      	bne.n	800a1a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	4907      	ldr	r1, [pc, #28]	@ (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a19a:	4808      	ldr	r0, [pc, #32]	@ (800a1bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a19c:	f7ff fdf2 	bl	8009d84 <USBD_GetString>
 800a1a0:	e004      	b.n	800a1ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	4904      	ldr	r1, [pc, #16]	@ (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1a6:	4805      	ldr	r0, [pc, #20]	@ (800a1bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1a8:	f7ff fdec 	bl	8009d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1ac:	4b02      	ldr	r3, [pc, #8]	@ (800a1b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	200019c4 	.word	0x200019c4
 800a1bc:	0800d5ac 	.word	0x0800d5ac

0800a1c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	4904      	ldr	r1, [pc, #16]	@ (800a1e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1d0:	4804      	ldr	r0, [pc, #16]	@ (800a1e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1d2:	f7ff fdd7 	bl	8009d84 <USBD_GetString>
  return USBD_StrDesc;
 800a1d6:	4b02      	ldr	r3, [pc, #8]	@ (800a1e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	200019c4 	.word	0x200019c4
 800a1e4:	0800d5c4 	.word	0x0800d5c4

0800a1e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	221a      	movs	r2, #26
 800a1f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1fa:	f000 f855 	bl	800a2a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1fe:	4b02      	ldr	r3, [pc, #8]	@ (800a208 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	200000fc 	.word	0x200000fc

0800a20c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d105      	bne.n	800a22a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	4907      	ldr	r1, [pc, #28]	@ (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a222:	4808      	ldr	r0, [pc, #32]	@ (800a244 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a224:	f7ff fdae 	bl	8009d84 <USBD_GetString>
 800a228:	e004      	b.n	800a234 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4904      	ldr	r1, [pc, #16]	@ (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a22e:	4805      	ldr	r0, [pc, #20]	@ (800a244 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a230:	f7ff fda8 	bl	8009d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200019c4 	.word	0x200019c4
 800a244:	0800d5d8 	.word	0x0800d5d8

0800a248 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4907      	ldr	r1, [pc, #28]	@ (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a25e:	4808      	ldr	r0, [pc, #32]	@ (800a280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a260:	f7ff fd90 	bl	8009d84 <USBD_GetString>
 800a264:	e004      	b.n	800a270 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4904      	ldr	r1, [pc, #16]	@ (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a26a:	4805      	ldr	r0, [pc, #20]	@ (800a280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a26c:	f7ff fd8a 	bl	8009d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	@ (800a27c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200019c4 	.word	0x200019c4
 800a280:	0800d5e4 	.word	0x0800d5e4

0800a284 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	220c      	movs	r2, #12
 800a294:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a296:	4b03      	ldr	r3, [pc, #12]	@ (800a2a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	200000ec 	.word	0x200000ec

0800a2a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2bc:	2208      	movs	r2, #8
 800a2be:	4906      	ldr	r1, [pc, #24]	@ (800a2d8 <Get_SerialNum+0x30>)
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f80d 	bl	800a2e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2c6:	2204      	movs	r2, #4
 800a2c8:	4904      	ldr	r1, [pc, #16]	@ (800a2dc <Get_SerialNum+0x34>)
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f808 	bl	800a2e0 <IntToUnicode>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	200000fe 	.word	0x200000fe
 800a2dc:	2000010e 	.word	0x2000010e

0800a2e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	75fb      	strb	r3, [r7, #23]
 800a2f6:	e027      	b.n	800a348 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	0f1b      	lsrs	r3, r3, #28
 800a2fc:	2b09      	cmp	r3, #9
 800a2fe:	d80b      	bhi.n	800a318 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	0f1b      	lsrs	r3, r3, #28
 800a304:	b2da      	uxtb	r2, r3
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	4619      	mov	r1, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	440b      	add	r3, r1
 800a310:	3230      	adds	r2, #48	@ 0x30
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	e00a      	b.n	800a32e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0f1b      	lsrs	r3, r3, #28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4619      	mov	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	440b      	add	r3, r1
 800a328:	3237      	adds	r2, #55	@ 0x37
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	3301      	adds	r3, #1
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	3301      	adds	r3, #1
 800a346:	75fb      	strb	r3, [r7, #23]
 800a348:	7dfa      	ldrb	r2, [r7, #23]
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3d3      	bcc.n	800a2f8 <IntToUnicode+0x18>
  }
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	371c      	adds	r7, #28
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b0ae      	sub	sp, #184	@ 0xb8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a368:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	609a      	str	r2, [r3, #8]
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	2290      	movs	r2, #144	@ 0x90
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fa6b 	bl	800b85c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a38e:	d161      	bne.n	800a454 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a390:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a394:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a396:	2300      	movs	r3, #0
 800a398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a39c:	f107 0314 	add.w	r3, r7, #20
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fb f909 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a3ac:	f7f6 fec4 	bl	8001138 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b0:	4b2a      	ldr	r3, [pc, #168]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b4:	4a29      	ldr	r2, [pc, #164]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3bc:	4b27      	ldr	r3, [pc, #156]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a3c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a3cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	481c      	ldr	r0, [pc, #112]	@ (800a460 <HAL_PCD_MspInit+0x100>)
 800a3f0:	f7f8 f97e 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a3f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a402:	2300      	movs	r3, #0
 800a404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a408:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4814      	ldr	r0, [pc, #80]	@ (800a460 <HAL_PCD_MspInit+0x100>)
 800a410:	f7f8 f96e 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a414:	4b11      	ldr	r3, [pc, #68]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a418:	4a10      	ldr	r2, [pc, #64]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a420:	4b0e      	ldr	r3, [pc, #56]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4b0b      	ldr	r3, [pc, #44]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a42e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a430:	4a0a      	ldr	r2, [pc, #40]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a436:	6453      	str	r3, [r2, #68]	@ 0x44
 800a438:	4b08      	ldr	r3, [pc, #32]	@ (800a45c <HAL_PCD_MspInit+0xfc>)
 800a43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a43c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a440:	60bb      	str	r3, [r7, #8]
 800a442:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a444:	2200      	movs	r2, #0
 800a446:	2100      	movs	r1, #0
 800a448:	2043      	movs	r0, #67	@ 0x43
 800a44a:	f7f7 fb0a 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a44e:	2043      	movs	r0, #67	@ 0x43
 800a450:	f7f7 fb23 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a454:	bf00      	nop
 800a456:	37b8      	adds	r7, #184	@ 0xb8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	40023800 	.word	0x40023800
 800a460:	40020000 	.word	0x40020000

0800a464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fe fafb 	bl	8008a76 <USBD_LL_SetupStage>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f7fe fb35 	bl	8008b20 <USBD_LL_DataOutStage>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	334c      	adds	r3, #76	@ 0x4c
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f7fe fbce 	bl	8008c86 <USBD_LL_DataInStage>
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fd02 	bl	8008f0a <USBD_LL_SOF>
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
 800a526:	e008      	b.n	800a53a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d102      	bne.n	800a536 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
 800a534:	e001      	b.n	800a53a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a536:	f7f6 fdff 	bl	8001138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a540:	7bfa      	ldrb	r2, [r7, #15]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fca2 	bl	8008e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fc4a 	bl	8008dea <USBD_LL_Reset>
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fc9d 	bl	8008eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6812      	ldr	r2, [r2, #0]
 800a582:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a594:	4b04      	ldr	r3, [pc, #16]	@ (800a5a8 <HAL_PCD_SuspendCallback+0x48>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a03      	ldr	r2, [pc, #12]	@ (800a5a8 <HAL_PCD_SuspendCallback+0x48>)
 800a59a:	f043 0306 	orr.w	r3, r3, #6
 800a59e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed00 	.word	0xe000ed00

0800a5ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fc8d 	bl	8008eda <USBD_LL_Resume>
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fce5 	bl	8008fae <USBD_LL_IsoOUTIncomplete>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fca1 	bl	8008f4a <USBD_LL_IsoINIncomplete>
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe fcf7 	bl	8009012 <USBD_LL_DevConnected>
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fcf4 	bl	8009028 <USBD_LL_DevDisconnected>
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d13c      	bne.n	800a6d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a658:	4a20      	ldr	r2, [pc, #128]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a1e      	ldr	r2, [pc, #120]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a664:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a668:	4b1c      	ldr	r3, [pc, #112]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a66a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a66e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a670:	4b1a      	ldr	r3, [pc, #104]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a672:	2206      	movs	r2, #6
 800a674:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a676:	4b19      	ldr	r3, [pc, #100]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a678:	2202      	movs	r2, #2
 800a67a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a67c:	4b17      	ldr	r3, [pc, #92]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a67e:	2200      	movs	r2, #0
 800a680:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a682:	4b16      	ldr	r3, [pc, #88]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a684:	2202      	movs	r2, #2
 800a686:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a688:	4b14      	ldr	r3, [pc, #80]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a68e:	4b13      	ldr	r3, [pc, #76]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a690:	2200      	movs	r2, #0
 800a692:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a694:	4b11      	ldr	r3, [pc, #68]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a696:	2200      	movs	r2, #0
 800a698:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a69a:	4b10      	ldr	r3, [pc, #64]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6a6:	480d      	ldr	r0, [pc, #52]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a6a8:	f7f8 ff99 	bl	80035de <HAL_PCD_Init>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6b2:	f7f6 fd41 	bl	8001138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6b6:	2180      	movs	r1, #128	@ 0x80
 800a6b8:	4808      	ldr	r0, [pc, #32]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a6ba:	f7fa fa14 	bl	8004ae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6be:	2240      	movs	r2, #64	@ 0x40
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4806      	ldr	r0, [pc, #24]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a6c4:	f7fa f9c8 	bl	8004a58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6c8:	2280      	movs	r2, #128	@ 0x80
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4803      	ldr	r0, [pc, #12]	@ (800a6dc <USBD_LL_Init+0x94>)
 800a6ce:	f7fa f9c3 	bl	8004a58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20001bc4 	.word	0x20001bc4

0800a6e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7f9 f895 	bl	8003826 <HAL_PCD_Start>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f97e 	bl	800aa04 <USBD_Get_USB_Status>
 800a708:	4603      	mov	r3, r0
 800a70a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	4608      	mov	r0, r1
 800a720:	4611      	mov	r1, r2
 800a722:	461a      	mov	r2, r3
 800a724:	4603      	mov	r3, r0
 800a726:	70fb      	strb	r3, [r7, #3]
 800a728:	460b      	mov	r3, r1
 800a72a:	70bb      	strb	r3, [r7, #2]
 800a72c:	4613      	mov	r3, r2
 800a72e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a73e:	78bb      	ldrb	r3, [r7, #2]
 800a740:	883a      	ldrh	r2, [r7, #0]
 800a742:	78f9      	ldrb	r1, [r7, #3]
 800a744:	f7f9 fd82 	bl	800424c <HAL_PCD_EP_Open>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 f958 	bl	800aa04 <USBD_Get_USB_Status>
 800a754:	4603      	mov	r3, r0
 800a756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a758:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	460b      	mov	r3, r1
 800a76c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a77c:	78fa      	ldrb	r2, [r7, #3]
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7f9 fdcb 	bl	800431c <HAL_PCD_EP_Close>
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f939 	bl	800aa04 <USBD_Get_USB_Status>
 800a792:	4603      	mov	r3, r0
 800a794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a796:	7bbb      	ldrb	r3, [r7, #14]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7ba:	78fa      	ldrb	r2, [r7, #3]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f9 fea3 	bl	800450a <HAL_PCD_EP_SetStall>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 f91a 	bl	800aa04 <USBD_Get_USB_Status>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7f8:	78fa      	ldrb	r2, [r7, #3]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7f9 fee8 	bl	80045d2 <HAL_PCD_EP_ClrStall>
 800a802:	4603      	mov	r3, r0
 800a804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f8fb 	bl	800aa04 <USBD_Get_USB_Status>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a812:	7bbb      	ldrb	r3, [r7, #14]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a82e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a834:	2b00      	cmp	r3, #0
 800a836:	da0b      	bge.n	800a850 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a83e:	68f9      	ldr	r1, [r7, #12]
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	440b      	add	r3, r1
 800a84a:	333e      	adds	r3, #62	@ 0x3e
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	e00b      	b.n	800a868 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	4613      	mov	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800a866:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	4611      	mov	r1, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7f9 fcb5 	bl	8004202 <HAL_PCD_SetAddress>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f8b0 	bl	800aa04 <USBD_Get_USB_Status>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b086      	sub	sp, #24
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a8d0:	7af9      	ldrb	r1, [r7, #11]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	f7f9 fdce 	bl	8004476 <HAL_PCD_EP_Transmit>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f88f 	bl	800aa04 <USBD_Get_USB_Status>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	460b      	mov	r3, r1
 800a902:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a912:	7af9      	ldrb	r1, [r7, #11]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	f7f9 fd4a 	bl	80043b0 <HAL_PCD_EP_Receive>
 800a91c:	4603      	mov	r3, r0
 800a91e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f86e 	bl	800aa04 <USBD_Get_USB_Status>
 800a928:	4603      	mov	r3, r0
 800a92a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a92c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7f9 fd7a 	bl	8004446 <HAL_PCD_EP_GetRxCount>
 800a952:	4603      	mov	r3, r0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_PCDEx_LPM_Callback+0x18>
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d01f      	beq.n	800a9b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a972:	e03b      	b.n	800a9ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a97c:	f000 f83c 	bl	800a9f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a980:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a986:	f023 0306 	bic.w	r3, r3, #6
 800a98a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	6812      	ldr	r2, [r2, #0]
 800a99a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a99e:	f023 0301 	bic.w	r3, r3, #1
 800a9a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fa95 	bl	8008eda <USBD_LL_Resume>
    break;
 800a9b0:	e01c      	b.n	800a9ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	6812      	ldr	r2, [r2, #0]
 800a9c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fa6c 	bl	8008eae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9de:	4b05      	ldr	r3, [pc, #20]	@ (800a9f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	4a04      	ldr	r2, [pc, #16]	@ (800a9f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9e4:	f043 0306 	orr.w	r3, r3, #6
 800a9e8:	6113      	str	r3, [r2, #16]
    break;
 800a9ea:	bf00      	nop
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	e000ed00 	.word	0xe000ed00

0800a9f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a9fc:	f7f6 f988 	bl	8000d10 <SystemClock_Config>
}
 800aa00:	bf00      	nop
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d817      	bhi.n	800aa48 <USBD_Get_USB_Status+0x44>
 800aa18:	a201      	add	r2, pc, #4	@ (adr r2, 800aa20 <USBD_Get_USB_Status+0x1c>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa37 	.word	0x0800aa37
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa43 	.word	0x0800aa43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
    break;
 800aa34:	e00b      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3a:	e008      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa40:	e005      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa42:	2303      	movs	r3, #3
 800aa44:	73fb      	strb	r3, [r7, #15]
    break;
 800aa46:	e002      	b.n	800aa4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4c:	bf00      	nop
  }
  return usb_status;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <malloc>:
 800aa5c:	4b02      	ldr	r3, [pc, #8]	@ (800aa68 <malloc+0xc>)
 800aa5e:	4601      	mov	r1, r0
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	f000 b82d 	b.w	800aac0 <_malloc_r>
 800aa66:	bf00      	nop
 800aa68:	20000124 	.word	0x20000124

0800aa6c <free>:
 800aa6c:	4b02      	ldr	r3, [pc, #8]	@ (800aa78 <free+0xc>)
 800aa6e:	4601      	mov	r1, r0
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	f001 bd6f 	b.w	800c554 <_free_r>
 800aa76:	bf00      	nop
 800aa78:	20000124 	.word	0x20000124

0800aa7c <sbrk_aligned>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	4e0f      	ldr	r6, [pc, #60]	@ (800aabc <sbrk_aligned+0x40>)
 800aa80:	460c      	mov	r4, r1
 800aa82:	6831      	ldr	r1, [r6, #0]
 800aa84:	4605      	mov	r5, r0
 800aa86:	b911      	cbnz	r1, 800aa8e <sbrk_aligned+0x12>
 800aa88:	f000 ff28 	bl	800b8dc <_sbrk_r>
 800aa8c:	6030      	str	r0, [r6, #0]
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f000 ff23 	bl	800b8dc <_sbrk_r>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	d103      	bne.n	800aaa2 <sbrk_aligned+0x26>
 800aa9a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
 800aaa2:	1cc4      	adds	r4, r0, #3
 800aaa4:	f024 0403 	bic.w	r4, r4, #3
 800aaa8:	42a0      	cmp	r0, r4
 800aaaa:	d0f8      	beq.n	800aa9e <sbrk_aligned+0x22>
 800aaac:	1a21      	subs	r1, r4, r0
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 ff14 	bl	800b8dc <_sbrk_r>
 800aab4:	3001      	adds	r0, #1
 800aab6:	d1f2      	bne.n	800aa9e <sbrk_aligned+0x22>
 800aab8:	e7ef      	b.n	800aa9a <sbrk_aligned+0x1e>
 800aaba:	bf00      	nop
 800aabc:	200020cc 	.word	0x200020cc

0800aac0 <_malloc_r>:
 800aac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac4:	1ccd      	adds	r5, r1, #3
 800aac6:	f025 0503 	bic.w	r5, r5, #3
 800aaca:	3508      	adds	r5, #8
 800aacc:	2d0c      	cmp	r5, #12
 800aace:	bf38      	it	cc
 800aad0:	250c      	movcc	r5, #12
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	4606      	mov	r6, r0
 800aad6:	db01      	blt.n	800aadc <_malloc_r+0x1c>
 800aad8:	42a9      	cmp	r1, r5
 800aada:	d904      	bls.n	800aae6 <_malloc_r+0x26>
 800aadc:	230c      	movs	r3, #12
 800aade:	6033      	str	r3, [r6, #0]
 800aae0:	2000      	movs	r0, #0
 800aae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abbc <_malloc_r+0xfc>
 800aaea:	f000 f869 	bl	800abc0 <__malloc_lock>
 800aaee:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf2:	461c      	mov	r4, r3
 800aaf4:	bb44      	cbnz	r4, 800ab48 <_malloc_r+0x88>
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7ff ffbf 	bl	800aa7c <sbrk_aligned>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	4604      	mov	r4, r0
 800ab02:	d158      	bne.n	800abb6 <_malloc_r+0xf6>
 800ab04:	f8d8 4000 	ldr.w	r4, [r8]
 800ab08:	4627      	mov	r7, r4
 800ab0a:	2f00      	cmp	r7, #0
 800ab0c:	d143      	bne.n	800ab96 <_malloc_r+0xd6>
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	d04b      	beq.n	800abaa <_malloc_r+0xea>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	4639      	mov	r1, r7
 800ab16:	4630      	mov	r0, r6
 800ab18:	eb04 0903 	add.w	r9, r4, r3
 800ab1c:	f000 fede 	bl	800b8dc <_sbrk_r>
 800ab20:	4581      	cmp	r9, r0
 800ab22:	d142      	bne.n	800abaa <_malloc_r+0xea>
 800ab24:	6821      	ldr	r1, [r4, #0]
 800ab26:	1a6d      	subs	r5, r5, r1
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7ff ffa6 	bl	800aa7c <sbrk_aligned>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d03a      	beq.n	800abaa <_malloc_r+0xea>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	442b      	add	r3, r5
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	bb62      	cbnz	r2, 800ab9c <_malloc_r+0xdc>
 800ab42:	f8c8 7000 	str.w	r7, [r8]
 800ab46:	e00f      	b.n	800ab68 <_malloc_r+0xa8>
 800ab48:	6822      	ldr	r2, [r4, #0]
 800ab4a:	1b52      	subs	r2, r2, r5
 800ab4c:	d420      	bmi.n	800ab90 <_malloc_r+0xd0>
 800ab4e:	2a0b      	cmp	r2, #11
 800ab50:	d917      	bls.n	800ab82 <_malloc_r+0xc2>
 800ab52:	1961      	adds	r1, r4, r5
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	6025      	str	r5, [r4, #0]
 800ab58:	bf18      	it	ne
 800ab5a:	6059      	strne	r1, [r3, #4]
 800ab5c:	6863      	ldr	r3, [r4, #4]
 800ab5e:	bf08      	it	eq
 800ab60:	f8c8 1000 	streq.w	r1, [r8]
 800ab64:	5162      	str	r2, [r4, r5]
 800ab66:	604b      	str	r3, [r1, #4]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f000 f82f 	bl	800abcc <__malloc_unlock>
 800ab6e:	f104 000b 	add.w	r0, r4, #11
 800ab72:	1d23      	adds	r3, r4, #4
 800ab74:	f020 0007 	bic.w	r0, r0, #7
 800ab78:	1ac2      	subs	r2, r0, r3
 800ab7a:	bf1c      	itt	ne
 800ab7c:	1a1b      	subne	r3, r3, r0
 800ab7e:	50a3      	strne	r3, [r4, r2]
 800ab80:	e7af      	b.n	800aae2 <_malloc_r+0x22>
 800ab82:	6862      	ldr	r2, [r4, #4]
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	bf0c      	ite	eq
 800ab88:	f8c8 2000 	streq.w	r2, [r8]
 800ab8c:	605a      	strne	r2, [r3, #4]
 800ab8e:	e7eb      	b.n	800ab68 <_malloc_r+0xa8>
 800ab90:	4623      	mov	r3, r4
 800ab92:	6864      	ldr	r4, [r4, #4]
 800ab94:	e7ae      	b.n	800aaf4 <_malloc_r+0x34>
 800ab96:	463c      	mov	r4, r7
 800ab98:	687f      	ldr	r7, [r7, #4]
 800ab9a:	e7b6      	b.n	800ab0a <_malloc_r+0x4a>
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	42a3      	cmp	r3, r4
 800aba2:	d1fb      	bne.n	800ab9c <_malloc_r+0xdc>
 800aba4:	2300      	movs	r3, #0
 800aba6:	6053      	str	r3, [r2, #4]
 800aba8:	e7de      	b.n	800ab68 <_malloc_r+0xa8>
 800abaa:	230c      	movs	r3, #12
 800abac:	6033      	str	r3, [r6, #0]
 800abae:	4630      	mov	r0, r6
 800abb0:	f000 f80c 	bl	800abcc <__malloc_unlock>
 800abb4:	e794      	b.n	800aae0 <_malloc_r+0x20>
 800abb6:	6005      	str	r5, [r0, #0]
 800abb8:	e7d6      	b.n	800ab68 <_malloc_r+0xa8>
 800abba:	bf00      	nop
 800abbc:	200020d0 	.word	0x200020d0

0800abc0 <__malloc_lock>:
 800abc0:	4801      	ldr	r0, [pc, #4]	@ (800abc8 <__malloc_lock+0x8>)
 800abc2:	f000 bed8 	b.w	800b976 <__retarget_lock_acquire_recursive>
 800abc6:	bf00      	nop
 800abc8:	20002214 	.word	0x20002214

0800abcc <__malloc_unlock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	@ (800abd4 <__malloc_unlock+0x8>)
 800abce:	f000 bed3 	b.w	800b978 <__retarget_lock_release_recursive>
 800abd2:	bf00      	nop
 800abd4:	20002214 	.word	0x20002214

0800abd8 <__cvt>:
 800abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abda:	ed2d 8b02 	vpush	{d8}
 800abde:	eeb0 8b40 	vmov.f64	d8, d0
 800abe2:	b085      	sub	sp, #20
 800abe4:	4617      	mov	r7, r2
 800abe6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800abe8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abea:	ee18 2a90 	vmov	r2, s17
 800abee:	f025 0520 	bic.w	r5, r5, #32
 800abf2:	2a00      	cmp	r2, #0
 800abf4:	bfb6      	itet	lt
 800abf6:	222d      	movlt	r2, #45	@ 0x2d
 800abf8:	2200      	movge	r2, #0
 800abfa:	eeb1 8b40 	vneglt.f64	d8, d0
 800abfe:	2d46      	cmp	r5, #70	@ 0x46
 800ac00:	460c      	mov	r4, r1
 800ac02:	701a      	strb	r2, [r3, #0]
 800ac04:	d004      	beq.n	800ac10 <__cvt+0x38>
 800ac06:	2d45      	cmp	r5, #69	@ 0x45
 800ac08:	d100      	bne.n	800ac0c <__cvt+0x34>
 800ac0a:	3401      	adds	r4, #1
 800ac0c:	2102      	movs	r1, #2
 800ac0e:	e000      	b.n	800ac12 <__cvt+0x3a>
 800ac10:	2103      	movs	r1, #3
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	ab02      	add	r3, sp, #8
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	4633      	mov	r3, r6
 800ac1e:	eeb0 0b48 	vmov.f64	d0, d8
 800ac22:	f000 ff41 	bl	800baa8 <_dtoa_r>
 800ac26:	2d47      	cmp	r5, #71	@ 0x47
 800ac28:	d114      	bne.n	800ac54 <__cvt+0x7c>
 800ac2a:	07fb      	lsls	r3, r7, #31
 800ac2c:	d50a      	bpl.n	800ac44 <__cvt+0x6c>
 800ac2e:	1902      	adds	r2, r0, r4
 800ac30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac38:	bf08      	it	eq
 800ac3a:	9203      	streq	r2, [sp, #12]
 800ac3c:	2130      	movs	r1, #48	@ 0x30
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d319      	bcc.n	800ac78 <__cvt+0xa0>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac48:	1a1b      	subs	r3, r3, r0
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	b005      	add	sp, #20
 800ac4e:	ecbd 8b02 	vpop	{d8}
 800ac52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac54:	2d46      	cmp	r5, #70	@ 0x46
 800ac56:	eb00 0204 	add.w	r2, r0, r4
 800ac5a:	d1e9      	bne.n	800ac30 <__cvt+0x58>
 800ac5c:	7803      	ldrb	r3, [r0, #0]
 800ac5e:	2b30      	cmp	r3, #48	@ 0x30
 800ac60:	d107      	bne.n	800ac72 <__cvt+0x9a>
 800ac62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6a:	bf1c      	itt	ne
 800ac6c:	f1c4 0401 	rsbne	r4, r4, #1
 800ac70:	6034      	strne	r4, [r6, #0]
 800ac72:	6833      	ldr	r3, [r6, #0]
 800ac74:	441a      	add	r2, r3
 800ac76:	e7db      	b.n	800ac30 <__cvt+0x58>
 800ac78:	1c5c      	adds	r4, r3, #1
 800ac7a:	9403      	str	r4, [sp, #12]
 800ac7c:	7019      	strb	r1, [r3, #0]
 800ac7e:	e7de      	b.n	800ac3e <__cvt+0x66>

0800ac80 <__exponent>:
 800ac80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac82:	2900      	cmp	r1, #0
 800ac84:	bfba      	itte	lt
 800ac86:	4249      	neglt	r1, r1
 800ac88:	232d      	movlt	r3, #45	@ 0x2d
 800ac8a:	232b      	movge	r3, #43	@ 0x2b
 800ac8c:	2909      	cmp	r1, #9
 800ac8e:	7002      	strb	r2, [r0, #0]
 800ac90:	7043      	strb	r3, [r0, #1]
 800ac92:	dd29      	ble.n	800ace8 <__exponent+0x68>
 800ac94:	f10d 0307 	add.w	r3, sp, #7
 800ac98:	461d      	mov	r5, r3
 800ac9a:	270a      	movs	r7, #10
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	fbb1 f6f7 	udiv	r6, r1, r7
 800aca2:	fb07 1416 	mls	r4, r7, r6, r1
 800aca6:	3430      	adds	r4, #48	@ 0x30
 800aca8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800acac:	460c      	mov	r4, r1
 800acae:	2c63      	cmp	r4, #99	@ 0x63
 800acb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800acb4:	4631      	mov	r1, r6
 800acb6:	dcf1      	bgt.n	800ac9c <__exponent+0x1c>
 800acb8:	3130      	adds	r1, #48	@ 0x30
 800acba:	1e94      	subs	r4, r2, #2
 800acbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acc0:	1c41      	adds	r1, r0, #1
 800acc2:	4623      	mov	r3, r4
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	d30a      	bcc.n	800acde <__exponent+0x5e>
 800acc8:	f10d 0309 	add.w	r3, sp, #9
 800accc:	1a9b      	subs	r3, r3, r2
 800acce:	42ac      	cmp	r4, r5
 800acd0:	bf88      	it	hi
 800acd2:	2300      	movhi	r3, #0
 800acd4:	3302      	adds	r3, #2
 800acd6:	4403      	add	r3, r0
 800acd8:	1a18      	subs	r0, r3, r0
 800acda:	b003      	add	sp, #12
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ace2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ace6:	e7ed      	b.n	800acc4 <__exponent+0x44>
 800ace8:	2330      	movs	r3, #48	@ 0x30
 800acea:	3130      	adds	r1, #48	@ 0x30
 800acec:	7083      	strb	r3, [r0, #2]
 800acee:	70c1      	strb	r1, [r0, #3]
 800acf0:	1d03      	adds	r3, r0, #4
 800acf2:	e7f1      	b.n	800acd8 <__exponent+0x58>
 800acf4:	0000      	movs	r0, r0
	...

0800acf8 <_printf_float>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	b08d      	sub	sp, #52	@ 0x34
 800acfe:	460c      	mov	r4, r1
 800ad00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad04:	4616      	mov	r6, r2
 800ad06:	461f      	mov	r7, r3
 800ad08:	4605      	mov	r5, r0
 800ad0a:	f000 fdaf 	bl	800b86c <_localeconv_r>
 800ad0e:	f8d0 b000 	ldr.w	fp, [r0]
 800ad12:	4658      	mov	r0, fp
 800ad14:	f7f5 fae4 	bl	80002e0 <strlen>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	9005      	str	r0, [sp, #20]
 800ad28:	3307      	adds	r3, #7
 800ad2a:	f023 0307 	bic.w	r3, r3, #7
 800ad2e:	f103 0108 	add.w	r1, r3, #8
 800ad32:	f8c8 1000 	str.w	r1, [r8]
 800ad36:	ed93 0b00 	vldr	d0, [r3]
 800ad3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800af98 <_printf_float+0x2a0>
 800ad3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ad42:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ad4e:	dd24      	ble.n	800ad9a <_printf_float+0xa2>
 800ad50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ad54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad58:	d502      	bpl.n	800ad60 <_printf_float+0x68>
 800ad5a:	232d      	movs	r3, #45	@ 0x2d
 800ad5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad60:	498f      	ldr	r1, [pc, #572]	@ (800afa0 <_printf_float+0x2a8>)
 800ad62:	4b90      	ldr	r3, [pc, #576]	@ (800afa4 <_printf_float+0x2ac>)
 800ad64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ad68:	bf94      	ite	ls
 800ad6a:	4688      	movls	r8, r1
 800ad6c:	4698      	movhi	r8, r3
 800ad6e:	f022 0204 	bic.w	r2, r2, #4
 800ad72:	2303      	movs	r3, #3
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	6022      	str	r2, [r4, #0]
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	9700      	str	r7, [sp, #0]
 800ad7e:	4633      	mov	r3, r6
 800ad80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 f9d1 	bl	800b12c <_printf_common>
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f040 8089 	bne.w	800aea2 <_printf_float+0x1aa>
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295
 800ad94:	b00d      	add	sp, #52	@ 0x34
 800ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	d709      	bvc.n	800adb8 <_printf_float+0xc0>
 800ada4:	ee10 3a90 	vmov	r3, s1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bfbc      	itt	lt
 800adac:	232d      	movlt	r3, #45	@ 0x2d
 800adae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adb2:	497d      	ldr	r1, [pc, #500]	@ (800afa8 <_printf_float+0x2b0>)
 800adb4:	4b7d      	ldr	r3, [pc, #500]	@ (800afac <_printf_float+0x2b4>)
 800adb6:	e7d5      	b.n	800ad64 <_printf_float+0x6c>
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	1c59      	adds	r1, r3, #1
 800adbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800adc0:	d139      	bne.n	800ae36 <_printf_float+0x13e>
 800adc2:	2306      	movs	r3, #6
 800adc4:	6063      	str	r3, [r4, #4]
 800adc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800adca:	2300      	movs	r3, #0
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	ab0a      	add	r3, sp, #40	@ 0x28
 800add2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800add6:	ab09      	add	r3, sp, #36	@ 0x24
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	6861      	ldr	r1, [r4, #4]
 800addc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7ff fef9 	bl	800abd8 <__cvt>
 800ade6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adec:	4680      	mov	r8, r0
 800adee:	d129      	bne.n	800ae44 <_printf_float+0x14c>
 800adf0:	1cc8      	adds	r0, r1, #3
 800adf2:	db02      	blt.n	800adfa <_printf_float+0x102>
 800adf4:	6863      	ldr	r3, [r4, #4]
 800adf6:	4299      	cmp	r1, r3
 800adf8:	dd41      	ble.n	800ae7e <_printf_float+0x186>
 800adfa:	f1a9 0902 	sub.w	r9, r9, #2
 800adfe:	fa5f f989 	uxtb.w	r9, r9
 800ae02:	3901      	subs	r1, #1
 800ae04:	464a      	mov	r2, r9
 800ae06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae0c:	f7ff ff38 	bl	800ac80 <__exponent>
 800ae10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae12:	1813      	adds	r3, r2, r0
 800ae14:	2a01      	cmp	r2, #1
 800ae16:	4682      	mov	sl, r0
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	dc02      	bgt.n	800ae22 <_printf_float+0x12a>
 800ae1c:	6822      	ldr	r2, [r4, #0]
 800ae1e:	07d2      	lsls	r2, r2, #31
 800ae20:	d501      	bpl.n	800ae26 <_printf_float+0x12e>
 800ae22:	3301      	adds	r3, #1
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0a6      	beq.n	800ad7c <_printf_float+0x84>
 800ae2e:	232d      	movs	r3, #45	@ 0x2d
 800ae30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae34:	e7a2      	b.n	800ad7c <_printf_float+0x84>
 800ae36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae3a:	d1c4      	bne.n	800adc6 <_printf_float+0xce>
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1c2      	bne.n	800adc6 <_printf_float+0xce>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e7bf      	b.n	800adc4 <_printf_float+0xcc>
 800ae44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ae48:	d9db      	bls.n	800ae02 <_printf_float+0x10a>
 800ae4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ae4e:	d118      	bne.n	800ae82 <_printf_float+0x18a>
 800ae50:	2900      	cmp	r1, #0
 800ae52:	6863      	ldr	r3, [r4, #4]
 800ae54:	dd0b      	ble.n	800ae6e <_printf_float+0x176>
 800ae56:	6121      	str	r1, [r4, #16]
 800ae58:	b913      	cbnz	r3, 800ae60 <_printf_float+0x168>
 800ae5a:	6822      	ldr	r2, [r4, #0]
 800ae5c:	07d0      	lsls	r0, r2, #31
 800ae5e:	d502      	bpl.n	800ae66 <_printf_float+0x16e>
 800ae60:	3301      	adds	r3, #1
 800ae62:	440b      	add	r3, r1
 800ae64:	6123      	str	r3, [r4, #16]
 800ae66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae68:	f04f 0a00 	mov.w	sl, #0
 800ae6c:	e7db      	b.n	800ae26 <_printf_float+0x12e>
 800ae6e:	b913      	cbnz	r3, 800ae76 <_printf_float+0x17e>
 800ae70:	6822      	ldr	r2, [r4, #0]
 800ae72:	07d2      	lsls	r2, r2, #31
 800ae74:	d501      	bpl.n	800ae7a <_printf_float+0x182>
 800ae76:	3302      	adds	r3, #2
 800ae78:	e7f4      	b.n	800ae64 <_printf_float+0x16c>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e7f2      	b.n	800ae64 <_printf_float+0x16c>
 800ae7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ae82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae84:	4299      	cmp	r1, r3
 800ae86:	db05      	blt.n	800ae94 <_printf_float+0x19c>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	6121      	str	r1, [r4, #16]
 800ae8c:	07d8      	lsls	r0, r3, #31
 800ae8e:	d5ea      	bpl.n	800ae66 <_printf_float+0x16e>
 800ae90:	1c4b      	adds	r3, r1, #1
 800ae92:	e7e7      	b.n	800ae64 <_printf_float+0x16c>
 800ae94:	2900      	cmp	r1, #0
 800ae96:	bfd4      	ite	le
 800ae98:	f1c1 0202 	rsble	r2, r1, #2
 800ae9c:	2201      	movgt	r2, #1
 800ae9e:	4413      	add	r3, r2
 800aea0:	e7e0      	b.n	800ae64 <_printf_float+0x16c>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	055a      	lsls	r2, r3, #21
 800aea6:	d407      	bmi.n	800aeb8 <_printf_float+0x1c0>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	4642      	mov	r2, r8
 800aeac:	4631      	mov	r1, r6
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b8      	blx	r7
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	d12a      	bne.n	800af0c <_printf_float+0x214>
 800aeb6:	e76b      	b.n	800ad90 <_printf_float+0x98>
 800aeb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aebc:	f240 80e0 	bls.w	800b080 <_printf_float+0x388>
 800aec0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aecc:	d133      	bne.n	800af36 <_printf_float+0x23e>
 800aece:	4a38      	ldr	r2, [pc, #224]	@ (800afb0 <_printf_float+0x2b8>)
 800aed0:	2301      	movs	r3, #1
 800aed2:	4631      	mov	r1, r6
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b8      	blx	r7
 800aed8:	3001      	adds	r0, #1
 800aeda:	f43f af59 	beq.w	800ad90 <_printf_float+0x98>
 800aede:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aee2:	4543      	cmp	r3, r8
 800aee4:	db02      	blt.n	800aeec <_printf_float+0x1f4>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	07d8      	lsls	r0, r3, #31
 800aeea:	d50f      	bpl.n	800af0c <_printf_float+0x214>
 800aeec:	9b05      	ldr	r3, [sp, #20]
 800aeee:	465a      	mov	r2, fp
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	f43f af4a 	beq.w	800ad90 <_printf_float+0x98>
 800aefc:	f04f 0900 	mov.w	r9, #0
 800af00:	f108 38ff 	add.w	r8, r8, #4294967295
 800af04:	f104 0a1a 	add.w	sl, r4, #26
 800af08:	45c8      	cmp	r8, r9
 800af0a:	dc09      	bgt.n	800af20 <_printf_float+0x228>
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	079b      	lsls	r3, r3, #30
 800af10:	f100 8107 	bmi.w	800b122 <_printf_float+0x42a>
 800af14:	68e0      	ldr	r0, [r4, #12]
 800af16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af18:	4298      	cmp	r0, r3
 800af1a:	bfb8      	it	lt
 800af1c:	4618      	movlt	r0, r3
 800af1e:	e739      	b.n	800ad94 <_printf_float+0x9c>
 800af20:	2301      	movs	r3, #1
 800af22:	4652      	mov	r2, sl
 800af24:	4631      	mov	r1, r6
 800af26:	4628      	mov	r0, r5
 800af28:	47b8      	blx	r7
 800af2a:	3001      	adds	r0, #1
 800af2c:	f43f af30 	beq.w	800ad90 <_printf_float+0x98>
 800af30:	f109 0901 	add.w	r9, r9, #1
 800af34:	e7e8      	b.n	800af08 <_printf_float+0x210>
 800af36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dc3b      	bgt.n	800afb4 <_printf_float+0x2bc>
 800af3c:	4a1c      	ldr	r2, [pc, #112]	@ (800afb0 <_printf_float+0x2b8>)
 800af3e:	2301      	movs	r3, #1
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	f43f af22 	beq.w	800ad90 <_printf_float+0x98>
 800af4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af50:	ea59 0303 	orrs.w	r3, r9, r3
 800af54:	d102      	bne.n	800af5c <_printf_float+0x264>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	07d9      	lsls	r1, r3, #31
 800af5a:	d5d7      	bpl.n	800af0c <_printf_float+0x214>
 800af5c:	9b05      	ldr	r3, [sp, #20]
 800af5e:	465a      	mov	r2, fp
 800af60:	4631      	mov	r1, r6
 800af62:	4628      	mov	r0, r5
 800af64:	47b8      	blx	r7
 800af66:	3001      	adds	r0, #1
 800af68:	f43f af12 	beq.w	800ad90 <_printf_float+0x98>
 800af6c:	f04f 0a00 	mov.w	sl, #0
 800af70:	f104 0b1a 	add.w	fp, r4, #26
 800af74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af76:	425b      	negs	r3, r3
 800af78:	4553      	cmp	r3, sl
 800af7a:	dc01      	bgt.n	800af80 <_printf_float+0x288>
 800af7c:	464b      	mov	r3, r9
 800af7e:	e794      	b.n	800aeaa <_printf_float+0x1b2>
 800af80:	2301      	movs	r3, #1
 800af82:	465a      	mov	r2, fp
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	47b8      	blx	r7
 800af8a:	3001      	adds	r0, #1
 800af8c:	f43f af00 	beq.w	800ad90 <_printf_float+0x98>
 800af90:	f10a 0a01 	add.w	sl, sl, #1
 800af94:	e7ee      	b.n	800af74 <_printf_float+0x27c>
 800af96:	bf00      	nop
 800af98:	ffffffff 	.word	0xffffffff
 800af9c:	7fefffff 	.word	0x7fefffff
 800afa0:	0800d614 	.word	0x0800d614
 800afa4:	0800d618 	.word	0x0800d618
 800afa8:	0800d61c 	.word	0x0800d61c
 800afac:	0800d620 	.word	0x0800d620
 800afb0:	0800d624 	.word	0x0800d624
 800afb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afba:	4553      	cmp	r3, sl
 800afbc:	bfa8      	it	ge
 800afbe:	4653      	movge	r3, sl
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	4699      	mov	r9, r3
 800afc4:	dc37      	bgt.n	800b036 <_printf_float+0x33e>
 800afc6:	2300      	movs	r3, #0
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afce:	f104 021a 	add.w	r2, r4, #26
 800afd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afd4:	9907      	ldr	r1, [sp, #28]
 800afd6:	9306      	str	r3, [sp, #24]
 800afd8:	eba3 0309 	sub.w	r3, r3, r9
 800afdc:	428b      	cmp	r3, r1
 800afde:	dc31      	bgt.n	800b044 <_printf_float+0x34c>
 800afe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe2:	459a      	cmp	sl, r3
 800afe4:	dc3b      	bgt.n	800b05e <_printf_float+0x366>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	07da      	lsls	r2, r3, #31
 800afea:	d438      	bmi.n	800b05e <_printf_float+0x366>
 800afec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afee:	ebaa 0903 	sub.w	r9, sl, r3
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	ebaa 0303 	sub.w	r3, sl, r3
 800aff8:	4599      	cmp	r9, r3
 800affa:	bfa8      	it	ge
 800affc:	4699      	movge	r9, r3
 800affe:	f1b9 0f00 	cmp.w	r9, #0
 800b002:	dc34      	bgt.n	800b06e <_printf_float+0x376>
 800b004:	f04f 0800 	mov.w	r8, #0
 800b008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b00c:	f104 0b1a 	add.w	fp, r4, #26
 800b010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b012:	ebaa 0303 	sub.w	r3, sl, r3
 800b016:	eba3 0309 	sub.w	r3, r3, r9
 800b01a:	4543      	cmp	r3, r8
 800b01c:	f77f af76 	ble.w	800af0c <_printf_float+0x214>
 800b020:	2301      	movs	r3, #1
 800b022:	465a      	mov	r2, fp
 800b024:	4631      	mov	r1, r6
 800b026:	4628      	mov	r0, r5
 800b028:	47b8      	blx	r7
 800b02a:	3001      	adds	r0, #1
 800b02c:	f43f aeb0 	beq.w	800ad90 <_printf_float+0x98>
 800b030:	f108 0801 	add.w	r8, r8, #1
 800b034:	e7ec      	b.n	800b010 <_printf_float+0x318>
 800b036:	4642      	mov	r2, r8
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	d1c1      	bne.n	800afc6 <_printf_float+0x2ce>
 800b042:	e6a5      	b.n	800ad90 <_printf_float+0x98>
 800b044:	2301      	movs	r3, #1
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	9206      	str	r2, [sp, #24]
 800b04c:	47b8      	blx	r7
 800b04e:	3001      	adds	r0, #1
 800b050:	f43f ae9e 	beq.w	800ad90 <_printf_float+0x98>
 800b054:	9b07      	ldr	r3, [sp, #28]
 800b056:	9a06      	ldr	r2, [sp, #24]
 800b058:	3301      	adds	r3, #1
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	e7b9      	b.n	800afd2 <_printf_float+0x2da>
 800b05e:	9b05      	ldr	r3, [sp, #20]
 800b060:	465a      	mov	r2, fp
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	d1bf      	bne.n	800afec <_printf_float+0x2f4>
 800b06c:	e690      	b.n	800ad90 <_printf_float+0x98>
 800b06e:	9a06      	ldr	r2, [sp, #24]
 800b070:	464b      	mov	r3, r9
 800b072:	4442      	add	r2, r8
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	47b8      	blx	r7
 800b07a:	3001      	adds	r0, #1
 800b07c:	d1c2      	bne.n	800b004 <_printf_float+0x30c>
 800b07e:	e687      	b.n	800ad90 <_printf_float+0x98>
 800b080:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b084:	f1b9 0f01 	cmp.w	r9, #1
 800b088:	dc01      	bgt.n	800b08e <_printf_float+0x396>
 800b08a:	07db      	lsls	r3, r3, #31
 800b08c:	d536      	bpl.n	800b0fc <_printf_float+0x404>
 800b08e:	2301      	movs	r3, #1
 800b090:	4642      	mov	r2, r8
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	47b8      	blx	r7
 800b098:	3001      	adds	r0, #1
 800b09a:	f43f ae79 	beq.w	800ad90 <_printf_float+0x98>
 800b09e:	9b05      	ldr	r3, [sp, #20]
 800b0a0:	465a      	mov	r2, fp
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f43f ae71 	beq.w	800ad90 <_printf_float+0x98>
 800b0ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b0b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0be:	d018      	beq.n	800b0f2 <_printf_float+0x3fa>
 800b0c0:	464b      	mov	r3, r9
 800b0c2:	f108 0201 	add.w	r2, r8, #1
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d10c      	bne.n	800b0ea <_printf_float+0x3f2>
 800b0d0:	e65e      	b.n	800ad90 <_printf_float+0x98>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	465a      	mov	r2, fp
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f ae57 	beq.w	800ad90 <_printf_float+0x98>
 800b0e2:	f108 0801 	add.w	r8, r8, #1
 800b0e6:	45c8      	cmp	r8, r9
 800b0e8:	dbf3      	blt.n	800b0d2 <_printf_float+0x3da>
 800b0ea:	4653      	mov	r3, sl
 800b0ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0f0:	e6dc      	b.n	800aeac <_printf_float+0x1b4>
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	f104 0b1a 	add.w	fp, r4, #26
 800b0fa:	e7f4      	b.n	800b0e6 <_printf_float+0x3ee>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4642      	mov	r2, r8
 800b100:	e7e1      	b.n	800b0c6 <_printf_float+0x3ce>
 800b102:	2301      	movs	r3, #1
 800b104:	464a      	mov	r2, r9
 800b106:	4631      	mov	r1, r6
 800b108:	4628      	mov	r0, r5
 800b10a:	47b8      	blx	r7
 800b10c:	3001      	adds	r0, #1
 800b10e:	f43f ae3f 	beq.w	800ad90 <_printf_float+0x98>
 800b112:	f108 0801 	add.w	r8, r8, #1
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b11a:	1a5b      	subs	r3, r3, r1
 800b11c:	4543      	cmp	r3, r8
 800b11e:	dcf0      	bgt.n	800b102 <_printf_float+0x40a>
 800b120:	e6f8      	b.n	800af14 <_printf_float+0x21c>
 800b122:	f04f 0800 	mov.w	r8, #0
 800b126:	f104 0919 	add.w	r9, r4, #25
 800b12a:	e7f4      	b.n	800b116 <_printf_float+0x41e>

0800b12c <_printf_common>:
 800b12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b130:	4616      	mov	r6, r2
 800b132:	4698      	mov	r8, r3
 800b134:	688a      	ldr	r2, [r1, #8]
 800b136:	690b      	ldr	r3, [r1, #16]
 800b138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b13c:	4293      	cmp	r3, r2
 800b13e:	bfb8      	it	lt
 800b140:	4613      	movlt	r3, r2
 800b142:	6033      	str	r3, [r6, #0]
 800b144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b148:	4607      	mov	r7, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	b10a      	cbz	r2, 800b152 <_printf_common+0x26>
 800b14e:	3301      	adds	r3, #1
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	0699      	lsls	r1, r3, #26
 800b156:	bf42      	ittt	mi
 800b158:	6833      	ldrmi	r3, [r6, #0]
 800b15a:	3302      	addmi	r3, #2
 800b15c:	6033      	strmi	r3, [r6, #0]
 800b15e:	6825      	ldr	r5, [r4, #0]
 800b160:	f015 0506 	ands.w	r5, r5, #6
 800b164:	d106      	bne.n	800b174 <_printf_common+0x48>
 800b166:	f104 0a19 	add.w	sl, r4, #25
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	6832      	ldr	r2, [r6, #0]
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	42ab      	cmp	r3, r5
 800b172:	dc26      	bgt.n	800b1c2 <_printf_common+0x96>
 800b174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	3b00      	subs	r3, #0
 800b17c:	bf18      	it	ne
 800b17e:	2301      	movne	r3, #1
 800b180:	0692      	lsls	r2, r2, #26
 800b182:	d42b      	bmi.n	800b1dc <_printf_common+0xb0>
 800b184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b188:	4641      	mov	r1, r8
 800b18a:	4638      	mov	r0, r7
 800b18c:	47c8      	blx	r9
 800b18e:	3001      	adds	r0, #1
 800b190:	d01e      	beq.n	800b1d0 <_printf_common+0xa4>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	6922      	ldr	r2, [r4, #16]
 800b196:	f003 0306 	and.w	r3, r3, #6
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	bf02      	ittt	eq
 800b19e:	68e5      	ldreq	r5, [r4, #12]
 800b1a0:	6833      	ldreq	r3, [r6, #0]
 800b1a2:	1aed      	subeq	r5, r5, r3
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	bf0c      	ite	eq
 800b1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1ac:	2500      	movne	r5, #0
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	bfc4      	itt	gt
 800b1b2:	1a9b      	subgt	r3, r3, r2
 800b1b4:	18ed      	addgt	r5, r5, r3
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	341a      	adds	r4, #26
 800b1ba:	42b5      	cmp	r5, r6
 800b1bc:	d11a      	bne.n	800b1f4 <_printf_common+0xc8>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e008      	b.n	800b1d4 <_printf_common+0xa8>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	47c8      	blx	r9
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d103      	bne.n	800b1d8 <_printf_common+0xac>
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d8:	3501      	adds	r5, #1
 800b1da:	e7c6      	b.n	800b16a <_printf_common+0x3e>
 800b1dc:	18e1      	adds	r1, r4, r3
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	2030      	movs	r0, #48	@ 0x30
 800b1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1e6:	4422      	add	r2, r4
 800b1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	e7c7      	b.n	800b184 <_printf_common+0x58>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	47c8      	blx	r9
 800b1fe:	3001      	adds	r0, #1
 800b200:	d0e6      	beq.n	800b1d0 <_printf_common+0xa4>
 800b202:	3601      	adds	r6, #1
 800b204:	e7d9      	b.n	800b1ba <_printf_common+0x8e>
	...

0800b208 <_printf_i>:
 800b208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b20c:	7e0f      	ldrb	r7, [r1, #24]
 800b20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b210:	2f78      	cmp	r7, #120	@ 0x78
 800b212:	4691      	mov	r9, r2
 800b214:	4680      	mov	r8, r0
 800b216:	460c      	mov	r4, r1
 800b218:	469a      	mov	sl, r3
 800b21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b21e:	d807      	bhi.n	800b230 <_printf_i+0x28>
 800b220:	2f62      	cmp	r7, #98	@ 0x62
 800b222:	d80a      	bhi.n	800b23a <_printf_i+0x32>
 800b224:	2f00      	cmp	r7, #0
 800b226:	f000 80d2 	beq.w	800b3ce <_printf_i+0x1c6>
 800b22a:	2f58      	cmp	r7, #88	@ 0x58
 800b22c:	f000 80b9 	beq.w	800b3a2 <_printf_i+0x19a>
 800b230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b238:	e03a      	b.n	800b2b0 <_printf_i+0xa8>
 800b23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b23e:	2b15      	cmp	r3, #21
 800b240:	d8f6      	bhi.n	800b230 <_printf_i+0x28>
 800b242:	a101      	add	r1, pc, #4	@ (adr r1, 800b248 <_printf_i+0x40>)
 800b244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b248:	0800b2a1 	.word	0x0800b2a1
 800b24c:	0800b2b5 	.word	0x0800b2b5
 800b250:	0800b231 	.word	0x0800b231
 800b254:	0800b231 	.word	0x0800b231
 800b258:	0800b231 	.word	0x0800b231
 800b25c:	0800b231 	.word	0x0800b231
 800b260:	0800b2b5 	.word	0x0800b2b5
 800b264:	0800b231 	.word	0x0800b231
 800b268:	0800b231 	.word	0x0800b231
 800b26c:	0800b231 	.word	0x0800b231
 800b270:	0800b231 	.word	0x0800b231
 800b274:	0800b3b5 	.word	0x0800b3b5
 800b278:	0800b2df 	.word	0x0800b2df
 800b27c:	0800b36f 	.word	0x0800b36f
 800b280:	0800b231 	.word	0x0800b231
 800b284:	0800b231 	.word	0x0800b231
 800b288:	0800b3d7 	.word	0x0800b3d7
 800b28c:	0800b231 	.word	0x0800b231
 800b290:	0800b2df 	.word	0x0800b2df
 800b294:	0800b231 	.word	0x0800b231
 800b298:	0800b231 	.word	0x0800b231
 800b29c:	0800b377 	.word	0x0800b377
 800b2a0:	6833      	ldr	r3, [r6, #0]
 800b2a2:	1d1a      	adds	r2, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6032      	str	r2, [r6, #0]
 800b2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e09d      	b.n	800b3f0 <_printf_i+0x1e8>
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	6820      	ldr	r0, [r4, #0]
 800b2b8:	1d19      	adds	r1, r3, #4
 800b2ba:	6031      	str	r1, [r6, #0]
 800b2bc:	0606      	lsls	r6, r0, #24
 800b2be:	d501      	bpl.n	800b2c4 <_printf_i+0xbc>
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	e003      	b.n	800b2cc <_printf_i+0xc4>
 800b2c4:	0645      	lsls	r5, r0, #25
 800b2c6:	d5fb      	bpl.n	800b2c0 <_printf_i+0xb8>
 800b2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	da03      	bge.n	800b2d8 <_printf_i+0xd0>
 800b2d0:	232d      	movs	r3, #45	@ 0x2d
 800b2d2:	426d      	negs	r5, r5
 800b2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d8:	4859      	ldr	r0, [pc, #356]	@ (800b440 <_printf_i+0x238>)
 800b2da:	230a      	movs	r3, #10
 800b2dc:	e011      	b.n	800b302 <_printf_i+0xfa>
 800b2de:	6821      	ldr	r1, [r4, #0]
 800b2e0:	6833      	ldr	r3, [r6, #0]
 800b2e2:	0608      	lsls	r0, r1, #24
 800b2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2e8:	d402      	bmi.n	800b2f0 <_printf_i+0xe8>
 800b2ea:	0649      	lsls	r1, r1, #25
 800b2ec:	bf48      	it	mi
 800b2ee:	b2ad      	uxthmi	r5, r5
 800b2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2f2:	4853      	ldr	r0, [pc, #332]	@ (800b440 <_printf_i+0x238>)
 800b2f4:	6033      	str	r3, [r6, #0]
 800b2f6:	bf14      	ite	ne
 800b2f8:	230a      	movne	r3, #10
 800b2fa:	2308      	moveq	r3, #8
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b302:	6866      	ldr	r6, [r4, #4]
 800b304:	60a6      	str	r6, [r4, #8]
 800b306:	2e00      	cmp	r6, #0
 800b308:	bfa2      	ittt	ge
 800b30a:	6821      	ldrge	r1, [r4, #0]
 800b30c:	f021 0104 	bicge.w	r1, r1, #4
 800b310:	6021      	strge	r1, [r4, #0]
 800b312:	b90d      	cbnz	r5, 800b318 <_printf_i+0x110>
 800b314:	2e00      	cmp	r6, #0
 800b316:	d04b      	beq.n	800b3b0 <_printf_i+0x1a8>
 800b318:	4616      	mov	r6, r2
 800b31a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b31e:	fb03 5711 	mls	r7, r3, r1, r5
 800b322:	5dc7      	ldrb	r7, [r0, r7]
 800b324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b328:	462f      	mov	r7, r5
 800b32a:	42bb      	cmp	r3, r7
 800b32c:	460d      	mov	r5, r1
 800b32e:	d9f4      	bls.n	800b31a <_printf_i+0x112>
 800b330:	2b08      	cmp	r3, #8
 800b332:	d10b      	bne.n	800b34c <_printf_i+0x144>
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	07df      	lsls	r7, r3, #31
 800b338:	d508      	bpl.n	800b34c <_printf_i+0x144>
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	6861      	ldr	r1, [r4, #4]
 800b33e:	4299      	cmp	r1, r3
 800b340:	bfde      	ittt	le
 800b342:	2330      	movle	r3, #48	@ 0x30
 800b344:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b34c:	1b92      	subs	r2, r2, r6
 800b34e:	6122      	str	r2, [r4, #16]
 800b350:	f8cd a000 	str.w	sl, [sp]
 800b354:	464b      	mov	r3, r9
 800b356:	aa03      	add	r2, sp, #12
 800b358:	4621      	mov	r1, r4
 800b35a:	4640      	mov	r0, r8
 800b35c:	f7ff fee6 	bl	800b12c <_printf_common>
 800b360:	3001      	adds	r0, #1
 800b362:	d14a      	bne.n	800b3fa <_printf_i+0x1f2>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	b004      	add	sp, #16
 800b36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	f043 0320 	orr.w	r3, r3, #32
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	4833      	ldr	r0, [pc, #204]	@ (800b444 <_printf_i+0x23c>)
 800b378:	2778      	movs	r7, #120	@ 0x78
 800b37a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	6831      	ldr	r1, [r6, #0]
 800b382:	061f      	lsls	r7, r3, #24
 800b384:	f851 5b04 	ldr.w	r5, [r1], #4
 800b388:	d402      	bmi.n	800b390 <_printf_i+0x188>
 800b38a:	065f      	lsls	r7, r3, #25
 800b38c:	bf48      	it	mi
 800b38e:	b2ad      	uxthmi	r5, r5
 800b390:	6031      	str	r1, [r6, #0]
 800b392:	07d9      	lsls	r1, r3, #31
 800b394:	bf44      	itt	mi
 800b396:	f043 0320 	orrmi.w	r3, r3, #32
 800b39a:	6023      	strmi	r3, [r4, #0]
 800b39c:	b11d      	cbz	r5, 800b3a6 <_printf_i+0x19e>
 800b39e:	2310      	movs	r3, #16
 800b3a0:	e7ac      	b.n	800b2fc <_printf_i+0xf4>
 800b3a2:	4827      	ldr	r0, [pc, #156]	@ (800b440 <_printf_i+0x238>)
 800b3a4:	e7e9      	b.n	800b37a <_printf_i+0x172>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	f023 0320 	bic.w	r3, r3, #32
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	e7f6      	b.n	800b39e <_printf_i+0x196>
 800b3b0:	4616      	mov	r6, r2
 800b3b2:	e7bd      	b.n	800b330 <_printf_i+0x128>
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	6825      	ldr	r5, [r4, #0]
 800b3b8:	6961      	ldr	r1, [r4, #20]
 800b3ba:	1d18      	adds	r0, r3, #4
 800b3bc:	6030      	str	r0, [r6, #0]
 800b3be:	062e      	lsls	r6, r5, #24
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	d501      	bpl.n	800b3c8 <_printf_i+0x1c0>
 800b3c4:	6019      	str	r1, [r3, #0]
 800b3c6:	e002      	b.n	800b3ce <_printf_i+0x1c6>
 800b3c8:	0668      	lsls	r0, r5, #25
 800b3ca:	d5fb      	bpl.n	800b3c4 <_printf_i+0x1bc>
 800b3cc:	8019      	strh	r1, [r3, #0]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6123      	str	r3, [r4, #16]
 800b3d2:	4616      	mov	r6, r2
 800b3d4:	e7bc      	b.n	800b350 <_printf_i+0x148>
 800b3d6:	6833      	ldr	r3, [r6, #0]
 800b3d8:	1d1a      	adds	r2, r3, #4
 800b3da:	6032      	str	r2, [r6, #0]
 800b3dc:	681e      	ldr	r6, [r3, #0]
 800b3de:	6862      	ldr	r2, [r4, #4]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7f4 ff2c 	bl	8000240 <memchr>
 800b3e8:	b108      	cbz	r0, 800b3ee <_printf_i+0x1e6>
 800b3ea:	1b80      	subs	r0, r0, r6
 800b3ec:	6060      	str	r0, [r4, #4]
 800b3ee:	6863      	ldr	r3, [r4, #4]
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f8:	e7aa      	b.n	800b350 <_printf_i+0x148>
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4649      	mov	r1, r9
 800b400:	4640      	mov	r0, r8
 800b402:	47d0      	blx	sl
 800b404:	3001      	adds	r0, #1
 800b406:	d0ad      	beq.n	800b364 <_printf_i+0x15c>
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	079b      	lsls	r3, r3, #30
 800b40c:	d413      	bmi.n	800b436 <_printf_i+0x22e>
 800b40e:	68e0      	ldr	r0, [r4, #12]
 800b410:	9b03      	ldr	r3, [sp, #12]
 800b412:	4298      	cmp	r0, r3
 800b414:	bfb8      	it	lt
 800b416:	4618      	movlt	r0, r3
 800b418:	e7a6      	b.n	800b368 <_printf_i+0x160>
 800b41a:	2301      	movs	r3, #1
 800b41c:	4632      	mov	r2, r6
 800b41e:	4649      	mov	r1, r9
 800b420:	4640      	mov	r0, r8
 800b422:	47d0      	blx	sl
 800b424:	3001      	adds	r0, #1
 800b426:	d09d      	beq.n	800b364 <_printf_i+0x15c>
 800b428:	3501      	adds	r5, #1
 800b42a:	68e3      	ldr	r3, [r4, #12]
 800b42c:	9903      	ldr	r1, [sp, #12]
 800b42e:	1a5b      	subs	r3, r3, r1
 800b430:	42ab      	cmp	r3, r5
 800b432:	dcf2      	bgt.n	800b41a <_printf_i+0x212>
 800b434:	e7eb      	b.n	800b40e <_printf_i+0x206>
 800b436:	2500      	movs	r5, #0
 800b438:	f104 0619 	add.w	r6, r4, #25
 800b43c:	e7f5      	b.n	800b42a <_printf_i+0x222>
 800b43e:	bf00      	nop
 800b440:	0800d626 	.word	0x0800d626
 800b444:	0800d637 	.word	0x0800d637

0800b448 <std>:
 800b448:	2300      	movs	r3, #0
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	e9c0 3300 	strd	r3, r3, [r0]
 800b452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b456:	6083      	str	r3, [r0, #8]
 800b458:	8181      	strh	r1, [r0, #12]
 800b45a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b45c:	81c2      	strh	r2, [r0, #14]
 800b45e:	6183      	str	r3, [r0, #24]
 800b460:	4619      	mov	r1, r3
 800b462:	2208      	movs	r2, #8
 800b464:	305c      	adds	r0, #92	@ 0x5c
 800b466:	f000 f9f9 	bl	800b85c <memset>
 800b46a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a0 <std+0x58>)
 800b46c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b46e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a4 <std+0x5c>)
 800b470:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b472:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a8 <std+0x60>)
 800b474:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b476:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ac <std+0x64>)
 800b478:	6323      	str	r3, [r4, #48]	@ 0x30
 800b47a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <std+0x68>)
 800b47c:	6224      	str	r4, [r4, #32]
 800b47e:	429c      	cmp	r4, r3
 800b480:	d006      	beq.n	800b490 <std+0x48>
 800b482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b486:	4294      	cmp	r4, r2
 800b488:	d002      	beq.n	800b490 <std+0x48>
 800b48a:	33d0      	adds	r3, #208	@ 0xd0
 800b48c:	429c      	cmp	r4, r3
 800b48e:	d105      	bne.n	800b49c <std+0x54>
 800b490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b498:	f000 ba6c 	b.w	800b974 <__retarget_lock_init_recursive>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	bf00      	nop
 800b4a0:	0800b6ad 	.word	0x0800b6ad
 800b4a4:	0800b6cf 	.word	0x0800b6cf
 800b4a8:	0800b707 	.word	0x0800b707
 800b4ac:	0800b72b 	.word	0x0800b72b
 800b4b0:	200020d4 	.word	0x200020d4

0800b4b4 <stdio_exit_handler>:
 800b4b4:	4a02      	ldr	r2, [pc, #8]	@ (800b4c0 <stdio_exit_handler+0xc>)
 800b4b6:	4903      	ldr	r1, [pc, #12]	@ (800b4c4 <stdio_exit_handler+0x10>)
 800b4b8:	4803      	ldr	r0, [pc, #12]	@ (800b4c8 <stdio_exit_handler+0x14>)
 800b4ba:	f000 b869 	b.w	800b590 <_fwalk_sglue>
 800b4be:	bf00      	nop
 800b4c0:	20000118 	.word	0x20000118
 800b4c4:	0800d079 	.word	0x0800d079
 800b4c8:	20000128 	.word	0x20000128

0800b4cc <cleanup_stdio>:
 800b4cc:	6841      	ldr	r1, [r0, #4]
 800b4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b500 <cleanup_stdio+0x34>)
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	d001      	beq.n	800b4dc <cleanup_stdio+0x10>
 800b4d8:	f001 fdce 	bl	800d078 <_fflush_r>
 800b4dc:	68a1      	ldr	r1, [r4, #8]
 800b4de:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <cleanup_stdio+0x38>)
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d002      	beq.n	800b4ea <cleanup_stdio+0x1e>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f001 fdc7 	bl	800d078 <_fflush_r>
 800b4ea:	68e1      	ldr	r1, [r4, #12]
 800b4ec:	4b06      	ldr	r3, [pc, #24]	@ (800b508 <cleanup_stdio+0x3c>)
 800b4ee:	4299      	cmp	r1, r3
 800b4f0:	d004      	beq.n	800b4fc <cleanup_stdio+0x30>
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f8:	f001 bdbe 	b.w	800d078 <_fflush_r>
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	bf00      	nop
 800b500:	200020d4 	.word	0x200020d4
 800b504:	2000213c 	.word	0x2000213c
 800b508:	200021a4 	.word	0x200021a4

0800b50c <global_stdio_init.part.0>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	4b0b      	ldr	r3, [pc, #44]	@ (800b53c <global_stdio_init.part.0+0x30>)
 800b510:	4c0b      	ldr	r4, [pc, #44]	@ (800b540 <global_stdio_init.part.0+0x34>)
 800b512:	4a0c      	ldr	r2, [pc, #48]	@ (800b544 <global_stdio_init.part.0+0x38>)
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	4620      	mov	r0, r4
 800b518:	2200      	movs	r2, #0
 800b51a:	2104      	movs	r1, #4
 800b51c:	f7ff ff94 	bl	800b448 <std>
 800b520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b524:	2201      	movs	r2, #1
 800b526:	2109      	movs	r1, #9
 800b528:	f7ff ff8e 	bl	800b448 <std>
 800b52c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b530:	2202      	movs	r2, #2
 800b532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b536:	2112      	movs	r1, #18
 800b538:	f7ff bf86 	b.w	800b448 <std>
 800b53c:	2000220c 	.word	0x2000220c
 800b540:	200020d4 	.word	0x200020d4
 800b544:	0800b4b5 	.word	0x0800b4b5

0800b548 <__sfp_lock_acquire>:
 800b548:	4801      	ldr	r0, [pc, #4]	@ (800b550 <__sfp_lock_acquire+0x8>)
 800b54a:	f000 ba14 	b.w	800b976 <__retarget_lock_acquire_recursive>
 800b54e:	bf00      	nop
 800b550:	20002215 	.word	0x20002215

0800b554 <__sfp_lock_release>:
 800b554:	4801      	ldr	r0, [pc, #4]	@ (800b55c <__sfp_lock_release+0x8>)
 800b556:	f000 ba0f 	b.w	800b978 <__retarget_lock_release_recursive>
 800b55a:	bf00      	nop
 800b55c:	20002215 	.word	0x20002215

0800b560 <__sinit>:
 800b560:	b510      	push	{r4, lr}
 800b562:	4604      	mov	r4, r0
 800b564:	f7ff fff0 	bl	800b548 <__sfp_lock_acquire>
 800b568:	6a23      	ldr	r3, [r4, #32]
 800b56a:	b11b      	cbz	r3, 800b574 <__sinit+0x14>
 800b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b570:	f7ff bff0 	b.w	800b554 <__sfp_lock_release>
 800b574:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <__sinit+0x28>)
 800b576:	6223      	str	r3, [r4, #32]
 800b578:	4b04      	ldr	r3, [pc, #16]	@ (800b58c <__sinit+0x2c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f5      	bne.n	800b56c <__sinit+0xc>
 800b580:	f7ff ffc4 	bl	800b50c <global_stdio_init.part.0>
 800b584:	e7f2      	b.n	800b56c <__sinit+0xc>
 800b586:	bf00      	nop
 800b588:	0800b4cd 	.word	0x0800b4cd
 800b58c:	2000220c 	.word	0x2000220c

0800b590 <_fwalk_sglue>:
 800b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b594:	4607      	mov	r7, r0
 800b596:	4688      	mov	r8, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	2600      	movs	r6, #0
 800b59c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5a0:	f1b9 0901 	subs.w	r9, r9, #1
 800b5a4:	d505      	bpl.n	800b5b2 <_fwalk_sglue+0x22>
 800b5a6:	6824      	ldr	r4, [r4, #0]
 800b5a8:	2c00      	cmp	r4, #0
 800b5aa:	d1f7      	bne.n	800b59c <_fwalk_sglue+0xc>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	89ab      	ldrh	r3, [r5, #12]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d907      	bls.n	800b5c8 <_fwalk_sglue+0x38>
 800b5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	d003      	beq.n	800b5c8 <_fwalk_sglue+0x38>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	47c0      	blx	r8
 800b5c6:	4306      	orrs	r6, r0
 800b5c8:	3568      	adds	r5, #104	@ 0x68
 800b5ca:	e7e9      	b.n	800b5a0 <_fwalk_sglue+0x10>

0800b5cc <iprintf>:
 800b5cc:	b40f      	push	{r0, r1, r2, r3}
 800b5ce:	b507      	push	{r0, r1, r2, lr}
 800b5d0:	4906      	ldr	r1, [pc, #24]	@ (800b5ec <iprintf+0x20>)
 800b5d2:	ab04      	add	r3, sp, #16
 800b5d4:	6808      	ldr	r0, [r1, #0]
 800b5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5da:	6881      	ldr	r1, [r0, #8]
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	f001 fbaf 	bl	800cd40 <_vfiprintf_r>
 800b5e2:	b003      	add	sp, #12
 800b5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e8:	b004      	add	sp, #16
 800b5ea:	4770      	bx	lr
 800b5ec:	20000124 	.word	0x20000124

0800b5f0 <_puts_r>:
 800b5f0:	6a03      	ldr	r3, [r0, #32]
 800b5f2:	b570      	push	{r4, r5, r6, lr}
 800b5f4:	6884      	ldr	r4, [r0, #8]
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	b90b      	cbnz	r3, 800b600 <_puts_r+0x10>
 800b5fc:	f7ff ffb0 	bl	800b560 <__sinit>
 800b600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b602:	07db      	lsls	r3, r3, #31
 800b604:	d405      	bmi.n	800b612 <_puts_r+0x22>
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	0598      	lsls	r0, r3, #22
 800b60a:	d402      	bmi.n	800b612 <_puts_r+0x22>
 800b60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b60e:	f000 f9b2 	bl	800b976 <__retarget_lock_acquire_recursive>
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	0719      	lsls	r1, r3, #28
 800b616:	d502      	bpl.n	800b61e <_puts_r+0x2e>
 800b618:	6923      	ldr	r3, [r4, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d135      	bne.n	800b68a <_puts_r+0x9a>
 800b61e:	4621      	mov	r1, r4
 800b620:	4628      	mov	r0, r5
 800b622:	f000 f8c5 	bl	800b7b0 <__swsetup_r>
 800b626:	b380      	cbz	r0, 800b68a <_puts_r+0x9a>
 800b628:	f04f 35ff 	mov.w	r5, #4294967295
 800b62c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b62e:	07da      	lsls	r2, r3, #31
 800b630:	d405      	bmi.n	800b63e <_puts_r+0x4e>
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	059b      	lsls	r3, r3, #22
 800b636:	d402      	bmi.n	800b63e <_puts_r+0x4e>
 800b638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b63a:	f000 f99d 	bl	800b978 <__retarget_lock_release_recursive>
 800b63e:	4628      	mov	r0, r5
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	2b00      	cmp	r3, #0
 800b644:	da04      	bge.n	800b650 <_puts_r+0x60>
 800b646:	69a2      	ldr	r2, [r4, #24]
 800b648:	429a      	cmp	r2, r3
 800b64a:	dc17      	bgt.n	800b67c <_puts_r+0x8c>
 800b64c:	290a      	cmp	r1, #10
 800b64e:	d015      	beq.n	800b67c <_puts_r+0x8c>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	6022      	str	r2, [r4, #0]
 800b656:	7019      	strb	r1, [r3, #0]
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b65e:	3b01      	subs	r3, #1
 800b660:	60a3      	str	r3, [r4, #8]
 800b662:	2900      	cmp	r1, #0
 800b664:	d1ed      	bne.n	800b642 <_puts_r+0x52>
 800b666:	2b00      	cmp	r3, #0
 800b668:	da11      	bge.n	800b68e <_puts_r+0x9e>
 800b66a:	4622      	mov	r2, r4
 800b66c:	210a      	movs	r1, #10
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 f85f 	bl	800b732 <__swbuf_r>
 800b674:	3001      	adds	r0, #1
 800b676:	d0d7      	beq.n	800b628 <_puts_r+0x38>
 800b678:	250a      	movs	r5, #10
 800b67a:	e7d7      	b.n	800b62c <_puts_r+0x3c>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 f857 	bl	800b732 <__swbuf_r>
 800b684:	3001      	adds	r0, #1
 800b686:	d1e7      	bne.n	800b658 <_puts_r+0x68>
 800b688:	e7ce      	b.n	800b628 <_puts_r+0x38>
 800b68a:	3e01      	subs	r6, #1
 800b68c:	e7e4      	b.n	800b658 <_puts_r+0x68>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	6022      	str	r2, [r4, #0]
 800b694:	220a      	movs	r2, #10
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	e7ee      	b.n	800b678 <_puts_r+0x88>
	...

0800b69c <puts>:
 800b69c:	4b02      	ldr	r3, [pc, #8]	@ (800b6a8 <puts+0xc>)
 800b69e:	4601      	mov	r1, r0
 800b6a0:	6818      	ldr	r0, [r3, #0]
 800b6a2:	f7ff bfa5 	b.w	800b5f0 <_puts_r>
 800b6a6:	bf00      	nop
 800b6a8:	20000124 	.word	0x20000124

0800b6ac <__sread>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	f000 f900 	bl	800b8b8 <_read_r>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	bfab      	itete	ge
 800b6bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6be:	89a3      	ldrhlt	r3, [r4, #12]
 800b6c0:	181b      	addge	r3, r3, r0
 800b6c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6c6:	bfac      	ite	ge
 800b6c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6ca:	81a3      	strhlt	r3, [r4, #12]
 800b6cc:	bd10      	pop	{r4, pc}

0800b6ce <__swrite>:
 800b6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d2:	461f      	mov	r7, r3
 800b6d4:	898b      	ldrh	r3, [r1, #12]
 800b6d6:	05db      	lsls	r3, r3, #23
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	4616      	mov	r6, r2
 800b6de:	d505      	bpl.n	800b6ec <__swrite+0x1e>
 800b6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f000 f8d4 	bl	800b894 <_lseek_r>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	463b      	mov	r3, r7
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	f000 b8fb 	b.w	800b8fc <_write_r>

0800b706 <__sseek>:
 800b706:	b510      	push	{r4, lr}
 800b708:	460c      	mov	r4, r1
 800b70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70e:	f000 f8c1 	bl	800b894 <_lseek_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	bf15      	itete	ne
 800b718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b71a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b71e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b722:	81a3      	strheq	r3, [r4, #12]
 800b724:	bf18      	it	ne
 800b726:	81a3      	strhne	r3, [r4, #12]
 800b728:	bd10      	pop	{r4, pc}

0800b72a <__sclose>:
 800b72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72e:	f000 b8a1 	b.w	800b874 <_close_r>

0800b732 <__swbuf_r>:
 800b732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b734:	460e      	mov	r6, r1
 800b736:	4614      	mov	r4, r2
 800b738:	4605      	mov	r5, r0
 800b73a:	b118      	cbz	r0, 800b744 <__swbuf_r+0x12>
 800b73c:	6a03      	ldr	r3, [r0, #32]
 800b73e:	b90b      	cbnz	r3, 800b744 <__swbuf_r+0x12>
 800b740:	f7ff ff0e 	bl	800b560 <__sinit>
 800b744:	69a3      	ldr	r3, [r4, #24]
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	071a      	lsls	r2, r3, #28
 800b74c:	d501      	bpl.n	800b752 <__swbuf_r+0x20>
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	b943      	cbnz	r3, 800b764 <__swbuf_r+0x32>
 800b752:	4621      	mov	r1, r4
 800b754:	4628      	mov	r0, r5
 800b756:	f000 f82b 	bl	800b7b0 <__swsetup_r>
 800b75a:	b118      	cbz	r0, 800b764 <__swbuf_r+0x32>
 800b75c:	f04f 37ff 	mov.w	r7, #4294967295
 800b760:	4638      	mov	r0, r7
 800b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	6922      	ldr	r2, [r4, #16]
 800b768:	1a98      	subs	r0, r3, r2
 800b76a:	6963      	ldr	r3, [r4, #20]
 800b76c:	b2f6      	uxtb	r6, r6
 800b76e:	4283      	cmp	r3, r0
 800b770:	4637      	mov	r7, r6
 800b772:	dc05      	bgt.n	800b780 <__swbuf_r+0x4e>
 800b774:	4621      	mov	r1, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f001 fc7e 	bl	800d078 <_fflush_r>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d1ed      	bne.n	800b75c <__swbuf_r+0x2a>
 800b780:	68a3      	ldr	r3, [r4, #8]
 800b782:	3b01      	subs	r3, #1
 800b784:	60a3      	str	r3, [r4, #8]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	701e      	strb	r6, [r3, #0]
 800b78e:	6962      	ldr	r2, [r4, #20]
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	429a      	cmp	r2, r3
 800b794:	d004      	beq.n	800b7a0 <__swbuf_r+0x6e>
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	07db      	lsls	r3, r3, #31
 800b79a:	d5e1      	bpl.n	800b760 <__swbuf_r+0x2e>
 800b79c:	2e0a      	cmp	r6, #10
 800b79e:	d1df      	bne.n	800b760 <__swbuf_r+0x2e>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f001 fc68 	bl	800d078 <_fflush_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d0d9      	beq.n	800b760 <__swbuf_r+0x2e>
 800b7ac:	e7d6      	b.n	800b75c <__swbuf_r+0x2a>
	...

0800b7b0 <__swsetup_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4b29      	ldr	r3, [pc, #164]	@ (800b858 <__swsetup_r+0xa8>)
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	b118      	cbz	r0, 800b7c4 <__swsetup_r+0x14>
 800b7bc:	6a03      	ldr	r3, [r0, #32]
 800b7be:	b90b      	cbnz	r3, 800b7c4 <__swsetup_r+0x14>
 800b7c0:	f7ff fece 	bl	800b560 <__sinit>
 800b7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c8:	0719      	lsls	r1, r3, #28
 800b7ca:	d422      	bmi.n	800b812 <__swsetup_r+0x62>
 800b7cc:	06da      	lsls	r2, r3, #27
 800b7ce:	d407      	bmi.n	800b7e0 <__swsetup_r+0x30>
 800b7d0:	2209      	movs	r2, #9
 800b7d2:	602a      	str	r2, [r5, #0]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	e033      	b.n	800b848 <__swsetup_r+0x98>
 800b7e0:	0758      	lsls	r0, r3, #29
 800b7e2:	d512      	bpl.n	800b80a <__swsetup_r+0x5a>
 800b7e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e6:	b141      	cbz	r1, 800b7fa <__swsetup_r+0x4a>
 800b7e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7ec:	4299      	cmp	r1, r3
 800b7ee:	d002      	beq.n	800b7f6 <__swsetup_r+0x46>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 feaf 	bl	800c554 <_free_r>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	2300      	movs	r3, #0
 800b804:	6063      	str	r3, [r4, #4]
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f043 0308 	orr.w	r3, r3, #8
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	b94b      	cbnz	r3, 800b82a <__swsetup_r+0x7a>
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b81c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b820:	d003      	beq.n	800b82a <__swsetup_r+0x7a>
 800b822:	4621      	mov	r1, r4
 800b824:	4628      	mov	r0, r5
 800b826:	f001 fc75 	bl	800d114 <__smakebuf_r>
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	f013 0201 	ands.w	r2, r3, #1
 800b832:	d00a      	beq.n	800b84a <__swsetup_r+0x9a>
 800b834:	2200      	movs	r2, #0
 800b836:	60a2      	str	r2, [r4, #8]
 800b838:	6962      	ldr	r2, [r4, #20]
 800b83a:	4252      	negs	r2, r2
 800b83c:	61a2      	str	r2, [r4, #24]
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	b942      	cbnz	r2, 800b854 <__swsetup_r+0xa4>
 800b842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b846:	d1c5      	bne.n	800b7d4 <__swsetup_r+0x24>
 800b848:	bd38      	pop	{r3, r4, r5, pc}
 800b84a:	0799      	lsls	r1, r3, #30
 800b84c:	bf58      	it	pl
 800b84e:	6962      	ldrpl	r2, [r4, #20]
 800b850:	60a2      	str	r2, [r4, #8]
 800b852:	e7f4      	b.n	800b83e <__swsetup_r+0x8e>
 800b854:	2000      	movs	r0, #0
 800b856:	e7f7      	b.n	800b848 <__swsetup_r+0x98>
 800b858:	20000124 	.word	0x20000124

0800b85c <memset>:
 800b85c:	4402      	add	r2, r0
 800b85e:	4603      	mov	r3, r0
 800b860:	4293      	cmp	r3, r2
 800b862:	d100      	bne.n	800b866 <memset+0xa>
 800b864:	4770      	bx	lr
 800b866:	f803 1b01 	strb.w	r1, [r3], #1
 800b86a:	e7f9      	b.n	800b860 <memset+0x4>

0800b86c <_localeconv_r>:
 800b86c:	4800      	ldr	r0, [pc, #0]	@ (800b870 <_localeconv_r+0x4>)
 800b86e:	4770      	bx	lr
 800b870:	20000264 	.word	0x20000264

0800b874 <_close_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	@ (800b890 <_close_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f5 feee 	bl	8001660 <_close>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_close_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_close_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	20002210 	.word	0x20002210

0800b894 <_lseek_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	@ (800b8b4 <_lseek_r+0x20>)
 800b898:	4604      	mov	r4, r0
 800b89a:	4608      	mov	r0, r1
 800b89c:	4611      	mov	r1, r2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	602a      	str	r2, [r5, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f7f5 ff03 	bl	80016ae <_lseek>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d102      	bne.n	800b8b2 <_lseek_r+0x1e>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	b103      	cbz	r3, 800b8b2 <_lseek_r+0x1e>
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	bd38      	pop	{r3, r4, r5, pc}
 800b8b4:	20002210 	.word	0x20002210

0800b8b8 <_read_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	@ (800b8d8 <_read_r+0x20>)
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f7f5 fead 	bl	8001626 <_read>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_read_r+0x1e>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_read_r+0x1e>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20002210 	.word	0x20002210

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	@ (800b8f8 <_sbrk_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f5 feee 	bl	80016c8 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20002210 	.word	0x20002210

0800b8fc <_write_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4d07      	ldr	r5, [pc, #28]	@ (800b91c <_write_r+0x20>)
 800b900:	4604      	mov	r4, r0
 800b902:	4608      	mov	r0, r1
 800b904:	4611      	mov	r1, r2
 800b906:	2200      	movs	r2, #0
 800b908:	602a      	str	r2, [r5, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	f7f5 fbf8 	bl	8001100 <_write>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_write_r+0x1e>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_write_r+0x1e>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20002210 	.word	0x20002210

0800b920 <__errno>:
 800b920:	4b01      	ldr	r3, [pc, #4]	@ (800b928 <__errno+0x8>)
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	20000124 	.word	0x20000124

0800b92c <__libc_init_array>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	4d0d      	ldr	r5, [pc, #52]	@ (800b964 <__libc_init_array+0x38>)
 800b930:	4c0d      	ldr	r4, [pc, #52]	@ (800b968 <__libc_init_array+0x3c>)
 800b932:	1b64      	subs	r4, r4, r5
 800b934:	10a4      	asrs	r4, r4, #2
 800b936:	2600      	movs	r6, #0
 800b938:	42a6      	cmp	r6, r4
 800b93a:	d109      	bne.n	800b950 <__libc_init_array+0x24>
 800b93c:	4d0b      	ldr	r5, [pc, #44]	@ (800b96c <__libc_init_array+0x40>)
 800b93e:	4c0c      	ldr	r4, [pc, #48]	@ (800b970 <__libc_init_array+0x44>)
 800b940:	f001 fcf6 	bl	800d330 <_init>
 800b944:	1b64      	subs	r4, r4, r5
 800b946:	10a4      	asrs	r4, r4, #2
 800b948:	2600      	movs	r6, #0
 800b94a:	42a6      	cmp	r6, r4
 800b94c:	d105      	bne.n	800b95a <__libc_init_array+0x2e>
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	f855 3b04 	ldr.w	r3, [r5], #4
 800b954:	4798      	blx	r3
 800b956:	3601      	adds	r6, #1
 800b958:	e7ee      	b.n	800b938 <__libc_init_array+0xc>
 800b95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95e:	4798      	blx	r3
 800b960:	3601      	adds	r6, #1
 800b962:	e7f2      	b.n	800b94a <__libc_init_array+0x1e>
 800b964:	0800d990 	.word	0x0800d990
 800b968:	0800d990 	.word	0x0800d990
 800b96c:	0800d990 	.word	0x0800d990
 800b970:	0800d994 	.word	0x0800d994

0800b974 <__retarget_lock_init_recursive>:
 800b974:	4770      	bx	lr

0800b976 <__retarget_lock_acquire_recursive>:
 800b976:	4770      	bx	lr

0800b978 <__retarget_lock_release_recursive>:
 800b978:	4770      	bx	lr

0800b97a <memcpy>:
 800b97a:	440a      	add	r2, r1
 800b97c:	4291      	cmp	r1, r2
 800b97e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b982:	d100      	bne.n	800b986 <memcpy+0xc>
 800b984:	4770      	bx	lr
 800b986:	b510      	push	{r4, lr}
 800b988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b990:	4291      	cmp	r1, r2
 800b992:	d1f9      	bne.n	800b988 <memcpy+0xe>
 800b994:	bd10      	pop	{r4, pc}

0800b996 <quorem>:
 800b996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99a:	6903      	ldr	r3, [r0, #16]
 800b99c:	690c      	ldr	r4, [r1, #16]
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	db7e      	blt.n	800baa2 <quorem+0x10c>
 800b9a4:	3c01      	subs	r4, #1
 800b9a6:	f101 0814 	add.w	r8, r1, #20
 800b9aa:	00a3      	lsls	r3, r4, #2
 800b9ac:	f100 0514 	add.w	r5, r0, #20
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9b6:	9301      	str	r3, [sp, #4]
 800b9b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9cc:	d32e      	bcc.n	800ba2c <quorem+0x96>
 800b9ce:	f04f 0a00 	mov.w	sl, #0
 800b9d2:	46c4      	mov	ip, r8
 800b9d4:	46ae      	mov	lr, r5
 800b9d6:	46d3      	mov	fp, sl
 800b9d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9dc:	b298      	uxth	r0, r3
 800b9de:	fb06 a000 	mla	r0, r6, r0, sl
 800b9e2:	0c02      	lsrs	r2, r0, #16
 800b9e4:	0c1b      	lsrs	r3, r3, #16
 800b9e6:	fb06 2303 	mla	r3, r6, r3, r2
 800b9ea:	f8de 2000 	ldr.w	r2, [lr]
 800b9ee:	b280      	uxth	r0, r0
 800b9f0:	b292      	uxth	r2, r2
 800b9f2:	1a12      	subs	r2, r2, r0
 800b9f4:	445a      	add	r2, fp
 800b9f6:	f8de 0000 	ldr.w	r0, [lr]
 800b9fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba08:	b292      	uxth	r2, r2
 800ba0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba0e:	45e1      	cmp	r9, ip
 800ba10:	f84e 2b04 	str.w	r2, [lr], #4
 800ba14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba18:	d2de      	bcs.n	800b9d8 <quorem+0x42>
 800ba1a:	9b00      	ldr	r3, [sp, #0]
 800ba1c:	58eb      	ldr	r3, [r5, r3]
 800ba1e:	b92b      	cbnz	r3, 800ba2c <quorem+0x96>
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	429d      	cmp	r5, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	d32f      	bcc.n	800ba8a <quorem+0xf4>
 800ba2a:	613c      	str	r4, [r7, #16]
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	f001 f855 	bl	800cadc <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	db25      	blt.n	800ba82 <quorem+0xec>
 800ba36:	4629      	mov	r1, r5
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba3e:	f8d1 c000 	ldr.w	ip, [r1]
 800ba42:	fa1f fe82 	uxth.w	lr, r2
 800ba46:	fa1f f38c 	uxth.w	r3, ip
 800ba4a:	eba3 030e 	sub.w	r3, r3, lr
 800ba4e:	4403      	add	r3, r0
 800ba50:	0c12      	lsrs	r2, r2, #16
 800ba52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba60:	45c1      	cmp	r9, r8
 800ba62:	f841 3b04 	str.w	r3, [r1], #4
 800ba66:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba6a:	d2e6      	bcs.n	800ba3a <quorem+0xa4>
 800ba6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba74:	b922      	cbnz	r2, 800ba80 <quorem+0xea>
 800ba76:	3b04      	subs	r3, #4
 800ba78:	429d      	cmp	r5, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	d30b      	bcc.n	800ba96 <quorem+0x100>
 800ba7e:	613c      	str	r4, [r7, #16]
 800ba80:	3601      	adds	r6, #1
 800ba82:	4630      	mov	r0, r6
 800ba84:	b003      	add	sp, #12
 800ba86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8a:	6812      	ldr	r2, [r2, #0]
 800ba8c:	3b04      	subs	r3, #4
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	d1cb      	bne.n	800ba2a <quorem+0x94>
 800ba92:	3c01      	subs	r4, #1
 800ba94:	e7c6      	b.n	800ba24 <quorem+0x8e>
 800ba96:	6812      	ldr	r2, [r2, #0]
 800ba98:	3b04      	subs	r3, #4
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	d1ef      	bne.n	800ba7e <quorem+0xe8>
 800ba9e:	3c01      	subs	r4, #1
 800baa0:	e7ea      	b.n	800ba78 <quorem+0xe2>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e7ee      	b.n	800ba84 <quorem+0xee>
	...

0800baa8 <_dtoa_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	ed2d 8b02 	vpush	{d8}
 800bab0:	69c7      	ldr	r7, [r0, #28]
 800bab2:	b091      	sub	sp, #68	@ 0x44
 800bab4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bab8:	ec55 4b10 	vmov	r4, r5, d0
 800babc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800babe:	9107      	str	r1, [sp, #28]
 800bac0:	4681      	mov	r9, r0
 800bac2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bac6:	b97f      	cbnz	r7, 800bae8 <_dtoa_r+0x40>
 800bac8:	2010      	movs	r0, #16
 800baca:	f7fe ffc7 	bl	800aa5c <malloc>
 800bace:	4602      	mov	r2, r0
 800bad0:	f8c9 001c 	str.w	r0, [r9, #28]
 800bad4:	b920      	cbnz	r0, 800bae0 <_dtoa_r+0x38>
 800bad6:	4ba0      	ldr	r3, [pc, #640]	@ (800bd58 <_dtoa_r+0x2b0>)
 800bad8:	21ef      	movs	r1, #239	@ 0xef
 800bada:	48a0      	ldr	r0, [pc, #640]	@ (800bd5c <_dtoa_r+0x2b4>)
 800badc:	f001 fb78 	bl	800d1d0 <__assert_func>
 800bae0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bae4:	6007      	str	r7, [r0, #0]
 800bae6:	60c7      	str	r7, [r0, #12]
 800bae8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800baec:	6819      	ldr	r1, [r3, #0]
 800baee:	b159      	cbz	r1, 800bb08 <_dtoa_r+0x60>
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	604a      	str	r2, [r1, #4]
 800baf4:	2301      	movs	r3, #1
 800baf6:	4093      	lsls	r3, r2
 800baf8:	608b      	str	r3, [r1, #8]
 800bafa:	4648      	mov	r0, r9
 800bafc:	f000 fdb4 	bl	800c668 <_Bfree>
 800bb00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb04:	2200      	movs	r2, #0
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	1e2b      	subs	r3, r5, #0
 800bb0a:	bfbb      	ittet	lt
 800bb0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb10:	9303      	strlt	r3, [sp, #12]
 800bb12:	2300      	movge	r3, #0
 800bb14:	2201      	movlt	r2, #1
 800bb16:	bfac      	ite	ge
 800bb18:	6033      	strge	r3, [r6, #0]
 800bb1a:	6032      	strlt	r2, [r6, #0]
 800bb1c:	4b90      	ldr	r3, [pc, #576]	@ (800bd60 <_dtoa_r+0x2b8>)
 800bb1e:	9e03      	ldr	r6, [sp, #12]
 800bb20:	43b3      	bics	r3, r6
 800bb22:	d110      	bne.n	800bb46 <_dtoa_r+0x9e>
 800bb24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb26:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bb30:	4323      	orrs	r3, r4
 800bb32:	f000 84de 	beq.w	800c4f2 <_dtoa_r+0xa4a>
 800bb36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb38:	4f8a      	ldr	r7, [pc, #552]	@ (800bd64 <_dtoa_r+0x2bc>)
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 84e0 	beq.w	800c500 <_dtoa_r+0xa58>
 800bb40:	1cfb      	adds	r3, r7, #3
 800bb42:	f000 bcdb 	b.w	800c4fc <_dtoa_r+0xa54>
 800bb46:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bb4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb52:	d10a      	bne.n	800bb6a <_dtoa_r+0xc2>
 800bb54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb56:	2301      	movs	r3, #1
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb5c:	b113      	cbz	r3, 800bb64 <_dtoa_r+0xbc>
 800bb5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bb60:	4b81      	ldr	r3, [pc, #516]	@ (800bd68 <_dtoa_r+0x2c0>)
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	4f81      	ldr	r7, [pc, #516]	@ (800bd6c <_dtoa_r+0x2c4>)
 800bb66:	f000 bccb 	b.w	800c500 <_dtoa_r+0xa58>
 800bb6a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bb6c:	a90f      	add	r1, sp, #60	@ 0x3c
 800bb6e:	4648      	mov	r0, r9
 800bb70:	eeb0 0b48 	vmov.f64	d0, d8
 800bb74:	f001 f862 	bl	800cc3c <__d2b>
 800bb78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bb7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb7e:	9001      	str	r0, [sp, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d045      	beq.n	800bc10 <_dtoa_r+0x168>
 800bb84:	eeb0 7b48 	vmov.f64	d7, d8
 800bb88:	ee18 1a90 	vmov	r1, s17
 800bb8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bb94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bb98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bb9c:	2500      	movs	r5, #0
 800bb9e:	ee07 1a90 	vmov	s15, r1
 800bba2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bba6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bd40 <_dtoa_r+0x298>
 800bbaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bbae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bd48 <_dtoa_r+0x2a0>
 800bbb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bbb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bd50 <_dtoa_r+0x2a8>
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bbc2:	eeb0 7b46 	vmov.f64	d7, d6
 800bbc6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bbca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bbce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	ee16 8a90 	vmov	r8, s13
 800bbda:	d508      	bpl.n	800bbee <_dtoa_r+0x146>
 800bbdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bbe0:	eeb4 6b47 	vcmp.f64	d6, d7
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	bf18      	it	ne
 800bbea:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bbee:	f1b8 0f16 	cmp.w	r8, #22
 800bbf2:	d82b      	bhi.n	800bc4c <_dtoa_r+0x1a4>
 800bbf4:	495e      	ldr	r1, [pc, #376]	@ (800bd70 <_dtoa_r+0x2c8>)
 800bbf6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bbfa:	ed91 7b00 	vldr	d7, [r1]
 800bbfe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc06:	d501      	bpl.n	800bc0c <_dtoa_r+0x164>
 800bc08:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	e01e      	b.n	800bc4e <_dtoa_r+0x1a6>
 800bc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc12:	4413      	add	r3, r2
 800bc14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bc18:	2920      	cmp	r1, #32
 800bc1a:	bfc1      	itttt	gt
 800bc1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bc20:	408e      	lslgt	r6, r1
 800bc22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bc26:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bc2a:	bfd6      	itet	le
 800bc2c:	f1c1 0120 	rsble	r1, r1, #32
 800bc30:	4331      	orrgt	r1, r6
 800bc32:	fa04 f101 	lslle.w	r1, r4, r1
 800bc36:	ee07 1a90 	vmov	s15, r1
 800bc3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	ee17 1a90 	vmov	r1, s15
 800bc44:	2501      	movs	r5, #1
 800bc46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bc4a:	e7a8      	b.n	800bb9e <_dtoa_r+0xf6>
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	1ad2      	subs	r2, r2, r3
 800bc50:	1e53      	subs	r3, r2, #1
 800bc52:	9306      	str	r3, [sp, #24]
 800bc54:	bf45      	ittet	mi
 800bc56:	f1c2 0301 	rsbmi	r3, r2, #1
 800bc5a:	9305      	strmi	r3, [sp, #20]
 800bc5c:	2300      	movpl	r3, #0
 800bc5e:	2300      	movmi	r3, #0
 800bc60:	bf4c      	ite	mi
 800bc62:	9306      	strmi	r3, [sp, #24]
 800bc64:	9305      	strpl	r3, [sp, #20]
 800bc66:	f1b8 0f00 	cmp.w	r8, #0
 800bc6a:	910c      	str	r1, [sp, #48]	@ 0x30
 800bc6c:	db18      	blt.n	800bca0 <_dtoa_r+0x1f8>
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bc74:	4443      	add	r3, r8
 800bc76:	9306      	str	r3, [sp, #24]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9a07      	ldr	r2, [sp, #28]
 800bc7c:	2a09      	cmp	r2, #9
 800bc7e:	d849      	bhi.n	800bd14 <_dtoa_r+0x26c>
 800bc80:	2a05      	cmp	r2, #5
 800bc82:	bfc4      	itt	gt
 800bc84:	3a04      	subgt	r2, #4
 800bc86:	9207      	strgt	r2, [sp, #28]
 800bc88:	9a07      	ldr	r2, [sp, #28]
 800bc8a:	f1a2 0202 	sub.w	r2, r2, #2
 800bc8e:	bfcc      	ite	gt
 800bc90:	2400      	movgt	r4, #0
 800bc92:	2401      	movle	r4, #1
 800bc94:	2a03      	cmp	r2, #3
 800bc96:	d848      	bhi.n	800bd2a <_dtoa_r+0x282>
 800bc98:	e8df f002 	tbb	[pc, r2]
 800bc9c:	3a2c2e0b 	.word	0x3a2c2e0b
 800bca0:	9b05      	ldr	r3, [sp, #20]
 800bca2:	2200      	movs	r2, #0
 800bca4:	eba3 0308 	sub.w	r3, r3, r8
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	920a      	str	r2, [sp, #40]	@ 0x28
 800bcac:	f1c8 0300 	rsb	r3, r8, #0
 800bcb0:	e7e3      	b.n	800bc7a <_dtoa_r+0x1d2>
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	9208      	str	r2, [sp, #32]
 800bcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	dc39      	bgt.n	800bd30 <_dtoa_r+0x288>
 800bcbc:	f04f 0b01 	mov.w	fp, #1
 800bcc0:	46da      	mov	sl, fp
 800bcc2:	465a      	mov	r2, fp
 800bcc4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bcc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bccc:	2100      	movs	r1, #0
 800bcce:	2004      	movs	r0, #4
 800bcd0:	f100 0614 	add.w	r6, r0, #20
 800bcd4:	4296      	cmp	r6, r2
 800bcd6:	d930      	bls.n	800bd3a <_dtoa_r+0x292>
 800bcd8:	6079      	str	r1, [r7, #4]
 800bcda:	4648      	mov	r0, r9
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	f000 fc83 	bl	800c5e8 <_Balloc>
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	4607      	mov	r7, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d146      	bne.n	800bd78 <_dtoa_r+0x2d0>
 800bcea:	4b22      	ldr	r3, [pc, #136]	@ (800bd74 <_dtoa_r+0x2cc>)
 800bcec:	4602      	mov	r2, r0
 800bcee:	f240 11af 	movw	r1, #431	@ 0x1af
 800bcf2:	e6f2      	b.n	800bada <_dtoa_r+0x32>
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	e7dd      	b.n	800bcb4 <_dtoa_r+0x20c>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	9208      	str	r2, [sp, #32]
 800bcfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcfe:	eb08 0b02 	add.w	fp, r8, r2
 800bd02:	f10b 0a01 	add.w	sl, fp, #1
 800bd06:	4652      	mov	r2, sl
 800bd08:	2a01      	cmp	r2, #1
 800bd0a:	bfb8      	it	lt
 800bd0c:	2201      	movlt	r2, #1
 800bd0e:	e7db      	b.n	800bcc8 <_dtoa_r+0x220>
 800bd10:	2201      	movs	r2, #1
 800bd12:	e7f2      	b.n	800bcfa <_dtoa_r+0x252>
 800bd14:	2401      	movs	r4, #1
 800bd16:	2200      	movs	r2, #0
 800bd18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bd1c:	f04f 3bff 	mov.w	fp, #4294967295
 800bd20:	2100      	movs	r1, #0
 800bd22:	46da      	mov	sl, fp
 800bd24:	2212      	movs	r2, #18
 800bd26:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd28:	e7ce      	b.n	800bcc8 <_dtoa_r+0x220>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	9208      	str	r2, [sp, #32]
 800bd2e:	e7f5      	b.n	800bd1c <_dtoa_r+0x274>
 800bd30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bd34:	46da      	mov	sl, fp
 800bd36:	465a      	mov	r2, fp
 800bd38:	e7c6      	b.n	800bcc8 <_dtoa_r+0x220>
 800bd3a:	3101      	adds	r1, #1
 800bd3c:	0040      	lsls	r0, r0, #1
 800bd3e:	e7c7      	b.n	800bcd0 <_dtoa_r+0x228>
 800bd40:	636f4361 	.word	0x636f4361
 800bd44:	3fd287a7 	.word	0x3fd287a7
 800bd48:	8b60c8b3 	.word	0x8b60c8b3
 800bd4c:	3fc68a28 	.word	0x3fc68a28
 800bd50:	509f79fb 	.word	0x509f79fb
 800bd54:	3fd34413 	.word	0x3fd34413
 800bd58:	0800d655 	.word	0x0800d655
 800bd5c:	0800d66c 	.word	0x0800d66c
 800bd60:	7ff00000 	.word	0x7ff00000
 800bd64:	0800d651 	.word	0x0800d651
 800bd68:	0800d625 	.word	0x0800d625
 800bd6c:	0800d624 	.word	0x0800d624
 800bd70:	0800d768 	.word	0x0800d768
 800bd74:	0800d6c4 	.word	0x0800d6c4
 800bd78:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bd7c:	f1ba 0f0e 	cmp.w	sl, #14
 800bd80:	6010      	str	r0, [r2, #0]
 800bd82:	d86f      	bhi.n	800be64 <_dtoa_r+0x3bc>
 800bd84:	2c00      	cmp	r4, #0
 800bd86:	d06d      	beq.n	800be64 <_dtoa_r+0x3bc>
 800bd88:	f1b8 0f00 	cmp.w	r8, #0
 800bd8c:	f340 80c2 	ble.w	800bf14 <_dtoa_r+0x46c>
 800bd90:	4aca      	ldr	r2, [pc, #808]	@ (800c0bc <_dtoa_r+0x614>)
 800bd92:	f008 010f 	and.w	r1, r8, #15
 800bd96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd9a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bd9e:	ed92 7b00 	vldr	d7, [r2]
 800bda2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bda6:	f000 80a9 	beq.w	800befc <_dtoa_r+0x454>
 800bdaa:	4ac5      	ldr	r2, [pc, #788]	@ (800c0c0 <_dtoa_r+0x618>)
 800bdac:	ed92 6b08 	vldr	d6, [r2, #32]
 800bdb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bdb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bdb8:	f001 010f 	and.w	r1, r1, #15
 800bdbc:	2203      	movs	r2, #3
 800bdbe:	48c0      	ldr	r0, [pc, #768]	@ (800c0c0 <_dtoa_r+0x618>)
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	f040 809d 	bne.w	800bf00 <_dtoa_r+0x458>
 800bdc6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bdca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bdce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bdd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	f000 80c1 	beq.w	800bf60 <_dtoa_r+0x4b8>
 800bdde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bde2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdea:	f140 80b9 	bpl.w	800bf60 <_dtoa_r+0x4b8>
 800bdee:	f1ba 0f00 	cmp.w	sl, #0
 800bdf2:	f000 80b5 	beq.w	800bf60 <_dtoa_r+0x4b8>
 800bdf6:	f1bb 0f00 	cmp.w	fp, #0
 800bdfa:	dd31      	ble.n	800be60 <_dtoa_r+0x3b8>
 800bdfc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800be00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be08:	f108 31ff 	add.w	r1, r8, #4294967295
 800be0c:	9104      	str	r1, [sp, #16]
 800be0e:	3201      	adds	r2, #1
 800be10:	465c      	mov	r4, fp
 800be12:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800be1a:	ee07 2a90 	vmov	s15, r2
 800be1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be22:	eea7 5b06 	vfma.f64	d5, d7, d6
 800be26:	ee15 2a90 	vmov	r2, s11
 800be2a:	ec51 0b15 	vmov	r0, r1, d5
 800be2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800be32:	2c00      	cmp	r4, #0
 800be34:	f040 8098 	bne.w	800bf68 <_dtoa_r+0x4c0>
 800be38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be40:	ec41 0b17 	vmov	d7, r0, r1
 800be44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4c:	f300 8261 	bgt.w	800c312 <_dtoa_r+0x86a>
 800be50:	eeb1 7b47 	vneg.f64	d7, d7
 800be54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be5c:	f100 80f5 	bmi.w	800c04a <_dtoa_r+0x5a2>
 800be60:	ed8d 8b02 	vstr	d8, [sp, #8]
 800be64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be66:	2a00      	cmp	r2, #0
 800be68:	f2c0 812c 	blt.w	800c0c4 <_dtoa_r+0x61c>
 800be6c:	f1b8 0f0e 	cmp.w	r8, #14
 800be70:	f300 8128 	bgt.w	800c0c4 <_dtoa_r+0x61c>
 800be74:	4b91      	ldr	r3, [pc, #580]	@ (800c0bc <_dtoa_r+0x614>)
 800be76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be7a:	ed93 6b00 	vldr	d6, [r3]
 800be7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	da03      	bge.n	800be8c <_dtoa_r+0x3e4>
 800be84:	f1ba 0f00 	cmp.w	sl, #0
 800be88:	f340 80d2 	ble.w	800c030 <_dtoa_r+0x588>
 800be8c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800be90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be94:	463e      	mov	r6, r7
 800be96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800be9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800be9e:	ee15 3a10 	vmov	r3, s10
 800bea2:	3330      	adds	r3, #48	@ 0x30
 800bea4:	f806 3b01 	strb.w	r3, [r6], #1
 800bea8:	1bf3      	subs	r3, r6, r7
 800beaa:	459a      	cmp	sl, r3
 800beac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800beb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800beb4:	f040 80f8 	bne.w	800c0a8 <_dtoa_r+0x600>
 800beb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bebc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec4:	f300 80dd 	bgt.w	800c082 <_dtoa_r+0x5da>
 800bec8:	eeb4 7b46 	vcmp.f64	d7, d6
 800becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed0:	d104      	bne.n	800bedc <_dtoa_r+0x434>
 800bed2:	ee15 3a10 	vmov	r3, s10
 800bed6:	07db      	lsls	r3, r3, #31
 800bed8:	f100 80d3 	bmi.w	800c082 <_dtoa_r+0x5da>
 800bedc:	9901      	ldr	r1, [sp, #4]
 800bede:	4648      	mov	r0, r9
 800bee0:	f000 fbc2 	bl	800c668 <_Bfree>
 800bee4:	2300      	movs	r3, #0
 800bee6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bee8:	7033      	strb	r3, [r6, #0]
 800beea:	f108 0301 	add.w	r3, r8, #1
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8304 	beq.w	800c500 <_dtoa_r+0xa58>
 800bef8:	601e      	str	r6, [r3, #0]
 800befa:	e301      	b.n	800c500 <_dtoa_r+0xa58>
 800befc:	2202      	movs	r2, #2
 800befe:	e75e      	b.n	800bdbe <_dtoa_r+0x316>
 800bf00:	07cc      	lsls	r4, r1, #31
 800bf02:	d504      	bpl.n	800bf0e <_dtoa_r+0x466>
 800bf04:	ed90 6b00 	vldr	d6, [r0]
 800bf08:	3201      	adds	r2, #1
 800bf0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf0e:	1049      	asrs	r1, r1, #1
 800bf10:	3008      	adds	r0, #8
 800bf12:	e755      	b.n	800bdc0 <_dtoa_r+0x318>
 800bf14:	d022      	beq.n	800bf5c <_dtoa_r+0x4b4>
 800bf16:	f1c8 0100 	rsb	r1, r8, #0
 800bf1a:	4a68      	ldr	r2, [pc, #416]	@ (800c0bc <_dtoa_r+0x614>)
 800bf1c:	f001 000f 	and.w	r0, r1, #15
 800bf20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bf24:	ed92 7b00 	vldr	d7, [r2]
 800bf28:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bf2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf30:	4863      	ldr	r0, [pc, #396]	@ (800c0c0 <_dtoa_r+0x618>)
 800bf32:	1109      	asrs	r1, r1, #4
 800bf34:	2400      	movs	r4, #0
 800bf36:	2202      	movs	r2, #2
 800bf38:	b929      	cbnz	r1, 800bf46 <_dtoa_r+0x49e>
 800bf3a:	2c00      	cmp	r4, #0
 800bf3c:	f43f af49 	beq.w	800bdd2 <_dtoa_r+0x32a>
 800bf40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf44:	e745      	b.n	800bdd2 <_dtoa_r+0x32a>
 800bf46:	07ce      	lsls	r6, r1, #31
 800bf48:	d505      	bpl.n	800bf56 <_dtoa_r+0x4ae>
 800bf4a:	ed90 6b00 	vldr	d6, [r0]
 800bf4e:	3201      	adds	r2, #1
 800bf50:	2401      	movs	r4, #1
 800bf52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf56:	1049      	asrs	r1, r1, #1
 800bf58:	3008      	adds	r0, #8
 800bf5a:	e7ed      	b.n	800bf38 <_dtoa_r+0x490>
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	e738      	b.n	800bdd2 <_dtoa_r+0x32a>
 800bf60:	f8cd 8010 	str.w	r8, [sp, #16]
 800bf64:	4654      	mov	r4, sl
 800bf66:	e754      	b.n	800be12 <_dtoa_r+0x36a>
 800bf68:	4a54      	ldr	r2, [pc, #336]	@ (800c0bc <_dtoa_r+0x614>)
 800bf6a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bf6e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bf72:	9a08      	ldr	r2, [sp, #32]
 800bf74:	ec41 0b17 	vmov	d7, r0, r1
 800bf78:	443c      	add	r4, r7
 800bf7a:	b34a      	cbz	r2, 800bfd0 <_dtoa_r+0x528>
 800bf7c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bf80:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bf84:	463e      	mov	r6, r7
 800bf86:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bf8a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bf8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf92:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf96:	ee14 2a90 	vmov	r2, s9
 800bf9a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf9e:	3230      	adds	r2, #48	@ 0x30
 800bfa0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bfa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfac:	f806 2b01 	strb.w	r2, [r6], #1
 800bfb0:	d438      	bmi.n	800c024 <_dtoa_r+0x57c>
 800bfb2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bfb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbe:	d462      	bmi.n	800c086 <_dtoa_r+0x5de>
 800bfc0:	42a6      	cmp	r6, r4
 800bfc2:	f43f af4d 	beq.w	800be60 <_dtoa_r+0x3b8>
 800bfc6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bfca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bfce:	e7e0      	b.n	800bf92 <_dtoa_r+0x4ea>
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	463e      	mov	r6, r7
 800bfd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bfd8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bfdc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bfe0:	ee14 2a90 	vmov	r2, s9
 800bfe4:	3230      	adds	r2, #48	@ 0x30
 800bfe6:	f806 2b01 	strb.w	r2, [r6], #1
 800bfea:	42a6      	cmp	r6, r4
 800bfec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bff0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bff4:	d119      	bne.n	800c02a <_dtoa_r+0x582>
 800bff6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bffa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bffe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c006:	dc3e      	bgt.n	800c086 <_dtoa_r+0x5de>
 800c008:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c00c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c014:	f57f af24 	bpl.w	800be60 <_dtoa_r+0x3b8>
 800c018:	460e      	mov	r6, r1
 800c01a:	3901      	subs	r1, #1
 800c01c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c020:	2b30      	cmp	r3, #48	@ 0x30
 800c022:	d0f9      	beq.n	800c018 <_dtoa_r+0x570>
 800c024:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c028:	e758      	b.n	800bedc <_dtoa_r+0x434>
 800c02a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c02e:	e7d5      	b.n	800bfdc <_dtoa_r+0x534>
 800c030:	d10b      	bne.n	800c04a <_dtoa_r+0x5a2>
 800c032:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c036:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c03a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c03e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	f2c0 8161 	blt.w	800c30c <_dtoa_r+0x864>
 800c04a:	2400      	movs	r4, #0
 800c04c:	4625      	mov	r5, r4
 800c04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c050:	43db      	mvns	r3, r3
 800c052:	9304      	str	r3, [sp, #16]
 800c054:	463e      	mov	r6, r7
 800c056:	f04f 0800 	mov.w	r8, #0
 800c05a:	4621      	mov	r1, r4
 800c05c:	4648      	mov	r0, r9
 800c05e:	f000 fb03 	bl	800c668 <_Bfree>
 800c062:	2d00      	cmp	r5, #0
 800c064:	d0de      	beq.n	800c024 <_dtoa_r+0x57c>
 800c066:	f1b8 0f00 	cmp.w	r8, #0
 800c06a:	d005      	beq.n	800c078 <_dtoa_r+0x5d0>
 800c06c:	45a8      	cmp	r8, r5
 800c06e:	d003      	beq.n	800c078 <_dtoa_r+0x5d0>
 800c070:	4641      	mov	r1, r8
 800c072:	4648      	mov	r0, r9
 800c074:	f000 faf8 	bl	800c668 <_Bfree>
 800c078:	4629      	mov	r1, r5
 800c07a:	4648      	mov	r0, r9
 800c07c:	f000 faf4 	bl	800c668 <_Bfree>
 800c080:	e7d0      	b.n	800c024 <_dtoa_r+0x57c>
 800c082:	f8cd 8010 	str.w	r8, [sp, #16]
 800c086:	4633      	mov	r3, r6
 800c088:	461e      	mov	r6, r3
 800c08a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c08e:	2a39      	cmp	r2, #57	@ 0x39
 800c090:	d106      	bne.n	800c0a0 <_dtoa_r+0x5f8>
 800c092:	429f      	cmp	r7, r3
 800c094:	d1f8      	bne.n	800c088 <_dtoa_r+0x5e0>
 800c096:	9a04      	ldr	r2, [sp, #16]
 800c098:	3201      	adds	r2, #1
 800c09a:	9204      	str	r2, [sp, #16]
 800c09c:	2230      	movs	r2, #48	@ 0x30
 800c09e:	703a      	strb	r2, [r7, #0]
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	3201      	adds	r2, #1
 800c0a4:	701a      	strb	r2, [r3, #0]
 800c0a6:	e7bd      	b.n	800c024 <_dtoa_r+0x57c>
 800c0a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b4:	f47f aeef 	bne.w	800be96 <_dtoa_r+0x3ee>
 800c0b8:	e710      	b.n	800bedc <_dtoa_r+0x434>
 800c0ba:	bf00      	nop
 800c0bc:	0800d768 	.word	0x0800d768
 800c0c0:	0800d740 	.word	0x0800d740
 800c0c4:	9908      	ldr	r1, [sp, #32]
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	f000 80e3 	beq.w	800c292 <_dtoa_r+0x7ea>
 800c0cc:	9907      	ldr	r1, [sp, #28]
 800c0ce:	2901      	cmp	r1, #1
 800c0d0:	f300 80c8 	bgt.w	800c264 <_dtoa_r+0x7bc>
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	f000 80c1 	beq.w	800c25c <_dtoa_r+0x7b4>
 800c0da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c0de:	9e05      	ldr	r6, [sp, #20]
 800c0e0:	461c      	mov	r4, r3
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	9b05      	ldr	r3, [sp, #20]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	9b06      	ldr	r3, [sp, #24]
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	4648      	mov	r0, r9
 800c0f2:	9306      	str	r3, [sp, #24]
 800c0f4:	f000 fb6c 	bl	800c7d0 <__i2b>
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	b166      	cbz	r6, 800c118 <_dtoa_r+0x670>
 800c0fe:	9a06      	ldr	r2, [sp, #24]
 800c100:	2a00      	cmp	r2, #0
 800c102:	dd09      	ble.n	800c118 <_dtoa_r+0x670>
 800c104:	42b2      	cmp	r2, r6
 800c106:	9905      	ldr	r1, [sp, #20]
 800c108:	bfa8      	it	ge
 800c10a:	4632      	movge	r2, r6
 800c10c:	1a89      	subs	r1, r1, r2
 800c10e:	9105      	str	r1, [sp, #20]
 800c110:	9906      	ldr	r1, [sp, #24]
 800c112:	1ab6      	subs	r6, r6, r2
 800c114:	1a8a      	subs	r2, r1, r2
 800c116:	9206      	str	r2, [sp, #24]
 800c118:	b1fb      	cbz	r3, 800c15a <_dtoa_r+0x6b2>
 800c11a:	9a08      	ldr	r2, [sp, #32]
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	f000 80bc 	beq.w	800c29a <_dtoa_r+0x7f2>
 800c122:	b19c      	cbz	r4, 800c14c <_dtoa_r+0x6a4>
 800c124:	4629      	mov	r1, r5
 800c126:	4622      	mov	r2, r4
 800c128:	4648      	mov	r0, r9
 800c12a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c12c:	f000 fc10 	bl	800c950 <__pow5mult>
 800c130:	9a01      	ldr	r2, [sp, #4]
 800c132:	4601      	mov	r1, r0
 800c134:	4605      	mov	r5, r0
 800c136:	4648      	mov	r0, r9
 800c138:	f000 fb60 	bl	800c7fc <__multiply>
 800c13c:	9901      	ldr	r1, [sp, #4]
 800c13e:	9004      	str	r0, [sp, #16]
 800c140:	4648      	mov	r0, r9
 800c142:	f000 fa91 	bl	800c668 <_Bfree>
 800c146:	9a04      	ldr	r2, [sp, #16]
 800c148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c14a:	9201      	str	r2, [sp, #4]
 800c14c:	1b1a      	subs	r2, r3, r4
 800c14e:	d004      	beq.n	800c15a <_dtoa_r+0x6b2>
 800c150:	9901      	ldr	r1, [sp, #4]
 800c152:	4648      	mov	r0, r9
 800c154:	f000 fbfc 	bl	800c950 <__pow5mult>
 800c158:	9001      	str	r0, [sp, #4]
 800c15a:	2101      	movs	r1, #1
 800c15c:	4648      	mov	r0, r9
 800c15e:	f000 fb37 	bl	800c7d0 <__i2b>
 800c162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c164:	4604      	mov	r4, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 81d0 	beq.w	800c50c <_dtoa_r+0xa64>
 800c16c:	461a      	mov	r2, r3
 800c16e:	4601      	mov	r1, r0
 800c170:	4648      	mov	r0, r9
 800c172:	f000 fbed 	bl	800c950 <__pow5mult>
 800c176:	9b07      	ldr	r3, [sp, #28]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	4604      	mov	r4, r0
 800c17c:	f300 8095 	bgt.w	800c2aa <_dtoa_r+0x802>
 800c180:	9b02      	ldr	r3, [sp, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	f040 808b 	bne.w	800c29e <_dtoa_r+0x7f6>
 800c188:	9b03      	ldr	r3, [sp, #12]
 800c18a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c18e:	2a00      	cmp	r2, #0
 800c190:	f040 8087 	bne.w	800c2a2 <_dtoa_r+0x7fa>
 800c194:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c198:	0d12      	lsrs	r2, r2, #20
 800c19a:	0512      	lsls	r2, r2, #20
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	f000 8082 	beq.w	800c2a6 <_dtoa_r+0x7fe>
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	9305      	str	r3, [sp, #20]
 800c1a8:	9b06      	ldr	r3, [sp, #24]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	9306      	str	r3, [sp, #24]
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 81af 	beq.w	800c518 <_dtoa_r+0xa70>
 800c1ba:	6922      	ldr	r2, [r4, #16]
 800c1bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c1c0:	6910      	ldr	r0, [r2, #16]
 800c1c2:	f000 fab9 	bl	800c738 <__hi0bits>
 800c1c6:	f1c0 0020 	rsb	r0, r0, #32
 800c1ca:	9b06      	ldr	r3, [sp, #24]
 800c1cc:	4418      	add	r0, r3
 800c1ce:	f010 001f 	ands.w	r0, r0, #31
 800c1d2:	d076      	beq.n	800c2c2 <_dtoa_r+0x81a>
 800c1d4:	f1c0 0220 	rsb	r2, r0, #32
 800c1d8:	2a04      	cmp	r2, #4
 800c1da:	dd69      	ble.n	800c2b0 <_dtoa_r+0x808>
 800c1dc:	9b05      	ldr	r3, [sp, #20]
 800c1de:	f1c0 001c 	rsb	r0, r0, #28
 800c1e2:	4403      	add	r3, r0
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	9b06      	ldr	r3, [sp, #24]
 800c1e8:	4406      	add	r6, r0
 800c1ea:	4403      	add	r3, r0
 800c1ec:	9306      	str	r3, [sp, #24]
 800c1ee:	9b05      	ldr	r3, [sp, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dd05      	ble.n	800c200 <_dtoa_r+0x758>
 800c1f4:	9901      	ldr	r1, [sp, #4]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	4648      	mov	r0, r9
 800c1fa:	f000 fc03 	bl	800ca04 <__lshift>
 800c1fe:	9001      	str	r0, [sp, #4]
 800c200:	9b06      	ldr	r3, [sp, #24]
 800c202:	2b00      	cmp	r3, #0
 800c204:	dd05      	ble.n	800c212 <_dtoa_r+0x76a>
 800c206:	4621      	mov	r1, r4
 800c208:	461a      	mov	r2, r3
 800c20a:	4648      	mov	r0, r9
 800c20c:	f000 fbfa 	bl	800ca04 <__lshift>
 800c210:	4604      	mov	r4, r0
 800c212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c214:	2b00      	cmp	r3, #0
 800c216:	d056      	beq.n	800c2c6 <_dtoa_r+0x81e>
 800c218:	9801      	ldr	r0, [sp, #4]
 800c21a:	4621      	mov	r1, r4
 800c21c:	f000 fc5e 	bl	800cadc <__mcmp>
 800c220:	2800      	cmp	r0, #0
 800c222:	da50      	bge.n	800c2c6 <_dtoa_r+0x81e>
 800c224:	f108 33ff 	add.w	r3, r8, #4294967295
 800c228:	9304      	str	r3, [sp, #16]
 800c22a:	9901      	ldr	r1, [sp, #4]
 800c22c:	2300      	movs	r3, #0
 800c22e:	220a      	movs	r2, #10
 800c230:	4648      	mov	r0, r9
 800c232:	f000 fa3b 	bl	800c6ac <__multadd>
 800c236:	9b08      	ldr	r3, [sp, #32]
 800c238:	9001      	str	r0, [sp, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 816e 	beq.w	800c51c <_dtoa_r+0xa74>
 800c240:	4629      	mov	r1, r5
 800c242:	2300      	movs	r3, #0
 800c244:	220a      	movs	r2, #10
 800c246:	4648      	mov	r0, r9
 800c248:	f000 fa30 	bl	800c6ac <__multadd>
 800c24c:	f1bb 0f00 	cmp.w	fp, #0
 800c250:	4605      	mov	r5, r0
 800c252:	dc64      	bgt.n	800c31e <_dtoa_r+0x876>
 800c254:	9b07      	ldr	r3, [sp, #28]
 800c256:	2b02      	cmp	r3, #2
 800c258:	dc3e      	bgt.n	800c2d8 <_dtoa_r+0x830>
 800c25a:	e060      	b.n	800c31e <_dtoa_r+0x876>
 800c25c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c25e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c262:	e73c      	b.n	800c0de <_dtoa_r+0x636>
 800c264:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c268:	42a3      	cmp	r3, r4
 800c26a:	bfbf      	itttt	lt
 800c26c:	1ae2      	sublt	r2, r4, r3
 800c26e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c270:	189b      	addlt	r3, r3, r2
 800c272:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c274:	bfae      	itee	ge
 800c276:	1b1c      	subge	r4, r3, r4
 800c278:	4623      	movlt	r3, r4
 800c27a:	2400      	movlt	r4, #0
 800c27c:	f1ba 0f00 	cmp.w	sl, #0
 800c280:	bfb5      	itete	lt
 800c282:	9a05      	ldrlt	r2, [sp, #20]
 800c284:	9e05      	ldrge	r6, [sp, #20]
 800c286:	eba2 060a 	sublt.w	r6, r2, sl
 800c28a:	4652      	movge	r2, sl
 800c28c:	bfb8      	it	lt
 800c28e:	2200      	movlt	r2, #0
 800c290:	e727      	b.n	800c0e2 <_dtoa_r+0x63a>
 800c292:	9e05      	ldr	r6, [sp, #20]
 800c294:	9d08      	ldr	r5, [sp, #32]
 800c296:	461c      	mov	r4, r3
 800c298:	e730      	b.n	800c0fc <_dtoa_r+0x654>
 800c29a:	461a      	mov	r2, r3
 800c29c:	e758      	b.n	800c150 <_dtoa_r+0x6a8>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e786      	b.n	800c1b0 <_dtoa_r+0x708>
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	e784      	b.n	800c1b0 <_dtoa_r+0x708>
 800c2a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c2a8:	e783      	b.n	800c1b2 <_dtoa_r+0x70a>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ae:	e784      	b.n	800c1ba <_dtoa_r+0x712>
 800c2b0:	d09d      	beq.n	800c1ee <_dtoa_r+0x746>
 800c2b2:	9b05      	ldr	r3, [sp, #20]
 800c2b4:	321c      	adds	r2, #28
 800c2b6:	4413      	add	r3, r2
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	9b06      	ldr	r3, [sp, #24]
 800c2bc:	4416      	add	r6, r2
 800c2be:	4413      	add	r3, r2
 800c2c0:	e794      	b.n	800c1ec <_dtoa_r+0x744>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	e7f5      	b.n	800c2b2 <_dtoa_r+0x80a>
 800c2c6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800c2ce:	46d3      	mov	fp, sl
 800c2d0:	dc21      	bgt.n	800c316 <_dtoa_r+0x86e>
 800c2d2:	9b07      	ldr	r3, [sp, #28]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	dd1e      	ble.n	800c316 <_dtoa_r+0x86e>
 800c2d8:	f1bb 0f00 	cmp.w	fp, #0
 800c2dc:	f47f aeb7 	bne.w	800c04e <_dtoa_r+0x5a6>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	465b      	mov	r3, fp
 800c2e4:	2205      	movs	r2, #5
 800c2e6:	4648      	mov	r0, r9
 800c2e8:	f000 f9e0 	bl	800c6ac <__multadd>
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	9801      	ldr	r0, [sp, #4]
 800c2f2:	f000 fbf3 	bl	800cadc <__mcmp>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f77f aea9 	ble.w	800c04e <_dtoa_r+0x5a6>
 800c2fc:	463e      	mov	r6, r7
 800c2fe:	2331      	movs	r3, #49	@ 0x31
 800c300:	f806 3b01 	strb.w	r3, [r6], #1
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	3301      	adds	r3, #1
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	e6a4      	b.n	800c056 <_dtoa_r+0x5ae>
 800c30c:	f8cd 8010 	str.w	r8, [sp, #16]
 800c310:	4654      	mov	r4, sl
 800c312:	4625      	mov	r5, r4
 800c314:	e7f2      	b.n	800c2fc <_dtoa_r+0x854>
 800c316:	9b08      	ldr	r3, [sp, #32]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 8103 	beq.w	800c524 <_dtoa_r+0xa7c>
 800c31e:	2e00      	cmp	r6, #0
 800c320:	dd05      	ble.n	800c32e <_dtoa_r+0x886>
 800c322:	4629      	mov	r1, r5
 800c324:	4632      	mov	r2, r6
 800c326:	4648      	mov	r0, r9
 800c328:	f000 fb6c 	bl	800ca04 <__lshift>
 800c32c:	4605      	mov	r5, r0
 800c32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c330:	2b00      	cmp	r3, #0
 800c332:	d058      	beq.n	800c3e6 <_dtoa_r+0x93e>
 800c334:	6869      	ldr	r1, [r5, #4]
 800c336:	4648      	mov	r0, r9
 800c338:	f000 f956 	bl	800c5e8 <_Balloc>
 800c33c:	4606      	mov	r6, r0
 800c33e:	b928      	cbnz	r0, 800c34c <_dtoa_r+0x8a4>
 800c340:	4b82      	ldr	r3, [pc, #520]	@ (800c54c <_dtoa_r+0xaa4>)
 800c342:	4602      	mov	r2, r0
 800c344:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c348:	f7ff bbc7 	b.w	800bada <_dtoa_r+0x32>
 800c34c:	692a      	ldr	r2, [r5, #16]
 800c34e:	3202      	adds	r2, #2
 800c350:	0092      	lsls	r2, r2, #2
 800c352:	f105 010c 	add.w	r1, r5, #12
 800c356:	300c      	adds	r0, #12
 800c358:	f7ff fb0f 	bl	800b97a <memcpy>
 800c35c:	2201      	movs	r2, #1
 800c35e:	4631      	mov	r1, r6
 800c360:	4648      	mov	r0, r9
 800c362:	f000 fb4f 	bl	800ca04 <__lshift>
 800c366:	1c7b      	adds	r3, r7, #1
 800c368:	9305      	str	r3, [sp, #20]
 800c36a:	eb07 030b 	add.w	r3, r7, fp
 800c36e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	46a8      	mov	r8, r5
 800c378:	9308      	str	r3, [sp, #32]
 800c37a:	4605      	mov	r5, r0
 800c37c:	9b05      	ldr	r3, [sp, #20]
 800c37e:	9801      	ldr	r0, [sp, #4]
 800c380:	4621      	mov	r1, r4
 800c382:	f103 3bff 	add.w	fp, r3, #4294967295
 800c386:	f7ff fb06 	bl	800b996 <quorem>
 800c38a:	4641      	mov	r1, r8
 800c38c:	9002      	str	r0, [sp, #8]
 800c38e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c392:	9801      	ldr	r0, [sp, #4]
 800c394:	f000 fba2 	bl	800cadc <__mcmp>
 800c398:	462a      	mov	r2, r5
 800c39a:	9006      	str	r0, [sp, #24]
 800c39c:	4621      	mov	r1, r4
 800c39e:	4648      	mov	r0, r9
 800c3a0:	f000 fbb8 	bl	800cb14 <__mdiff>
 800c3a4:	68c2      	ldr	r2, [r0, #12]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	b9fa      	cbnz	r2, 800c3ea <_dtoa_r+0x942>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	9801      	ldr	r0, [sp, #4]
 800c3ae:	f000 fb95 	bl	800cadc <__mcmp>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4648      	mov	r0, r9
 800c3b8:	920a      	str	r2, [sp, #40]	@ 0x28
 800c3ba:	f000 f955 	bl	800c668 <_Bfree>
 800c3be:	9b07      	ldr	r3, [sp, #28]
 800c3c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3c2:	9e05      	ldr	r6, [sp, #20]
 800c3c4:	ea43 0102 	orr.w	r1, r3, r2
 800c3c8:	9b08      	ldr	r3, [sp, #32]
 800c3ca:	4319      	orrs	r1, r3
 800c3cc:	d10f      	bne.n	800c3ee <_dtoa_r+0x946>
 800c3ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c3d2:	d028      	beq.n	800c426 <_dtoa_r+0x97e>
 800c3d4:	9b06      	ldr	r3, [sp, #24]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd02      	ble.n	800c3e0 <_dtoa_r+0x938>
 800c3da:	9b02      	ldr	r3, [sp, #8]
 800c3dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c3e0:	f88b a000 	strb.w	sl, [fp]
 800c3e4:	e639      	b.n	800c05a <_dtoa_r+0x5b2>
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	e7bd      	b.n	800c366 <_dtoa_r+0x8be>
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	e7e2      	b.n	800c3b4 <_dtoa_r+0x90c>
 800c3ee:	9b06      	ldr	r3, [sp, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	db04      	blt.n	800c3fe <_dtoa_r+0x956>
 800c3f4:	9907      	ldr	r1, [sp, #28]
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	9908      	ldr	r1, [sp, #32]
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	d120      	bne.n	800c440 <_dtoa_r+0x998>
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	ddee      	ble.n	800c3e0 <_dtoa_r+0x938>
 800c402:	9901      	ldr	r1, [sp, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	4648      	mov	r0, r9
 800c408:	f000 fafc 	bl	800ca04 <__lshift>
 800c40c:	4621      	mov	r1, r4
 800c40e:	9001      	str	r0, [sp, #4]
 800c410:	f000 fb64 	bl	800cadc <__mcmp>
 800c414:	2800      	cmp	r0, #0
 800c416:	dc03      	bgt.n	800c420 <_dtoa_r+0x978>
 800c418:	d1e2      	bne.n	800c3e0 <_dtoa_r+0x938>
 800c41a:	f01a 0f01 	tst.w	sl, #1
 800c41e:	d0df      	beq.n	800c3e0 <_dtoa_r+0x938>
 800c420:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c424:	d1d9      	bne.n	800c3da <_dtoa_r+0x932>
 800c426:	2339      	movs	r3, #57	@ 0x39
 800c428:	f88b 3000 	strb.w	r3, [fp]
 800c42c:	4633      	mov	r3, r6
 800c42e:	461e      	mov	r6, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c436:	2a39      	cmp	r2, #57	@ 0x39
 800c438:	d053      	beq.n	800c4e2 <_dtoa_r+0xa3a>
 800c43a:	3201      	adds	r2, #1
 800c43c:	701a      	strb	r2, [r3, #0]
 800c43e:	e60c      	b.n	800c05a <_dtoa_r+0x5b2>
 800c440:	2a00      	cmp	r2, #0
 800c442:	dd07      	ble.n	800c454 <_dtoa_r+0x9ac>
 800c444:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c448:	d0ed      	beq.n	800c426 <_dtoa_r+0x97e>
 800c44a:	f10a 0301 	add.w	r3, sl, #1
 800c44e:	f88b 3000 	strb.w	r3, [fp]
 800c452:	e602      	b.n	800c05a <_dtoa_r+0x5b2>
 800c454:	9b05      	ldr	r3, [sp, #20]
 800c456:	9a05      	ldr	r2, [sp, #20]
 800c458:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45e:	4293      	cmp	r3, r2
 800c460:	d029      	beq.n	800c4b6 <_dtoa_r+0xa0e>
 800c462:	9901      	ldr	r1, [sp, #4]
 800c464:	2300      	movs	r3, #0
 800c466:	220a      	movs	r2, #10
 800c468:	4648      	mov	r0, r9
 800c46a:	f000 f91f 	bl	800c6ac <__multadd>
 800c46e:	45a8      	cmp	r8, r5
 800c470:	9001      	str	r0, [sp, #4]
 800c472:	f04f 0300 	mov.w	r3, #0
 800c476:	f04f 020a 	mov.w	r2, #10
 800c47a:	4641      	mov	r1, r8
 800c47c:	4648      	mov	r0, r9
 800c47e:	d107      	bne.n	800c490 <_dtoa_r+0x9e8>
 800c480:	f000 f914 	bl	800c6ac <__multadd>
 800c484:	4680      	mov	r8, r0
 800c486:	4605      	mov	r5, r0
 800c488:	9b05      	ldr	r3, [sp, #20]
 800c48a:	3301      	adds	r3, #1
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	e775      	b.n	800c37c <_dtoa_r+0x8d4>
 800c490:	f000 f90c 	bl	800c6ac <__multadd>
 800c494:	4629      	mov	r1, r5
 800c496:	4680      	mov	r8, r0
 800c498:	2300      	movs	r3, #0
 800c49a:	220a      	movs	r2, #10
 800c49c:	4648      	mov	r0, r9
 800c49e:	f000 f905 	bl	800c6ac <__multadd>
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	e7f0      	b.n	800c488 <_dtoa_r+0x9e0>
 800c4a6:	f1bb 0f00 	cmp.w	fp, #0
 800c4aa:	bfcc      	ite	gt
 800c4ac:	465e      	movgt	r6, fp
 800c4ae:	2601      	movle	r6, #1
 800c4b0:	443e      	add	r6, r7
 800c4b2:	f04f 0800 	mov.w	r8, #0
 800c4b6:	9901      	ldr	r1, [sp, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f000 faa2 	bl	800ca04 <__lshift>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	9001      	str	r0, [sp, #4]
 800c4c4:	f000 fb0a 	bl	800cadc <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dcaf      	bgt.n	800c42c <_dtoa_r+0x984>
 800c4cc:	d102      	bne.n	800c4d4 <_dtoa_r+0xa2c>
 800c4ce:	f01a 0f01 	tst.w	sl, #1
 800c4d2:	d1ab      	bne.n	800c42c <_dtoa_r+0x984>
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a30      	cmp	r2, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <_dtoa_r+0xa2e>
 800c4e0:	e5bb      	b.n	800c05a <_dtoa_r+0x5b2>
 800c4e2:	429f      	cmp	r7, r3
 800c4e4:	d1a3      	bne.n	800c42e <_dtoa_r+0x986>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	703b      	strb	r3, [r7, #0]
 800c4f0:	e5b3      	b.n	800c05a <_dtoa_r+0x5b2>
 800c4f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c4f4:	4f16      	ldr	r7, [pc, #88]	@ (800c550 <_dtoa_r+0xaa8>)
 800c4f6:	b11b      	cbz	r3, 800c500 <_dtoa_r+0xa58>
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	4638      	mov	r0, r7
 800c502:	b011      	add	sp, #68	@ 0x44
 800c504:	ecbd 8b02 	vpop	{d8}
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	9b07      	ldr	r3, [sp, #28]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	f77f ae36 	ble.w	800c180 <_dtoa_r+0x6d8>
 800c514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c516:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c518:	2001      	movs	r0, #1
 800c51a:	e656      	b.n	800c1ca <_dtoa_r+0x722>
 800c51c:	f1bb 0f00 	cmp.w	fp, #0
 800c520:	f77f aed7 	ble.w	800c2d2 <_dtoa_r+0x82a>
 800c524:	463e      	mov	r6, r7
 800c526:	9801      	ldr	r0, [sp, #4]
 800c528:	4621      	mov	r1, r4
 800c52a:	f7ff fa34 	bl	800b996 <quorem>
 800c52e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c532:	f806 ab01 	strb.w	sl, [r6], #1
 800c536:	1bf2      	subs	r2, r6, r7
 800c538:	4593      	cmp	fp, r2
 800c53a:	ddb4      	ble.n	800c4a6 <_dtoa_r+0x9fe>
 800c53c:	9901      	ldr	r1, [sp, #4]
 800c53e:	2300      	movs	r3, #0
 800c540:	220a      	movs	r2, #10
 800c542:	4648      	mov	r0, r9
 800c544:	f000 f8b2 	bl	800c6ac <__multadd>
 800c548:	9001      	str	r0, [sp, #4]
 800c54a:	e7ec      	b.n	800c526 <_dtoa_r+0xa7e>
 800c54c:	0800d6c4 	.word	0x0800d6c4
 800c550:	0800d648 	.word	0x0800d648

0800c554 <_free_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4605      	mov	r5, r0
 800c558:	2900      	cmp	r1, #0
 800c55a:	d041      	beq.n	800c5e0 <_free_r+0x8c>
 800c55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c560:	1f0c      	subs	r4, r1, #4
 800c562:	2b00      	cmp	r3, #0
 800c564:	bfb8      	it	lt
 800c566:	18e4      	addlt	r4, r4, r3
 800c568:	f7fe fb2a 	bl	800abc0 <__malloc_lock>
 800c56c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e4 <_free_r+0x90>)
 800c56e:	6813      	ldr	r3, [r2, #0]
 800c570:	b933      	cbnz	r3, 800c580 <_free_r+0x2c>
 800c572:	6063      	str	r3, [r4, #4]
 800c574:	6014      	str	r4, [r2, #0]
 800c576:	4628      	mov	r0, r5
 800c578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c57c:	f7fe bb26 	b.w	800abcc <__malloc_unlock>
 800c580:	42a3      	cmp	r3, r4
 800c582:	d908      	bls.n	800c596 <_free_r+0x42>
 800c584:	6820      	ldr	r0, [r4, #0]
 800c586:	1821      	adds	r1, r4, r0
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf01      	itttt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	1809      	addeq	r1, r1, r0
 800c592:	6021      	streq	r1, [r4, #0]
 800c594:	e7ed      	b.n	800c572 <_free_r+0x1e>
 800c596:	461a      	mov	r2, r3
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	b10b      	cbz	r3, 800c5a0 <_free_r+0x4c>
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	d9fa      	bls.n	800c596 <_free_r+0x42>
 800c5a0:	6811      	ldr	r1, [r2, #0]
 800c5a2:	1850      	adds	r0, r2, r1
 800c5a4:	42a0      	cmp	r0, r4
 800c5a6:	d10b      	bne.n	800c5c0 <_free_r+0x6c>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	4401      	add	r1, r0
 800c5ac:	1850      	adds	r0, r2, r1
 800c5ae:	4283      	cmp	r3, r0
 800c5b0:	6011      	str	r1, [r2, #0]
 800c5b2:	d1e0      	bne.n	800c576 <_free_r+0x22>
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	6053      	str	r3, [r2, #4]
 800c5ba:	4408      	add	r0, r1
 800c5bc:	6010      	str	r0, [r2, #0]
 800c5be:	e7da      	b.n	800c576 <_free_r+0x22>
 800c5c0:	d902      	bls.n	800c5c8 <_free_r+0x74>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	e7d6      	b.n	800c576 <_free_r+0x22>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	1821      	adds	r1, r4, r0
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf04      	itt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	6063      	str	r3, [r4, #4]
 800c5d6:	bf04      	itt	eq
 800c5d8:	1809      	addeq	r1, r1, r0
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	6054      	str	r4, [r2, #4]
 800c5de:	e7ca      	b.n	800c576 <_free_r+0x22>
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	bf00      	nop
 800c5e4:	200020d0 	.word	0x200020d0

0800c5e8 <_Balloc>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	69c6      	ldr	r6, [r0, #28]
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	460d      	mov	r5, r1
 800c5f0:	b976      	cbnz	r6, 800c610 <_Balloc+0x28>
 800c5f2:	2010      	movs	r0, #16
 800c5f4:	f7fe fa32 	bl	800aa5c <malloc>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	61e0      	str	r0, [r4, #28]
 800c5fc:	b920      	cbnz	r0, 800c608 <_Balloc+0x20>
 800c5fe:	4b18      	ldr	r3, [pc, #96]	@ (800c660 <_Balloc+0x78>)
 800c600:	4818      	ldr	r0, [pc, #96]	@ (800c664 <_Balloc+0x7c>)
 800c602:	216b      	movs	r1, #107	@ 0x6b
 800c604:	f000 fde4 	bl	800d1d0 <__assert_func>
 800c608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c60c:	6006      	str	r6, [r0, #0]
 800c60e:	60c6      	str	r6, [r0, #12]
 800c610:	69e6      	ldr	r6, [r4, #28]
 800c612:	68f3      	ldr	r3, [r6, #12]
 800c614:	b183      	cbz	r3, 800c638 <_Balloc+0x50>
 800c616:	69e3      	ldr	r3, [r4, #28]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c61e:	b9b8      	cbnz	r0, 800c650 <_Balloc+0x68>
 800c620:	2101      	movs	r1, #1
 800c622:	fa01 f605 	lsl.w	r6, r1, r5
 800c626:	1d72      	adds	r2, r6, #5
 800c628:	0092      	lsls	r2, r2, #2
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 fdee 	bl	800d20c <_calloc_r>
 800c630:	b160      	cbz	r0, 800c64c <_Balloc+0x64>
 800c632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c636:	e00e      	b.n	800c656 <_Balloc+0x6e>
 800c638:	2221      	movs	r2, #33	@ 0x21
 800c63a:	2104      	movs	r1, #4
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 fde5 	bl	800d20c <_calloc_r>
 800c642:	69e3      	ldr	r3, [r4, #28]
 800c644:	60f0      	str	r0, [r6, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1e4      	bne.n	800c616 <_Balloc+0x2e>
 800c64c:	2000      	movs	r0, #0
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	6802      	ldr	r2, [r0, #0]
 800c652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c656:	2300      	movs	r3, #0
 800c658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c65c:	e7f7      	b.n	800c64e <_Balloc+0x66>
 800c65e:	bf00      	nop
 800c660:	0800d655 	.word	0x0800d655
 800c664:	0800d6d5 	.word	0x0800d6d5

0800c668 <_Bfree>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	69c6      	ldr	r6, [r0, #28]
 800c66c:	4605      	mov	r5, r0
 800c66e:	460c      	mov	r4, r1
 800c670:	b976      	cbnz	r6, 800c690 <_Bfree+0x28>
 800c672:	2010      	movs	r0, #16
 800c674:	f7fe f9f2 	bl	800aa5c <malloc>
 800c678:	4602      	mov	r2, r0
 800c67a:	61e8      	str	r0, [r5, #28]
 800c67c:	b920      	cbnz	r0, 800c688 <_Bfree+0x20>
 800c67e:	4b09      	ldr	r3, [pc, #36]	@ (800c6a4 <_Bfree+0x3c>)
 800c680:	4809      	ldr	r0, [pc, #36]	@ (800c6a8 <_Bfree+0x40>)
 800c682:	218f      	movs	r1, #143	@ 0x8f
 800c684:	f000 fda4 	bl	800d1d0 <__assert_func>
 800c688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c68c:	6006      	str	r6, [r0, #0]
 800c68e:	60c6      	str	r6, [r0, #12]
 800c690:	b13c      	cbz	r4, 800c6a2 <_Bfree+0x3a>
 800c692:	69eb      	ldr	r3, [r5, #28]
 800c694:	6862      	ldr	r2, [r4, #4]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c69c:	6021      	str	r1, [r4, #0]
 800c69e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	0800d655 	.word	0x0800d655
 800c6a8:	0800d6d5 	.word	0x0800d6d5

0800c6ac <__multadd>:
 800c6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b0:	690d      	ldr	r5, [r1, #16]
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	461e      	mov	r6, r3
 800c6b8:	f101 0c14 	add.w	ip, r1, #20
 800c6bc:	2000      	movs	r0, #0
 800c6be:	f8dc 3000 	ldr.w	r3, [ip]
 800c6c2:	b299      	uxth	r1, r3
 800c6c4:	fb02 6101 	mla	r1, r2, r1, r6
 800c6c8:	0c1e      	lsrs	r6, r3, #16
 800c6ca:	0c0b      	lsrs	r3, r1, #16
 800c6cc:	fb02 3306 	mla	r3, r2, r6, r3
 800c6d0:	b289      	uxth	r1, r1
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6d8:	4285      	cmp	r5, r0
 800c6da:	f84c 1b04 	str.w	r1, [ip], #4
 800c6de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6e2:	dcec      	bgt.n	800c6be <__multadd+0x12>
 800c6e4:	b30e      	cbz	r6, 800c72a <__multadd+0x7e>
 800c6e6:	68a3      	ldr	r3, [r4, #8]
 800c6e8:	42ab      	cmp	r3, r5
 800c6ea:	dc19      	bgt.n	800c720 <__multadd+0x74>
 800c6ec:	6861      	ldr	r1, [r4, #4]
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	3101      	adds	r1, #1
 800c6f2:	f7ff ff79 	bl	800c5e8 <_Balloc>
 800c6f6:	4680      	mov	r8, r0
 800c6f8:	b928      	cbnz	r0, 800c706 <__multadd+0x5a>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <__multadd+0x84>)
 800c6fe:	480d      	ldr	r0, [pc, #52]	@ (800c734 <__multadd+0x88>)
 800c700:	21ba      	movs	r1, #186	@ 0xba
 800c702:	f000 fd65 	bl	800d1d0 <__assert_func>
 800c706:	6922      	ldr	r2, [r4, #16]
 800c708:	3202      	adds	r2, #2
 800c70a:	f104 010c 	add.w	r1, r4, #12
 800c70e:	0092      	lsls	r2, r2, #2
 800c710:	300c      	adds	r0, #12
 800c712:	f7ff f932 	bl	800b97a <memcpy>
 800c716:	4621      	mov	r1, r4
 800c718:	4638      	mov	r0, r7
 800c71a:	f7ff ffa5 	bl	800c668 <_Bfree>
 800c71e:	4644      	mov	r4, r8
 800c720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c724:	3501      	adds	r5, #1
 800c726:	615e      	str	r6, [r3, #20]
 800c728:	6125      	str	r5, [r4, #16]
 800c72a:	4620      	mov	r0, r4
 800c72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c730:	0800d6c4 	.word	0x0800d6c4
 800c734:	0800d6d5 	.word	0x0800d6d5

0800c738 <__hi0bits>:
 800c738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c73c:	4603      	mov	r3, r0
 800c73e:	bf36      	itet	cc
 800c740:	0403      	lslcc	r3, r0, #16
 800c742:	2000      	movcs	r0, #0
 800c744:	2010      	movcc	r0, #16
 800c746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c74a:	bf3c      	itt	cc
 800c74c:	021b      	lslcc	r3, r3, #8
 800c74e:	3008      	addcc	r0, #8
 800c750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c754:	bf3c      	itt	cc
 800c756:	011b      	lslcc	r3, r3, #4
 800c758:	3004      	addcc	r0, #4
 800c75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c75e:	bf3c      	itt	cc
 800c760:	009b      	lslcc	r3, r3, #2
 800c762:	3002      	addcc	r0, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	db05      	blt.n	800c774 <__hi0bits+0x3c>
 800c768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c76c:	f100 0001 	add.w	r0, r0, #1
 800c770:	bf08      	it	eq
 800c772:	2020      	moveq	r0, #32
 800c774:	4770      	bx	lr

0800c776 <__lo0bits>:
 800c776:	6803      	ldr	r3, [r0, #0]
 800c778:	4602      	mov	r2, r0
 800c77a:	f013 0007 	ands.w	r0, r3, #7
 800c77e:	d00b      	beq.n	800c798 <__lo0bits+0x22>
 800c780:	07d9      	lsls	r1, r3, #31
 800c782:	d421      	bmi.n	800c7c8 <__lo0bits+0x52>
 800c784:	0798      	lsls	r0, r3, #30
 800c786:	bf49      	itett	mi
 800c788:	085b      	lsrmi	r3, r3, #1
 800c78a:	089b      	lsrpl	r3, r3, #2
 800c78c:	2001      	movmi	r0, #1
 800c78e:	6013      	strmi	r3, [r2, #0]
 800c790:	bf5c      	itt	pl
 800c792:	6013      	strpl	r3, [r2, #0]
 800c794:	2002      	movpl	r0, #2
 800c796:	4770      	bx	lr
 800c798:	b299      	uxth	r1, r3
 800c79a:	b909      	cbnz	r1, 800c7a0 <__lo0bits+0x2a>
 800c79c:	0c1b      	lsrs	r3, r3, #16
 800c79e:	2010      	movs	r0, #16
 800c7a0:	b2d9      	uxtb	r1, r3
 800c7a2:	b909      	cbnz	r1, 800c7a8 <__lo0bits+0x32>
 800c7a4:	3008      	adds	r0, #8
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	0719      	lsls	r1, r3, #28
 800c7aa:	bf04      	itt	eq
 800c7ac:	091b      	lsreq	r3, r3, #4
 800c7ae:	3004      	addeq	r0, #4
 800c7b0:	0799      	lsls	r1, r3, #30
 800c7b2:	bf04      	itt	eq
 800c7b4:	089b      	lsreq	r3, r3, #2
 800c7b6:	3002      	addeq	r0, #2
 800c7b8:	07d9      	lsls	r1, r3, #31
 800c7ba:	d403      	bmi.n	800c7c4 <__lo0bits+0x4e>
 800c7bc:	085b      	lsrs	r3, r3, #1
 800c7be:	f100 0001 	add.w	r0, r0, #1
 800c7c2:	d003      	beq.n	800c7cc <__lo0bits+0x56>
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	4770      	bx	lr
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	4770      	bx	lr
 800c7cc:	2020      	movs	r0, #32
 800c7ce:	4770      	bx	lr

0800c7d0 <__i2b>:
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	f7ff ff07 	bl	800c5e8 <_Balloc>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	b928      	cbnz	r0, 800c7ea <__i2b+0x1a>
 800c7de:	4b05      	ldr	r3, [pc, #20]	@ (800c7f4 <__i2b+0x24>)
 800c7e0:	4805      	ldr	r0, [pc, #20]	@ (800c7f8 <__i2b+0x28>)
 800c7e2:	f240 1145 	movw	r1, #325	@ 0x145
 800c7e6:	f000 fcf3 	bl	800d1d0 <__assert_func>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	6144      	str	r4, [r0, #20]
 800c7ee:	6103      	str	r3, [r0, #16]
 800c7f0:	bd10      	pop	{r4, pc}
 800c7f2:	bf00      	nop
 800c7f4:	0800d6c4 	.word	0x0800d6c4
 800c7f8:	0800d6d5 	.word	0x0800d6d5

0800c7fc <__multiply>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	4614      	mov	r4, r2
 800c802:	690a      	ldr	r2, [r1, #16]
 800c804:	6923      	ldr	r3, [r4, #16]
 800c806:	429a      	cmp	r2, r3
 800c808:	bfa8      	it	ge
 800c80a:	4623      	movge	r3, r4
 800c80c:	460f      	mov	r7, r1
 800c80e:	bfa4      	itt	ge
 800c810:	460c      	movge	r4, r1
 800c812:	461f      	movge	r7, r3
 800c814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c81c:	68a3      	ldr	r3, [r4, #8]
 800c81e:	6861      	ldr	r1, [r4, #4]
 800c820:	eb0a 0609 	add.w	r6, sl, r9
 800c824:	42b3      	cmp	r3, r6
 800c826:	b085      	sub	sp, #20
 800c828:	bfb8      	it	lt
 800c82a:	3101      	addlt	r1, #1
 800c82c:	f7ff fedc 	bl	800c5e8 <_Balloc>
 800c830:	b930      	cbnz	r0, 800c840 <__multiply+0x44>
 800c832:	4602      	mov	r2, r0
 800c834:	4b44      	ldr	r3, [pc, #272]	@ (800c948 <__multiply+0x14c>)
 800c836:	4845      	ldr	r0, [pc, #276]	@ (800c94c <__multiply+0x150>)
 800c838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c83c:	f000 fcc8 	bl	800d1d0 <__assert_func>
 800c840:	f100 0514 	add.w	r5, r0, #20
 800c844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c848:	462b      	mov	r3, r5
 800c84a:	2200      	movs	r2, #0
 800c84c:	4543      	cmp	r3, r8
 800c84e:	d321      	bcc.n	800c894 <__multiply+0x98>
 800c850:	f107 0114 	add.w	r1, r7, #20
 800c854:	f104 0214 	add.w	r2, r4, #20
 800c858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c85c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c860:	9302      	str	r3, [sp, #8]
 800c862:	1b13      	subs	r3, r2, r4
 800c864:	3b15      	subs	r3, #21
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	3304      	adds	r3, #4
 800c86c:	f104 0715 	add.w	r7, r4, #21
 800c870:	42ba      	cmp	r2, r7
 800c872:	bf38      	it	cc
 800c874:	2304      	movcc	r3, #4
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	9b02      	ldr	r3, [sp, #8]
 800c87a:	9103      	str	r1, [sp, #12]
 800c87c:	428b      	cmp	r3, r1
 800c87e:	d80c      	bhi.n	800c89a <__multiply+0x9e>
 800c880:	2e00      	cmp	r6, #0
 800c882:	dd03      	ble.n	800c88c <__multiply+0x90>
 800c884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d05b      	beq.n	800c944 <__multiply+0x148>
 800c88c:	6106      	str	r6, [r0, #16]
 800c88e:	b005      	add	sp, #20
 800c890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c894:	f843 2b04 	str.w	r2, [r3], #4
 800c898:	e7d8      	b.n	800c84c <__multiply+0x50>
 800c89a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c89e:	f1ba 0f00 	cmp.w	sl, #0
 800c8a2:	d024      	beq.n	800c8ee <__multiply+0xf2>
 800c8a4:	f104 0e14 	add.w	lr, r4, #20
 800c8a8:	46a9      	mov	r9, r5
 800c8aa:	f04f 0c00 	mov.w	ip, #0
 800c8ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c8b6:	fa1f fb87 	uxth.w	fp, r7
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8c4:	f8d9 7000 	ldr.w	r7, [r9]
 800c8c8:	4463      	add	r3, ip
 800c8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8dc:	4572      	cmp	r2, lr
 800c8de:	f849 3b04 	str.w	r3, [r9], #4
 800c8e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8e6:	d8e2      	bhi.n	800c8ae <__multiply+0xb2>
 800c8e8:	9b01      	ldr	r3, [sp, #4]
 800c8ea:	f845 c003 	str.w	ip, [r5, r3]
 800c8ee:	9b03      	ldr	r3, [sp, #12]
 800c8f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8f4:	3104      	adds	r1, #4
 800c8f6:	f1b9 0f00 	cmp.w	r9, #0
 800c8fa:	d021      	beq.n	800c940 <__multiply+0x144>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	f104 0c14 	add.w	ip, r4, #20
 800c902:	46ae      	mov	lr, r5
 800c904:	f04f 0a00 	mov.w	sl, #0
 800c908:	f8bc b000 	ldrh.w	fp, [ip]
 800c90c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c910:	fb09 770b 	mla	r7, r9, fp, r7
 800c914:	4457      	add	r7, sl
 800c916:	b29b      	uxth	r3, r3
 800c918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c91c:	f84e 3b04 	str.w	r3, [lr], #4
 800c920:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c928:	f8be 3000 	ldrh.w	r3, [lr]
 800c92c:	fb09 330a 	mla	r3, r9, sl, r3
 800c930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c934:	4562      	cmp	r2, ip
 800c936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c93a:	d8e5      	bhi.n	800c908 <__multiply+0x10c>
 800c93c:	9f01      	ldr	r7, [sp, #4]
 800c93e:	51eb      	str	r3, [r5, r7]
 800c940:	3504      	adds	r5, #4
 800c942:	e799      	b.n	800c878 <__multiply+0x7c>
 800c944:	3e01      	subs	r6, #1
 800c946:	e79b      	b.n	800c880 <__multiply+0x84>
 800c948:	0800d6c4 	.word	0x0800d6c4
 800c94c:	0800d6d5 	.word	0x0800d6d5

0800c950 <__pow5mult>:
 800c950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c954:	4615      	mov	r5, r2
 800c956:	f012 0203 	ands.w	r2, r2, #3
 800c95a:	4607      	mov	r7, r0
 800c95c:	460e      	mov	r6, r1
 800c95e:	d007      	beq.n	800c970 <__pow5mult+0x20>
 800c960:	4c25      	ldr	r4, [pc, #148]	@ (800c9f8 <__pow5mult+0xa8>)
 800c962:	3a01      	subs	r2, #1
 800c964:	2300      	movs	r3, #0
 800c966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c96a:	f7ff fe9f 	bl	800c6ac <__multadd>
 800c96e:	4606      	mov	r6, r0
 800c970:	10ad      	asrs	r5, r5, #2
 800c972:	d03d      	beq.n	800c9f0 <__pow5mult+0xa0>
 800c974:	69fc      	ldr	r4, [r7, #28]
 800c976:	b97c      	cbnz	r4, 800c998 <__pow5mult+0x48>
 800c978:	2010      	movs	r0, #16
 800c97a:	f7fe f86f 	bl	800aa5c <malloc>
 800c97e:	4602      	mov	r2, r0
 800c980:	61f8      	str	r0, [r7, #28]
 800c982:	b928      	cbnz	r0, 800c990 <__pow5mult+0x40>
 800c984:	4b1d      	ldr	r3, [pc, #116]	@ (800c9fc <__pow5mult+0xac>)
 800c986:	481e      	ldr	r0, [pc, #120]	@ (800ca00 <__pow5mult+0xb0>)
 800c988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c98c:	f000 fc20 	bl	800d1d0 <__assert_func>
 800c990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c994:	6004      	str	r4, [r0, #0]
 800c996:	60c4      	str	r4, [r0, #12]
 800c998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c99c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9a0:	b94c      	cbnz	r4, 800c9b6 <__pow5mult+0x66>
 800c9a2:	f240 2171 	movw	r1, #625	@ 0x271
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f7ff ff12 	bl	800c7d0 <__i2b>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	6003      	str	r3, [r0, #0]
 800c9b6:	f04f 0900 	mov.w	r9, #0
 800c9ba:	07eb      	lsls	r3, r5, #31
 800c9bc:	d50a      	bpl.n	800c9d4 <__pow5mult+0x84>
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	f7ff ff1a 	bl	800c7fc <__multiply>
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4680      	mov	r8, r0
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	f7ff fe4b 	bl	800c668 <_Bfree>
 800c9d2:	4646      	mov	r6, r8
 800c9d4:	106d      	asrs	r5, r5, #1
 800c9d6:	d00b      	beq.n	800c9f0 <__pow5mult+0xa0>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	b938      	cbnz	r0, 800c9ec <__pow5mult+0x9c>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	f7ff ff0b 	bl	800c7fc <__multiply>
 800c9e6:	6020      	str	r0, [r4, #0]
 800c9e8:	f8c0 9000 	str.w	r9, [r0]
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	e7e4      	b.n	800c9ba <__pow5mult+0x6a>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f6:	bf00      	nop
 800c9f8:	0800d730 	.word	0x0800d730
 800c9fc:	0800d655 	.word	0x0800d655
 800ca00:	0800d6d5 	.word	0x0800d6d5

0800ca04 <__lshift>:
 800ca04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca08:	460c      	mov	r4, r1
 800ca0a:	6849      	ldr	r1, [r1, #4]
 800ca0c:	6923      	ldr	r3, [r4, #16]
 800ca0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	4607      	mov	r7, r0
 800ca16:	4691      	mov	r9, r2
 800ca18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca1c:	f108 0601 	add.w	r6, r8, #1
 800ca20:	42b3      	cmp	r3, r6
 800ca22:	db0b      	blt.n	800ca3c <__lshift+0x38>
 800ca24:	4638      	mov	r0, r7
 800ca26:	f7ff fddf 	bl	800c5e8 <_Balloc>
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	b948      	cbnz	r0, 800ca42 <__lshift+0x3e>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	4b28      	ldr	r3, [pc, #160]	@ (800cad4 <__lshift+0xd0>)
 800ca32:	4829      	ldr	r0, [pc, #164]	@ (800cad8 <__lshift+0xd4>)
 800ca34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca38:	f000 fbca 	bl	800d1d0 <__assert_func>
 800ca3c:	3101      	adds	r1, #1
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	e7ee      	b.n	800ca20 <__lshift+0x1c>
 800ca42:	2300      	movs	r3, #0
 800ca44:	f100 0114 	add.w	r1, r0, #20
 800ca48:	f100 0210 	add.w	r2, r0, #16
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	4553      	cmp	r3, sl
 800ca50:	db33      	blt.n	800caba <__lshift+0xb6>
 800ca52:	6920      	ldr	r0, [r4, #16]
 800ca54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca58:	f104 0314 	add.w	r3, r4, #20
 800ca5c:	f019 091f 	ands.w	r9, r9, #31
 800ca60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca68:	d02b      	beq.n	800cac2 <__lshift+0xbe>
 800ca6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca6e:	468a      	mov	sl, r1
 800ca70:	2200      	movs	r2, #0
 800ca72:	6818      	ldr	r0, [r3, #0]
 800ca74:	fa00 f009 	lsl.w	r0, r0, r9
 800ca78:	4310      	orrs	r0, r2
 800ca7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca82:	459c      	cmp	ip, r3
 800ca84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca88:	d8f3      	bhi.n	800ca72 <__lshift+0x6e>
 800ca8a:	ebac 0304 	sub.w	r3, ip, r4
 800ca8e:	3b15      	subs	r3, #21
 800ca90:	f023 0303 	bic.w	r3, r3, #3
 800ca94:	3304      	adds	r3, #4
 800ca96:	f104 0015 	add.w	r0, r4, #21
 800ca9a:	4584      	cmp	ip, r0
 800ca9c:	bf38      	it	cc
 800ca9e:	2304      	movcc	r3, #4
 800caa0:	50ca      	str	r2, [r1, r3]
 800caa2:	b10a      	cbz	r2, 800caa8 <__lshift+0xa4>
 800caa4:	f108 0602 	add.w	r6, r8, #2
 800caa8:	3e01      	subs	r6, #1
 800caaa:	4638      	mov	r0, r7
 800caac:	612e      	str	r6, [r5, #16]
 800caae:	4621      	mov	r1, r4
 800cab0:	f7ff fdda 	bl	800c668 <_Bfree>
 800cab4:	4628      	mov	r0, r5
 800cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caba:	f842 0f04 	str.w	r0, [r2, #4]!
 800cabe:	3301      	adds	r3, #1
 800cac0:	e7c5      	b.n	800ca4e <__lshift+0x4a>
 800cac2:	3904      	subs	r1, #4
 800cac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cacc:	459c      	cmp	ip, r3
 800cace:	d8f9      	bhi.n	800cac4 <__lshift+0xc0>
 800cad0:	e7ea      	b.n	800caa8 <__lshift+0xa4>
 800cad2:	bf00      	nop
 800cad4:	0800d6c4 	.word	0x0800d6c4
 800cad8:	0800d6d5 	.word	0x0800d6d5

0800cadc <__mcmp>:
 800cadc:	690a      	ldr	r2, [r1, #16]
 800cade:	4603      	mov	r3, r0
 800cae0:	6900      	ldr	r0, [r0, #16]
 800cae2:	1a80      	subs	r0, r0, r2
 800cae4:	b530      	push	{r4, r5, lr}
 800cae6:	d10e      	bne.n	800cb06 <__mcmp+0x2a>
 800cae8:	3314      	adds	r3, #20
 800caea:	3114      	adds	r1, #20
 800caec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800caf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cafc:	4295      	cmp	r5, r2
 800cafe:	d003      	beq.n	800cb08 <__mcmp+0x2c>
 800cb00:	d205      	bcs.n	800cb0e <__mcmp+0x32>
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	bd30      	pop	{r4, r5, pc}
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	d3f3      	bcc.n	800caf4 <__mcmp+0x18>
 800cb0c:	e7fb      	b.n	800cb06 <__mcmp+0x2a>
 800cb0e:	2001      	movs	r0, #1
 800cb10:	e7f9      	b.n	800cb06 <__mcmp+0x2a>
	...

0800cb14 <__mdiff>:
 800cb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	4689      	mov	r9, r1
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	4648      	mov	r0, r9
 800cb20:	4614      	mov	r4, r2
 800cb22:	f7ff ffdb 	bl	800cadc <__mcmp>
 800cb26:	1e05      	subs	r5, r0, #0
 800cb28:	d112      	bne.n	800cb50 <__mdiff+0x3c>
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f7ff fd5b 	bl	800c5e8 <_Balloc>
 800cb32:	4602      	mov	r2, r0
 800cb34:	b928      	cbnz	r0, 800cb42 <__mdiff+0x2e>
 800cb36:	4b3f      	ldr	r3, [pc, #252]	@ (800cc34 <__mdiff+0x120>)
 800cb38:	f240 2137 	movw	r1, #567	@ 0x237
 800cb3c:	483e      	ldr	r0, [pc, #248]	@ (800cc38 <__mdiff+0x124>)
 800cb3e:	f000 fb47 	bl	800d1d0 <__assert_func>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb48:	4610      	mov	r0, r2
 800cb4a:	b003      	add	sp, #12
 800cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb50:	bfbc      	itt	lt
 800cb52:	464b      	movlt	r3, r9
 800cb54:	46a1      	movlt	r9, r4
 800cb56:	4630      	mov	r0, r6
 800cb58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb5c:	bfba      	itte	lt
 800cb5e:	461c      	movlt	r4, r3
 800cb60:	2501      	movlt	r5, #1
 800cb62:	2500      	movge	r5, #0
 800cb64:	f7ff fd40 	bl	800c5e8 <_Balloc>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	b918      	cbnz	r0, 800cb74 <__mdiff+0x60>
 800cb6c:	4b31      	ldr	r3, [pc, #196]	@ (800cc34 <__mdiff+0x120>)
 800cb6e:	f240 2145 	movw	r1, #581	@ 0x245
 800cb72:	e7e3      	b.n	800cb3c <__mdiff+0x28>
 800cb74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb78:	6926      	ldr	r6, [r4, #16]
 800cb7a:	60c5      	str	r5, [r0, #12]
 800cb7c:	f109 0310 	add.w	r3, r9, #16
 800cb80:	f109 0514 	add.w	r5, r9, #20
 800cb84:	f104 0e14 	add.w	lr, r4, #20
 800cb88:	f100 0b14 	add.w	fp, r0, #20
 800cb8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	46d9      	mov	r9, fp
 800cb98:	f04f 0c00 	mov.w	ip, #0
 800cb9c:	9b01      	ldr	r3, [sp, #4]
 800cb9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	fa1f f38a 	uxth.w	r3, sl
 800cbac:	4619      	mov	r1, r3
 800cbae:	b283      	uxth	r3, r0
 800cbb0:	1acb      	subs	r3, r1, r3
 800cbb2:	0c00      	lsrs	r0, r0, #16
 800cbb4:	4463      	add	r3, ip
 800cbb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbc4:	4576      	cmp	r6, lr
 800cbc6:	f849 3b04 	str.w	r3, [r9], #4
 800cbca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbce:	d8e5      	bhi.n	800cb9c <__mdiff+0x88>
 800cbd0:	1b33      	subs	r3, r6, r4
 800cbd2:	3b15      	subs	r3, #21
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	3415      	adds	r4, #21
 800cbda:	3304      	adds	r3, #4
 800cbdc:	42a6      	cmp	r6, r4
 800cbde:	bf38      	it	cc
 800cbe0:	2304      	movcc	r3, #4
 800cbe2:	441d      	add	r5, r3
 800cbe4:	445b      	add	r3, fp
 800cbe6:	461e      	mov	r6, r3
 800cbe8:	462c      	mov	r4, r5
 800cbea:	4544      	cmp	r4, r8
 800cbec:	d30e      	bcc.n	800cc0c <__mdiff+0xf8>
 800cbee:	f108 0103 	add.w	r1, r8, #3
 800cbf2:	1b49      	subs	r1, r1, r5
 800cbf4:	f021 0103 	bic.w	r1, r1, #3
 800cbf8:	3d03      	subs	r5, #3
 800cbfa:	45a8      	cmp	r8, r5
 800cbfc:	bf38      	it	cc
 800cbfe:	2100      	movcc	r1, #0
 800cc00:	440b      	add	r3, r1
 800cc02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc06:	b191      	cbz	r1, 800cc2e <__mdiff+0x11a>
 800cc08:	6117      	str	r7, [r2, #16]
 800cc0a:	e79d      	b.n	800cb48 <__mdiff+0x34>
 800cc0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc10:	46e6      	mov	lr, ip
 800cc12:	0c08      	lsrs	r0, r1, #16
 800cc14:	fa1c fc81 	uxtah	ip, ip, r1
 800cc18:	4471      	add	r1, lr
 800cc1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc1e:	b289      	uxth	r1, r1
 800cc20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc24:	f846 1b04 	str.w	r1, [r6], #4
 800cc28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc2c:	e7dd      	b.n	800cbea <__mdiff+0xd6>
 800cc2e:	3f01      	subs	r7, #1
 800cc30:	e7e7      	b.n	800cc02 <__mdiff+0xee>
 800cc32:	bf00      	nop
 800cc34:	0800d6c4 	.word	0x0800d6c4
 800cc38:	0800d6d5 	.word	0x0800d6d5

0800cc3c <__d2b>:
 800cc3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc40:	460f      	mov	r7, r1
 800cc42:	2101      	movs	r1, #1
 800cc44:	ec59 8b10 	vmov	r8, r9, d0
 800cc48:	4616      	mov	r6, r2
 800cc4a:	f7ff fccd 	bl	800c5e8 <_Balloc>
 800cc4e:	4604      	mov	r4, r0
 800cc50:	b930      	cbnz	r0, 800cc60 <__d2b+0x24>
 800cc52:	4602      	mov	r2, r0
 800cc54:	4b23      	ldr	r3, [pc, #140]	@ (800cce4 <__d2b+0xa8>)
 800cc56:	4824      	ldr	r0, [pc, #144]	@ (800cce8 <__d2b+0xac>)
 800cc58:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc5c:	f000 fab8 	bl	800d1d0 <__assert_func>
 800cc60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc68:	b10d      	cbz	r5, 800cc6e <__d2b+0x32>
 800cc6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	f1b8 0300 	subs.w	r3, r8, #0
 800cc74:	d023      	beq.n	800ccbe <__d2b+0x82>
 800cc76:	4668      	mov	r0, sp
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	f7ff fd7c 	bl	800c776 <__lo0bits>
 800cc7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc82:	b1d0      	cbz	r0, 800ccba <__d2b+0x7e>
 800cc84:	f1c0 0320 	rsb	r3, r0, #32
 800cc88:	fa02 f303 	lsl.w	r3, r2, r3
 800cc8c:	430b      	orrs	r3, r1
 800cc8e:	40c2      	lsrs	r2, r0
 800cc90:	6163      	str	r3, [r4, #20]
 800cc92:	9201      	str	r2, [sp, #4]
 800cc94:	9b01      	ldr	r3, [sp, #4]
 800cc96:	61a3      	str	r3, [r4, #24]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bf0c      	ite	eq
 800cc9c:	2201      	moveq	r2, #1
 800cc9e:	2202      	movne	r2, #2
 800cca0:	6122      	str	r2, [r4, #16]
 800cca2:	b1a5      	cbz	r5, 800ccce <__d2b+0x92>
 800cca4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cca8:	4405      	add	r5, r0
 800ccaa:	603d      	str	r5, [r7, #0]
 800ccac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ccb0:	6030      	str	r0, [r6, #0]
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	b003      	add	sp, #12
 800ccb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccba:	6161      	str	r1, [r4, #20]
 800ccbc:	e7ea      	b.n	800cc94 <__d2b+0x58>
 800ccbe:	a801      	add	r0, sp, #4
 800ccc0:	f7ff fd59 	bl	800c776 <__lo0bits>
 800ccc4:	9b01      	ldr	r3, [sp, #4]
 800ccc6:	6163      	str	r3, [r4, #20]
 800ccc8:	3020      	adds	r0, #32
 800ccca:	2201      	movs	r2, #1
 800cccc:	e7e8      	b.n	800cca0 <__d2b+0x64>
 800ccce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ccd6:	6038      	str	r0, [r7, #0]
 800ccd8:	6918      	ldr	r0, [r3, #16]
 800ccda:	f7ff fd2d 	bl	800c738 <__hi0bits>
 800ccde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cce2:	e7e5      	b.n	800ccb0 <__d2b+0x74>
 800cce4:	0800d6c4 	.word	0x0800d6c4
 800cce8:	0800d6d5 	.word	0x0800d6d5

0800ccec <__sfputc_r>:
 800ccec:	6893      	ldr	r3, [r2, #8]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	b410      	push	{r4}
 800ccf4:	6093      	str	r3, [r2, #8]
 800ccf6:	da08      	bge.n	800cd0a <__sfputc_r+0x1e>
 800ccf8:	6994      	ldr	r4, [r2, #24]
 800ccfa:	42a3      	cmp	r3, r4
 800ccfc:	db01      	blt.n	800cd02 <__sfputc_r+0x16>
 800ccfe:	290a      	cmp	r1, #10
 800cd00:	d103      	bne.n	800cd0a <__sfputc_r+0x1e>
 800cd02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd06:	f7fe bd14 	b.w	800b732 <__swbuf_r>
 800cd0a:	6813      	ldr	r3, [r2, #0]
 800cd0c:	1c58      	adds	r0, r3, #1
 800cd0e:	6010      	str	r0, [r2, #0]
 800cd10:	7019      	strb	r1, [r3, #0]
 800cd12:	4608      	mov	r0, r1
 800cd14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd18:	4770      	bx	lr

0800cd1a <__sfputs_r>:
 800cd1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	460f      	mov	r7, r1
 800cd20:	4614      	mov	r4, r2
 800cd22:	18d5      	adds	r5, r2, r3
 800cd24:	42ac      	cmp	r4, r5
 800cd26:	d101      	bne.n	800cd2c <__sfputs_r+0x12>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	e007      	b.n	800cd3c <__sfputs_r+0x22>
 800cd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd30:	463a      	mov	r2, r7
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7ff ffda 	bl	800ccec <__sfputc_r>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d1f3      	bne.n	800cd24 <__sfputs_r+0xa>
 800cd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd40 <_vfiprintf_r>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	460d      	mov	r5, r1
 800cd46:	b09d      	sub	sp, #116	@ 0x74
 800cd48:	4614      	mov	r4, r2
 800cd4a:	4698      	mov	r8, r3
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	b118      	cbz	r0, 800cd58 <_vfiprintf_r+0x18>
 800cd50:	6a03      	ldr	r3, [r0, #32]
 800cd52:	b90b      	cbnz	r3, 800cd58 <_vfiprintf_r+0x18>
 800cd54:	f7fe fc04 	bl	800b560 <__sinit>
 800cd58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd5a:	07d9      	lsls	r1, r3, #31
 800cd5c:	d405      	bmi.n	800cd6a <_vfiprintf_r+0x2a>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	059a      	lsls	r2, r3, #22
 800cd62:	d402      	bmi.n	800cd6a <_vfiprintf_r+0x2a>
 800cd64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd66:	f7fe fe06 	bl	800b976 <__retarget_lock_acquire_recursive>
 800cd6a:	89ab      	ldrh	r3, [r5, #12]
 800cd6c:	071b      	lsls	r3, r3, #28
 800cd6e:	d501      	bpl.n	800cd74 <_vfiprintf_r+0x34>
 800cd70:	692b      	ldr	r3, [r5, #16]
 800cd72:	b99b      	cbnz	r3, 800cd9c <_vfiprintf_r+0x5c>
 800cd74:	4629      	mov	r1, r5
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7fe fd1a 	bl	800b7b0 <__swsetup_r>
 800cd7c:	b170      	cbz	r0, 800cd9c <_vfiprintf_r+0x5c>
 800cd7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd80:	07dc      	lsls	r4, r3, #31
 800cd82:	d504      	bpl.n	800cd8e <_vfiprintf_r+0x4e>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	b01d      	add	sp, #116	@ 0x74
 800cd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	0598      	lsls	r0, r3, #22
 800cd92:	d4f7      	bmi.n	800cd84 <_vfiprintf_r+0x44>
 800cd94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd96:	f7fe fdef 	bl	800b978 <__retarget_lock_release_recursive>
 800cd9a:	e7f3      	b.n	800cd84 <_vfiprintf_r+0x44>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda0:	2320      	movs	r3, #32
 800cda2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdaa:	2330      	movs	r3, #48	@ 0x30
 800cdac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf5c <_vfiprintf_r+0x21c>
 800cdb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdb4:	f04f 0901 	mov.w	r9, #1
 800cdb8:	4623      	mov	r3, r4
 800cdba:	469a      	mov	sl, r3
 800cdbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc0:	b10a      	cbz	r2, 800cdc6 <_vfiprintf_r+0x86>
 800cdc2:	2a25      	cmp	r2, #37	@ 0x25
 800cdc4:	d1f9      	bne.n	800cdba <_vfiprintf_r+0x7a>
 800cdc6:	ebba 0b04 	subs.w	fp, sl, r4
 800cdca:	d00b      	beq.n	800cde4 <_vfiprintf_r+0xa4>
 800cdcc:	465b      	mov	r3, fp
 800cdce:	4622      	mov	r2, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff ffa1 	bl	800cd1a <__sfputs_r>
 800cdd8:	3001      	adds	r0, #1
 800cdda:	f000 80a7 	beq.w	800cf2c <_vfiprintf_r+0x1ec>
 800cdde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cde0:	445a      	add	r2, fp
 800cde2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cde4:	f89a 3000 	ldrb.w	r3, [sl]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 809f 	beq.w	800cf2c <_vfiprintf_r+0x1ec>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf8:	f10a 0a01 	add.w	sl, sl, #1
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	9307      	str	r3, [sp, #28]
 800ce00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce04:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce06:	4654      	mov	r4, sl
 800ce08:	2205      	movs	r2, #5
 800ce0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce0e:	4853      	ldr	r0, [pc, #332]	@ (800cf5c <_vfiprintf_r+0x21c>)
 800ce10:	f7f3 fa16 	bl	8000240 <memchr>
 800ce14:	9a04      	ldr	r2, [sp, #16]
 800ce16:	b9d8      	cbnz	r0, 800ce50 <_vfiprintf_r+0x110>
 800ce18:	06d1      	lsls	r1, r2, #27
 800ce1a:	bf44      	itt	mi
 800ce1c:	2320      	movmi	r3, #32
 800ce1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce22:	0713      	lsls	r3, r2, #28
 800ce24:	bf44      	itt	mi
 800ce26:	232b      	movmi	r3, #43	@ 0x2b
 800ce28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce32:	d015      	beq.n	800ce60 <_vfiprintf_r+0x120>
 800ce34:	9a07      	ldr	r2, [sp, #28]
 800ce36:	4654      	mov	r4, sl
 800ce38:	2000      	movs	r0, #0
 800ce3a:	f04f 0c0a 	mov.w	ip, #10
 800ce3e:	4621      	mov	r1, r4
 800ce40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce44:	3b30      	subs	r3, #48	@ 0x30
 800ce46:	2b09      	cmp	r3, #9
 800ce48:	d94b      	bls.n	800cee2 <_vfiprintf_r+0x1a2>
 800ce4a:	b1b0      	cbz	r0, 800ce7a <_vfiprintf_r+0x13a>
 800ce4c:	9207      	str	r2, [sp, #28]
 800ce4e:	e014      	b.n	800ce7a <_vfiprintf_r+0x13a>
 800ce50:	eba0 0308 	sub.w	r3, r0, r8
 800ce54:	fa09 f303 	lsl.w	r3, r9, r3
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	46a2      	mov	sl, r4
 800ce5e:	e7d2      	b.n	800ce06 <_vfiprintf_r+0xc6>
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	1d19      	adds	r1, r3, #4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	9103      	str	r1, [sp, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bfbb      	ittet	lt
 800ce6c:	425b      	neglt	r3, r3
 800ce6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce72:	9307      	strge	r3, [sp, #28]
 800ce74:	9307      	strlt	r3, [sp, #28]
 800ce76:	bfb8      	it	lt
 800ce78:	9204      	strlt	r2, [sp, #16]
 800ce7a:	7823      	ldrb	r3, [r4, #0]
 800ce7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce7e:	d10a      	bne.n	800ce96 <_vfiprintf_r+0x156>
 800ce80:	7863      	ldrb	r3, [r4, #1]
 800ce82:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce84:	d132      	bne.n	800ceec <_vfiprintf_r+0x1ac>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	1d1a      	adds	r2, r3, #4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	9203      	str	r2, [sp, #12]
 800ce8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce92:	3402      	adds	r4, #2
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf6c <_vfiprintf_r+0x22c>
 800ce9a:	7821      	ldrb	r1, [r4, #0]
 800ce9c:	2203      	movs	r2, #3
 800ce9e:	4650      	mov	r0, sl
 800cea0:	f7f3 f9ce 	bl	8000240 <memchr>
 800cea4:	b138      	cbz	r0, 800ceb6 <_vfiprintf_r+0x176>
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	eba0 000a 	sub.w	r0, r0, sl
 800ceac:	2240      	movs	r2, #64	@ 0x40
 800ceae:	4082      	lsls	r2, r0
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	3401      	adds	r4, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceba:	4829      	ldr	r0, [pc, #164]	@ (800cf60 <_vfiprintf_r+0x220>)
 800cebc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cec0:	2206      	movs	r2, #6
 800cec2:	f7f3 f9bd 	bl	8000240 <memchr>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d03f      	beq.n	800cf4a <_vfiprintf_r+0x20a>
 800ceca:	4b26      	ldr	r3, [pc, #152]	@ (800cf64 <_vfiprintf_r+0x224>)
 800cecc:	bb1b      	cbnz	r3, 800cf16 <_vfiprintf_r+0x1d6>
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	3307      	adds	r3, #7
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	3308      	adds	r3, #8
 800ced8:	9303      	str	r3, [sp, #12]
 800ceda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cedc:	443b      	add	r3, r7
 800cede:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee0:	e76a      	b.n	800cdb8 <_vfiprintf_r+0x78>
 800cee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee6:	460c      	mov	r4, r1
 800cee8:	2001      	movs	r0, #1
 800ceea:	e7a8      	b.n	800ce3e <_vfiprintf_r+0xfe>
 800ceec:	2300      	movs	r3, #0
 800ceee:	3401      	adds	r4, #1
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	4619      	mov	r1, r3
 800cef4:	f04f 0c0a 	mov.w	ip, #10
 800cef8:	4620      	mov	r0, r4
 800cefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefe:	3a30      	subs	r2, #48	@ 0x30
 800cf00:	2a09      	cmp	r2, #9
 800cf02:	d903      	bls.n	800cf0c <_vfiprintf_r+0x1cc>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0c6      	beq.n	800ce96 <_vfiprintf_r+0x156>
 800cf08:	9105      	str	r1, [sp, #20]
 800cf0a:	e7c4      	b.n	800ce96 <_vfiprintf_r+0x156>
 800cf0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf10:	4604      	mov	r4, r0
 800cf12:	2301      	movs	r3, #1
 800cf14:	e7f0      	b.n	800cef8 <_vfiprintf_r+0x1b8>
 800cf16:	ab03      	add	r3, sp, #12
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4b12      	ldr	r3, [pc, #72]	@ (800cf68 <_vfiprintf_r+0x228>)
 800cf1e:	a904      	add	r1, sp, #16
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7fd fee9 	bl	800acf8 <_printf_float>
 800cf26:	4607      	mov	r7, r0
 800cf28:	1c78      	adds	r0, r7, #1
 800cf2a:	d1d6      	bne.n	800ceda <_vfiprintf_r+0x19a>
 800cf2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf2e:	07d9      	lsls	r1, r3, #31
 800cf30:	d405      	bmi.n	800cf3e <_vfiprintf_r+0x1fe>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	059a      	lsls	r2, r3, #22
 800cf36:	d402      	bmi.n	800cf3e <_vfiprintf_r+0x1fe>
 800cf38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf3a:	f7fe fd1d 	bl	800b978 <__retarget_lock_release_recursive>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	065b      	lsls	r3, r3, #25
 800cf42:	f53f af1f 	bmi.w	800cd84 <_vfiprintf_r+0x44>
 800cf46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf48:	e71e      	b.n	800cd88 <_vfiprintf_r+0x48>
 800cf4a:	ab03      	add	r3, sp, #12
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4b05      	ldr	r3, [pc, #20]	@ (800cf68 <_vfiprintf_r+0x228>)
 800cf52:	a904      	add	r1, sp, #16
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7fe f957 	bl	800b208 <_printf_i>
 800cf5a:	e7e4      	b.n	800cf26 <_vfiprintf_r+0x1e6>
 800cf5c:	0800d830 	.word	0x0800d830
 800cf60:	0800d83a 	.word	0x0800d83a
 800cf64:	0800acf9 	.word	0x0800acf9
 800cf68:	0800cd1b 	.word	0x0800cd1b
 800cf6c:	0800d836 	.word	0x0800d836

0800cf70 <__sflush_r>:
 800cf70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf78:	0716      	lsls	r6, r2, #28
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	d454      	bmi.n	800d02a <__sflush_r+0xba>
 800cf80:	684b      	ldr	r3, [r1, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dc02      	bgt.n	800cf8c <__sflush_r+0x1c>
 800cf86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	dd48      	ble.n	800d01e <__sflush_r+0xae>
 800cf8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf8e:	2e00      	cmp	r6, #0
 800cf90:	d045      	beq.n	800d01e <__sflush_r+0xae>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf98:	682f      	ldr	r7, [r5, #0]
 800cf9a:	6a21      	ldr	r1, [r4, #32]
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	d030      	beq.n	800d002 <__sflush_r+0x92>
 800cfa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	0759      	lsls	r1, r3, #29
 800cfa6:	d505      	bpl.n	800cfb4 <__sflush_r+0x44>
 800cfa8:	6863      	ldr	r3, [r4, #4]
 800cfaa:	1ad2      	subs	r2, r2, r3
 800cfac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfae:	b10b      	cbz	r3, 800cfb4 <__sflush_r+0x44>
 800cfb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfb2:	1ad2      	subs	r2, r2, r3
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfb8:	6a21      	ldr	r1, [r4, #32]
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b0      	blx	r6
 800cfbe:	1c43      	adds	r3, r0, #1
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	d106      	bne.n	800cfd2 <__sflush_r+0x62>
 800cfc4:	6829      	ldr	r1, [r5, #0]
 800cfc6:	291d      	cmp	r1, #29
 800cfc8:	d82b      	bhi.n	800d022 <__sflush_r+0xb2>
 800cfca:	4a2a      	ldr	r2, [pc, #168]	@ (800d074 <__sflush_r+0x104>)
 800cfcc:	410a      	asrs	r2, r1
 800cfce:	07d6      	lsls	r6, r2, #31
 800cfd0:	d427      	bmi.n	800d022 <__sflush_r+0xb2>
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	6062      	str	r2, [r4, #4]
 800cfd6:	04d9      	lsls	r1, r3, #19
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	6022      	str	r2, [r4, #0]
 800cfdc:	d504      	bpl.n	800cfe8 <__sflush_r+0x78>
 800cfde:	1c42      	adds	r2, r0, #1
 800cfe0:	d101      	bne.n	800cfe6 <__sflush_r+0x76>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	b903      	cbnz	r3, 800cfe8 <__sflush_r+0x78>
 800cfe6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfea:	602f      	str	r7, [r5, #0]
 800cfec:	b1b9      	cbz	r1, 800d01e <__sflush_r+0xae>
 800cfee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cff2:	4299      	cmp	r1, r3
 800cff4:	d002      	beq.n	800cffc <__sflush_r+0x8c>
 800cff6:	4628      	mov	r0, r5
 800cff8:	f7ff faac 	bl	800c554 <_free_r>
 800cffc:	2300      	movs	r3, #0
 800cffe:	6363      	str	r3, [r4, #52]	@ 0x34
 800d000:	e00d      	b.n	800d01e <__sflush_r+0xae>
 800d002:	2301      	movs	r3, #1
 800d004:	4628      	mov	r0, r5
 800d006:	47b0      	blx	r6
 800d008:	4602      	mov	r2, r0
 800d00a:	1c50      	adds	r0, r2, #1
 800d00c:	d1c9      	bne.n	800cfa2 <__sflush_r+0x32>
 800d00e:	682b      	ldr	r3, [r5, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0c6      	beq.n	800cfa2 <__sflush_r+0x32>
 800d014:	2b1d      	cmp	r3, #29
 800d016:	d001      	beq.n	800d01c <__sflush_r+0xac>
 800d018:	2b16      	cmp	r3, #22
 800d01a:	d11e      	bne.n	800d05a <__sflush_r+0xea>
 800d01c:	602f      	str	r7, [r5, #0]
 800d01e:	2000      	movs	r0, #0
 800d020:	e022      	b.n	800d068 <__sflush_r+0xf8>
 800d022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d026:	b21b      	sxth	r3, r3
 800d028:	e01b      	b.n	800d062 <__sflush_r+0xf2>
 800d02a:	690f      	ldr	r7, [r1, #16]
 800d02c:	2f00      	cmp	r7, #0
 800d02e:	d0f6      	beq.n	800d01e <__sflush_r+0xae>
 800d030:	0793      	lsls	r3, r2, #30
 800d032:	680e      	ldr	r6, [r1, #0]
 800d034:	bf08      	it	eq
 800d036:	694b      	ldreq	r3, [r1, #20]
 800d038:	600f      	str	r7, [r1, #0]
 800d03a:	bf18      	it	ne
 800d03c:	2300      	movne	r3, #0
 800d03e:	eba6 0807 	sub.w	r8, r6, r7
 800d042:	608b      	str	r3, [r1, #8]
 800d044:	f1b8 0f00 	cmp.w	r8, #0
 800d048:	dde9      	ble.n	800d01e <__sflush_r+0xae>
 800d04a:	6a21      	ldr	r1, [r4, #32]
 800d04c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d04e:	4643      	mov	r3, r8
 800d050:	463a      	mov	r2, r7
 800d052:	4628      	mov	r0, r5
 800d054:	47b0      	blx	r6
 800d056:	2800      	cmp	r0, #0
 800d058:	dc08      	bgt.n	800d06c <__sflush_r+0xfc>
 800d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d062:	81a3      	strh	r3, [r4, #12]
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	4407      	add	r7, r0
 800d06e:	eba8 0800 	sub.w	r8, r8, r0
 800d072:	e7e7      	b.n	800d044 <__sflush_r+0xd4>
 800d074:	dfbffffe 	.word	0xdfbffffe

0800d078 <_fflush_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	690b      	ldr	r3, [r1, #16]
 800d07c:	4605      	mov	r5, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	b913      	cbnz	r3, 800d088 <_fflush_r+0x10>
 800d082:	2500      	movs	r5, #0
 800d084:	4628      	mov	r0, r5
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	b118      	cbz	r0, 800d092 <_fflush_r+0x1a>
 800d08a:	6a03      	ldr	r3, [r0, #32]
 800d08c:	b90b      	cbnz	r3, 800d092 <_fflush_r+0x1a>
 800d08e:	f7fe fa67 	bl	800b560 <__sinit>
 800d092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d0f3      	beq.n	800d082 <_fflush_r+0xa>
 800d09a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d09c:	07d0      	lsls	r0, r2, #31
 800d09e:	d404      	bmi.n	800d0aa <_fflush_r+0x32>
 800d0a0:	0599      	lsls	r1, r3, #22
 800d0a2:	d402      	bmi.n	800d0aa <_fflush_r+0x32>
 800d0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0a6:	f7fe fc66 	bl	800b976 <__retarget_lock_acquire_recursive>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7ff ff5f 	bl	800cf70 <__sflush_r>
 800d0b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0b4:	07da      	lsls	r2, r3, #31
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	d4e4      	bmi.n	800d084 <_fflush_r+0xc>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	059b      	lsls	r3, r3, #22
 800d0be:	d4e1      	bmi.n	800d084 <_fflush_r+0xc>
 800d0c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0c2:	f7fe fc59 	bl	800b978 <__retarget_lock_release_recursive>
 800d0c6:	e7dd      	b.n	800d084 <_fflush_r+0xc>

0800d0c8 <__swhatbuf_r>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	b096      	sub	sp, #88	@ 0x58
 800d0d4:	4615      	mov	r5, r2
 800d0d6:	461e      	mov	r6, r3
 800d0d8:	da0d      	bge.n	800d0f6 <__swhatbuf_r+0x2e>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0e0:	f04f 0100 	mov.w	r1, #0
 800d0e4:	bf14      	ite	ne
 800d0e6:	2340      	movne	r3, #64	@ 0x40
 800d0e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	6031      	str	r1, [r6, #0]
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	b016      	add	sp, #88	@ 0x58
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	466a      	mov	r2, sp
 800d0f8:	f000 f848 	bl	800d18c <_fstat_r>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	dbec      	blt.n	800d0da <__swhatbuf_r+0x12>
 800d100:	9901      	ldr	r1, [sp, #4]
 800d102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d10a:	4259      	negs	r1, r3
 800d10c:	4159      	adcs	r1, r3
 800d10e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d112:	e7eb      	b.n	800d0ec <__swhatbuf_r+0x24>

0800d114 <__smakebuf_r>:
 800d114:	898b      	ldrh	r3, [r1, #12]
 800d116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d118:	079d      	lsls	r5, r3, #30
 800d11a:	4606      	mov	r6, r0
 800d11c:	460c      	mov	r4, r1
 800d11e:	d507      	bpl.n	800d130 <__smakebuf_r+0x1c>
 800d120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	6123      	str	r3, [r4, #16]
 800d128:	2301      	movs	r3, #1
 800d12a:	6163      	str	r3, [r4, #20]
 800d12c:	b003      	add	sp, #12
 800d12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d130:	ab01      	add	r3, sp, #4
 800d132:	466a      	mov	r2, sp
 800d134:	f7ff ffc8 	bl	800d0c8 <__swhatbuf_r>
 800d138:	9f00      	ldr	r7, [sp, #0]
 800d13a:	4605      	mov	r5, r0
 800d13c:	4639      	mov	r1, r7
 800d13e:	4630      	mov	r0, r6
 800d140:	f7fd fcbe 	bl	800aac0 <_malloc_r>
 800d144:	b948      	cbnz	r0, 800d15a <__smakebuf_r+0x46>
 800d146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14a:	059a      	lsls	r2, r3, #22
 800d14c:	d4ee      	bmi.n	800d12c <__smakebuf_r+0x18>
 800d14e:	f023 0303 	bic.w	r3, r3, #3
 800d152:	f043 0302 	orr.w	r3, r3, #2
 800d156:	81a3      	strh	r3, [r4, #12]
 800d158:	e7e2      	b.n	800d120 <__smakebuf_r+0xc>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	6020      	str	r0, [r4, #0]
 800d15e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d162:	81a3      	strh	r3, [r4, #12]
 800d164:	9b01      	ldr	r3, [sp, #4]
 800d166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d16a:	b15b      	cbz	r3, 800d184 <__smakebuf_r+0x70>
 800d16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d170:	4630      	mov	r0, r6
 800d172:	f000 f81d 	bl	800d1b0 <_isatty_r>
 800d176:	b128      	cbz	r0, 800d184 <__smakebuf_r+0x70>
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	f023 0303 	bic.w	r3, r3, #3
 800d17e:	f043 0301 	orr.w	r3, r3, #1
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	431d      	orrs	r5, r3
 800d188:	81a5      	strh	r5, [r4, #12]
 800d18a:	e7cf      	b.n	800d12c <__smakebuf_r+0x18>

0800d18c <_fstat_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d07      	ldr	r5, [pc, #28]	@ (800d1ac <_fstat_r+0x20>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	4611      	mov	r1, r2
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	f7f4 fa6d 	bl	8001678 <_fstat>
 800d19e:	1c43      	adds	r3, r0, #1
 800d1a0:	d102      	bne.n	800d1a8 <_fstat_r+0x1c>
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	b103      	cbz	r3, 800d1a8 <_fstat_r+0x1c>
 800d1a6:	6023      	str	r3, [r4, #0]
 800d1a8:	bd38      	pop	{r3, r4, r5, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20002210 	.word	0x20002210

0800d1b0 <_isatty_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d06      	ldr	r5, [pc, #24]	@ (800d1cc <_isatty_r+0x1c>)
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	f7f4 fa6c 	bl	8001698 <_isatty>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_isatty_r+0x1a>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_isatty_r+0x1a>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	20002210 	.word	0x20002210

0800d1d0 <__assert_func>:
 800d1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d2:	4614      	mov	r4, r2
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b09      	ldr	r3, [pc, #36]	@ (800d1fc <__assert_func+0x2c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4605      	mov	r5, r0
 800d1dc:	68d8      	ldr	r0, [r3, #12]
 800d1de:	b954      	cbnz	r4, 800d1f6 <__assert_func+0x26>
 800d1e0:	4b07      	ldr	r3, [pc, #28]	@ (800d200 <__assert_func+0x30>)
 800d1e2:	461c      	mov	r4, r3
 800d1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1e8:	9100      	str	r1, [sp, #0]
 800d1ea:	462b      	mov	r3, r5
 800d1ec:	4905      	ldr	r1, [pc, #20]	@ (800d204 <__assert_func+0x34>)
 800d1ee:	f000 f841 	bl	800d274 <fiprintf>
 800d1f2:	f000 f851 	bl	800d298 <abort>
 800d1f6:	4b04      	ldr	r3, [pc, #16]	@ (800d208 <__assert_func+0x38>)
 800d1f8:	e7f4      	b.n	800d1e4 <__assert_func+0x14>
 800d1fa:	bf00      	nop
 800d1fc:	20000124 	.word	0x20000124
 800d200:	0800d886 	.word	0x0800d886
 800d204:	0800d858 	.word	0x0800d858
 800d208:	0800d84b 	.word	0x0800d84b

0800d20c <_calloc_r>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	fba1 5402 	umull	r5, r4, r1, r2
 800d212:	b93c      	cbnz	r4, 800d224 <_calloc_r+0x18>
 800d214:	4629      	mov	r1, r5
 800d216:	f7fd fc53 	bl	800aac0 <_malloc_r>
 800d21a:	4606      	mov	r6, r0
 800d21c:	b928      	cbnz	r0, 800d22a <_calloc_r+0x1e>
 800d21e:	2600      	movs	r6, #0
 800d220:	4630      	mov	r0, r6
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	220c      	movs	r2, #12
 800d226:	6002      	str	r2, [r0, #0]
 800d228:	e7f9      	b.n	800d21e <_calloc_r+0x12>
 800d22a:	462a      	mov	r2, r5
 800d22c:	4621      	mov	r1, r4
 800d22e:	f7fe fb15 	bl	800b85c <memset>
 800d232:	e7f5      	b.n	800d220 <_calloc_r+0x14>

0800d234 <__ascii_mbtowc>:
 800d234:	b082      	sub	sp, #8
 800d236:	b901      	cbnz	r1, 800d23a <__ascii_mbtowc+0x6>
 800d238:	a901      	add	r1, sp, #4
 800d23a:	b142      	cbz	r2, 800d24e <__ascii_mbtowc+0x1a>
 800d23c:	b14b      	cbz	r3, 800d252 <__ascii_mbtowc+0x1e>
 800d23e:	7813      	ldrb	r3, [r2, #0]
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	7812      	ldrb	r2, [r2, #0]
 800d244:	1e10      	subs	r0, r2, #0
 800d246:	bf18      	it	ne
 800d248:	2001      	movne	r0, #1
 800d24a:	b002      	add	sp, #8
 800d24c:	4770      	bx	lr
 800d24e:	4610      	mov	r0, r2
 800d250:	e7fb      	b.n	800d24a <__ascii_mbtowc+0x16>
 800d252:	f06f 0001 	mvn.w	r0, #1
 800d256:	e7f8      	b.n	800d24a <__ascii_mbtowc+0x16>

0800d258 <__ascii_wctomb>:
 800d258:	4603      	mov	r3, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	b141      	cbz	r1, 800d270 <__ascii_wctomb+0x18>
 800d25e:	2aff      	cmp	r2, #255	@ 0xff
 800d260:	d904      	bls.n	800d26c <__ascii_wctomb+0x14>
 800d262:	228a      	movs	r2, #138	@ 0x8a
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	4770      	bx	lr
 800d26c:	700a      	strb	r2, [r1, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	4770      	bx	lr
	...

0800d274 <fiprintf>:
 800d274:	b40e      	push	{r1, r2, r3}
 800d276:	b503      	push	{r0, r1, lr}
 800d278:	4601      	mov	r1, r0
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	4805      	ldr	r0, [pc, #20]	@ (800d294 <fiprintf+0x20>)
 800d27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	f7ff fd5b 	bl	800cd40 <_vfiprintf_r>
 800d28a:	b002      	add	sp, #8
 800d28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d290:	b003      	add	sp, #12
 800d292:	4770      	bx	lr
 800d294:	20000124 	.word	0x20000124

0800d298 <abort>:
 800d298:	b508      	push	{r3, lr}
 800d29a:	2006      	movs	r0, #6
 800d29c:	f000 f82c 	bl	800d2f8 <raise>
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	f7f4 f9b5 	bl	8001610 <_exit>

0800d2a6 <_raise_r>:
 800d2a6:	291f      	cmp	r1, #31
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	d904      	bls.n	800d2ba <_raise_r+0x14>
 800d2b0:	2316      	movs	r3, #22
 800d2b2:	6003      	str	r3, [r0, #0]
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2bc:	b112      	cbz	r2, 800d2c4 <_raise_r+0x1e>
 800d2be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2c2:	b94b      	cbnz	r3, 800d2d8 <_raise_r+0x32>
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f000 f831 	bl	800d32c <_getpid_r>
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2d4:	f000 b818 	b.w	800d308 <_kill_r>
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d00a      	beq.n	800d2f2 <_raise_r+0x4c>
 800d2dc:	1c59      	adds	r1, r3, #1
 800d2de:	d103      	bne.n	800d2e8 <_raise_r+0x42>
 800d2e0:	2316      	movs	r3, #22
 800d2e2:	6003      	str	r3, [r0, #0]
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	e7e7      	b.n	800d2b8 <_raise_r+0x12>
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4798      	blx	r3
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e7e0      	b.n	800d2b8 <_raise_r+0x12>
	...

0800d2f8 <raise>:
 800d2f8:	4b02      	ldr	r3, [pc, #8]	@ (800d304 <raise+0xc>)
 800d2fa:	4601      	mov	r1, r0
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f7ff bfd2 	b.w	800d2a6 <_raise_r>
 800d302:	bf00      	nop
 800d304:	20000124 	.word	0x20000124

0800d308 <_kill_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4d07      	ldr	r5, [pc, #28]	@ (800d328 <_kill_r+0x20>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4604      	mov	r4, r0
 800d310:	4608      	mov	r0, r1
 800d312:	4611      	mov	r1, r2
 800d314:	602b      	str	r3, [r5, #0]
 800d316:	f7f4 f96b 	bl	80015f0 <_kill>
 800d31a:	1c43      	adds	r3, r0, #1
 800d31c:	d102      	bne.n	800d324 <_kill_r+0x1c>
 800d31e:	682b      	ldr	r3, [r5, #0]
 800d320:	b103      	cbz	r3, 800d324 <_kill_r+0x1c>
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	bf00      	nop
 800d328:	20002210 	.word	0x20002210

0800d32c <_getpid_r>:
 800d32c:	f7f4 b958 	b.w	80015e0 <_getpid>

0800d330 <_init>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	bf00      	nop
 800d334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d336:	bc08      	pop	{r3}
 800d338:	469e      	mov	lr, r3
 800d33a:	4770      	bx	lr

0800d33c <_fini>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	bf00      	nop
 800d340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d342:	bc08      	pop	{r3}
 800d344:	469e      	mov	lr, r3
 800d346:	4770      	bx	lr
