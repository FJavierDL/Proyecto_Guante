
Proyecto_Guantazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08009070  08009070  0000a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  0000b320  2**0
                  CONTENTS
  4 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  0000b320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096a4  080096a4  0000a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080096a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  08009888  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  08009928  0000b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000abc  20000320  080099c8  0000b320  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000ddc  080099c8  0000bddc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY
 14 .debug_info   000150b1  00000000  00000000  0000b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034d4  00000000  00000000  000203ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001400  00000000  00000000  000238d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2b  00000000  00000000  00024cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf0f  00000000  00000000  00025c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a15  00000000  00000000  00052b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109501  00000000  00000000  00069527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00172a28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000063b4  00000000  00000000  00172a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000086  00000000  00000000  00178e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	08009054 	.word	0x08009054

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	08009054 	.word	0x08009054

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 fae8 	bl	8000bc4 <bno055_writeData>
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4619      	mov	r1, r3
 800060a:	203d      	movs	r0, #61	@ 0x3d
 800060c:	f000 fada 	bl	8000bc4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000616:	2013      	movs	r0, #19
 8000618:	f000 fac8 	bl	8000bac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800061c:	e002      	b.n	8000624 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800061e:	2007      	movs	r0, #7
 8000620:	f000 fac4 	bl	8000bac <bno055_delay>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffe3 	bl	80005fc <bno055_setOperationMode>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800063e:	200c      	movs	r0, #12
 8000640:	f7ff ffdc 	bl	80005fc <bno055_setOperationMode>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800064c:	2120      	movs	r1, #32
 800064e:	203f      	movs	r0, #63	@ 0x3f
 8000650:	f000 fab8 	bl	8000bc4 <bno055_writeData>
  bno055_delay(700);
 8000654:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000658:	f000 faa8 	bl	8000bac <bno055_delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  bno055_reset();
 8000666:	f7ff ffef 	bl	8000648 <bno055_reset>

  uint8_t id = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fb91 	bl	8000d9c <bno055_readData>
  if (id != BNO055_ID) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2ba0      	cmp	r3, #160	@ 0xa0
 800067e:	d004      	beq.n	800068a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <bno055_setup+0x4c>)
 8000686:	f006 fba1 	bl	8006dcc <iprintf>
  }
  bno055_setPage(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffa8 	bl	80005e0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000690:	2100      	movs	r1, #0
 8000692:	203f      	movs	r0, #63	@ 0x3f
 8000694:	f000 fa96 	bl	8000bc4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000698:	f7ff ffc8 	bl	800062c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fa85 	bl	8000bac <bno055_delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08009070 	.word	0x08009070

080006b0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80006b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006b4:	b09e      	sub	sp, #120	@ 0x78
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff8e 	bl	80005e0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80006c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d108      	bne.n	80006de <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80006cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006d4:	2208      	movs	r2, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fb60 	bl	8000d9c <bno055_readData>
 80006dc:	e007      	b.n	80006ee <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80006de:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006e6:	2206      	movs	r2, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fb57 	bl	8000d9c <bno055_readData>

  double scale = 1;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	4b81      	ldr	r3, [pc, #516]	@ (80008f8 <bno055_getVector+0x248>)
 80006f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80006f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fc:	2b0e      	cmp	r3, #14
 80006fe:	d108      	bne.n	8000712 <bno055_getVector+0x62>
    scale = magScale;
 8000700:	4b7e      	ldr	r3, [pc, #504]	@ (80008fc <bno055_getVector+0x24c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800070c:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000710:	e03a      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000716:	2b08      	cmp	r3, #8
 8000718:	d007      	beq.n	800072a <bno055_getVector+0x7a>
 800071a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800071e:	2b28      	cmp	r3, #40	@ 0x28
 8000720:	d003      	beq.n	800072a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000726:	2b2e      	cmp	r3, #46	@ 0x2e
 8000728:	d108      	bne.n	800073c <bno055_getVector+0x8c>
    scale = accelScale;
 800072a:	4b75      	ldr	r3, [pc, #468]	@ (8000900 <bno055_getVector+0x250>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000736:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800073a:	e025      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800073c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000740:	2b14      	cmp	r3, #20
 8000742:	d108      	bne.n	8000756 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000744:	4b6f      	ldr	r3, [pc, #444]	@ (8000904 <bno055_getVector+0x254>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000750:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 8000754:	e018      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800075a:	2b1a      	cmp	r3, #26
 800075c:	d108      	bne.n	8000770 <bno055_getVector+0xc0>
    scale = eulerScale;
 800075e:	4b6a      	ldr	r3, [pc, #424]	@ (8000908 <bno055_getVector+0x258>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800076a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
 800076e:	e00b      	b.n	8000788 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000774:	2b20      	cmp	r3, #32
 8000776:	d107      	bne.n	8000788 <bno055_getVector+0xd8>
    scale = quaScale;
 8000778:	4b64      	ldr	r3, [pc, #400]	@ (800090c <bno055_getVector+0x25c>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000784:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000788:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f006 fc97 	bl	80070c4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800079a:	2b20      	cmp	r3, #32
 800079c:	d14c      	bne.n	8000838 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800079e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007b8:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007c0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80007c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80007de:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80007e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007e6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80007ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000804:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000808:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800080c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000810:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800082a:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800082e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000832:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000836:	e038      	b.n	80008aa <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000838:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b21a      	sxth	r2, r3
 8000840:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000852:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8000856:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800085a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800085e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000878:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800087c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000880:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000884:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800089e:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80008a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008a6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  }

  return xyz;
 80008aa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80008ae:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80008c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80008c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80008ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80008ce:	ec49 8b14 	vmov	d4, r8, r9
 80008d2:	ec45 4b15 	vmov	d5, r4, r5
 80008d6:	ec41 0b16 	vmov	d6, r0, r1
 80008da:	ec43 2b17 	vmov	d7, r2, r3
}
 80008de:	eeb0 0b44 	vmov.f64	d0, d4
 80008e2:	eeb0 1b45 	vmov.f64	d1, d5
 80008e6:	eeb0 2b46 	vmov.f64	d2, d6
 80008ea:	eeb0 3b47 	vmov.f64	d3, d7
 80008ee:	3778      	adds	r7, #120	@ 0x78
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80008f6:	bf00      	nop
 80008f8:	3ff00000 	.word	0x3ff00000
 80008fc:	20000006 	.word	0x20000006
 8000900:	20000000 	.word	0x20000000
 8000904:	20000002 	.word	0x20000002
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008

08000910 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000914:	b090      	sub	sp, #64	@ 0x40
 8000916:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000918:	2020      	movs	r0, #32
 800091a:	f7ff fec9 	bl	80006b0 <bno055_getVector>
 800091e:	eeb0 4b40 	vmov.f64	d4, d0
 8000922:	eeb0 5b41 	vmov.f64	d5, d1
 8000926:	eeb0 6b42 	vmov.f64	d6, d2
 800092a:	eeb0 7b43 	vmov.f64	d7, d3
 800092e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000932:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000936:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800093a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800093e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000942:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000946:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800094a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800094e:	ec49 8b14 	vmov	d4, r8, r9
 8000952:	ec45 4b15 	vmov	d5, r4, r5
 8000956:	ec41 0b16 	vmov	d6, r0, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
}
 800095e:	eeb0 0b44 	vmov.f64	d0, d4
 8000962:	eeb0 1b45 	vmov.f64	d1, d5
 8000966:	eeb0 2b46 	vmov.f64	d2, d6
 800096a:	eeb0 3b47 	vmov.f64	d3, d7
 800096e:	3740      	adds	r7, #64	@ 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000976 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800097e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000982:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800098e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000992:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000996:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00b      	beq.n	80009b6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800099e:	e000      	b.n	80009a2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009a0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b6:	687b      	ldr	r3, [r7, #4]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	2b80      	cmp	r3, #128	@ 0x80
 8000a22:	d101      	bne.n	8000a28 <LL_USART_IsActiveFlag_TXE+0x18>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a4a:	d101      	bne.n	8000a50 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a72:	d101      	bne.n	8000a78 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <LL_USART_IsActiveFlag_REACK+0x1c>
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b089      	sub	sp, #36	@ 0x24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	e853 3f00 	ldrex	r3, [r3]
 8000a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	61ba      	str	r2, [r7, #24]
 8000aa8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	e841 2300 	strex	r3, r2, [r1]
 8000ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1e9      	bne.n	8000a8e <LL_USART_EnableIT_RXNE+0x8>
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3724      	adds	r7, #36	@ 0x24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	e853 3f00 	ldrex	r3, [r3]
 8000adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	61ba      	str	r2, [r7, #24]
 8000aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	e841 2300 	strex	r3, r2, [r1]
 8000af8:	613b      	str	r3, [r7, #16]
   return(result);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1e7      	bne.n	8000ad0 <LL_USART_EnableIT_ERROR+0x8>
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000b1a:	78fa      	ldrb	r2, [r7, #3]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800

08000b5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <bno055_assignI2C+0x1c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000033c 	.word	0x2000033c

08000bac <bno055_delay>:

void bno055_delay(int time) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fa18 	bl	8001fec <HAL_Delay>
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	733b      	strb	r3, [r7, #12]
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d48 <bno055_writeData+0x184>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f107 020c 	add.w	r2, r7, #12
 8000be4:	230a      	movs	r3, #10
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	2150      	movs	r1, #80	@ 0x50
 8000bec:	f002 fb9a 	bl	8003324 <HAL_I2C_Master_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80a0 	beq.w	8000d3c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d103      	bne.n	8000c0a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000c02:	4852      	ldr	r0, [pc, #328]	@ (8000d4c <bno055_writeData+0x188>)
 8000c04:	f006 f94a 	bl	8006e9c <puts>
 8000c08:	e012      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d103      	bne.n	8000c18 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000c10:	484f      	ldr	r0, [pc, #316]	@ (8000d50 <bno055_writeData+0x18c>)
 8000c12:	f006 f943 	bl	8006e9c <puts>
 8000c16:	e00b      	b.n	8000c30 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d103      	bne.n	8000c26 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000c1e:	484d      	ldr	r0, [pc, #308]	@ (8000d54 <bno055_writeData+0x190>)
 8000c20:	f006 f93c 	bl	8006e9c <puts>
 8000c24:	e004      	b.n	8000c30 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484b      	ldr	r0, [pc, #300]	@ (8000d58 <bno055_writeData+0x194>)
 8000c2c:	f006 f8ce 	bl	8006dcc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000c30:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <bno055_writeData+0x184>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fd6d 	bl	8003714 <HAL_I2C_GetError>
 8000c3a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d07e      	beq.n	8000d40 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d103      	bne.n	8000c50 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000c48:	4844      	ldr	r0, [pc, #272]	@ (8000d5c <bno055_writeData+0x198>)
 8000c4a:	f006 f927 	bl	8006e9c <puts>
 8000c4e:	e021      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d103      	bne.n	8000c5e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000c56:	4842      	ldr	r0, [pc, #264]	@ (8000d60 <bno055_writeData+0x19c>)
 8000c58:	f006 f920 	bl	8006e9c <puts>
 8000c5c:	e01a      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d103      	bne.n	8000c6c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000c64:	483f      	ldr	r0, [pc, #252]	@ (8000d64 <bno055_writeData+0x1a0>)
 8000c66:	f006 f919 	bl	8006e9c <puts>
 8000c6a:	e013      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d103      	bne.n	8000c7a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000c72:	483d      	ldr	r0, [pc, #244]	@ (8000d68 <bno055_writeData+0x1a4>)
 8000c74:	f006 f912 	bl	8006e9c <puts>
 8000c78:	e00c      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d103      	bne.n	8000c88 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000c80:	483a      	ldr	r0, [pc, #232]	@ (8000d6c <bno055_writeData+0x1a8>)
 8000c82:	f006 f90b 	bl	8006e9c <puts>
 8000c86:	e005      	b.n	8000c94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	d102      	bne.n	8000c94 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000c8e:	4838      	ldr	r0, [pc, #224]	@ (8000d70 <bno055_writeData+0x1ac>)
 8000c90:	f006 f904 	bl	8006e9c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <bno055_writeData+0x184>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fd2d 	bl	80036f8 <HAL_I2C_GetState>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ca8:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000caa:	f006 f8f7 	bl	8006e9c <puts>
 8000cae:	e048      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d103      	bne.n	8000cbe <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000cb6:	482f      	ldr	r0, [pc, #188]	@ (8000d74 <bno055_writeData+0x1b0>)
 8000cb8:	f006 f8f0 	bl	8006e9c <puts>
 8000cbc:	e041      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b24      	cmp	r3, #36	@ 0x24
 8000cc2:	d103      	bne.n	8000ccc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <bno055_writeData+0x1b4>)
 8000cc6:	f006 f8e9 	bl	8006e9c <puts>
 8000cca:	e03a      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b21      	cmp	r3, #33	@ 0x21
 8000cd0:	d103      	bne.n	8000cda <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000cd2:	482a      	ldr	r0, [pc, #168]	@ (8000d7c <bno055_writeData+0x1b8>)
 8000cd4:	f006 f8e2 	bl	8006e9c <puts>
 8000cd8:	e033      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b22      	cmp	r3, #34	@ 0x22
 8000cde:	d103      	bne.n	8000ce8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ce0:	4827      	ldr	r0, [pc, #156]	@ (8000d80 <bno055_writeData+0x1bc>)
 8000ce2:	f006 f8db 	bl	8006e9c <puts>
 8000ce6:	e02c      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b28      	cmp	r3, #40	@ 0x28
 8000cec:	d103      	bne.n	8000cf6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <bno055_writeData+0x1c0>)
 8000cf0:	f006 f8d4 	bl	8006e9c <puts>
 8000cf4:	e025      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b29      	cmp	r3, #41	@ 0x29
 8000cfa:	d103      	bne.n	8000d04 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000cfc:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <bno055_writeData+0x1c4>)
 8000cfe:	f006 f8cd 	bl	8006e9c <puts>
 8000d02:	e01e      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d08:	d103      	bne.n	8000d12 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000d0a:	4820      	ldr	r0, [pc, #128]	@ (8000d8c <bno055_writeData+0x1c8>)
 8000d0c:	f006 f8c6 	bl	8006e9c <puts>
 8000d10:	e017      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b60      	cmp	r3, #96	@ 0x60
 8000d16:	d103      	bne.n	8000d20 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000d18:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <bno055_writeData+0x1cc>)
 8000d1a:	f006 f8bf 	bl	8006e9c <puts>
 8000d1e:	e010      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8000d24:	d103      	bne.n	8000d2e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <bno055_writeData+0x1d0>)
 8000d28:	f006 f8b8 	bl	8006e9c <puts>
 8000d2c:	e009      	b.n	8000d42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2be0      	cmp	r3, #224	@ 0xe0
 8000d32:	d106      	bne.n	8000d42 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000d34:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <bno055_writeData+0x1d4>)
 8000d36:	f006 f8b1 	bl	8006e9c <puts>
 8000d3a:	e002      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d3c:	bf00      	nop
 8000d3e:	e000      	b.n	8000d42 <bno055_writeData+0x17e>
    return;
 8000d40:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000033c 	.word	0x2000033c
 8000d4c:	080090ac 	.word	0x080090ac
 8000d50:	080090d0 	.word	0x080090d0
 8000d54:	080090f8 	.word	0x080090f8
 8000d58:	0800911c 	.word	0x0800911c
 8000d5c:	08009134 	.word	0x08009134
 8000d60:	08009148 	.word	0x08009148
 8000d64:	0800915c 	.word	0x0800915c
 8000d68:	08009170 	.word	0x08009170
 8000d6c:	08009184 	.word	0x08009184
 8000d70:	08009198 	.word	0x08009198
 8000d74:	080091b0 	.word	0x080091b0
 8000d78:	080091c8 	.word	0x080091c8
 8000d7c:	080091dc 	.word	0x080091dc
 8000d80:	080091f4 	.word	0x080091f4
 8000d84:	0800920c 	.word	0x0800920c
 8000d88:	08009224 	.word	0x08009224
 8000d8c:	08009244 	.word	0x08009244
 8000d90:	08009264 	.word	0x08009264
 8000d94:	0800927c 	.word	0x0800927c
 8000d98:	08009294 	.word	0x08009294

08000d9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <bno055_readData+0x40>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	1dfa      	adds	r2, r7, #7
 8000db2:	2364      	movs	r3, #100	@ 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	2150      	movs	r1, #80	@ 0x50
 8000dba:	f002 fab3 	bl	8003324 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <bno055_readData+0x40>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2264      	movs	r2, #100	@ 0x64
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	2150      	movs	r1, #80	@ 0x50
 8000dce:	f002 fb9d 	bl	800350c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000033c 	.word	0x2000033c

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0a4      	sub	sp, #144	@ 0x90
 8000de4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 f8a4 	bl	8001f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f99b 	bl	8001124 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	ITM_Port32(31) = 1;
 8000dee:	4bbb      	ldr	r3, [pc, #748]	@ (80010dc <main+0x2fc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 fbc8 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df8:	f000 fb90 	bl	800151c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dfc:	f000 fad2 	bl	80013a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e00:	f000 fb5e 	bl	80014c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e04:	f000 fa4e 	bl	80012a4 <MX_I2C1_Init>
  MX_ETH_Init();
 8000e08:	f000 f9fe 	bl	8001208 <MX_ETH_Init>
  MX_I2C2_Init();
 8000e0c:	f000 fa8a 	bl	8001324 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	ITM_Port32(31) = 2;
 8000e10:	4bb2      	ldr	r3, [pc, #712]	@ (80010dc <main+0x2fc>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	601a      	str	r2, [r3, #0]

	bno055_assignI2C(&hi2c2);
 8000e16:	48b2      	ldr	r0, [pc, #712]	@ (80010e0 <main+0x300>)
 8000e18:	f7ff feb8 	bl	8000b8c <bno055_assignI2C>
	bno055_setup();
 8000e1c:	f7ff fc20 	bl	8000660 <bno055_setup>
	bno055_setOperationModeNDOF();
 8000e20:	f7ff fc0b 	bl	800063a <bno055_setOperationModeNDOF>

	bno055_assignI2C(&hi2c1);
 8000e24:	48af      	ldr	r0, [pc, #700]	@ (80010e4 <main+0x304>)
 8000e26:	f7ff feb1 	bl	8000b8c <bno055_assignI2C>
	bno055_setup();
 8000e2a:	f7ff fc19 	bl	8000660 <bno055_setup>
	bno055_setOperationModeNDOF();
 8000e2e:	f7ff fc04 	bl	800063a <bno055_setOperationModeNDOF>


	/* Polling USART initialisation */
	while ((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3)))){
 8000e32:	bf00      	nop
 8000e34:	48ac      	ldr	r0, [pc, #688]	@ (80010e8 <main+0x308>)
 8000e36:	f7ff fdfe 	bl	8000a36 <LL_USART_IsActiveFlag_TEACK>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <main+0x54>
 8000e40:	48a9      	ldr	r0, [pc, #676]	@ (80010e8 <main+0x308>)
 8000e42:	f7ff fe0c 	bl	8000a5e <LL_USART_IsActiveFlag_REACK>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f3      	beq.n	8000e34 <main+0x54>
	}

	/* Enable RXNE and Error interrupts */
	LL_USART_EnableIT_RXNE(USART3);
 8000e4c:	48a6      	ldr	r0, [pc, #664]	@ (80010e8 <main+0x308>)
 8000e4e:	f7ff fe1a 	bl	8000a86 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART3);
 8000e52:	48a5      	ldr	r0, [pc, #660]	@ (80010e8 <main+0x308>)
 8000e54:	f7ff fe38 	bl	8000ac8 <LL_USART_EnableIT_ERROR>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//HAL_Delay(100);
		bno055_assignI2C(&hi2c1);
 8000e58:	48a2      	ldr	r0, [pc, #648]	@ (80010e4 <main+0x304>)
 8000e5a:	f7ff fe97 	bl	8000b8c <bno055_assignI2C>
		bno055_vector_t v1 = bno055_getVectorQuaternion();
 8000e5e:	f7ff fd57 	bl	8000910 <bno055_getVectorQuaternion>
 8000e62:	eeb0 4b40 	vmov.f64	d4, d0
 8000e66:	eeb0 5b41 	vmov.f64	d5, d1
 8000e6a:	eeb0 6b42 	vmov.f64	d6, d2
 8000e6e:	eeb0 7b43 	vmov.f64	d7, d3
 8000e72:	ed87 4b00 	vstr	d4, [r7]
 8000e76:	ed87 5b02 	vstr	d5, [r7, #8]
 8000e7a:	ed87 6b04 	vstr	d6, [r7, #16]
 8000e7e:	ed87 7b06 	vstr	d7, [r7, #24]
		w1 = v1.w;
 8000e82:	ed97 7b00 	vldr	d7, [r7]
 8000e86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e8a:	4b98      	ldr	r3, [pc, #608]	@ (80010ec <main+0x30c>)
 8000e8c:	edc3 7a00 	vstr	s15, [r3]
		x1 = v1.x;
 8000e90:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e98:	4b95      	ldr	r3, [pc, #596]	@ (80010f0 <main+0x310>)
 8000e9a:	edc3 7a00 	vstr	s15, [r3]
		y1 = v1.y;
 8000e9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ea2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea6:	4b93      	ldr	r3, [pc, #588]	@ (80010f4 <main+0x314>)
 8000ea8:	edc3 7a00 	vstr	s15, [r3]
		z1 = v1.z;
 8000eac:	ed97 7b06 	vldr	d7, [r7, #24]
 8000eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb4:	4b90      	ldr	r3, [pc, #576]	@ (80010f8 <main+0x318>)
 8000eb6:	edc3 7a00 	vstr	s15, [r3]


		bno055_assignI2C(&hi2c2);
 8000eba:	4889      	ldr	r0, [pc, #548]	@ (80010e0 <main+0x300>)
 8000ebc:	f7ff fe66 	bl	8000b8c <bno055_assignI2C>
		bno055_vector_t v2 = bno055_getVectorQuaternion();
 8000ec0:	f7ff fd26 	bl	8000910 <bno055_getVectorQuaternion>
 8000ec4:	eeb0 4b40 	vmov.f64	d4, d0
 8000ec8:	eeb0 5b41 	vmov.f64	d5, d1
 8000ecc:	eeb0 6b42 	vmov.f64	d6, d2
 8000ed0:	eeb0 7b43 	vmov.f64	d7, d3
 8000ed4:	ed87 4b08 	vstr	d4, [r7, #32]
 8000ed8:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8000edc:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8000ee0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
		w2 = v2.w;
 8000ee4:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ee8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eec:	4b83      	ldr	r3, [pc, #524]	@ (80010fc <main+0x31c>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
		x2 = v2.x;
 8000ef2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000ef6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efa:	4b81      	ldr	r3, [pc, #516]	@ (8001100 <main+0x320>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
		y2 = v2.y;
 8000f00:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000f04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f08:	4b7e      	ldr	r3, [pc, #504]	@ (8001104 <main+0x324>)
 8000f0a:	edc3 7a00 	vstr	s15, [r3]
		z2 = v2.z;
 8000f0e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8000f12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f16:	4b7c      	ldr	r3, [pc, #496]	@ (8001108 <main+0x328>)
 8000f18:	edc3 7a00 	vstr	s15, [r3]

		//Si el valor es 0, entra en modo entrenamiento, si el valor es 1, entra en modo ejecucion
		tipoFuncionamiento = 0;
 8000f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800110c <main+0x32c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

		if(tipoFuncionamiento == 0){
 8000f22:	4b7a      	ldr	r3, [pc, #488]	@ (800110c <main+0x32c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d171      	bne.n	800100e <main+0x22e>
			if(cont < 2001){
 8000f2a:	4b79      	ldr	r3, [pc, #484]	@ (8001110 <main+0x330>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f32:	f300 80ce 	bgt.w	80010d2 <main+0x2f2>
				// W1,X1,Y1,Z1,W2,X2,Y2,Z2Tipo
				int tipo = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	643b      	str	r3, [r7, #64]	@ 0x40

				snprintf((char *)aStringToSend, sizeof(aStringToSend), "%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%d\r\n",
 8000f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80010ec <main+0x30c>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <main+0x310>)
 8000f46:	edd3 6a00 	vldr	s13, [r3]
 8000f4a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f4e:	4b69      	ldr	r3, [pc, #420]	@ (80010f4 <main+0x314>)
 8000f50:	edd3 5a00 	vldr	s11, [r3]
 8000f54:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000f58:	4b67      	ldr	r3, [pc, #412]	@ (80010f8 <main+0x318>)
 8000f5a:	edd3 4a00 	vldr	s9, [r3]
 8000f5e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000f62:	4b66      	ldr	r3, [pc, #408]	@ (80010fc <main+0x31c>)
 8000f64:	edd3 3a00 	vldr	s7, [r3]
 8000f68:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000f6c:	4b64      	ldr	r3, [pc, #400]	@ (8001100 <main+0x320>)
 8000f6e:	edd3 2a00 	vldr	s5, [r3]
 8000f72:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000f76:	4b63      	ldr	r3, [pc, #396]	@ (8001104 <main+0x324>)
 8000f78:	edd3 1a00 	vldr	s3, [r3]
 8000f7c:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8000f80:	4b61      	ldr	r3, [pc, #388]	@ (8001108 <main+0x328>)
 8000f82:	edd3 0a00 	vldr	s1, [r3]
 8000f86:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8000f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8000f8e:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000f92:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000f96:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000f9a:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000f9e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000fa2:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000fa6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000faa:	ed8d 7b00 	vstr	d7, [sp]
 8000fae:	4a59      	ldr	r2, [pc, #356]	@ (8001114 <main+0x334>)
 8000fb0:	21ff      	movs	r1, #255	@ 0xff
 8000fb2:	4859      	ldr	r0, [pc, #356]	@ (8001118 <main+0x338>)
 8000fb4:	f005 ff7a 	bl	8006eac <sniprintf>
						w1, x1, y1, z1, w2, x2, y2, z2, tipo);
				ubSizeToSend = strlen((char *)aStringToSend);
 8000fb8:	4857      	ldr	r0, [pc, #348]	@ (8001118 <main+0x338>)
 8000fba:	f7ff f991 	bl	80002e0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b56      	ldr	r3, [pc, #344]	@ (800111c <main+0x33c>)
 8000fc4:	701a      	strb	r2, [r3, #0]

				// Enviar el mensaje byte por byte
				for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000fcc:	e013      	b.n	8000ff6 <main+0x216>
					LL_USART_TransmitData8(USART3,  aStringToSend[i]);
 8000fce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000fd2:	4a51      	ldr	r2, [pc, #324]	@ (8001118 <main+0x338>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4843      	ldr	r0, [pc, #268]	@ (80010e8 <main+0x308>)
 8000fda:	f7ff fd98 	bl	8000b0e <LL_USART_TransmitData8>
					while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
 8000fde:	bf00      	nop
 8000fe0:	4841      	ldr	r0, [pc, #260]	@ (80010e8 <main+0x308>)
 8000fe2:	f7ff fd15 	bl	8000a10 <LL_USART_IsActiveFlag_TXE>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f9      	beq.n	8000fe0 <main+0x200>
				for (uint8_t i = 0; i < ubSizeToSend; i++){
 8000fec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000ff6:	4b49      	ldr	r3, [pc, #292]	@ (800111c <main+0x33c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3e5      	bcc.n	8000fce <main+0x1ee>
				}
				cont++;
 8001002:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <main+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a41      	ldr	r2, [pc, #260]	@ (8001110 <main+0x330>)
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e061      	b.n	80010d2 <main+0x2f2>
			}
		}else{
			snprintf((char *)aStringToSend, sizeof(aStringToSend), "%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f,%.8f\r\n",
 800100e:	4b37      	ldr	r3, [pc, #220]	@ (80010ec <main+0x30c>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <main+0x310>)
 800101a:	edd3 6a00 	vldr	s13, [r3]
 800101e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <main+0x314>)
 8001024:	edd3 5a00 	vldr	s11, [r3]
 8001028:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <main+0x318>)
 800102e:	edd3 4a00 	vldr	s9, [r3]
 8001032:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <main+0x31c>)
 8001038:	edd3 3a00 	vldr	s7, [r3]
 800103c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <main+0x320>)
 8001042:	edd3 2a00 	vldr	s5, [r3]
 8001046:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <main+0x324>)
 800104c:	edd3 1a00 	vldr	s3, [r3]
 8001050:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <main+0x328>)
 8001056:	edd3 0a00 	vldr	s1, [r3]
 800105a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800105e:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8001062:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8001066:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 800106a:	ed8d 3b08 	vstr	d3, [sp, #32]
 800106e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001072:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001076:	ed8d 6b02 	vstr	d6, [sp, #8]
 800107a:	ed8d 7b00 	vstr	d7, [sp]
 800107e:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <main+0x340>)
 8001080:	21ff      	movs	r1, #255	@ 0xff
 8001082:	4825      	ldr	r0, [pc, #148]	@ (8001118 <main+0x338>)
 8001084:	f005 ff12 	bl	8006eac <sniprintf>
					w1, x1, y1, z1, w2, x2, y2, z2);
			ubSizeToSend = strlen((char *)aStringToSend);
 8001088:	4823      	ldr	r0, [pc, #140]	@ (8001118 <main+0x338>)
 800108a:	f7ff f929 	bl	80002e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <main+0x33c>)
 8001094:	701a      	strb	r2, [r3, #0]

			// Enviar el mensaje byte por byte
			for (uint8_t i = 0; i < ubSizeToSend; i++){
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800109c:	e013      	b.n	80010c6 <main+0x2e6>
				LL_USART_TransmitData8(USART3,  aStringToSend[i]);
 800109e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <main+0x338>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	4619      	mov	r1, r3
 80010a8:	480f      	ldr	r0, [pc, #60]	@ (80010e8 <main+0x308>)
 80010aa:	f7ff fd30 	bl	8000b0e <LL_USART_TransmitData8>
				while (!LL_USART_IsActiveFlag_TXE(USART3)) {} // Esperar a que se complete la transmisión del byte actual
 80010ae:	bf00      	nop
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <main+0x308>)
 80010b2:	f7ff fcad 	bl	8000a10 <LL_USART_IsActiveFlag_TXE>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f9      	beq.n	80010b0 <main+0x2d0>
			for (uint8_t i = 0; i < ubSizeToSend; i++){
 80010bc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010c0:	3301      	adds	r3, #1
 80010c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <main+0x33c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3e5      	bcc.n	800109e <main+0x2be>
			}
		}
		HAL_Delay(50);
 80010d2:	2032      	movs	r0, #50	@ 0x32
 80010d4:	f000 ff8a 	bl	8001fec <HAL_Delay>
	{
 80010d8:	e6be      	b.n	8000e58 <main+0x78>
 80010da:	bf00      	nop
 80010dc:	e000007c 	.word	0xe000007c
 80010e0:	2000047c 	.word	0x2000047c
 80010e4:	20000428 	.word	0x20000428
 80010e8:	40004800 	.word	0x40004800
 80010ec:	20000c58 	.word	0x20000c58
 80010f0:	20000c5c 	.word	0x20000c5c
 80010f4:	20000c60 	.word	0x20000c60
 80010f8:	20000c64 	.word	0x20000c64
 80010fc:	20000c68 	.word	0x20000c68
 8001100:	20000c6c 	.word	0x20000c6c
 8001104:	20000c70 	.word	0x20000c70
 8001108:	20000c74 	.word	0x20000c74
 800110c:	20000c7c 	.word	0x20000c7c
 8001110:	20000c78 	.word	0x20000c78
 8001114:	080092ac 	.word	0x080092ac
 8001118:	20000b58 	.word	0x20000b58
 800111c:	20000c57 	.word	0x20000c57
 8001120:	080092dc 	.word	0x080092dc

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	@ 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2234      	movs	r2, #52	@ 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f005 ffc6 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001148:	f002 ff3c 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <SystemClock_Config+0xdc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <SystemClock_Config+0xdc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	@ 0x40
 8001158:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <SystemClock_Config+0xdc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <SystemClock_Config+0xe0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800116c:	4a25      	ldr	r2, [pc, #148]	@ (8001204 <SystemClock_Config+0xe0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <SystemClock_Config+0xe0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001184:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001188:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001198:	2360      	movs	r3, #96	@ 0x60
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ff69 	bl	8004084 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011b8:	f000 fab0 	bl	800171c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011bc:	f002 ff12 	bl	8003fe4 <HAL_PWREx_EnableOverDrive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011c6:	f000 faa9 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2103      	movs	r1, #3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f9fa 	bl	80045e0 <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011f2:	f000 fa93 	bl	800171c <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	@ 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <MX_ETH_Init+0x84>)
 800120e:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <MX_ETH_Init+0x88>)
 8001210:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <MX_ETH_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_ETH_Init+0x8c>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_ETH_Init+0x8c>)
 8001220:	22e1      	movs	r2, #225	@ 0xe1
 8001222:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_ETH_Init+0x8c>)
 8001226:	2200      	movs	r2, #0
 8001228:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_ETH_Init+0x8c>)
 800122c:	2200      	movs	r2, #0
 800122e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_ETH_Init+0x8c>)
 8001232:	2200      	movs	r2, #0
 8001234:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_ETH_Init+0x84>)
 8001238:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <MX_ETH_Init+0x8c>)
 800123a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_ETH_Init+0x84>)
 800123e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001242:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_ETH_Init+0x84>)
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <MX_ETH_Init+0x90>)
 8001248:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_ETH_Init+0x84>)
 800124c:	4a13      	ldr	r2, [pc, #76]	@ (800129c <MX_ETH_Init+0x94>)
 800124e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_ETH_Init+0x84>)
 8001252:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001256:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <MX_ETH_Init+0x84>)
 800125a:	f001 fae7 	bl	800282c <HAL_ETH_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 fa5a 	bl	800171c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001268:	2238      	movs	r2, #56	@ 0x38
 800126a:	2100      	movs	r1, #0
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_ETH_Init+0x98>)
 800126e:	f005 ff29 	bl	80070c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_ETH_Init+0x98>)
 8001274:	2221      	movs	r2, #33	@ 0x21
 8001276:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_ETH_Init+0x98>)
 800127a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800127e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MX_ETH_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000378 	.word	0x20000378
 8001290:	40028000 	.word	0x40028000
 8001294:	20000c80 	.word	0x20000c80
 8001298:	20000280 	.word	0x20000280
 800129c:	200001e0 	.word	0x200001e0
 80012a0:	20000340 	.word	0x20000340

080012a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <MX_I2C1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <MX_I2C1_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012e0:	f001 ff90 	bl	8003204 <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f000 fa17 	bl	800171c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <MX_I2C1_Init+0x74>)
 80012f2:	f002 fc87 	bl	8003c04 <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 fa0e 	bl	800171c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_I2C1_Init+0x74>)
 8001304:	f002 fcc9 	bl	8003c9a <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 fa05 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000428 	.word	0x20000428
 800131c:	40005400 	.word	0x40005400
 8001320:	20303e5d 	.word	0x20303e5d

08001324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <MX_I2C2_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <MX_I2C2_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001330:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <MX_I2C2_Init+0x7c>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_I2C2_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_I2C2_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800135e:	480e      	ldr	r0, [pc, #56]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001360:	f001 ff50 	bl	8003204 <HAL_I2C_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800136a:	f000 f9d7 	bl	800171c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001372:	f002 fc47 	bl	8003c04 <HAL_I2CEx_ConfigAnalogFilter>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800137c:	f000 f9ce 	bl	800171c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_I2C2_Init+0x74>)
 8001384:	f002 fc89 	bl	8003c9a <HAL_I2CEx_ConfigDigitalFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 f9c5 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000047c 	.word	0x2000047c
 800139c:	40005800 	.word	0x40005800
 80013a0:	20303e5d 	.word	0x20303e5d

080013a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b2      	sub	sp, #200	@ 0xc8
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2290      	movs	r2, #144	@ 0x90
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fe74 	bl	80070c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 faeb 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80013f4:	f000 f992 	bl	800171c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80013f8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80013fc:	f7ff fbae 	bl	8000b5c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001400:	2008      	movs	r0, #8
 8001402:	f7ff fb93 	bl	8000b2c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001426:	2307      	movs	r3, #7
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001430:	4619      	mov	r1, r3
 8001432:	4821      	ldr	r0, [pc, #132]	@ (80014b8 <MX_USART3_UART_Init+0x114>)
 8001434:	f003 fff3 	bl	800541e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800143c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001462:	4619      	mov	r1, r3
 8001464:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_USART3_UART_Init+0x114>)
 8001466:	f003 ffda 	bl	800541e <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800146a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800146e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001484:	230c      	movs	r3, #12
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  LL_USART_Init(USART3, &USART_InitStruct);
 8001496:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <MX_USART3_UART_Init+0x118>)
 800149e:	f004 fc09 	bl	8005cb4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_USART3_UART_Init+0x118>)
 80014a4:	f7ff fa9e 	bl	80009e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_USART3_UART_Init+0x118>)
 80014aa:	f7ff fa8b 	bl	80009c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	37c8      	adds	r7, #200	@ 0xc8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40004800 	.word	0x40004800

080014c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c4:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2206      	movs	r2, #6
 80014d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001504:	f002 fc15 	bl	8003d32 <HAL_PCD_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f905 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000650 	.word	0x20000650

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_DMA_Init+0x68>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <MX_DMA_Init+0x68>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_DMA_Init+0x68>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	200b      	movs	r0, #11
 8001540:	f000 fe53 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001544:	200b      	movs	r0, #11
 8001546:	f000 fe6c 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	200d      	movs	r0, #13
 8001550:	f000 fe4b 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001554:	200d      	movs	r0, #13
 8001556:	f000 fe64 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	200f      	movs	r0, #15
 8001560:	f000 fe43 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001564:	200f      	movs	r0, #15
 8001566:	f000 fe5c 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2011      	movs	r0, #17
 8001570:	f000 fe3b 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001574:	2011      	movs	r0, #17
 8001576:	f000 fe54 	bl	8002222 <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	@ 0x30
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b4d      	ldr	r3, [pc, #308]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a4c      	ldr	r2, [pc, #304]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	4b47      	ldr	r3, [pc, #284]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a46      	ldr	r2, [pc, #280]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b44      	ldr	r3, [pc, #272]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a40      	ldr	r2, [pc, #256]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b3e      	ldr	r3, [pc, #248]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b3b      	ldr	r3, [pc, #236]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a3a      	ldr	r2, [pc, #232]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a34      	ldr	r2, [pc, #208]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b2f      	ldr	r3, [pc, #188]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a2e      	ldr	r2, [pc, #184]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b2c      	ldr	r3, [pc, #176]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800162e:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 8001634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0x14c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f244 0181 	movw	r1, #16513	@ 0x4081
 800164c:	4822      	ldr	r0, [pc, #136]	@ (80016d8 <MX_GPIO_Init+0x150>)
 800164e:	f001 fdbf 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	@ 0x40
 8001656:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_GPIO_Init+0x154>)
 8001658:	f001 fdba 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800165c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <MX_GPIO_Init+0x158>)
 8001674:	f001 fc00 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001678:	f244 0381 	movw	r3, #16513	@ 0x4081
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <MX_GPIO_Init+0x150>)
 8001692:	f001 fbf1 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001696:	2340      	movs	r3, #64	@ 0x40
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <MX_GPIO_Init+0x154>)
 80016ae:	f001 fbe3 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_GPIO_Init+0x154>)
 80016c6:	f001 fbd7 	bl	8002e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3730      	adds	r7, #48	@ 0x30
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40020800 	.word	0x40020800

080016e4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e009      	b.n	800170a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f939 	bl	8000976 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf1      	blt.n	80016f6 <_write+0x12>
	}
	return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_MspInit+0x44>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_MspInit+0x44>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_MspInit+0x44>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_MspInit+0x44>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_MspInit+0x44>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	@ 0x38
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4e      	ldr	r2, [pc, #312]	@ (80018c8 <HAL_ETH_MspInit+0x158>)
 800178e:	4293      	cmp	r3, r2
 8001790:	f040 8096 	bne.w	80018c0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001794:	4b4d      	ldr	r3, [pc, #308]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 800179a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179e:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a0:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4a46      	ldr	r2, [pc, #280]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b8:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e8:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001800:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001810:	4a2e      	ldr	r2, [pc, #184]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6313      	str	r3, [r2, #48]	@ 0x30
 8001818:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001824:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	4a28      	ldr	r2, [pc, #160]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 800182a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800182e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001830:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <HAL_ETH_MspInit+0x15c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800183c:	2332      	movs	r3, #50	@ 0x32
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184c:	230b      	movs	r3, #11
 800184e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	481e      	ldr	r0, [pc, #120]	@ (80018d0 <HAL_ETH_MspInit+0x160>)
 8001858:	f001 fb0e 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800185c:	2386      	movs	r3, #134	@ 0x86
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800186c:	230b      	movs	r3, #11
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4817      	ldr	r0, [pc, #92]	@ (80018d4 <HAL_ETH_MspInit+0x164>)
 8001878:	f001 fafe 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800188e:	230b      	movs	r3, #11
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	480f      	ldr	r0, [pc, #60]	@ (80018d8 <HAL_ETH_MspInit+0x168>)
 800189a:	f001 faed 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800189e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b0:	230b      	movs	r3, #11
 80018b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4808      	ldr	r0, [pc, #32]	@ (80018dc <HAL_ETH_MspInit+0x16c>)
 80018bc:	f001 fadc 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3738      	adds	r7, #56	@ 0x38
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40028000 	.word	0x40028000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40021800 	.word	0x40021800

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b0      	sub	sp, #192	@ 0xc0
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2290      	movs	r2, #144	@ 0x90
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f005 fbdf 	bl	80070c4 <memset>
  if(hi2c->Instance==I2C1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4aa1      	ldr	r2, [pc, #644]	@ (8001b90 <HAL_I2C_MspInit+0x2b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	f040 809b 	bne.w	8001a48 <HAL_I2C_MspInit+0x168>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001912:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001916:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4618      	mov	r0, r3
 8001924:	f003 f84e 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800192e:	f7ff fef5 	bl	800171c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b98      	ldr	r3, [pc, #608]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a97      	ldr	r2, [pc, #604]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b95      	ldr	r3, [pc, #596]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800194e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001952:	2312      	movs	r3, #18
 8001954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001964:	2304      	movs	r3, #4
 8001966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800196e:	4619      	mov	r1, r3
 8001970:	4889      	ldr	r0, [pc, #548]	@ (8001b98 <HAL_I2C_MspInit+0x2b8>)
 8001972:	f001 fa81 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001976:	4b87      	ldr	r3, [pc, #540]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	4a86      	ldr	r2, [pc, #536]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 800197c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001980:	6413      	str	r3, [r2, #64]	@ 0x40
 8001982:	4b84      	ldr	r3, [pc, #528]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800198e:	4b83      	ldr	r3, [pc, #524]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 8001990:	4a83      	ldr	r2, [pc, #524]	@ (8001ba0 <HAL_I2C_MspInit+0x2c0>)
 8001992:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001994:	4b81      	ldr	r3, [pc, #516]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 8001996:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800199a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b7e      	ldr	r3, [pc, #504]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b7a      	ldr	r3, [pc, #488]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b79      	ldr	r3, [pc, #484]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019bc:	4b77      	ldr	r3, [pc, #476]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b76      	ldr	r3, [pc, #472]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c8:	4b74      	ldr	r3, [pc, #464]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019ce:	4873      	ldr	r0, [pc, #460]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019d0:	f000 fc42 	bl	8002258 <HAL_DMA_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 80019da:	f7ff fe9f 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e4:	4a6d      	ldr	r2, [pc, #436]	@ (8001b9c <HAL_I2C_MspInit+0x2bc>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019ea:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 80019ec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <HAL_I2C_MspInit+0x2c8>)
 80019ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 80019f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b69      	ldr	r3, [pc, #420]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b67      	ldr	r3, [pc, #412]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a12:	4b64      	ldr	r3, [pc, #400]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a18:	4b62      	ldr	r3, [pc, #392]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a2a:	485e      	ldr	r0, [pc, #376]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a2c:	f000 fc14 	bl	8002258 <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_MspInit+0x15a>
    {
      Error_Handler();
 8001a36:	f7ff fe71 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a59      	ldr	r2, [pc, #356]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a40:	4a58      	ldr	r2, [pc, #352]	@ (8001ba4 <HAL_I2C_MspInit+0x2c4>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a46:	e09e      	b.n	8001b86 <HAL_I2C_MspInit+0x2a6>
  else if(hi2c->Instance==I2C2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <HAL_I2C_MspInit+0x2cc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f040 8099 	bne.w	8001b86 <HAL_I2C_MspInit+0x2a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 ffad 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_MspInit+0x194>
      Error_Handler();
 8001a70:	f7ff fe54 	bl	800171c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a74:	4b47      	ldr	r3, [pc, #284]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	4a46      	ldr	r2, [pc, #280]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a80:	4b44      	ldr	r3, [pc, #272]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a92:	2312      	movs	r3, #18
 8001a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aaa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aae:	4619      	mov	r1, r3
 8001ab0:	483f      	ldr	r0, [pc, #252]	@ (8001bb0 <HAL_I2C_MspInit+0x2d0>)
 8001ab2:	f001 f9e1 	bl	8002e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac2:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_I2C_MspInit+0x2b4>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001ace:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001ad0:	4a39      	ldr	r2, [pc, #228]	@ (8001bb8 <HAL_I2C_MspInit+0x2d8>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001ad4:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001ad6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b02:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001b0e:	4829      	ldr	r0, [pc, #164]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001b10:	f000 fba2 	bl	8002258 <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_MspInit+0x23e>
      Error_Handler();
 8001b1a:	f7ff fdff 	bl	800171c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001b22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b24:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <HAL_I2C_MspInit+0x2d4>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8001b2a:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b2c:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <HAL_I2C_MspInit+0x2e0>)
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b36:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b3a:	2240      	movs	r2, #64	@ 0x40
 8001b3c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001b6a:	4814      	ldr	r0, [pc, #80]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b6c:	f000 fb74 	bl	8002258 <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8001b76:	f7ff fdd1 	bl	800171c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b80:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_I2C_MspInit+0x2dc>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b86:	bf00      	nop
 8001b88:	37c0      	adds	r7, #192	@ 0xc0
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	200004d0 	.word	0x200004d0
 8001ba0:	40026010 	.word	0x40026010
 8001ba4:	20000530 	.word	0x20000530
 8001ba8:	400260a0 	.word	0x400260a0
 8001bac:	40005800 	.word	0x40005800
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	20000590 	.word	0x20000590
 8001bb8:	40026040 	.word	0x40026040
 8001bbc:	200005f0 	.word	0x200005f0
 8001bc0:	40026070 	.word	0x40026070

08001bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0ae      	sub	sp, #184	@ 0xb8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2290      	movs	r2, #144	@ 0x90
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fa6d 	bl	80070c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf2:	d159      	bne.n	8001ca8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fedd 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c10:	f7ff fd84 	bl	800171c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c2c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c46:	230a      	movs	r3, #10
 8001c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4818      	ldr	r0, [pc, #96]	@ (8001cb4 <HAL_PCD_MspInit+0xf0>)
 8001c54:	f001 f910 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4810      	ldr	r0, [pc, #64]	@ (8001cb4 <HAL_PCD_MspInit+0xf0>)
 8001c74:	f001 f900 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c78:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c82:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c84:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_PCD_MspInit+0xec>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	37b8      	adds	r7, #184	@ 0xb8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <NMI_Handler+0x4>

08001cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <MemManage_Handler+0x4>

08001cd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <UsageFault_Handler+0x4>

08001ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0e:	f000 f94d 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <DMA1_Stream0_IRQHandler+0x10>)
 8001d1e:	f000 fb49 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200004d0 	.word	0x200004d0

08001d2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <DMA1_Stream2_IRQHandler+0x10>)
 8001d32:	f000 fb3f 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000590 	.word	0x20000590

08001d40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <DMA1_Stream4_IRQHandler+0x10>)
 8001d46:	f000 fb35 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200005f0 	.word	0x200005f0

08001d54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <DMA1_Stream6_IRQHandler+0x10>)
 8001d5a:	f000 fb2b 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000530 	.word	0x20000530

08001d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_kill>:

int _kill(int pid, int sig)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d82:	f005 f9f1 	bl	8007168 <__errno>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2216      	movs	r2, #22
 8001d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_exit>:

void _exit (int status)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ffe7 	bl	8001d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001daa:	bf00      	nop
 8001dac:	e7fd      	b.n	8001daa <_exit+0x12>

08001dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e00a      	b.n	8001dd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc0:	f3af 8000 	nop.w
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbf0      	blt.n	8001dc0 <_read+0x12>
  }

  return len;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e10:	605a      	str	r2, [r3, #4]
  return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_isatty>:

int _isatty(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f005 f972 	bl	8007168 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20080000 	.word	0x20080000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	20000c88 	.word	0x20000c88
 8001eb8:	20000de0 	.word	0x20000de0

08001ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SystemInit+0x20>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <SystemInit+0x20>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee6:	490e      	ldr	r1, [pc, #56]	@ (8001f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0b      	ldr	r2, [pc, #44]	@ (8001f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001efc:	4c0b      	ldr	r4, [pc, #44]	@ (8001f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0a:	f7ff ffd7 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f005 f931 	bl	8007174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7fe ff65 	bl	8000de0 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f24:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8001f28:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001f2c:	20000ddc 	.word	0x20000ddc

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>

08001f32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f36:	2003      	movs	r0, #3
 8001f38:	f000 f94c 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f805 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff fbf1 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f967 	bl	800223e <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 f92f 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	20000010 	.word	0x20000010

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	20000c8c 	.word	0x20000c8c

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000c8c 	.word	0x20000c8c

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000014 	.word	0x20000014

08002034 <__NVIC_SetPriorityGrouping>:
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <__NVIC_SetPriorityGrouping+0x40>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	4313      	orrs	r3, r2
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x40>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	05fa0000 	.word	0x05fa0000

0800207c <__NVIC_GetPriorityGrouping>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	@ (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff feb6 	bl	8001fd4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e099      	b.n	80023a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002294:	e00f      	b.n	80022b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002296:	f7ff fe9d 	bl	8001fd4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d908      	bls.n	80022b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e078      	b.n	80023a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e8      	bne.n	8002296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_DMA_Init+0x158>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	2b04      	cmp	r3, #4
 800230e:	d107      	bne.n	8002320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	4313      	orrs	r3, r2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	2b04      	cmp	r3, #4
 8002348:	d117      	bne.n	800237a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00e      	beq.n	800237a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f9e9 	bl	8002734 <DMA_CheckFifoParam>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2240      	movs	r2, #64	@ 0x40
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002376:	2301      	movs	r3, #1
 8002378:	e016      	b.n	80023a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f9a0 	bl	80026c8 <DMA_CalcBaseAndBitshift>
 8002388:	4603      	mov	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	223f      	movs	r2, #63	@ 0x3f
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	e010803f 	.word	0xe010803f

080023b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <HAL_DMA_IRQHandler+0x248>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002600 <HAL_DMA_IRQHandler+0x24c>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	2208      	movs	r2, #8
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2208      	movs	r2, #8
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	2201      	movs	r2, #1
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	2204      	movs	r2, #4
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d012      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	2204      	movs	r2, #4
 800247a:	409a      	lsls	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	2210      	movs	r2, #16
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03c      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	2210      	movs	r2, #16
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e01f      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e016      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0208 	bic.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	2220      	movs	r2, #32
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808f 	beq.w	8002654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8087 	beq.w	8002654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2220      	movs	r2, #32
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d136      	bne.n	80025cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0216 	bic.w	r2, r2, #22
 800256c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800257c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_DMA_IRQHandler+0x1da>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a2:	223f      	movs	r2, #63	@ 0x3f
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07e      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
        }
        return;
 80025ca:	e079      	b.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e02c      	b.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e01e      	b.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0210 	bic.w	r2, r2, #16
 8002632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002658:	2b00      	cmp	r3, #0
 800265a:	d032      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d022      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2205      	movs	r2, #5
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3301      	adds	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d307      	bcc.n	800269c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_DMA_IRQHandler+0x2cc>
 800269a:	e000      	b.n	800269e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800269c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
 80026be:	e000      	b.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026c0:	bf00      	nop
    }
  }
}
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3b10      	subs	r3, #16
 80026d8:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <DMA_CalcBaseAndBitshift+0x60>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <DMA_CalcBaseAndBitshift+0x64>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d908      	bls.n	8002708 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <DMA_CalcBaseAndBitshift+0x68>)
 80026fe:	4013      	ands	r3, r2
 8002700:	1d1a      	adds	r2, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	659a      	str	r2, [r3, #88]	@ 0x58
 8002706:	e006      	b.n	8002716 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <DMA_CalcBaseAndBitshift+0x68>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	aaaaaaab 	.word	0xaaaaaaab
 800272c:	08009320 	.word	0x08009320
 8002730:	fffffc00 	.word	0xfffffc00

08002734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11f      	bne.n	800278e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d856      	bhi.n	8002802 <DMA_CheckFifoParam+0xce>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <DMA_CheckFifoParam+0x28>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	0800277f 	.word	0x0800277f
 8002764:	0800276d 	.word	0x0800276d
 8002768:	08002803 	.word	0x08002803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d046      	beq.n	8002806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e043      	b.n	8002806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002786:	d140      	bne.n	800280a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e03d      	b.n	800280a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002796:	d121      	bne.n	80027dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d837      	bhi.n	800280e <DMA_CheckFifoParam+0xda>
 800279e:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <DMA_CheckFifoParam+0x70>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bb 	.word	0x080027bb
 80027ac:	080027b5 	.word	0x080027b5
 80027b0:	080027cd 	.word	0x080027cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e030      	b.n	800281c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d025      	beq.n	8002812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ca:	e022      	b.n	8002812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d4:	d11f      	bne.n	8002816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027da:	e01c      	b.n	8002816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d903      	bls.n	80027ea <DMA_CheckFifoParam+0xb6>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d003      	beq.n	80027f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e8:	e018      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      break;
 80027ee:	e015      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e00b      	b.n	800281a <DMA_CheckFifoParam+0xe6>
      break;
 8002802:	bf00      	nop
 8002804:	e00a      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e008      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e006      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e004      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;   
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
    }
  } 
  
  return status; 
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop

0800282c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06a      	b.n	8002914 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2223      	movs	r2, #35	@ 0x23
 800284c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fe ff8d 	bl	8001770 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	@ (800291c <HAL_ETH_Init+0xf0>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4a30      	ldr	r2, [pc, #192]	@ (800291c <HAL_ETH_Init+0xf0>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002860:	6453      	str	r3, [r2, #68]	@ 0x44
 8002862:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <HAL_ETH_Init+0xf0>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800286e:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <HAL_ETH_Init+0xf4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <HAL_ETH_Init+0xf4>)
 8002874:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002878:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800287a:	4b29      	ldr	r3, [pc, #164]	@ (8002920 <HAL_ETH_Init+0xf4>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4927      	ldr	r1, [pc, #156]	@ (8002920 <HAL_ETH_Init+0xf4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002888:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <HAL_ETH_Init+0xf4>)
 800288a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a4:	f7ff fb96 	bl	8001fd4 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028aa:	e011      	b.n	80028d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028ac:	f7ff fb92 	bl	8001fd4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028ba:	d909      	bls.n	80028d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	22e0      	movs	r2, #224	@ 0xe0
 80028c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e021      	b.n	8002914 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e4      	bne.n	80028ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f958 	bl	8002b98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9ff 	bl	8002cec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa55 	bl	8002d9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9bd 	bl	8002c7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2210      	movs	r2, #16
 800290e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	40013800 	.word	0x40013800

08002924 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4b51      	ldr	r3, [pc, #324]	@ (8002a80 <ETH_SetMACConfig+0x15c>)
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7c1b      	ldrb	r3, [r3, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <ETH_SetMACConfig+0x28>
 8002946:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800294a:	e000      	b.n	800294e <ETH_SetMACConfig+0x2a>
 800294c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7c5b      	ldrb	r3, [r3, #17]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <ETH_SetMACConfig+0x38>
 8002956:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800295a:	e000      	b.n	800295e <ETH_SetMACConfig+0x3a>
 800295c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800295e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002964:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	7fdb      	ldrb	r3, [r3, #31]
 800296a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800296c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	7f92      	ldrb	r2, [r2, #30]
 8002978:	2a00      	cmp	r2, #0
 800297a:	d102      	bne.n	8002982 <ETH_SetMACConfig+0x5e>
 800297c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002980:	e000      	b.n	8002984 <ETH_SetMACConfig+0x60>
 8002982:	2200      	movs	r2, #0
                        macconf->Speed |
 8002984:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7f1b      	ldrb	r3, [r3, #28]
 800298a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800298c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002992:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800299a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	d102      	bne.n	80029ac <ETH_SetMACConfig+0x88>
 80029a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029aa:	e000      	b.n	80029ae <ETH_SetMACConfig+0x8a>
 80029ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	7bdb      	ldrb	r3, [r3, #15]
 80029b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029c6:	4313      	orrs	r3, r2
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fb04 	bl	8001fec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d101      	bne.n	8002a12 <ETH_SetMACConfig+0xee>
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	e000      	b.n	8002a14 <ETH_SetMACConfig+0xf0>
 8002a12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a22:	2a01      	cmp	r2, #1
 8002a24:	d101      	bne.n	8002a2a <ETH_SetMACConfig+0x106>
 8002a26:	2208      	movs	r2, #8
 8002a28:	e000      	b.n	8002a2c <ETH_SetMACConfig+0x108>
 8002a2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a34:	2a01      	cmp	r2, #1
 8002a36:	d101      	bne.n	8002a3c <ETH_SetMACConfig+0x118>
 8002a38:	2204      	movs	r2, #4
 8002a3a:	e000      	b.n	8002a3e <ETH_SetMACConfig+0x11a>
 8002a3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002a46:	2a01      	cmp	r2, #1
 8002a48:	d101      	bne.n	8002a4e <ETH_SetMACConfig+0x12a>
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	e000      	b.n	8002a50 <ETH_SetMACConfig+0x12c>
 8002a4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a50:	4313      	orrs	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7ff fabf 	bl	8001fec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	ff20810f 	.word	0xff20810f

08002a84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b94 <ETH_SetDMAConfig+0x110>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	7b1b      	ldrb	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_SetDMAConfig+0x2c>
 8002aaa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002aae:	e000      	b.n	8002ab2 <ETH_SetDMAConfig+0x2e>
 8002ab0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7b5b      	ldrb	r3, [r3, #13]
 8002ab6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ab8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	7f52      	ldrb	r2, [r2, #29]
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	d102      	bne.n	8002ac8 <ETH_SetDMAConfig+0x44>
 8002ac2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ac6:	e000      	b.n	8002aca <ETH_SetDMAConfig+0x46>
 8002ac8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002aca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7b9b      	ldrb	r3, [r3, #14]
 8002ad0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ad2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ad8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	7f1b      	ldrb	r3, [r3, #28]
 8002ade:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ae0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	7f9b      	ldrb	r3, [r3, #30]
 8002ae6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ae8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002af8:	4313      	orrs	r3, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff fa66 	bl	8001fec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	791b      	ldrb	r3, [r3, #4]
 8002b32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff fa37 	bl	8001fec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f8de3f23 	.word	0xf8de3f23

08002b98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0a6      	sub	sp, #152	@ 0x98
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fe86 	bl	8002924 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff08 	bl	8002a84 <ETH_SetDMAConfig>
}
 8002c74:	bf00      	nop
 8002c76:	3798      	adds	r7, #152	@ 0x98
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3305      	adds	r3, #5
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	3204      	adds	r2, #4
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <ETH_MACAddressConfig+0x68>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	061a      	lsls	r2, r3, #24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <ETH_MACAddressConfig+0x6c>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40028040 	.word	0x40028040
 8002ce8:	40028044 	.word	0x40028044

08002cec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e03e      	b.n	8002d78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	3206      	adds	r2, #6
 8002d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d80c      	bhi.n	8002d5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e004      	b.n	8002d66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d9bd      	bls.n	8002cfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d90:	611a      	str	r2, [r3, #16]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e046      	b.n	8002e3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002de8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002df0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	3212      	adds	r2, #18
 8002e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d80c      	bhi.n	8002e2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6919      	ldr	r1, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	e004      	b.n	8002e34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d9b5      	bls.n	8002dac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6a:	60da      	str	r2, [r3, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e175      	b.n	8003184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f040 8164 	bne.w	800317e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d005      	beq.n	8002ece <HAL_GPIO_Init+0x56>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d017      	beq.n	8002f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d123      	bne.n	8002fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0203 	and.w	r2, r3, #3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80be 	beq.w	800317e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	4b66      	ldr	r3, [pc, #408]	@ (800319c <HAL_GPIO_Init+0x324>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	4a65      	ldr	r2, [pc, #404]	@ (800319c <HAL_GPIO_Init+0x324>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800300c:	6453      	str	r3, [r2, #68]	@ 0x44
 800300e:	4b63      	ldr	r3, [pc, #396]	@ (800319c <HAL_GPIO_Init+0x324>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800301a:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <HAL_GPIO_Init+0x328>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_GPIO_Init+0x32c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d037      	beq.n	80030b6 <HAL_GPIO_Init+0x23e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a57      	ldr	r2, [pc, #348]	@ (80031a8 <HAL_GPIO_Init+0x330>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_GPIO_Init+0x23a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <HAL_GPIO_Init+0x334>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02b      	beq.n	80030ae <HAL_GPIO_Init+0x236>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a55      	ldr	r2, [pc, #340]	@ (80031b0 <HAL_GPIO_Init+0x338>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d025      	beq.n	80030aa <HAL_GPIO_Init+0x232>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a54      	ldr	r2, [pc, #336]	@ (80031b4 <HAL_GPIO_Init+0x33c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01f      	beq.n	80030a6 <HAL_GPIO_Init+0x22e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a53      	ldr	r2, [pc, #332]	@ (80031b8 <HAL_GPIO_Init+0x340>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x22a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_GPIO_Init+0x344>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x226>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a51      	ldr	r2, [pc, #324]	@ (80031c0 <HAL_GPIO_Init+0x348>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x222>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <HAL_GPIO_Init+0x34c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x21e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4f      	ldr	r2, [pc, #316]	@ (80031c8 <HAL_GPIO_Init+0x350>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x21a>
 800308e:	2309      	movs	r3, #9
 8003090:	e012      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 8003092:	230a      	movs	r3, #10
 8003094:	e010      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 8003096:	2308      	movs	r3, #8
 8003098:	e00e      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 800309a:	2307      	movs	r3, #7
 800309c:	e00c      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 800309e:	2306      	movs	r3, #6
 80030a0:	e00a      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030a2:	2305      	movs	r3, #5
 80030a4:	e008      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030a6:	2304      	movs	r3, #4
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e004      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030b6:	2300      	movs	r3, #0
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f002 0203 	and.w	r2, r2, #3
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	4093      	lsls	r3, r2
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030c8:	4935      	ldr	r1, [pc, #212]	@ (80031a0 <HAL_GPIO_Init+0x328>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d6:	4b3d      	ldr	r3, [pc, #244]	@ (80031cc <HAL_GPIO_Init+0x354>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fa:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <HAL_GPIO_Init+0x354>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003100:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <HAL_GPIO_Init+0x354>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003124:	4a29      	ldr	r2, [pc, #164]	@ (80031cc <HAL_GPIO_Init+0x354>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312a:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <HAL_GPIO_Init+0x354>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800314e:	4a1f      	ldr	r2, [pc, #124]	@ (80031cc <HAL_GPIO_Init+0x354>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <HAL_GPIO_Init+0x354>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <HAL_GPIO_Init+0x354>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	f67f ae86 	bls.w	8002e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3724      	adds	r7, #36	@ 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40021400 	.word	0x40021400
 80031bc:	40021800 	.word	0x40021800
 80031c0:	40021c00 	.word	0x40021c00
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40022400 	.word	0x40022400
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e07f      	b.n	8003316 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fb58 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	@ 0x24
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e006      	b.n	800328c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800328a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d104      	bne.n	800329e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800329c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_I2C_Init+0x11c>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	02008000 	.word	0x02008000

08003324 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	461a      	mov	r2, r3
 8003330:	460b      	mov	r3, r1
 8003332:	817b      	strh	r3, [r7, #10]
 8003334:	4613      	mov	r3, r2
 8003336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b20      	cmp	r3, #32
 8003342:	f040 80da 	bne.w	80034fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_I2C_Master_Transmit+0x30>
 8003350:	2302      	movs	r3, #2
 8003352:	e0d3      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800335c:	f7fe fe3a 	bl	8001fd4 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2319      	movs	r3, #25
 8003368:	2201      	movs	r2, #1
 800336a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fa00 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e0be      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2221      	movs	r2, #33	@ 0x21
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2210      	movs	r2, #16
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	893a      	ldrh	r2, [r7, #8]
 800339e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2bff      	cmp	r3, #255	@ 0xff
 80033ae:	d90e      	bls.n	80033ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	22ff      	movs	r2, #255	@ 0xff
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	4b51      	ldr	r3, [pc, #324]	@ (8003504 <HAL_I2C_Master_Transmit+0x1e0>)
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fbea 	bl	8003ba0 <I2C_TransferConfig>
 80033cc:	e06c      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	4b48      	ldr	r3, [pc, #288]	@ (8003504 <HAL_I2C_Master_Transmit+0x1e0>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fbd9 	bl	8003ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033ee:	e05b      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	6a39      	ldr	r1, [r7, #32]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f9fd 	bl	80037f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e07b      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d034      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x184>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d130      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	@ 0x80
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f98f 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e04d      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2bff      	cmp	r3, #255	@ 0xff
 8003468:	d90e      	bls.n	8003488 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22ff      	movs	r2, #255	@ 0xff
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	b2da      	uxtb	r2, r3
 8003476:	8979      	ldrh	r1, [r7, #10]
 8003478:	2300      	movs	r3, #0
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fb8d 	bl	8003ba0 <I2C_TransferConfig>
 8003486:	e00f      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003496:	b2da      	uxtb	r2, r3
 8003498:	8979      	ldrh	r1, [r7, #10]
 800349a:	2300      	movs	r3, #0
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fb7c 	bl	8003ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d19e      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f9dc 	bl	8003874 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e01a      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2220      	movs	r2, #32
 80034cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_I2C_Master_Transmit+0x1e4>)
 80034da:	400b      	ands	r3, r1
 80034dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	80002000 	.word	0x80002000
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	461a      	mov	r2, r3
 8003518:	460b      	mov	r3, r1
 800351a:	817b      	strh	r3, [r7, #10]
 800351c:	4613      	mov	r3, r2
 800351e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 80db 	bne.w	80036e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2C_Master_Receive+0x30>
 8003538:	2302      	movs	r3, #2
 800353a:	e0d4      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003544:	f7fe fd46 	bl	8001fd4 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2319      	movs	r3, #25
 8003550:	2201      	movs	r2, #1
 8003552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f90c 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0bf      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2222      	movs	r2, #34	@ 0x22
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2210      	movs	r2, #16
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	893a      	ldrh	r2, [r7, #8]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2bff      	cmp	r3, #255	@ 0xff
 8003596:	d90e      	bls.n	80035b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	4b52      	ldr	r3, [pc, #328]	@ (80036f0 <HAL_I2C_Master_Receive+0x1e4>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 faf6 	bl	8003ba0 <I2C_TransferConfig>
 80035b4:	e06d      	b.n	8003692 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	4b49      	ldr	r3, [pc, #292]	@ (80036f0 <HAL_I2C_Master_Receive+0x1e4>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fae5 	bl	8003ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035d6:	e05c      	b.n	8003692 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	6a39      	ldr	r1, [r7, #32]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f985 	bl	80038ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e07c      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d034      	beq.n	8003692 <HAL_I2C_Master_Receive+0x186>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d130      	bne.n	8003692 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2200      	movs	r2, #0
 8003638:	2180      	movs	r1, #128	@ 0x80
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f89a 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e04d      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2bff      	cmp	r3, #255	@ 0xff
 8003652:	d90e      	bls.n	8003672 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	22ff      	movs	r2, #255	@ 0xff
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	2300      	movs	r3, #0
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa98 	bl	8003ba0 <I2C_TransferConfig>
 8003670:	e00f      	b.n	8003692 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	b2da      	uxtb	r2, r3
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	2300      	movs	r3, #0
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fa87 	bl	8003ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d19d      	bne.n	80035d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8e7 	bl	8003874 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e01a      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2220      	movs	r2, #32
 80036b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <HAL_I2C_Master_Receive+0x1e8>)
 80036c4:	400b      	ands	r3, r1
 80036c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	80002400 	.word	0x80002400
 80036f4:	fe00e800 	.word	0xfe00e800

080036f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003706:	b2db      	uxtb	r3, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d103      	bne.n	800374a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d007      	beq.n	8003768 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	619a      	str	r2, [r3, #24]
  }
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003784:	e022      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d01e      	beq.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fc21 	bl	8001fd4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e00f      	b.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d0cd      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003800:	e02c      	b.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f8ea 	bl	80039e0 <I2C_IsErrorOccurred>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e02a      	b.n	800386c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d01e      	beq.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fe fbd9 	bl	8001fd4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d1cb      	bne.n	8003802 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003880:	e028      	b.n	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8aa 	bl	80039e0 <I2C_IsErrorOccurred>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e026      	b.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe fb9d 	bl	8001fd4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d113      	bne.n	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d1cf      	bne.n	8003882 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f8:	e064      	b.n	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f86e 	bl	80039e0 <I2C_IsErrorOccurred>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e062      	b.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d138      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d105      	bne.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e04e      	b.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d107      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2210      	movs	r2, #16
 800394a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2204      	movs	r2, #4
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
 8003952:	e002      	b.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2220      	movs	r2, #32
 8003960:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fb21 	bl	8001fd4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e007      	b.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d193      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	fe00e800 	.word	0xfe00e800

080039e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d068      	beq.n	8003ade <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a14:	e049      	b.n	8003aaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d045      	beq.n	8003aaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fe fad9 	bl	8001fd4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_IsErrorOccurred+0x54>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d13a      	bne.n	8003aaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a56:	d121      	bne.n	8003a9c <I2C_IsErrorOccurred+0xbc>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5e:	d01d      	beq.n	8003a9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d01a      	beq.n	8003a9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a76:	f7fe faad 	bl	8001fd4 <HAL_GetTick>
 8003a7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	e00e      	b.n	8003a9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a7e:	f7fe faa9 	bl	8001fd4 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b19      	cmp	r3, #25
 8003a8a:	d907      	bls.n	8003a9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a9a:	e006      	b.n	8003aaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d1e9      	bne.n	8003a7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d003      	beq.n	8003ac0 <I2C_IsErrorOccurred+0xe0>
 8003ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0aa      	beq.n	8003a16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01c      	beq.n	8003b8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff fde9 	bl	800372c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <I2C_IsErrorOccurred+0x1bc>)
 8003b66:	400b      	ands	r3, r1
 8003b68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3728      	adds	r7, #40	@ 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb8:	7a7b      	ldrb	r3, [r7, #9]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	0d5b      	lsrs	r3, r3, #21
 8003bda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003bde:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <I2C_TransferConfig+0x60>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	43db      	mvns	r3, r3
 8003be4:	ea02 0103 	and.w	r1, r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	03ff63ff 	.word	0x03ff63ff

08003c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d138      	bne.n	8003c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e032      	b.n	8003c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	@ 0x24
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d139      	bne.n	8003d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e033      	b.n	8003d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2224      	movs	r2, #36	@ 0x24
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d34:	b08f      	sub	sp, #60	@ 0x3c
 8003d36:	af0a      	add	r7, sp, #40	@ 0x28
 8003d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e116      	b.n	8003f72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd ff30 	bl	8001bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2203      	movs	r2, #3
 8003d68:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 f88e 	bl	8005ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	687e      	ldr	r6, [r7, #4]
 8003d90:	466d      	mov	r5, sp
 8003d92:	f106 0410 	add.w	r4, r6, #16
 8003d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003da6:	1d33      	adds	r3, r6, #4
 8003da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003daa:	6838      	ldr	r0, [r7, #0]
 8003dac:	f002 f822 	bl	8005df4 <USB_CoreInit>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0d7      	b.n	8003f72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 f87c 	bl	8005ec6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e04a      	b.n	8003e6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	333d      	adds	r3, #61	@ 0x3d
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	333c      	adds	r3, #60	@ 0x3c
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	b298      	uxth	r0, r3
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3344      	adds	r3, #68	@ 0x44
 8003e10:	4602      	mov	r2, r0
 8003e12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3340      	adds	r3, #64	@ 0x40
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3348      	adds	r3, #72	@ 0x48
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334c      	adds	r3, #76	@ 0x4c
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3354      	adds	r3, #84	@ 0x54
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	3301      	adds	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3af      	bcc.n	8003dd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e044      	b.n	8003f04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	3301      	adds	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3b5      	bcc.n	8003e7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	687e      	ldr	r6, [r7, #4]
 8003f16:	466d      	mov	r5, sp
 8003f18:	f106 0410 	add.w	r4, r6, #16
 8003f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f28:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f2c:	1d33      	adds	r3, r6, #4
 8003f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f002 f815 	bl	8005f60 <USB_DevInit>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e014      	b.n	8003f72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d102      	bne.n	8003f66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f80b 	bl	8003f7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 f9d3 	bl	8006316 <USB_DevDisconnect>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	10000003 	.word	0x10000003

08003fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000

08003fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4a22      	ldr	r2, [pc, #136]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffa:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004012:	f7fd ffdf 	bl	8001fd4 <HAL_GetTick>
 8004016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004018:	e009      	b.n	800402e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800401a:	f7fd ffdb 	bl	8001fd4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004028:	d901      	bls.n	800402e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e022      	b.n	8004074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403a:	d1ee      	bne.n	800401a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0f      	ldr	r2, [pc, #60]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004048:	f7fd ffc4 	bl	8001fd4 <HAL_GetTick>
 800404c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800404e:	e009      	b.n	8004064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004050:	f7fd ffc0 	bl	8001fd4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800405e:	d901      	bls.n	8004064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e007      	b.n	8004074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004064:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004070:	d1ee      	bne.n	8004050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000

08004084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e29b      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8087 	beq.w	80041b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a8:	4b96      	ldr	r3, [pc, #600]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d00c      	beq.n	80040ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b4:	4b93      	ldr	r3, [pc, #588]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d112      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62>
 80040c0:	4b90      	ldr	r3, [pc, #576]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d06c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x130>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d168      	bne.n	80041b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e275      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x7a>
 80040f0:	4b84      	ldr	r3, [pc, #528]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a83      	ldr	r2, [pc, #524]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e02e      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x9c>
 8004106:	4b7f      	ldr	r3, [pc, #508]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7e      	ldr	r2, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b7c      	ldr	r3, [pc, #496]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7b      	ldr	r2, [pc, #492]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0xc0>
 800412a:	4b76      	ldr	r3, [pc, #472]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a75      	ldr	r2, [pc, #468]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b73      	ldr	r3, [pc, #460]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a72      	ldr	r2, [pc, #456]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 8004144:	4b6f      	ldr	r3, [pc, #444]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6e      	ldr	r2, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b6c      	ldr	r3, [pc, #432]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd ff36 	bl	8001fd4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fd ff32 	bl	8001fd4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e229      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b61      	ldr	r3, [pc, #388]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xe8>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd ff22 	bl	8001fd4 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd ff1e 	bl	8001fd4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e215      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b57      	ldr	r3, [pc, #348]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x110>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d069      	beq.n	8004296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	4b50      	ldr	r3, [pc, #320]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x190>
 80041da:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x17a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1e9      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b41      	ldr	r3, [pc, #260]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	493d      	ldr	r1, [pc, #244]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	e040      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b39      	ldr	r3, [pc, #228]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a38      	ldr	r2, [pc, #224]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fed4 	bl	8001fd4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fd fed0 	bl	8001fd4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1c7      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4929      	ldr	r1, [pc, #164]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
 8004262:	e018      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004264:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd feb0 	bl	8001fd4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004278:	f7fd feac 	bl	8001fd4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1a3      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d038      	beq.n	8004314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d019      	beq.n	80042de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042aa:	4b16      	ldr	r3, [pc, #88]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fd fe8d 	bl	8001fd4 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd fe89 	bl	8001fd4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e180      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x23a>
 80042dc:	e01a      	b.n	8004314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	4a08      	ldr	r2, [pc, #32]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fe73 	bl	8001fd4 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fd fe6f 	bl	8001fd4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d903      	bls.n	8004308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e166      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
 8004304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b92      	ldr	r3, [pc, #584]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ee      	bne.n	80042f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a4 	beq.w	800446a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b8c      	ldr	r3, [pc, #560]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b89      	ldr	r3, [pc, #548]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	4a88      	ldr	r2, [pc, #544]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	@ 0x40
 800433a:	4b86      	ldr	r3, [pc, #536]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4b83      	ldr	r3, [pc, #524]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d118      	bne.n	8004388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004356:	4b80      	ldr	r3, [pc, #512]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7f      	ldr	r2, [pc, #508]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004362:	f7fd fe37 	bl	8001fd4 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436a:	f7fd fe33 	bl	8001fd4 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	@ 0x64
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e12a      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437c:	4b76      	ldr	r3, [pc, #472]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x31a>
 8004390:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004394:	4a6f      	ldr	r2, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	@ 0x70
 800439c:	e02d      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x33c>
 80043a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b2:	4b68      	ldr	r3, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	4a67      	ldr	r2, [pc, #412]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043be:	e01c      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x35e>
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a61      	ldr	r2, [pc, #388]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 80043e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ee:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	4a58      	ldr	r2, [pc, #352]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fde7 	bl	8001fd4 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fde3 	bl	8001fd4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0d8      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b4c      	ldr	r3, [pc, #304]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCC_OscConfig+0x386>
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fd fdd1 	bl	8001fd4 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd fdcd 	bl	8001fd4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0c2      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80ae 	beq.w	80045d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004474:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d06d      	beq.n	800455c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d14b      	bne.n	8004520 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b32      	ldr	r3, [pc, #200]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a31      	ldr	r2, [pc, #196]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fd9e 	bl	8001fd4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd fd9a 	bl	8001fd4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e091      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	071b      	lsls	r3, r3, #28
 80044e6:	491b      	ldr	r1, [pc, #108]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fd6c 	bl	8001fd4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fd fd68 	bl	8001fd4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e05f      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x47c>
 800451e:	e057      	b.n	80045d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0b      	ldr	r2, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fd52 	bl	8001fd4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fd4e 	bl	8001fd4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e045      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x4b0>
 8004552:	e03d      	b.n	80045d0 <HAL_RCC_OscConfig+0x54c>
 8004554:	40023800 	.word	0x40023800
 8004558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <HAL_RCC_OscConfig+0x558>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d030      	beq.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d129      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d122      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004592:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004594:	4293      	cmp	r3, r2
 8004596:	d119      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	3b01      	subs	r3, #1
 80045a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d10f      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0d0      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d910      	bls.n	8004628 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b67      	ldr	r3, [pc, #412]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 020f 	bic.w	r2, r3, #15
 800460e:	4965      	ldr	r1, [pc, #404]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b63      	ldr	r3, [pc, #396]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0b8      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004640:	4b59      	ldr	r3, [pc, #356]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a58      	ldr	r2, [pc, #352]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800464a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004658:	4b53      	ldr	r3, [pc, #332]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a52      	ldr	r2, [pc, #328]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004662:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4b50      	ldr	r3, [pc, #320]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	494d      	ldr	r1, [pc, #308]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d040      	beq.n	8004704 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d115      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07f      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b41      	ldr	r3, [pc, #260]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e073      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b3d      	ldr	r3, [pc, #244]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4936      	ldr	r1, [pc, #216]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fc7e 	bl	8001fd4 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fd fc7a 	bl	8001fd4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e053      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b2d      	ldr	r3, [pc, #180]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b27      	ldr	r3, [pc, #156]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d210      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 020f 	bic.w	r2, r3, #15
 800471a:	4922      	ldr	r1, [pc, #136]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e032      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004740:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4916      	ldr	r1, [pc, #88]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800475e:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	490e      	ldr	r1, [pc, #56]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004772:	f000 f821 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8004776:	4602      	mov	r2, r0
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	490a      	ldr	r1, [pc, #40]	@ (80047ac <HAL_RCC_ClockConfig+0x1cc>)
 8004784:	5ccb      	ldrb	r3, [r1, r3]
 8004786:	fa22 f303 	lsr.w	r3, r2, r3
 800478a:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <HAL_RCC_ClockConfig+0x1d0>)
 800478c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fbda 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023c00 	.word	0x40023c00
 80047a8:	40023800 	.word	0x40023800
 80047ac:	08009308 	.word	0x08009308
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	20000010 	.word	0x20000010

080047b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b094      	sub	sp, #80	@ 0x50
 80047be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c4:	2300      	movs	r3, #0
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c8:	2300      	movs	r3, #0
 80047ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d0:	4b79      	ldr	r3, [pc, #484]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d00d      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x40>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	f200 80e1 	bhi.w	80049a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x34>
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ea:	e0db      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f0:	e0db      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f2:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80047f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f6:	e0d8      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f8:	4b6f      	ldr	r3, [pc, #444]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004800:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004802:	4b6d      	ldr	r3, [pc, #436]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004818:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30
 8004822:	2300      	movs	r3, #0
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
 8004826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800482a:	4622      	mov	r2, r4
 800482c:	462b      	mov	r3, r5
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	0159      	lsls	r1, r3, #5
 8004838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483c:	0150      	lsls	r0, r2, #5
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4621      	mov	r1, r4
 8004844:	1a51      	subs	r1, r2, r1
 8004846:	6139      	str	r1, [r7, #16]
 8004848:	4629      	mov	r1, r5
 800484a:	eb63 0301 	sbc.w	r3, r3, r1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800485c:	4659      	mov	r1, fp
 800485e:	018b      	lsls	r3, r1, #6
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004866:	4651      	mov	r1, sl
 8004868:	018a      	lsls	r2, r1, #6
 800486a:	4651      	mov	r1, sl
 800486c:	ebb2 0801 	subs.w	r8, r2, r1
 8004870:	4659      	mov	r1, fp
 8004872:	eb63 0901 	sbc.w	r9, r3, r1
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488a:	4690      	mov	r8, r2
 800488c:	4699      	mov	r9, r3
 800488e:	4623      	mov	r3, r4
 8004890:	eb18 0303 	adds.w	r3, r8, r3
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	462b      	mov	r3, r5
 8004898:	eb49 0303 	adc.w	r3, r9, r3
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048aa:	4629      	mov	r1, r5
 80048ac:	024b      	lsls	r3, r1, #9
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b4:	4621      	mov	r1, r4
 80048b6:	024a      	lsls	r2, r1, #9
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048be:	2200      	movs	r2, #0
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048c8:	f7fb fd12 	bl	80002f0 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	e058      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b38      	ldr	r3, [pc, #224]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	2200      	movs	r2, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	4611      	mov	r1, r2
 80048e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	0159      	lsls	r1, r3, #5
 80048fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004902:	0150      	lsls	r0, r2, #5
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4641      	mov	r1, r8
 800490a:	ebb2 0a01 	subs.w	sl, r2, r1
 800490e:	4649      	mov	r1, r9
 8004910:	eb63 0b01 	sbc.w	fp, r3, r1
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004928:	ebb2 040a 	subs.w	r4, r2, sl
 800492c:	eb63 050b 	sbc.w	r5, r3, fp
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	00eb      	lsls	r3, r5, #3
 800493a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493e:	00e2      	lsls	r2, r4, #3
 8004940:	4614      	mov	r4, r2
 8004942:	461d      	mov	r5, r3
 8004944:	4643      	mov	r3, r8
 8004946:	18e3      	adds	r3, r4, r3
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	464b      	mov	r3, r9
 800494c:	eb45 0303 	adc.w	r3, r5, r3
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495e:	4629      	mov	r1, r5
 8004960:	028b      	lsls	r3, r1, #10
 8004962:	4621      	mov	r1, r4
 8004964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004968:	4621      	mov	r1, r4
 800496a:	028a      	lsls	r2, r1, #10
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004972:	2200      	movs	r2, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	61fa      	str	r2, [r7, #28]
 8004978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800497c:	f7fb fcb8 	bl	80002f0 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4613      	mov	r3, r2
 8004986:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a2:	e002      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x204>)
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3750      	adds	r7, #80	@ 0x50
 80049b0:	46bd      	mov	sp, r7
 80049b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	007a1200 	.word	0x007a1200

080049c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d012      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049ec:	4b69      	ldr	r3, [pc, #420]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a68      	ldr	r2, [pc, #416]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049f6:	6093      	str	r3, [r2, #8]
 80049f8:	4b66      	ldr	r3, [pc, #408]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	4964      	ldr	r1, [pc, #400]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	4959      	ldr	r1, [pc, #356]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	494a      	ldr	r1, [pc, #296]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a78:	d101      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 808b 	beq.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	4a39      	ldr	r2, [pc, #228]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab4:	4b37      	ldr	r3, [pc, #220]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac0:	4b35      	ldr	r3, [pc, #212]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a34      	ldr	r2, [pc, #208]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fd fa82 	bl	8001fd4 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad4:	f7fd fa7e 	bl	8001fd4 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e38f      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af2:	4b28      	ldr	r3, [pc, #160]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d035      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d02e      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b10:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b24:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b32:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b38:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d114      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fa46 	bl	8001fd4 <HAL_GetTick>
 8004b48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b4c:	f7fd fa42 	bl	8001fd4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e351      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b62:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ee      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7a:	d111      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b88:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b8a:	400b      	ands	r3, r1
 8004b8c:	4901      	ldr	r1, [pc, #4]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
 8004b92:	e00b      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	0ffffcff 	.word	0x0ffffcff
 8004ba0:	4bac      	ldr	r3, [pc, #688]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4aab      	ldr	r2, [pc, #684]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004baa:	6093      	str	r3, [r2, #8]
 8004bac:	4ba9      	ldr	r3, [pc, #676]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	49a6      	ldr	r1, [pc, #664]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bca:	4ba2      	ldr	r3, [pc, #648]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd0:	4aa0      	ldr	r2, [pc, #640]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bda:	4b9e      	ldr	r3, [pc, #632]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	499b      	ldr	r1, [pc, #620]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf8:	4b96      	ldr	r3, [pc, #600]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c06:	4993      	ldr	r1, [pc, #588]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c28:	498a      	ldr	r1, [pc, #552]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c3c:	4b85      	ldr	r3, [pc, #532]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4a:	4982      	ldr	r1, [pc, #520]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	4979      	ldr	r1, [pc, #484]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c80:	4b74      	ldr	r3, [pc, #464]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	4971      	ldr	r1, [pc, #452]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	f023 020c 	bic.w	r2, r3, #12
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb0:	4968      	ldr	r1, [pc, #416]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc4:	4b63      	ldr	r3, [pc, #396]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd2:	4960      	ldr	r1, [pc, #384]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	4957      	ldr	r1, [pc, #348]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d08:	4b52      	ldr	r3, [pc, #328]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	494f      	ldr	r1, [pc, #316]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	4946      	ldr	r1, [pc, #280]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d4c:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	493e      	ldr	r1, [pc, #248]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7c:	4935      	ldr	r1, [pc, #212]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d90:	4b30      	ldr	r3, [pc, #192]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d9e:	492d      	ldr	r1, [pc, #180]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d011      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004db2:	4b28      	ldr	r3, [pc, #160]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc0:	4924      	ldr	r1, [pc, #144]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004df2:	4b18      	ldr	r3, [pc, #96]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	4914      	ldr	r1, [pc, #80]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e24:	490b      	ldr	r1, [pc, #44]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00f      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e48:	4902      	ldr	r1, [pc, #8]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e64:	4b8a      	ldr	r3, [pc, #552]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	4986      	ldr	r1, [pc, #536]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e88:	4b81      	ldr	r3, [pc, #516]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e8e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e98:	497d      	ldr	r1, [pc, #500]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d006      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80d6 	beq.w	8005060 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb4:	4b76      	ldr	r3, [pc, #472]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a75      	ldr	r2, [pc, #468]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fd f888 	bl	8001fd4 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ec8:	f7fd f884 	bl	8001fd4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e195      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eda:	4b6d      	ldr	r3, [pc, #436]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d021      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11d      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004efa:	4b65      	ldr	r3, [pc, #404]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f08:	4b61      	ldr	r3, [pc, #388]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0e:	0e1b      	lsrs	r3, r3, #24
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	019a      	lsls	r2, r3, #6
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	071b      	lsls	r3, r3, #28
 8004f2e:	4958      	ldr	r1, [pc, #352]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02e      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f60:	d129      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f62:	4b4b      	ldr	r3, [pc, #300]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f70:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f76:	0f1b      	lsrs	r3, r3, #28
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	493e      	ldr	r1, [pc, #248]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa4:	f023 021f 	bic.w	r2, r3, #31
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4938      	ldr	r1, [pc, #224]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01d      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc2:	4b33      	ldr	r3, [pc, #204]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd6:	0f1b      	lsrs	r3, r3, #28
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	019a      	lsls	r2, r3, #6
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	4926      	ldr	r1, [pc, #152]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	071b      	lsls	r3, r3, #28
 8005026:	491a      	ldr	r1, [pc, #104]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005034:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc ffcb 	bl	8001fd4 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005042:	f7fc ffc7 	bl	8001fd4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b64      	cmp	r3, #100	@ 0x64
 800504e:	d901      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0d8      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005054:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	f040 80ce 	bne.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005068:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fc ffae 	bl	8001fd4 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800507a:	e00b      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800507c:	f7fc ffaa 	bl	8001fd4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d904      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0bb      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005094:	4b5e      	ldr	r3, [pc, #376]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a0:	d0ec      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02e      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d12a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ca:	4b51      	ldr	r3, [pc, #324]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	0f1b      	lsrs	r3, r3, #28
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	019a      	lsls	r2, r3, #6
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	4944      	ldr	r1, [pc, #272]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005106:	4b42      	ldr	r3, [pc, #264]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	3b01      	subs	r3, #1
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	493d      	ldr	r1, [pc, #244]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d022      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005134:	d11d      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	0e1b      	lsrs	r3, r3, #24
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005144:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514a:	0f1b      	lsrs	r3, r3, #28
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	019a      	lsls	r2, r3, #6
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	041b      	lsls	r3, r3, #16
 800515e:	431a      	orrs	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	4929      	ldr	r1, [pc, #164]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d028      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800517e:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005184:	0e1b      	lsrs	r3, r3, #24
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800518c:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	019a      	lsls	r2, r3, #6
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	4917      	ldr	r1, [pc, #92]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051ba:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	4911      	ldr	r1, [pc, #68]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc fefa 	bl	8001fd4 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e4:	f7fc fef6 	bl	8001fd4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	@ 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e007      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005202:	d1ef      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800

08005214 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005214:	b480      	push	{r7}
 8005216:	b089      	sub	sp, #36	@ 0x24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	613b      	str	r3, [r7, #16]
  return result;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2103      	movs	r1, #3
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	401a      	ands	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	fa93 f3a3 	rbit	r3, r3
 800524e:	61bb      	str	r3, [r7, #24]
  return result;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	fab3 f383 	clz	r3, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3724      	adds	r7, #36	@ 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b089      	sub	sp, #36	@ 0x24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	fa93 f3a3 	rbit	r3, r3
 80052bc:	613b      	str	r3, [r7, #16]
  return result;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	2103      	movs	r1, #3
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	401a      	ands	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	61bb      	str	r3, [r7, #24]
  return result;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80052f4:	bf00      	nop
 80052f6:	3724      	adds	r7, #36	@ 0x24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	@ 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	613b      	str	r3, [r7, #16]
  return result;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	2103      	movs	r1, #3
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	61bb      	str	r3, [r7, #24]
  return result;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	60da      	str	r2, [r3, #12]
}
 8005352:	bf00      	nop
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800535e:	b480      	push	{r7}
 8005360:	b089      	sub	sp, #36	@ 0x24
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fa93 f3a3 	rbit	r3, r3
 8005378:	613b      	str	r3, [r7, #16]
  return result;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	fab3 f383 	clz	r3, r3
 8005380:	b2db      	uxtb	r3, r3
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	210f      	movs	r1, #15
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	61bb      	str	r3, [r7, #24]
  return result;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80053b0:	bf00      	nop
 80053b2:	3724      	adds	r7, #36	@ 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	@ 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	613b      	str	r3, [r7, #16]
  return result;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	fab3 f383 	clz	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	210f      	movs	r1, #15
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	401a      	ands	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	61bb      	str	r3, [r7, #24]
  return result;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	431a      	orrs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005412:	bf00      	nop
 8005414:	3724      	adds	r7, #36	@ 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	613b      	str	r3, [r7, #16]
  return result;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005448:	e051      	b.n	80054ee <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	2101      	movs	r1, #1
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	fa01 f303 	lsl.w	r3, r1, r3
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d043      	beq.n	80054e8 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d003      	beq.n	8005470 <LL_GPIO_Init+0x52>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d10e      	bne.n	800548e <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	461a      	mov	r2, r3
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff12 	bl	80052a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	461a      	mov	r2, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fef2 	bl	8005272 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	461a      	mov	r2, r3
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff32 	bl	8005300 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d11a      	bne.n	80054da <LL_GPIO_Init+0xbc>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	60bb      	str	r3, [r7, #8]
  return result;
 80054b0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	d807      	bhi.n	80054cc <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	461a      	mov	r2, r3
 80054c2:	69b9      	ldr	r1, [r7, #24]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff4a 	bl	800535e <LL_GPIO_SetAFPin_0_7>
 80054ca:	e006      	b.n	80054da <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	461a      	mov	r2, r3
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff71 	bl	80053bc <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe96 	bl	8005214 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	3301      	adds	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1a6      	bne.n	800544a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <LL_RCC_HSI_IsReady+0x20>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
}
 800551e:	4618      	mov	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40023800 	.word	0x40023800

0800552c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005530:	4b06      	ldr	r3, [pc, #24]	@ (800554c <LL_RCC_LSE_IsReady+0x20>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40023800 	.word	0x40023800

08005550 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005554:	4b04      	ldr	r3, [pc, #16]	@ (8005568 <LL_RCC_GetSysClkSource+0x18>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 030c 	and.w	r3, r3, #12
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800

0800556c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005570:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <LL_RCC_GetAHBPrescaler+0x18>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800

08005588 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800558c:	4b04      	ldr	r3, [pc, #16]	@ (80055a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800

080055a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80055c8:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <LL_RCC_GetUSARTClockSource+0x24>)
 80055ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	401a      	ands	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	4313      	orrs	r3, r2
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40023800 	.word	0x40023800

080055e8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80055f0:	4b06      	ldr	r3, [pc, #24]	@ (800560c <LL_RCC_GetUARTClockSource+0x24>)
 80055f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	401a      	ands	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	4313      	orrs	r3, r2
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40023800 	.word	0x40023800

08005610 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005614:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <LL_RCC_PLL_GetMainSource+0x18>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40023800 	.word	0x40023800

0800562c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <LL_RCC_PLL_GetN+0x18>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40023800 	.word	0x40023800

08005648 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800564c:	4b04      	ldr	r3, [pc, #16]	@ (8005660 <LL_RCC_PLL_GetP+0x18>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005654:	4618      	mov	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800

08005664 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005668:	4b04      	ldr	r3, [pc, #16]	@ (800567c <LL_RCC_PLL_GetDivider+0x18>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800

08005680 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d133      	bne.n	80056fa <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ff94 	bl	80055c0 <LL_RCC_GetUSARTClockSource>
 8005698:	4603      	mov	r3, r0
 800569a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800569e:	d016      	beq.n	80056ce <LL_RCC_GetUSARTClockFreq+0x4e>
 80056a0:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 80056a4:	d81d      	bhi.n	80056e2 <LL_RCC_GetUSARTClockFreq+0x62>
 80056a6:	4a70      	ldr	r2, [pc, #448]	@ (8005868 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <LL_RCC_GetUSARTClockFreq+0x34>
 80056ac:	4a6f      	ldr	r2, [pc, #444]	@ (800586c <LL_RCC_GetUSARTClockFreq+0x1ec>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <LL_RCC_GetUSARTClockFreq+0x3c>
 80056b2:	e016      	b.n	80056e2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80056b4:	f000 f9f2 	bl	8005a9c <RCC_GetSystemClockFreq>
 80056b8:	60f8      	str	r0, [r7, #12]
        break;
 80056ba:	e0cf      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80056bc:	f7ff ff24 	bl	8005508 <LL_RCC_HSI_IsReady>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80bb 	beq.w	800583e <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 80056c8:	4b69      	ldr	r3, [pc, #420]	@ (8005870 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80056ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80056cc:	e0b7      	b.n	800583e <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80056ce:	f7ff ff2d 	bl	800552c <LL_RCC_LSE_IsReady>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80b4 	beq.w	8005842 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 80056da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80056e0:	e0af      	b.n	8005842 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80056e2:	f000 f9db 	bl	8005a9c <RCC_GetSystemClockFreq>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9ff 	bl	8005aec <RCC_GetHCLKClockFreq>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fa25 	bl	8005b40 <RCC_GetPCLK2ClockFreq>
 80056f6:	60f8      	str	r0, [r7, #12]
        break;
 80056f8:	e0b0      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d133      	bne.n	8005768 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff5d 	bl	80055c0 <LL_RCC_GetUSARTClockSource>
 8005706:	4603      	mov	r3, r0
 8005708:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800570c:	d016      	beq.n	800573c <LL_RCC_GetUSARTClockFreq+0xbc>
 800570e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005712:	d81d      	bhi.n	8005750 <LL_RCC_GetUSARTClockFreq+0xd0>
 8005714:	4a57      	ldr	r2, [pc, #348]	@ (8005874 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <LL_RCC_GetUSARTClockFreq+0xa2>
 800571a:	4a57      	ldr	r2, [pc, #348]	@ (8005878 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <LL_RCC_GetUSARTClockFreq+0xaa>
 8005720:	e016      	b.n	8005750 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005722:	f000 f9bb 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005726:	60f8      	str	r0, [r7, #12]
        break;
 8005728:	e098      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800572a:	f7ff feed 	bl	8005508 <LL_RCC_HSI_IsReady>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8088 	beq.w	8005846 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 8005736:	4b4e      	ldr	r3, [pc, #312]	@ (8005870 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005738:	60fb      	str	r3, [r7, #12]
        }
        break;
 800573a:	e084      	b.n	8005846 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800573c:	f7ff fef6 	bl	800552c <LL_RCC_LSE_IsReady>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8081 	beq.w	800584a <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 8005748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800574e:	e07c      	b.n	800584a <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005750:	f000 f9a4 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005754:	4603      	mov	r3, r0
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f9c8 	bl	8005aec <RCC_GetHCLKClockFreq>
 800575c:	4603      	mov	r3, r0
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f9da 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 8005764:	60f8      	str	r0, [r7, #12]
        break;
 8005766:	e079      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800576e:	d131      	bne.n	80057d4 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff25 	bl	80055c0 <LL_RCC_GetUSARTClockSource>
 8005776:	4603      	mov	r3, r0
 8005778:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800577c:	d015      	beq.n	80057aa <LL_RCC_GetUSARTClockFreq+0x12a>
 800577e:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005782:	d81b      	bhi.n	80057bc <LL_RCC_GetUSARTClockFreq+0x13c>
 8005784:	4a3d      	ldr	r2, [pc, #244]	@ (800587c <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <LL_RCC_GetUSARTClockFreq+0x112>
 800578a:	4a3d      	ldr	r2, [pc, #244]	@ (8005880 <LL_RCC_GetUSARTClockFreq+0x200>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <LL_RCC_GetUSARTClockFreq+0x11a>
 8005790:	e014      	b.n	80057bc <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005792:	f000 f983 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005796:	60f8      	str	r0, [r7, #12]
        break;
 8005798:	e060      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800579a:	f7ff feb5 	bl	8005508 <LL_RCC_HSI_IsReady>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d054      	beq.n	800584e <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 80057a4:	4b32      	ldr	r3, [pc, #200]	@ (8005870 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80057a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80057a8:	e051      	b.n	800584e <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80057aa:	f7ff febf 	bl	800552c <LL_RCC_LSE_IsReady>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d04e      	beq.n	8005852 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 80057b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80057ba:	e04a      	b.n	8005852 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80057bc:	f000 f96e 	bl	8005a9c <RCC_GetSystemClockFreq>
 80057c0:	4603      	mov	r3, r0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f992 	bl	8005aec <RCC_GetHCLKClockFreq>
 80057c8:	4603      	mov	r3, r0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f9b8 	bl	8005b40 <RCC_GetPCLK2ClockFreq>
 80057d0:	60f8      	str	r0, [r7, #12]
        break;
 80057d2:	e043      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b30      	cmp	r3, #48	@ 0x30
 80057d8:	d140      	bne.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fef0 	bl	80055c0 <LL_RCC_GetUSARTClockSource>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80057e6:	d015      	beq.n	8005814 <LL_RCC_GetUSARTClockFreq+0x194>
 80057e8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80057ec:	d81b      	bhi.n	8005826 <LL_RCC_GetUSARTClockFreq+0x1a6>
 80057ee:	4a25      	ldr	r2, [pc, #148]	@ (8005884 <LL_RCC_GetUSARTClockFreq+0x204>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <LL_RCC_GetUSARTClockFreq+0x17c>
 80057f4:	4a24      	ldr	r2, [pc, #144]	@ (8005888 <LL_RCC_GetUSARTClockFreq+0x208>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <LL_RCC_GetUSARTClockFreq+0x184>
 80057fa:	e014      	b.n	8005826 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80057fc:	f000 f94e 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005800:	60f8      	str	r0, [r7, #12]
          break;
 8005802:	e02b      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005804:	f7ff fe80 	bl	8005508 <LL_RCC_HSI_IsReady>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d023      	beq.n	8005856 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 800580e:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005810:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005812:	e020      	b.n	8005856 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005814:	f7ff fe8a 	bl	800552c <LL_RCC_LSE_IsReady>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01d      	beq.n	800585a <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005822:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005824:	e019      	b.n	800585a <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005826:	f000 f939 	bl	8005a9c <RCC_GetSystemClockFreq>
 800582a:	4603      	mov	r3, r0
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f95d 	bl	8005aec <RCC_GetHCLKClockFreq>
 8005832:	4603      	mov	r3, r0
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f96f 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 800583a:	60f8      	str	r0, [r7, #12]
          break;
 800583c:	e00e      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800583e:	bf00      	nop
 8005840:	e00c      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005842:	bf00      	nop
 8005844:	e00a      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005846:	bf00      	nop
 8005848:	e008      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800584a:	bf00      	nop
 800584c:	e006      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800584e:	bf00      	nop
 8005850:	e004      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005852:	bf00      	nop
 8005854:	e002      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800585a:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800585c:	68fb      	ldr	r3, [r7, #12]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	00030001 	.word	0x00030001
 800586c:	00030002 	.word	0x00030002
 8005870:	00f42400 	.word	0x00f42400
 8005874:	000c0004 	.word	0x000c0004
 8005878:	000c0008 	.word	0x000c0008
 800587c:	0c000400 	.word	0x0c000400
 8005880:	0c000800 	.word	0x0c000800
 8005884:	00300010 	.word	0x00300010
 8005888:	00300020 	.word	0x00300020

0800588c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2bc0      	cmp	r3, #192	@ 0xc0
 800589c:	d133      	bne.n	8005906 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fea2 	bl	80055e8 <LL_RCC_GetUARTClockSource>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80058aa:	d016      	beq.n	80058da <LL_RCC_GetUARTClockFreq+0x4e>
 80058ac:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80058b0:	d81d      	bhi.n	80058ee <LL_RCC_GetUARTClockFreq+0x62>
 80058b2:	4a71      	ldr	r2, [pc, #452]	@ (8005a78 <LL_RCC_GetUARTClockFreq+0x1ec>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <LL_RCC_GetUARTClockFreq+0x34>
 80058b8:	4a70      	ldr	r2, [pc, #448]	@ (8005a7c <LL_RCC_GetUARTClockFreq+0x1f0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <LL_RCC_GetUARTClockFreq+0x3c>
 80058be:	e016      	b.n	80058ee <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80058c0:	f000 f8ec 	bl	8005a9c <RCC_GetSystemClockFreq>
 80058c4:	60f8      	str	r0, [r7, #12]
        break;
 80058c6:	e0d1      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80058c8:	f7ff fe1e 	bl	8005508 <LL_RCC_HSI_IsReady>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80bd 	beq.w	8005a4e <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 80058d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a80 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80058d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80058d8:	e0b9      	b.n	8005a4e <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80058da:	f7ff fe27 	bl	800552c <LL_RCC_LSE_IsReady>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80b6 	beq.w	8005a52 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 80058e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80058ec:	e0b1      	b.n	8005a52 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80058ee:	f000 f8d5 	bl	8005a9c <RCC_GetSystemClockFreq>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f8f9 	bl	8005aec <RCC_GetHCLKClockFreq>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f90b 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 8005902:	60f8      	str	r0, [r7, #12]
        break;
 8005904:	e0b2      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800590c:	d133      	bne.n	8005976 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fe6a 	bl	80055e8 <LL_RCC_GetUARTClockSource>
 8005914:	4603      	mov	r3, r0
 8005916:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800591a:	d016      	beq.n	800594a <LL_RCC_GetUARTClockFreq+0xbe>
 800591c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005920:	d81d      	bhi.n	800595e <LL_RCC_GetUARTClockFreq+0xd2>
 8005922:	4a58      	ldr	r2, [pc, #352]	@ (8005a84 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <LL_RCC_GetUARTClockFreq+0xa4>
 8005928:	4a57      	ldr	r2, [pc, #348]	@ (8005a88 <LL_RCC_GetUARTClockFreq+0x1fc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <LL_RCC_GetUARTClockFreq+0xac>
 800592e:	e016      	b.n	800595e <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005930:	f000 f8b4 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005934:	60f8      	str	r0, [r7, #12]
        break;
 8005936:	e099      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005938:	f7ff fde6 	bl	8005508 <LL_RCC_HSI_IsReady>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8089 	beq.w	8005a56 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8005944:	4b4e      	ldr	r3, [pc, #312]	@ (8005a80 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005946:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005948:	e085      	b.n	8005a56 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800594a:	f7ff fdef 	bl	800552c <LL_RCC_LSE_IsReady>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8082 	beq.w	8005a5a <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 8005956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800595c:	e07d      	b.n	8005a5a <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800595e:	f000 f89d 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005962:	4603      	mov	r3, r0
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f8c1 	bl	8005aec <RCC_GetHCLKClockFreq>
 800596a:	4603      	mov	r3, r0
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f8d3 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 8005972:	60f8      	str	r0, [r7, #12]
        break;
 8005974:	e07a      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800597c:	d131      	bne.n	80059e2 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fe32 	bl	80055e8 <LL_RCC_GetUARTClockSource>
 8005984:	4603      	mov	r3, r0
 8005986:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800598a:	d015      	beq.n	80059b8 <LL_RCC_GetUARTClockFreq+0x12c>
 800598c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005990:	d81b      	bhi.n	80059ca <LL_RCC_GetUARTClockFreq+0x13e>
 8005992:	4a3e      	ldr	r2, [pc, #248]	@ (8005a8c <LL_RCC_GetUARTClockFreq+0x200>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <LL_RCC_GetUARTClockFreq+0x114>
 8005998:	4a3d      	ldr	r2, [pc, #244]	@ (8005a90 <LL_RCC_GetUARTClockFreq+0x204>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <LL_RCC_GetUARTClockFreq+0x11c>
 800599e:	e014      	b.n	80059ca <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80059a0:	f000 f87c 	bl	8005a9c <RCC_GetSystemClockFreq>
 80059a4:	60f8      	str	r0, [r7, #12]
        break;
 80059a6:	e061      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80059a8:	f7ff fdae 	bl	8005508 <LL_RCC_HSI_IsReady>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d055      	beq.n	8005a5e <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 80059b2:	4b33      	ldr	r3, [pc, #204]	@ (8005a80 <LL_RCC_GetUARTClockFreq+0x1f4>)
 80059b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80059b6:	e052      	b.n	8005a5e <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80059b8:	f7ff fdb8 	bl	800552c <LL_RCC_LSE_IsReady>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04f      	beq.n	8005a62 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 80059c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80059c8:	e04b      	b.n	8005a62 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80059ca:	f000 f867 	bl	8005a9c <RCC_GetSystemClockFreq>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f88b 	bl	8005aec <RCC_GetHCLKClockFreq>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 f89d 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 80059de:	60f8      	str	r0, [r7, #12]
        break;
 80059e0:	e044      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80059e8:	d140      	bne.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fdfc 	bl	80055e8 <LL_RCC_GetUARTClockSource>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80059f6:	d015      	beq.n	8005a24 <LL_RCC_GetUARTClockFreq+0x198>
 80059f8:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 80059fc:	d81b      	bhi.n	8005a36 <LL_RCC_GetUARTClockFreq+0x1aa>
 80059fe:	4a25      	ldr	r2, [pc, #148]	@ (8005a94 <LL_RCC_GetUARTClockFreq+0x208>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <LL_RCC_GetUARTClockFreq+0x180>
 8005a04:	4a24      	ldr	r2, [pc, #144]	@ (8005a98 <LL_RCC_GetUARTClockFreq+0x20c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <LL_RCC_GetUARTClockFreq+0x188>
 8005a0a:	e014      	b.n	8005a36 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8005a0c:	f000 f846 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005a10:	60f8      	str	r0, [r7, #12]
          break;
 8005a12:	e02b      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005a14:	f7ff fd78 	bl	8005508 <LL_RCC_HSI_IsReady>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d023      	beq.n	8005a66 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 8005a1e:	4b18      	ldr	r3, [pc, #96]	@ (8005a80 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005a20:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005a22:	e020      	b.n	8005a66 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005a24:	f7ff fd82 	bl	800552c <LL_RCC_LSE_IsReady>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01d      	beq.n	8005a6a <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a32:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005a34:	e019      	b.n	8005a6a <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a36:	f000 f831 	bl	8005a9c <RCC_GetSystemClockFreq>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f855 	bl	8005aec <RCC_GetHCLKClockFreq>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 f867 	bl	8005b18 <RCC_GetPCLK1ClockFreq>
 8005a4a:	60f8      	str	r0, [r7, #12]
          break;
 8005a4c:	e00e      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e00c      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a52:	bf00      	nop
 8005a54:	e00a      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a56:	bf00      	nop
 8005a58:	e008      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e006      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e004      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005a6a:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	00c00040 	.word	0x00c00040
 8005a7c:	00c00080 	.word	0x00c00080
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	03000100 	.word	0x03000100
 8005a88:	03000200 	.word	0x03000200
 8005a8c:	30001000 	.word	0x30001000
 8005a90:	30002000 	.word	0x30002000
 8005a94:	c0004000 	.word	0xc0004000
 8005a98:	c0008000 	.word	0xc0008000

08005a9c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005aa6:	f7ff fd53 	bl	8005550 <LL_RCC_GetSysClkSource>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d00c      	beq.n	8005aca <RCC_GetSystemClockFreq+0x2e>
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d80e      	bhi.n	8005ad2 <RCC_GetSystemClockFreq+0x36>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <RCC_GetSystemClockFreq+0x22>
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d003      	beq.n	8005ac4 <RCC_GetSystemClockFreq+0x28>
 8005abc:	e009      	b.n	8005ad2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005abe:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <RCC_GetSystemClockFreq+0x48>)
 8005ac0:	607b      	str	r3, [r7, #4]
      break;
 8005ac2:	e009      	b.n	8005ad8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005ac4:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <RCC_GetSystemClockFreq+0x4c>)
 8005ac6:	607b      	str	r3, [r7, #4]
      break;
 8005ac8:	e006      	b.n	8005ad8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005aca:	f000 f84d 	bl	8005b68 <RCC_PLL_GetFreqDomain_SYS>
 8005ace:	6078      	str	r0, [r7, #4]
      break;
 8005ad0:	e002      	b.n	8005ad8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005ad2:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <RCC_GetSystemClockFreq+0x48>)
 8005ad4:	607b      	str	r3, [r7, #4]
      break;
 8005ad6:	bf00      	nop
  }

  return frequency;
 8005ad8:	687b      	ldr	r3, [r7, #4]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	00f42400 	.word	0x00f42400
 8005ae8:	007a1200 	.word	0x007a1200

08005aec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005af4:	f7ff fd3a 	bl	800556c <LL_RCC_GetAHBPrescaler>
 8005af8:	4603      	mov	r3, r0
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	4a04      	ldr	r2, [pc, #16]	@ (8005b14 <RCC_GetHCLKClockFreq+0x28>)
 8005b02:	5cd3      	ldrb	r3, [r2, r3]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	40d3      	lsrs	r3, r2
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08009308 	.word	0x08009308

08005b18 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005b20:	f7ff fd32 	bl	8005588 <LL_RCC_GetAPB1Prescaler>
 8005b24:	4603      	mov	r3, r0
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <RCC_GetPCLK1ClockFreq+0x24>)
 8005b2a:	5cd3      	ldrb	r3, [r2, r3]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	40d3      	lsrs	r3, r2
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08009318 	.word	0x08009318

08005b40 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005b48:	f7ff fd2c 	bl	80055a4 <LL_RCC_GetAPB2Prescaler>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	4a04      	ldr	r2, [pc, #16]	@ (8005b64 <RCC_GetPCLK2ClockFreq+0x24>)
 8005b52:	5cd3      	ldrb	r3, [r2, r3]
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	40d3      	lsrs	r3, r2
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08009318 	.word	0x08009318

08005b68 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	2300      	movs	r3, #0
 8005b74:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b76:	f7ff fd4b 	bl	8005610 <LL_RCC_PLL_GetMainSource>
 8005b7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b88:	d003      	beq.n	8005b92 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005b8a:	e005      	b.n	8005b98 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005b8e:	607b      	str	r3, [r7, #4]
      break;
 8005b90:	e005      	b.n	8005b9e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005b92:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8005b94:	607b      	str	r3, [r7, #4]
      break;
 8005b96:	e002      	b.n	8005b9e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8005b98:	4b0c      	ldr	r3, [pc, #48]	@ (8005bcc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005b9a:	607b      	str	r3, [r7, #4]
      break;
 8005b9c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005b9e:	f7ff fd61 	bl	8005664 <LL_RCC_PLL_GetDivider>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	fbb3 f4f2 	udiv	r4, r3, r2
 8005baa:	f7ff fd3f 	bl	800562c <LL_RCC_PLL_GetN>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	fb03 f404 	mul.w	r4, r3, r4
 8005bb4:	f7ff fd48 	bl	8005648 <LL_RCC_PLL_GetP>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}
 8005bcc:	00f42400 	.word	0x00f42400
 8005bd0:	007a1200 	.word	0x007a1200

08005bd4 <LL_USART_IsEnabled>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <LL_USART_IsEnabled+0x18>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <LL_USART_IsEnabled+0x1a>
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_USART_SetStopBitsLength>:
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_USART_SetHWFlowCtrl>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	609a      	str	r2, [r3, #8]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_USART_SetBaudRate>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5a:	d11a      	bne.n	8005c92 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	005a      	lsls	r2, r3, #1
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	441a      	add	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	60da      	str	r2, [r3, #12]
}
 8005c90:	e00a      	b.n	8005ca8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	085a      	lsrs	r2, r3, #1
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	441a      	add	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	60da      	str	r2, [r3, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff ff84 	bl	8005bd4 <LL_USART_IsEnabled>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d179      	bne.n	8005dc6 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd0 <LL_USART_Init+0x11c>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	6851      	ldr	r1, [r2, #4]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	6912      	ldr	r2, [r2, #16]
 8005ce8:	4311      	orrs	r1, r2
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	6992      	ldr	r2, [r2, #24]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff7c 	bl	8005bfa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff89 	bl	8005c20 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a30      	ldr	r2, [pc, #192]	@ (8005dd4 <LL_USART_Init+0x120>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d104      	bne.n	8005d20 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005d16:	2003      	movs	r0, #3
 8005d18:	f7ff fcb2 	bl	8005680 <LL_RCC_GetUSARTClockFreq>
 8005d1c:	60b8      	str	r0, [r7, #8]
 8005d1e:	e041      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <LL_USART_Init+0x124>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d104      	bne.n	8005d32 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005d28:	200c      	movs	r0, #12
 8005d2a:	f7ff fca9 	bl	8005680 <LL_RCC_GetUSARTClockFreq>
 8005d2e:	60b8      	str	r0, [r7, #8]
 8005d30:	e038      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <LL_USART_Init+0x128>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d104      	bne.n	8005d44 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005d3a:	2030      	movs	r0, #48	@ 0x30
 8005d3c:	f7ff fca0 	bl	8005680 <LL_RCC_GetUSARTClockFreq>
 8005d40:	60b8      	str	r0, [r7, #8]
 8005d42:	e02f      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <LL_USART_Init+0x12c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d104      	bne.n	8005d56 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005d4c:	20c0      	movs	r0, #192	@ 0xc0
 8005d4e:	f7ff fd9d 	bl	800588c <LL_RCC_GetUARTClockFreq>
 8005d52:	60b8      	str	r0, [r7, #8]
 8005d54:	e026      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a22      	ldr	r2, [pc, #136]	@ (8005de4 <LL_USART_Init+0x130>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d105      	bne.n	8005d6a <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005d5e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8005d62:	f7ff fd93 	bl	800588c <LL_RCC_GetUARTClockFreq>
 8005d66:	60b8      	str	r0, [r7, #8]
 8005d68:	e01c      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <LL_USART_Init+0x134>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d105      	bne.n	8005d7e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8005d72:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005d76:	f7ff fc83 	bl	8005680 <LL_RCC_GetUSARTClockFreq>
 8005d7a:	60b8      	str	r0, [r7, #8]
 8005d7c:	e012      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1a      	ldr	r2, [pc, #104]	@ (8005dec <LL_USART_Init+0x138>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d105      	bne.n	8005d92 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8005d86:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8005d8a:	f7ff fd7f 	bl	800588c <LL_RCC_GetUARTClockFreq>
 8005d8e:	60b8      	str	r0, [r7, #8]
 8005d90:	e008      	b.n	8005da4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a16      	ldr	r2, [pc, #88]	@ (8005df0 <LL_USART_Init+0x13c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d104      	bne.n	8005da4 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8005d9a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8005d9e:	f7ff fd75 	bl	800588c <LL_RCC_GetUARTClockFreq>
 8005da2:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff40 	bl	8005c46 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	efff69f3 	.word	0xefff69f3
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40004400 	.word	0x40004400
 8005ddc:	40004800 	.word	0x40004800
 8005de0:	40004c00 	.word	0x40004c00
 8005de4:	40005000 	.word	0x40005000
 8005de8:	40011400 	.word	0x40011400
 8005dec:	40007800 	.word	0x40007800
 8005df0:	40007c00 	.word	0x40007c00

08005df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005df4:	b084      	sub	sp, #16
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	f107 001c 	add.w	r0, r7, #28
 8005e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d120      	bne.n	8005e4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ea0 <USB_CoreInit+0xac>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d105      	bne.n	8005e42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa96 	bl	8006374 <USB_CoreReset>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e010      	b.n	8005e70 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa8a 	bl	8006374 <USB_CoreReset>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10b      	bne.n	8005e8e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f043 0206 	orr.w	r2, r3, #6
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	ffbdffbf 	.word	0xffbdffbf

08005ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 0201 	bic.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d115      	bne.n	8005f14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ef4:	2001      	movs	r0, #1
 8005ef6:	f7fc f879 	bl	8001fec <HAL_Delay>
      ms++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa29 	bl	8006358 <USB_GetMode>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d01e      	beq.n	8005f4a <USB_SetCurrentMode+0x84>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b31      	cmp	r3, #49	@ 0x31
 8005f10:	d9f0      	bls.n	8005ef4 <USB_SetCurrentMode+0x2e>
 8005f12:	e01a      	b.n	8005f4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d115      	bne.n	8005f46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7fc f860 	bl	8001fec <HAL_Delay>
      ms++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa10 	bl	8006358 <USB_GetMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <USB_SetCurrentMode+0x84>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b31      	cmp	r3, #49	@ 0x31
 8005f42:	d9f0      	bls.n	8005f26 <USB_SetCurrentMode+0x60>
 8005f44:	e001      	b.n	8005f4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e005      	b.n	8005f56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b32      	cmp	r3, #50	@ 0x32
 8005f4e:	d101      	bne.n	8005f54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f60:	b084      	sub	sp, #16
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e009      	b.n	8005f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3340      	adds	r3, #64	@ 0x40
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b0e      	cmp	r3, #14
 8005f98:	d9f2      	bls.n	8005f80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11c      	bne.n	8005fda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fae:	f043 0302 	orr.w	r3, r3, #2
 8005fb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e005      	b.n	8005fe6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006000:	461a      	mov	r2, r3
 8006002:	680b      	ldr	r3, [r1, #0]
 8006004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10c      	bne.n	8006026 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006012:	2100      	movs	r1, #0
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f965 	bl	80062e4 <USB_SetDevSpeed>
 800601a:	e008      	b.n	800602e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800601c:	2101      	movs	r1, #1
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f960 	bl	80062e4 <USB_SetDevSpeed>
 8006024:	e003      	b.n	800602e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006026:	2103      	movs	r1, #3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f95b 	bl	80062e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800602e:	2110      	movs	r1, #16
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8f3 	bl	800621c <USB_FlushTxFifo>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f91f 	bl	8006284 <USB_FlushRxFifo>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006056:	461a      	mov	r2, r3
 8006058:	2300      	movs	r3, #0
 800605a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	461a      	mov	r2, r3
 8006064:	2300      	movs	r3, #0
 8006066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606e:	461a      	mov	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006074:	2300      	movs	r3, #0
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e043      	b.n	8006102 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800608c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006090:	d118      	bne.n	80060c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	461a      	mov	r2, r3
 80060a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e013      	b.n	80060d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ba:	461a      	mov	r2, r3
 80060bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e008      	b.n	80060d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	2300      	movs	r3, #0
 80060d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e2:	461a      	mov	r2, r3
 80060e4:	2300      	movs	r3, #0
 80060e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f4:	461a      	mov	r2, r3
 80060f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3301      	adds	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d3b7      	bcc.n	800607a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	e043      	b.n	8006198 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006126:	d118      	bne.n	800615a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e013      	b.n	800616c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	461a      	mov	r2, r3
 8006152:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e008      	b.n	800616c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006166:	461a      	mov	r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	461a      	mov	r2, r3
 800618c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3301      	adds	r3, #1
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	429a      	cmp	r2, r3
 800619e:	d3b7      	bcc.n	8006110 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80061c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f043 0210 	orr.w	r2, r3, #16
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006214 <USB_DevInit+0x2b4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f043 0208 	orr.w	r2, r3, #8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d105      	bne.n	8006204 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <USB_DevInit+0x2b8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006210:	b004      	add	sp, #16
 8006212:	4770      	bx	lr
 8006214:	803c3800 	.word	0x803c3800
 8006218:	40000004 	.word	0x40000004

0800621c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a13      	ldr	r2, [pc, #76]	@ (8006280 <USB_FlushTxFifo+0x64>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e01b      	b.n	8006274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	daf2      	bge.n	800622a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	019b      	lsls	r3, r3, #6
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <USB_FlushTxFifo+0x64>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e006      	b.n	8006274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d0f0      	beq.n	8006254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	00030d40 	.word	0x00030d40

08006284 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4a11      	ldr	r2, [pc, #68]	@ (80062e0 <USB_FlushRxFifo+0x5c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e018      	b.n	80062d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	daf2      	bge.n	8006290 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2210      	movs	r2, #16
 80062b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <USB_FlushRxFifo+0x5c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e006      	b.n	80062d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d0f0      	beq.n	80062b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	00030d40 	.word	0x00030d40

080062e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006330:	f023 0303 	bic.w	r3, r3, #3
 8006334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0301 	and.w	r3, r3, #1
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <USB_CoreReset+0x64>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e01b      	b.n	80063ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	daf2      	bge.n	8006380 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f043 0201 	orr.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <USB_CoreReset+0x64>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e006      	b.n	80063ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d0f0      	beq.n	80063aa <USB_CoreReset+0x36>

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	00030d40 	.word	0x00030d40

080063dc <__cvt>:
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	ed2d 8b02 	vpush	{d8}
 80063e2:	eeb0 8b40 	vmov.f64	d8, d0
 80063e6:	b085      	sub	sp, #20
 80063e8:	4617      	mov	r7, r2
 80063ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80063ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ee:	ee18 2a90 	vmov	r2, s17
 80063f2:	f025 0520 	bic.w	r5, r5, #32
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	bfb6      	itet	lt
 80063fa:	222d      	movlt	r2, #45	@ 0x2d
 80063fc:	2200      	movge	r2, #0
 80063fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8006402:	2d46      	cmp	r5, #70	@ 0x46
 8006404:	460c      	mov	r4, r1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	d004      	beq.n	8006414 <__cvt+0x38>
 800640a:	2d45      	cmp	r5, #69	@ 0x45
 800640c:	d100      	bne.n	8006410 <__cvt+0x34>
 800640e:	3401      	adds	r4, #1
 8006410:	2102      	movs	r1, #2
 8006412:	e000      	b.n	8006416 <__cvt+0x3a>
 8006414:	2103      	movs	r1, #3
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	ab02      	add	r3, sp, #8
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	4622      	mov	r2, r4
 8006420:	4633      	mov	r3, r6
 8006422:	eeb0 0b48 	vmov.f64	d0, d8
 8006426:	f000 ff63 	bl	80072f0 <_dtoa_r>
 800642a:	2d47      	cmp	r5, #71	@ 0x47
 800642c:	d114      	bne.n	8006458 <__cvt+0x7c>
 800642e:	07fb      	lsls	r3, r7, #31
 8006430:	d50a      	bpl.n	8006448 <__cvt+0x6c>
 8006432:	1902      	adds	r2, r0, r4
 8006434:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643c:	bf08      	it	eq
 800643e:	9203      	streq	r2, [sp, #12]
 8006440:	2130      	movs	r1, #48	@ 0x30
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	4293      	cmp	r3, r2
 8006446:	d319      	bcc.n	800647c <__cvt+0xa0>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800644c:	1a1b      	subs	r3, r3, r0
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	b005      	add	sp, #20
 8006452:	ecbd 8b02 	vpop	{d8}
 8006456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006458:	2d46      	cmp	r5, #70	@ 0x46
 800645a:	eb00 0204 	add.w	r2, r0, r4
 800645e:	d1e9      	bne.n	8006434 <__cvt+0x58>
 8006460:	7803      	ldrb	r3, [r0, #0]
 8006462:	2b30      	cmp	r3, #48	@ 0x30
 8006464:	d107      	bne.n	8006476 <__cvt+0x9a>
 8006466:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	bf1c      	itt	ne
 8006470:	f1c4 0401 	rsbne	r4, r4, #1
 8006474:	6034      	strne	r4, [r6, #0]
 8006476:	6833      	ldr	r3, [r6, #0]
 8006478:	441a      	add	r2, r3
 800647a:	e7db      	b.n	8006434 <__cvt+0x58>
 800647c:	1c5c      	adds	r4, r3, #1
 800647e:	9403      	str	r4, [sp, #12]
 8006480:	7019      	strb	r1, [r3, #0]
 8006482:	e7de      	b.n	8006442 <__cvt+0x66>

08006484 <__exponent>:
 8006484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006486:	2900      	cmp	r1, #0
 8006488:	bfba      	itte	lt
 800648a:	4249      	neglt	r1, r1
 800648c:	232d      	movlt	r3, #45	@ 0x2d
 800648e:	232b      	movge	r3, #43	@ 0x2b
 8006490:	2909      	cmp	r1, #9
 8006492:	7002      	strb	r2, [r0, #0]
 8006494:	7043      	strb	r3, [r0, #1]
 8006496:	dd29      	ble.n	80064ec <__exponent+0x68>
 8006498:	f10d 0307 	add.w	r3, sp, #7
 800649c:	461d      	mov	r5, r3
 800649e:	270a      	movs	r7, #10
 80064a0:	461a      	mov	r2, r3
 80064a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80064a6:	fb07 1416 	mls	r4, r7, r6, r1
 80064aa:	3430      	adds	r4, #48	@ 0x30
 80064ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064b0:	460c      	mov	r4, r1
 80064b2:	2c63      	cmp	r4, #99	@ 0x63
 80064b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80064b8:	4631      	mov	r1, r6
 80064ba:	dcf1      	bgt.n	80064a0 <__exponent+0x1c>
 80064bc:	3130      	adds	r1, #48	@ 0x30
 80064be:	1e94      	subs	r4, r2, #2
 80064c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064c4:	1c41      	adds	r1, r0, #1
 80064c6:	4623      	mov	r3, r4
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	d30a      	bcc.n	80064e2 <__exponent+0x5e>
 80064cc:	f10d 0309 	add.w	r3, sp, #9
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	42ac      	cmp	r4, r5
 80064d4:	bf88      	it	hi
 80064d6:	2300      	movhi	r3, #0
 80064d8:	3302      	adds	r3, #2
 80064da:	4403      	add	r3, r0
 80064dc:	1a18      	subs	r0, r3, r0
 80064de:	b003      	add	sp, #12
 80064e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064ea:	e7ed      	b.n	80064c8 <__exponent+0x44>
 80064ec:	2330      	movs	r3, #48	@ 0x30
 80064ee:	3130      	adds	r1, #48	@ 0x30
 80064f0:	7083      	strb	r3, [r0, #2]
 80064f2:	70c1      	strb	r1, [r0, #3]
 80064f4:	1d03      	adds	r3, r0, #4
 80064f6:	e7f1      	b.n	80064dc <__exponent+0x58>

080064f8 <_printf_float>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	b08d      	sub	sp, #52	@ 0x34
 80064fe:	460c      	mov	r4, r1
 8006500:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006504:	4616      	mov	r6, r2
 8006506:	461f      	mov	r7, r3
 8006508:	4605      	mov	r5, r0
 800650a:	f000 fde3 	bl	80070d4 <_localeconv_r>
 800650e:	f8d0 b000 	ldr.w	fp, [r0]
 8006512:	4658      	mov	r0, fp
 8006514:	f7f9 fee4 	bl	80002e0 <strlen>
 8006518:	2300      	movs	r3, #0
 800651a:	930a      	str	r3, [sp, #40]	@ 0x28
 800651c:	f8d8 3000 	ldr.w	r3, [r8]
 8006520:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	9005      	str	r0, [sp, #20]
 8006528:	3307      	adds	r3, #7
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	f103 0108 	add.w	r1, r3, #8
 8006532:	f8c8 1000 	str.w	r1, [r8]
 8006536:	ed93 0b00 	vldr	d0, [r3]
 800653a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006798 <_printf_float+0x2a0>
 800653e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006542:	eeb4 7b46 	vcmp.f64	d7, d6
 8006546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800654e:	dd24      	ble.n	800659a <_printf_float+0xa2>
 8006550:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006558:	d502      	bpl.n	8006560 <_printf_float+0x68>
 800655a:	232d      	movs	r3, #45	@ 0x2d
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006560:	498f      	ldr	r1, [pc, #572]	@ (80067a0 <_printf_float+0x2a8>)
 8006562:	4b90      	ldr	r3, [pc, #576]	@ (80067a4 <_printf_float+0x2ac>)
 8006564:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006568:	bf94      	ite	ls
 800656a:	4688      	movls	r8, r1
 800656c:	4698      	movhi	r8, r3
 800656e:	f022 0204 	bic.w	r2, r2, #4
 8006572:	2303      	movs	r3, #3
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	6022      	str	r2, [r4, #0]
 8006578:	f04f 0a00 	mov.w	sl, #0
 800657c:	9700      	str	r7, [sp, #0]
 800657e:	4633      	mov	r3, r6
 8006580:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006582:	4621      	mov	r1, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f9d1 	bl	800692c <_printf_common>
 800658a:	3001      	adds	r0, #1
 800658c:	f040 8089 	bne.w	80066a2 <_printf_float+0x1aa>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b00d      	add	sp, #52	@ 0x34
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	eeb4 0b40 	vcmp.f64	d0, d0
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	d709      	bvc.n	80065b8 <_printf_float+0xc0>
 80065a4:	ee10 3a90 	vmov	r3, s1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfbc      	itt	lt
 80065ac:	232d      	movlt	r3, #45	@ 0x2d
 80065ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065b2:	497d      	ldr	r1, [pc, #500]	@ (80067a8 <_printf_float+0x2b0>)
 80065b4:	4b7d      	ldr	r3, [pc, #500]	@ (80067ac <_printf_float+0x2b4>)
 80065b6:	e7d5      	b.n	8006564 <_printf_float+0x6c>
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80065c0:	d139      	bne.n	8006636 <_printf_float+0x13e>
 80065c2:	2306      	movs	r3, #6
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065ca:	2300      	movs	r3, #0
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80065d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80065d6:	ab09      	add	r3, sp, #36	@ 0x24
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	6861      	ldr	r1, [r4, #4]
 80065dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7ff fefb 	bl	80063dc <__cvt>
 80065e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065ec:	4680      	mov	r8, r0
 80065ee:	d129      	bne.n	8006644 <_printf_float+0x14c>
 80065f0:	1cc8      	adds	r0, r1, #3
 80065f2:	db02      	blt.n	80065fa <_printf_float+0x102>
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	4299      	cmp	r1, r3
 80065f8:	dd41      	ble.n	800667e <_printf_float+0x186>
 80065fa:	f1a9 0902 	sub.w	r9, r9, #2
 80065fe:	fa5f f989 	uxtb.w	r9, r9
 8006602:	3901      	subs	r1, #1
 8006604:	464a      	mov	r2, r9
 8006606:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800660a:	9109      	str	r1, [sp, #36]	@ 0x24
 800660c:	f7ff ff3a 	bl	8006484 <__exponent>
 8006610:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006612:	1813      	adds	r3, r2, r0
 8006614:	2a01      	cmp	r2, #1
 8006616:	4682      	mov	sl, r0
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	dc02      	bgt.n	8006622 <_printf_float+0x12a>
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	07d2      	lsls	r2, r2, #31
 8006620:	d501      	bpl.n	8006626 <_printf_float+0x12e>
 8006622:	3301      	adds	r3, #1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0a6      	beq.n	800657c <_printf_float+0x84>
 800662e:	232d      	movs	r3, #45	@ 0x2d
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006634:	e7a2      	b.n	800657c <_printf_float+0x84>
 8006636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800663a:	d1c4      	bne.n	80065c6 <_printf_float+0xce>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1c2      	bne.n	80065c6 <_printf_float+0xce>
 8006640:	2301      	movs	r3, #1
 8006642:	e7bf      	b.n	80065c4 <_printf_float+0xcc>
 8006644:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006648:	d9db      	bls.n	8006602 <_printf_float+0x10a>
 800664a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800664e:	d118      	bne.n	8006682 <_printf_float+0x18a>
 8006650:	2900      	cmp	r1, #0
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	dd0b      	ble.n	800666e <_printf_float+0x176>
 8006656:	6121      	str	r1, [r4, #16]
 8006658:	b913      	cbnz	r3, 8006660 <_printf_float+0x168>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d0      	lsls	r0, r2, #31
 800665e:	d502      	bpl.n	8006666 <_printf_float+0x16e>
 8006660:	3301      	adds	r3, #1
 8006662:	440b      	add	r3, r1
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006668:	f04f 0a00 	mov.w	sl, #0
 800666c:	e7db      	b.n	8006626 <_printf_float+0x12e>
 800666e:	b913      	cbnz	r3, 8006676 <_printf_float+0x17e>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	07d2      	lsls	r2, r2, #31
 8006674:	d501      	bpl.n	800667a <_printf_float+0x182>
 8006676:	3302      	adds	r3, #2
 8006678:	e7f4      	b.n	8006664 <_printf_float+0x16c>
 800667a:	2301      	movs	r3, #1
 800667c:	e7f2      	b.n	8006664 <_printf_float+0x16c>
 800667e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006684:	4299      	cmp	r1, r3
 8006686:	db05      	blt.n	8006694 <_printf_float+0x19c>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	6121      	str	r1, [r4, #16]
 800668c:	07d8      	lsls	r0, r3, #31
 800668e:	d5ea      	bpl.n	8006666 <_printf_float+0x16e>
 8006690:	1c4b      	adds	r3, r1, #1
 8006692:	e7e7      	b.n	8006664 <_printf_float+0x16c>
 8006694:	2900      	cmp	r1, #0
 8006696:	bfd4      	ite	le
 8006698:	f1c1 0202 	rsble	r2, r1, #2
 800669c:	2201      	movgt	r2, #1
 800669e:	4413      	add	r3, r2
 80066a0:	e7e0      	b.n	8006664 <_printf_float+0x16c>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	055a      	lsls	r2, r3, #21
 80066a6:	d407      	bmi.n	80066b8 <_printf_float+0x1c0>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	4642      	mov	r2, r8
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	d12a      	bne.n	800670c <_printf_float+0x214>
 80066b6:	e76b      	b.n	8006590 <_printf_float+0x98>
 80066b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80066bc:	f240 80e0 	bls.w	8006880 <_printf_float+0x388>
 80066c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80066c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066cc:	d133      	bne.n	8006736 <_printf_float+0x23e>
 80066ce:	4a38      	ldr	r2, [pc, #224]	@ (80067b0 <_printf_float+0x2b8>)
 80066d0:	2301      	movs	r3, #1
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f af59 	beq.w	8006590 <_printf_float+0x98>
 80066de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066e2:	4543      	cmp	r3, r8
 80066e4:	db02      	blt.n	80066ec <_printf_float+0x1f4>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	07d8      	lsls	r0, r3, #31
 80066ea:	d50f      	bpl.n	800670c <_printf_float+0x214>
 80066ec:	9b05      	ldr	r3, [sp, #20]
 80066ee:	465a      	mov	r2, fp
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f af4a 	beq.w	8006590 <_printf_float+0x98>
 80066fc:	f04f 0900 	mov.w	r9, #0
 8006700:	f108 38ff 	add.w	r8, r8, #4294967295
 8006704:	f104 0a1a 	add.w	sl, r4, #26
 8006708:	45c8      	cmp	r8, r9
 800670a:	dc09      	bgt.n	8006720 <_printf_float+0x228>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	079b      	lsls	r3, r3, #30
 8006710:	f100 8107 	bmi.w	8006922 <_printf_float+0x42a>
 8006714:	68e0      	ldr	r0, [r4, #12]
 8006716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006718:	4298      	cmp	r0, r3
 800671a:	bfb8      	it	lt
 800671c:	4618      	movlt	r0, r3
 800671e:	e739      	b.n	8006594 <_printf_float+0x9c>
 8006720:	2301      	movs	r3, #1
 8006722:	4652      	mov	r2, sl
 8006724:	4631      	mov	r1, r6
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	f43f af30 	beq.w	8006590 <_printf_float+0x98>
 8006730:	f109 0901 	add.w	r9, r9, #1
 8006734:	e7e8      	b.n	8006708 <_printf_float+0x210>
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	dc3b      	bgt.n	80067b4 <_printf_float+0x2bc>
 800673c:	4a1c      	ldr	r2, [pc, #112]	@ (80067b0 <_printf_float+0x2b8>)
 800673e:	2301      	movs	r3, #1
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af22 	beq.w	8006590 <_printf_float+0x98>
 800674c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006750:	ea59 0303 	orrs.w	r3, r9, r3
 8006754:	d102      	bne.n	800675c <_printf_float+0x264>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	07d9      	lsls	r1, r3, #31
 800675a:	d5d7      	bpl.n	800670c <_printf_float+0x214>
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	465a      	mov	r2, fp
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f af12 	beq.w	8006590 <_printf_float+0x98>
 800676c:	f04f 0a00 	mov.w	sl, #0
 8006770:	f104 0b1a 	add.w	fp, r4, #26
 8006774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006776:	425b      	negs	r3, r3
 8006778:	4553      	cmp	r3, sl
 800677a:	dc01      	bgt.n	8006780 <_printf_float+0x288>
 800677c:	464b      	mov	r3, r9
 800677e:	e794      	b.n	80066aa <_printf_float+0x1b2>
 8006780:	2301      	movs	r3, #1
 8006782:	465a      	mov	r2, fp
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f af00 	beq.w	8006590 <_printf_float+0x98>
 8006790:	f10a 0a01 	add.w	sl, sl, #1
 8006794:	e7ee      	b.n	8006774 <_printf_float+0x27c>
 8006796:	bf00      	nop
 8006798:	ffffffff 	.word	0xffffffff
 800679c:	7fefffff 	.word	0x7fefffff
 80067a0:	08009328 	.word	0x08009328
 80067a4:	0800932c 	.word	0x0800932c
 80067a8:	08009330 	.word	0x08009330
 80067ac:	08009334 	.word	0x08009334
 80067b0:	08009338 	.word	0x08009338
 80067b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ba:	4553      	cmp	r3, sl
 80067bc:	bfa8      	it	ge
 80067be:	4653      	movge	r3, sl
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	4699      	mov	r9, r3
 80067c4:	dc37      	bgt.n	8006836 <_printf_float+0x33e>
 80067c6:	2300      	movs	r3, #0
 80067c8:	9307      	str	r3, [sp, #28]
 80067ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ce:	f104 021a 	add.w	r2, r4, #26
 80067d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067d4:	9907      	ldr	r1, [sp, #28]
 80067d6:	9306      	str	r3, [sp, #24]
 80067d8:	eba3 0309 	sub.w	r3, r3, r9
 80067dc:	428b      	cmp	r3, r1
 80067de:	dc31      	bgt.n	8006844 <_printf_float+0x34c>
 80067e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e2:	459a      	cmp	sl, r3
 80067e4:	dc3b      	bgt.n	800685e <_printf_float+0x366>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	07da      	lsls	r2, r3, #31
 80067ea:	d438      	bmi.n	800685e <_printf_float+0x366>
 80067ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ee:	ebaa 0903 	sub.w	r9, sl, r3
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	ebaa 0303 	sub.w	r3, sl, r3
 80067f8:	4599      	cmp	r9, r3
 80067fa:	bfa8      	it	ge
 80067fc:	4699      	movge	r9, r3
 80067fe:	f1b9 0f00 	cmp.w	r9, #0
 8006802:	dc34      	bgt.n	800686e <_printf_float+0x376>
 8006804:	f04f 0800 	mov.w	r8, #0
 8006808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800680c:	f104 0b1a 	add.w	fp, r4, #26
 8006810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006812:	ebaa 0303 	sub.w	r3, sl, r3
 8006816:	eba3 0309 	sub.w	r3, r3, r9
 800681a:	4543      	cmp	r3, r8
 800681c:	f77f af76 	ble.w	800670c <_printf_float+0x214>
 8006820:	2301      	movs	r3, #1
 8006822:	465a      	mov	r2, fp
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f aeb0 	beq.w	8006590 <_printf_float+0x98>
 8006830:	f108 0801 	add.w	r8, r8, #1
 8006834:	e7ec      	b.n	8006810 <_printf_float+0x318>
 8006836:	4642      	mov	r2, r8
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d1c1      	bne.n	80067c6 <_printf_float+0x2ce>
 8006842:	e6a5      	b.n	8006590 <_printf_float+0x98>
 8006844:	2301      	movs	r3, #1
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	9206      	str	r2, [sp, #24]
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f ae9e 	beq.w	8006590 <_printf_float+0x98>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	9a06      	ldr	r2, [sp, #24]
 8006858:	3301      	adds	r3, #1
 800685a:	9307      	str	r3, [sp, #28]
 800685c:	e7b9      	b.n	80067d2 <_printf_float+0x2da>
 800685e:	9b05      	ldr	r3, [sp, #20]
 8006860:	465a      	mov	r2, fp
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	d1bf      	bne.n	80067ec <_printf_float+0x2f4>
 800686c:	e690      	b.n	8006590 <_printf_float+0x98>
 800686e:	9a06      	ldr	r2, [sp, #24]
 8006870:	464b      	mov	r3, r9
 8006872:	4442      	add	r2, r8
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	d1c2      	bne.n	8006804 <_printf_float+0x30c>
 800687e:	e687      	b.n	8006590 <_printf_float+0x98>
 8006880:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006884:	f1b9 0f01 	cmp.w	r9, #1
 8006888:	dc01      	bgt.n	800688e <_printf_float+0x396>
 800688a:	07db      	lsls	r3, r3, #31
 800688c:	d536      	bpl.n	80068fc <_printf_float+0x404>
 800688e:	2301      	movs	r3, #1
 8006890:	4642      	mov	r2, r8
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae79 	beq.w	8006590 <_printf_float+0x98>
 800689e:	9b05      	ldr	r3, [sp, #20]
 80068a0:	465a      	mov	r2, fp
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f ae71 	beq.w	8006590 <_printf_float+0x98>
 80068ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80068b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80068be:	d018      	beq.n	80068f2 <_printf_float+0x3fa>
 80068c0:	464b      	mov	r3, r9
 80068c2:	f108 0201 	add.w	r2, r8, #1
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	d10c      	bne.n	80068ea <_printf_float+0x3f2>
 80068d0:	e65e      	b.n	8006590 <_printf_float+0x98>
 80068d2:	2301      	movs	r3, #1
 80068d4:	465a      	mov	r2, fp
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f ae57 	beq.w	8006590 <_printf_float+0x98>
 80068e2:	f108 0801 	add.w	r8, r8, #1
 80068e6:	45c8      	cmp	r8, r9
 80068e8:	dbf3      	blt.n	80068d2 <_printf_float+0x3da>
 80068ea:	4653      	mov	r3, sl
 80068ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068f0:	e6dc      	b.n	80066ac <_printf_float+0x1b4>
 80068f2:	f04f 0800 	mov.w	r8, #0
 80068f6:	f104 0b1a 	add.w	fp, r4, #26
 80068fa:	e7f4      	b.n	80068e6 <_printf_float+0x3ee>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4642      	mov	r2, r8
 8006900:	e7e1      	b.n	80068c6 <_printf_float+0x3ce>
 8006902:	2301      	movs	r3, #1
 8006904:	464a      	mov	r2, r9
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f ae3f 	beq.w	8006590 <_printf_float+0x98>
 8006912:	f108 0801 	add.w	r8, r8, #1
 8006916:	68e3      	ldr	r3, [r4, #12]
 8006918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800691a:	1a5b      	subs	r3, r3, r1
 800691c:	4543      	cmp	r3, r8
 800691e:	dcf0      	bgt.n	8006902 <_printf_float+0x40a>
 8006920:	e6f8      	b.n	8006714 <_printf_float+0x21c>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f104 0919 	add.w	r9, r4, #25
 800692a:	e7f4      	b.n	8006916 <_printf_float+0x41e>

0800692c <_printf_common>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	4616      	mov	r6, r2
 8006932:	4698      	mov	r8, r3
 8006934:	688a      	ldr	r2, [r1, #8]
 8006936:	690b      	ldr	r3, [r1, #16]
 8006938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800693c:	4293      	cmp	r3, r2
 800693e:	bfb8      	it	lt
 8006940:	4613      	movlt	r3, r2
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006948:	4607      	mov	r7, r0
 800694a:	460c      	mov	r4, r1
 800694c:	b10a      	cbz	r2, 8006952 <_printf_common+0x26>
 800694e:	3301      	adds	r3, #1
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	0699      	lsls	r1, r3, #26
 8006956:	bf42      	ittt	mi
 8006958:	6833      	ldrmi	r3, [r6, #0]
 800695a:	3302      	addmi	r3, #2
 800695c:	6033      	strmi	r3, [r6, #0]
 800695e:	6825      	ldr	r5, [r4, #0]
 8006960:	f015 0506 	ands.w	r5, r5, #6
 8006964:	d106      	bne.n	8006974 <_printf_common+0x48>
 8006966:	f104 0a19 	add.w	sl, r4, #25
 800696a:	68e3      	ldr	r3, [r4, #12]
 800696c:	6832      	ldr	r2, [r6, #0]
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc26      	bgt.n	80069c2 <_printf_common+0x96>
 8006974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006978:	6822      	ldr	r2, [r4, #0]
 800697a:	3b00      	subs	r3, #0
 800697c:	bf18      	it	ne
 800697e:	2301      	movne	r3, #1
 8006980:	0692      	lsls	r2, r2, #26
 8006982:	d42b      	bmi.n	80069dc <_printf_common+0xb0>
 8006984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006988:	4641      	mov	r1, r8
 800698a:	4638      	mov	r0, r7
 800698c:	47c8      	blx	r9
 800698e:	3001      	adds	r0, #1
 8006990:	d01e      	beq.n	80069d0 <_printf_common+0xa4>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	f003 0306 	and.w	r3, r3, #6
 800699a:	2b04      	cmp	r3, #4
 800699c:	bf02      	ittt	eq
 800699e:	68e5      	ldreq	r5, [r4, #12]
 80069a0:	6833      	ldreq	r3, [r6, #0]
 80069a2:	1aed      	subeq	r5, r5, r3
 80069a4:	68a3      	ldr	r3, [r4, #8]
 80069a6:	bf0c      	ite	eq
 80069a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ac:	2500      	movne	r5, #0
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bfc4      	itt	gt
 80069b2:	1a9b      	subgt	r3, r3, r2
 80069b4:	18ed      	addgt	r5, r5, r3
 80069b6:	2600      	movs	r6, #0
 80069b8:	341a      	adds	r4, #26
 80069ba:	42b5      	cmp	r5, r6
 80069bc:	d11a      	bne.n	80069f4 <_printf_common+0xc8>
 80069be:	2000      	movs	r0, #0
 80069c0:	e008      	b.n	80069d4 <_printf_common+0xa8>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	4641      	mov	r1, r8
 80069c8:	4638      	mov	r0, r7
 80069ca:	47c8      	blx	r9
 80069cc:	3001      	adds	r0, #1
 80069ce:	d103      	bne.n	80069d8 <_printf_common+0xac>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	3501      	adds	r5, #1
 80069da:	e7c6      	b.n	800696a <_printf_common+0x3e>
 80069dc:	18e1      	adds	r1, r4, r3
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	2030      	movs	r0, #48	@ 0x30
 80069e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069e6:	4422      	add	r2, r4
 80069e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069f0:	3302      	adds	r3, #2
 80069f2:	e7c7      	b.n	8006984 <_printf_common+0x58>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4622      	mov	r2, r4
 80069f8:	4641      	mov	r1, r8
 80069fa:	4638      	mov	r0, r7
 80069fc:	47c8      	blx	r9
 80069fe:	3001      	adds	r0, #1
 8006a00:	d0e6      	beq.n	80069d0 <_printf_common+0xa4>
 8006a02:	3601      	adds	r6, #1
 8006a04:	e7d9      	b.n	80069ba <_printf_common+0x8e>
	...

08006a08 <_printf_i>:
 8006a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	7e0f      	ldrb	r7, [r1, #24]
 8006a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a10:	2f78      	cmp	r7, #120	@ 0x78
 8006a12:	4691      	mov	r9, r2
 8006a14:	4680      	mov	r8, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	469a      	mov	sl, r3
 8006a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a1e:	d807      	bhi.n	8006a30 <_printf_i+0x28>
 8006a20:	2f62      	cmp	r7, #98	@ 0x62
 8006a22:	d80a      	bhi.n	8006a3a <_printf_i+0x32>
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	f000 80d2 	beq.w	8006bce <_printf_i+0x1c6>
 8006a2a:	2f58      	cmp	r7, #88	@ 0x58
 8006a2c:	f000 80b9 	beq.w	8006ba2 <_printf_i+0x19a>
 8006a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a38:	e03a      	b.n	8006ab0 <_printf_i+0xa8>
 8006a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a3e:	2b15      	cmp	r3, #21
 8006a40:	d8f6      	bhi.n	8006a30 <_printf_i+0x28>
 8006a42:	a101      	add	r1, pc, #4	@ (adr r1, 8006a48 <_printf_i+0x40>)
 8006a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006ab5 	.word	0x08006ab5
 8006a50:	08006a31 	.word	0x08006a31
 8006a54:	08006a31 	.word	0x08006a31
 8006a58:	08006a31 	.word	0x08006a31
 8006a5c:	08006a31 	.word	0x08006a31
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006a31 	.word	0x08006a31
 8006a68:	08006a31 	.word	0x08006a31
 8006a6c:	08006a31 	.word	0x08006a31
 8006a70:	08006a31 	.word	0x08006a31
 8006a74:	08006bb5 	.word	0x08006bb5
 8006a78:	08006adf 	.word	0x08006adf
 8006a7c:	08006b6f 	.word	0x08006b6f
 8006a80:	08006a31 	.word	0x08006a31
 8006a84:	08006a31 	.word	0x08006a31
 8006a88:	08006bd7 	.word	0x08006bd7
 8006a8c:	08006a31 	.word	0x08006a31
 8006a90:	08006adf 	.word	0x08006adf
 8006a94:	08006a31 	.word	0x08006a31
 8006a98:	08006a31 	.word	0x08006a31
 8006a9c:	08006b77 	.word	0x08006b77
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	1d1a      	adds	r2, r3, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6032      	str	r2, [r6, #0]
 8006aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e09d      	b.n	8006bf0 <_printf_i+0x1e8>
 8006ab4:	6833      	ldr	r3, [r6, #0]
 8006ab6:	6820      	ldr	r0, [r4, #0]
 8006ab8:	1d19      	adds	r1, r3, #4
 8006aba:	6031      	str	r1, [r6, #0]
 8006abc:	0606      	lsls	r6, r0, #24
 8006abe:	d501      	bpl.n	8006ac4 <_printf_i+0xbc>
 8006ac0:	681d      	ldr	r5, [r3, #0]
 8006ac2:	e003      	b.n	8006acc <_printf_i+0xc4>
 8006ac4:	0645      	lsls	r5, r0, #25
 8006ac6:	d5fb      	bpl.n	8006ac0 <_printf_i+0xb8>
 8006ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006acc:	2d00      	cmp	r5, #0
 8006ace:	da03      	bge.n	8006ad8 <_printf_i+0xd0>
 8006ad0:	232d      	movs	r3, #45	@ 0x2d
 8006ad2:	426d      	negs	r5, r5
 8006ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad8:	4859      	ldr	r0, [pc, #356]	@ (8006c40 <_printf_i+0x238>)
 8006ada:	230a      	movs	r3, #10
 8006adc:	e011      	b.n	8006b02 <_printf_i+0xfa>
 8006ade:	6821      	ldr	r1, [r4, #0]
 8006ae0:	6833      	ldr	r3, [r6, #0]
 8006ae2:	0608      	lsls	r0, r1, #24
 8006ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ae8:	d402      	bmi.n	8006af0 <_printf_i+0xe8>
 8006aea:	0649      	lsls	r1, r1, #25
 8006aec:	bf48      	it	mi
 8006aee:	b2ad      	uxthmi	r5, r5
 8006af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006af2:	4853      	ldr	r0, [pc, #332]	@ (8006c40 <_printf_i+0x238>)
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	bf14      	ite	ne
 8006af8:	230a      	movne	r3, #10
 8006afa:	2308      	moveq	r3, #8
 8006afc:	2100      	movs	r1, #0
 8006afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b02:	6866      	ldr	r6, [r4, #4]
 8006b04:	60a6      	str	r6, [r4, #8]
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	bfa2      	ittt	ge
 8006b0a:	6821      	ldrge	r1, [r4, #0]
 8006b0c:	f021 0104 	bicge.w	r1, r1, #4
 8006b10:	6021      	strge	r1, [r4, #0]
 8006b12:	b90d      	cbnz	r5, 8006b18 <_printf_i+0x110>
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	d04b      	beq.n	8006bb0 <_printf_i+0x1a8>
 8006b18:	4616      	mov	r6, r2
 8006b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b22:	5dc7      	ldrb	r7, [r0, r7]
 8006b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b28:	462f      	mov	r7, r5
 8006b2a:	42bb      	cmp	r3, r7
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	d9f4      	bls.n	8006b1a <_printf_i+0x112>
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d10b      	bne.n	8006b4c <_printf_i+0x144>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07df      	lsls	r7, r3, #31
 8006b38:	d508      	bpl.n	8006b4c <_printf_i+0x144>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	6861      	ldr	r1, [r4, #4]
 8006b3e:	4299      	cmp	r1, r3
 8006b40:	bfde      	ittt	le
 8006b42:	2330      	movle	r3, #48	@ 0x30
 8006b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b4c:	1b92      	subs	r2, r2, r6
 8006b4e:	6122      	str	r2, [r4, #16]
 8006b50:	f8cd a000 	str.w	sl, [sp]
 8006b54:	464b      	mov	r3, r9
 8006b56:	aa03      	add	r2, sp, #12
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	f7ff fee6 	bl	800692c <_printf_common>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d14a      	bne.n	8006bfa <_printf_i+0x1f2>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b004      	add	sp, #16
 8006b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	f043 0320 	orr.w	r3, r3, #32
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	4833      	ldr	r0, [pc, #204]	@ (8006c44 <_printf_i+0x23c>)
 8006b78:	2778      	movs	r7, #120	@ 0x78
 8006b7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	6831      	ldr	r1, [r6, #0]
 8006b82:	061f      	lsls	r7, r3, #24
 8006b84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b88:	d402      	bmi.n	8006b90 <_printf_i+0x188>
 8006b8a:	065f      	lsls	r7, r3, #25
 8006b8c:	bf48      	it	mi
 8006b8e:	b2ad      	uxthmi	r5, r5
 8006b90:	6031      	str	r1, [r6, #0]
 8006b92:	07d9      	lsls	r1, r3, #31
 8006b94:	bf44      	itt	mi
 8006b96:	f043 0320 	orrmi.w	r3, r3, #32
 8006b9a:	6023      	strmi	r3, [r4, #0]
 8006b9c:	b11d      	cbz	r5, 8006ba6 <_printf_i+0x19e>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	e7ac      	b.n	8006afc <_printf_i+0xf4>
 8006ba2:	4827      	ldr	r0, [pc, #156]	@ (8006c40 <_printf_i+0x238>)
 8006ba4:	e7e9      	b.n	8006b7a <_printf_i+0x172>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	f023 0320 	bic.w	r3, r3, #32
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	e7f6      	b.n	8006b9e <_printf_i+0x196>
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	e7bd      	b.n	8006b30 <_printf_i+0x128>
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	6825      	ldr	r5, [r4, #0]
 8006bb8:	6961      	ldr	r1, [r4, #20]
 8006bba:	1d18      	adds	r0, r3, #4
 8006bbc:	6030      	str	r0, [r6, #0]
 8006bbe:	062e      	lsls	r6, r5, #24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_i+0x1c0>
 8006bc4:	6019      	str	r1, [r3, #0]
 8006bc6:	e002      	b.n	8006bce <_printf_i+0x1c6>
 8006bc8:	0668      	lsls	r0, r5, #25
 8006bca:	d5fb      	bpl.n	8006bc4 <_printf_i+0x1bc>
 8006bcc:	8019      	strh	r1, [r3, #0]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	e7bc      	b.n	8006b50 <_printf_i+0x148>
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	6032      	str	r2, [r6, #0]
 8006bdc:	681e      	ldr	r6, [r3, #0]
 8006bde:	6862      	ldr	r2, [r4, #4]
 8006be0:	2100      	movs	r1, #0
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7f9 fb2c 	bl	8000240 <memchr>
 8006be8:	b108      	cbz	r0, 8006bee <_printf_i+0x1e6>
 8006bea:	1b80      	subs	r0, r0, r6
 8006bec:	6060      	str	r0, [r4, #4]
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bf8:	e7aa      	b.n	8006b50 <_printf_i+0x148>
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	47d0      	blx	sl
 8006c04:	3001      	adds	r0, #1
 8006c06:	d0ad      	beq.n	8006b64 <_printf_i+0x15c>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	079b      	lsls	r3, r3, #30
 8006c0c:	d413      	bmi.n	8006c36 <_printf_i+0x22e>
 8006c0e:	68e0      	ldr	r0, [r4, #12]
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	4298      	cmp	r0, r3
 8006c14:	bfb8      	it	lt
 8006c16:	4618      	movlt	r0, r3
 8006c18:	e7a6      	b.n	8006b68 <_printf_i+0x160>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	47d0      	blx	sl
 8006c24:	3001      	adds	r0, #1
 8006c26:	d09d      	beq.n	8006b64 <_printf_i+0x15c>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	9903      	ldr	r1, [sp, #12]
 8006c2e:	1a5b      	subs	r3, r3, r1
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	dcf2      	bgt.n	8006c1a <_printf_i+0x212>
 8006c34:	e7eb      	b.n	8006c0e <_printf_i+0x206>
 8006c36:	2500      	movs	r5, #0
 8006c38:	f104 0619 	add.w	r6, r4, #25
 8006c3c:	e7f5      	b.n	8006c2a <_printf_i+0x222>
 8006c3e:	bf00      	nop
 8006c40:	0800933a 	.word	0x0800933a
 8006c44:	0800934b 	.word	0x0800934b

08006c48 <std>:
 8006c48:	2300      	movs	r3, #0
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c56:	6083      	str	r3, [r0, #8]
 8006c58:	8181      	strh	r1, [r0, #12]
 8006c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c5c:	81c2      	strh	r2, [r0, #14]
 8006c5e:	6183      	str	r3, [r0, #24]
 8006c60:	4619      	mov	r1, r3
 8006c62:	2208      	movs	r2, #8
 8006c64:	305c      	adds	r0, #92	@ 0x5c
 8006c66:	f000 fa2d 	bl	80070c4 <memset>
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <std+0x58>)
 8006c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <std+0x5c>)
 8006c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <std+0x60>)
 8006c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <std+0x64>)
 8006c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <std+0x68>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	429c      	cmp	r4, r3
 8006c80:	d006      	beq.n	8006c90 <std+0x48>
 8006c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c86:	4294      	cmp	r4, r2
 8006c88:	d002      	beq.n	8006c90 <std+0x48>
 8006c8a:	33d0      	adds	r3, #208	@ 0xd0
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	d105      	bne.n	8006c9c <std+0x54>
 8006c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c98:	f000 ba90 	b.w	80071bc <__retarget_lock_init_recursive>
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08006f15 	.word	0x08006f15
 8006ca4:	08006f37 	.word	0x08006f37
 8006ca8:	08006f6f 	.word	0x08006f6f
 8006cac:	08006f93 	.word	0x08006f93
 8006cb0:	20000c90 	.word	0x20000c90

08006cb4 <stdio_exit_handler>:
 8006cb4:	4a02      	ldr	r2, [pc, #8]	@ (8006cc0 <stdio_exit_handler+0xc>)
 8006cb6:	4903      	ldr	r1, [pc, #12]	@ (8006cc4 <stdio_exit_handler+0x10>)
 8006cb8:	4803      	ldr	r0, [pc, #12]	@ (8006cc8 <stdio_exit_handler+0x14>)
 8006cba:	f000 b869 	b.w	8006d90 <_fwalk_sglue>
 8006cbe:	bf00      	nop
 8006cc0:	20000018 	.word	0x20000018
 8006cc4:	08008cdd 	.word	0x08008cdd
 8006cc8:	20000028 	.word	0x20000028

08006ccc <cleanup_stdio>:
 8006ccc:	6841      	ldr	r1, [r0, #4]
 8006cce:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <cleanup_stdio+0x34>)
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	d001      	beq.n	8006cdc <cleanup_stdio+0x10>
 8006cd8:	f002 f800 	bl	8008cdc <_fflush_r>
 8006cdc:	68a1      	ldr	r1, [r4, #8]
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <cleanup_stdio+0x38>)
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	d002      	beq.n	8006cea <cleanup_stdio+0x1e>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f001 fff9 	bl	8008cdc <_fflush_r>
 8006cea:	68e1      	ldr	r1, [r4, #12]
 8006cec:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <cleanup_stdio+0x3c>)
 8006cee:	4299      	cmp	r1, r3
 8006cf0:	d004      	beq.n	8006cfc <cleanup_stdio+0x30>
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf8:	f001 bff0 	b.w	8008cdc <_fflush_r>
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000c90 	.word	0x20000c90
 8006d04:	20000cf8 	.word	0x20000cf8
 8006d08:	20000d60 	.word	0x20000d60

08006d0c <global_stdio_init.part.0>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <global_stdio_init.part.0+0x30>)
 8006d10:	4c0b      	ldr	r4, [pc, #44]	@ (8006d40 <global_stdio_init.part.0+0x34>)
 8006d12:	4a0c      	ldr	r2, [pc, #48]	@ (8006d44 <global_stdio_init.part.0+0x38>)
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	4620      	mov	r0, r4
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2104      	movs	r1, #4
 8006d1c:	f7ff ff94 	bl	8006c48 <std>
 8006d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d24:	2201      	movs	r2, #1
 8006d26:	2109      	movs	r1, #9
 8006d28:	f7ff ff8e 	bl	8006c48 <std>
 8006d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d30:	2202      	movs	r2, #2
 8006d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d36:	2112      	movs	r1, #18
 8006d38:	f7ff bf86 	b.w	8006c48 <std>
 8006d3c:	20000dc8 	.word	0x20000dc8
 8006d40:	20000c90 	.word	0x20000c90
 8006d44:	08006cb5 	.word	0x08006cb5

08006d48 <__sfp_lock_acquire>:
 8006d48:	4801      	ldr	r0, [pc, #4]	@ (8006d50 <__sfp_lock_acquire+0x8>)
 8006d4a:	f000 ba38 	b.w	80071be <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20000dd1 	.word	0x20000dd1

08006d54 <__sfp_lock_release>:
 8006d54:	4801      	ldr	r0, [pc, #4]	@ (8006d5c <__sfp_lock_release+0x8>)
 8006d56:	f000 ba33 	b.w	80071c0 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20000dd1 	.word	0x20000dd1

08006d60 <__sinit>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	4604      	mov	r4, r0
 8006d64:	f7ff fff0 	bl	8006d48 <__sfp_lock_acquire>
 8006d68:	6a23      	ldr	r3, [r4, #32]
 8006d6a:	b11b      	cbz	r3, 8006d74 <__sinit+0x14>
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d70:	f7ff bff0 	b.w	8006d54 <__sfp_lock_release>
 8006d74:	4b04      	ldr	r3, [pc, #16]	@ (8006d88 <__sinit+0x28>)
 8006d76:	6223      	str	r3, [r4, #32]
 8006d78:	4b04      	ldr	r3, [pc, #16]	@ (8006d8c <__sinit+0x2c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f5      	bne.n	8006d6c <__sinit+0xc>
 8006d80:	f7ff ffc4 	bl	8006d0c <global_stdio_init.part.0>
 8006d84:	e7f2      	b.n	8006d6c <__sinit+0xc>
 8006d86:	bf00      	nop
 8006d88:	08006ccd 	.word	0x08006ccd
 8006d8c:	20000dc8 	.word	0x20000dc8

08006d90 <_fwalk_sglue>:
 8006d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d94:	4607      	mov	r7, r0
 8006d96:	4688      	mov	r8, r1
 8006d98:	4614      	mov	r4, r2
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da0:	f1b9 0901 	subs.w	r9, r9, #1
 8006da4:	d505      	bpl.n	8006db2 <_fwalk_sglue+0x22>
 8006da6:	6824      	ldr	r4, [r4, #0]
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	d1f7      	bne.n	8006d9c <_fwalk_sglue+0xc>
 8006dac:	4630      	mov	r0, r6
 8006dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db2:	89ab      	ldrh	r3, [r5, #12]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d907      	bls.n	8006dc8 <_fwalk_sglue+0x38>
 8006db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	d003      	beq.n	8006dc8 <_fwalk_sglue+0x38>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	47c0      	blx	r8
 8006dc6:	4306      	orrs	r6, r0
 8006dc8:	3568      	adds	r5, #104	@ 0x68
 8006dca:	e7e9      	b.n	8006da0 <_fwalk_sglue+0x10>

08006dcc <iprintf>:
 8006dcc:	b40f      	push	{r0, r1, r2, r3}
 8006dce:	b507      	push	{r0, r1, r2, lr}
 8006dd0:	4906      	ldr	r1, [pc, #24]	@ (8006dec <iprintf+0x20>)
 8006dd2:	ab04      	add	r3, sp, #16
 8006dd4:	6808      	ldr	r0, [r1, #0]
 8006dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dda:	6881      	ldr	r1, [r0, #8]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	f001 fde1 	bl	80089a4 <_vfiprintf_r>
 8006de2:	b003      	add	sp, #12
 8006de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de8:	b004      	add	sp, #16
 8006dea:	4770      	bx	lr
 8006dec:	20000024 	.word	0x20000024

08006df0 <_puts_r>:
 8006df0:	6a03      	ldr	r3, [r0, #32]
 8006df2:	b570      	push	{r4, r5, r6, lr}
 8006df4:	6884      	ldr	r4, [r0, #8]
 8006df6:	4605      	mov	r5, r0
 8006df8:	460e      	mov	r6, r1
 8006dfa:	b90b      	cbnz	r3, 8006e00 <_puts_r+0x10>
 8006dfc:	f7ff ffb0 	bl	8006d60 <__sinit>
 8006e00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d405      	bmi.n	8006e12 <_puts_r+0x22>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	0598      	lsls	r0, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_puts_r+0x22>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e0e:	f000 f9d6 	bl	80071be <__retarget_lock_acquire_recursive>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	0719      	lsls	r1, r3, #28
 8006e16:	d502      	bpl.n	8006e1e <_puts_r+0x2e>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d135      	bne.n	8006e8a <_puts_r+0x9a>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f8f9 	bl	8007018 <__swsetup_r>
 8006e26:	b380      	cbz	r0, 8006e8a <_puts_r+0x9a>
 8006e28:	f04f 35ff 	mov.w	r5, #4294967295
 8006e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e2e:	07da      	lsls	r2, r3, #31
 8006e30:	d405      	bmi.n	8006e3e <_puts_r+0x4e>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	059b      	lsls	r3, r3, #22
 8006e36:	d402      	bmi.n	8006e3e <_puts_r+0x4e>
 8006e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3a:	f000 f9c1 	bl	80071c0 <__retarget_lock_release_recursive>
 8006e3e:	4628      	mov	r0, r5
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da04      	bge.n	8006e50 <_puts_r+0x60>
 8006e46:	69a2      	ldr	r2, [r4, #24]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	dc17      	bgt.n	8006e7c <_puts_r+0x8c>
 8006e4c:	290a      	cmp	r1, #10
 8006e4e:	d015      	beq.n	8006e7c <_puts_r+0x8c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	7019      	strb	r1, [r3, #0]
 8006e58:	68a3      	ldr	r3, [r4, #8]
 8006e5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	2900      	cmp	r1, #0
 8006e64:	d1ed      	bne.n	8006e42 <_puts_r+0x52>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da11      	bge.n	8006e8e <_puts_r+0x9e>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	210a      	movs	r1, #10
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f893 	bl	8006f9a <__swbuf_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d0d7      	beq.n	8006e28 <_puts_r+0x38>
 8006e78:	250a      	movs	r5, #10
 8006e7a:	e7d7      	b.n	8006e2c <_puts_r+0x3c>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f88b 	bl	8006f9a <__swbuf_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1e7      	bne.n	8006e58 <_puts_r+0x68>
 8006e88:	e7ce      	b.n	8006e28 <_puts_r+0x38>
 8006e8a:	3e01      	subs	r6, #1
 8006e8c:	e7e4      	b.n	8006e58 <_puts_r+0x68>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	220a      	movs	r2, #10
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e7ee      	b.n	8006e78 <_puts_r+0x88>
	...

08006e9c <puts>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ea8 <puts+0xc>)
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	f7ff bfa5 	b.w	8006df0 <_puts_r>
 8006ea6:	bf00      	nop
 8006ea8:	20000024 	.word	0x20000024

08006eac <sniprintf>:
 8006eac:	b40c      	push	{r2, r3}
 8006eae:	b530      	push	{r4, r5, lr}
 8006eb0:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <sniprintf+0x64>)
 8006eb2:	1e0c      	subs	r4, r1, #0
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	b09d      	sub	sp, #116	@ 0x74
 8006eb8:	da08      	bge.n	8006ecc <sniprintf+0x20>
 8006eba:	238b      	movs	r3, #139	@ 0x8b
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	b01d      	add	sp, #116	@ 0x74
 8006ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ec8:	b002      	add	sp, #8
 8006eca:	4770      	bx	lr
 8006ecc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ed4:	bf14      	ite	ne
 8006ed6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006eda:	4623      	moveq	r3, r4
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	9006      	str	r0, [sp, #24]
 8006ee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006eec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006eee:	ab21      	add	r3, sp, #132	@ 0x84
 8006ef0:	a902      	add	r1, sp, #8
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	f001 fc2f 	bl	8008758 <_svfiprintf_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	bfbc      	itt	lt
 8006efe:	238b      	movlt	r3, #139	@ 0x8b
 8006f00:	602b      	strlt	r3, [r5, #0]
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	d0dd      	beq.n	8006ec2 <sniprintf+0x16>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e7d9      	b.n	8006ec2 <sniprintf+0x16>
 8006f0e:	bf00      	nop
 8006f10:	20000024 	.word	0x20000024

08006f14 <__sread>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	460c      	mov	r4, r1
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	f000 f900 	bl	8007120 <_read_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	bfab      	itete	ge
 8006f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f26:	89a3      	ldrhlt	r3, [r4, #12]
 8006f28:	181b      	addge	r3, r3, r0
 8006f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f2e:	bfac      	ite	ge
 8006f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f32:	81a3      	strhlt	r3, [r4, #12]
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <__swrite>:
 8006f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3a:	461f      	mov	r7, r3
 8006f3c:	898b      	ldrh	r3, [r1, #12]
 8006f3e:	05db      	lsls	r3, r3, #23
 8006f40:	4605      	mov	r5, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4616      	mov	r6, r2
 8006f46:	d505      	bpl.n	8006f54 <__swrite+0x1e>
 8006f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f000 f8d4 	bl	80070fc <_lseek_r>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	4632      	mov	r2, r6
 8006f62:	463b      	mov	r3, r7
 8006f64:	4628      	mov	r0, r5
 8006f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6a:	f000 b8eb 	b.w	8007144 <_write_r>

08006f6e <__sseek>:
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	460c      	mov	r4, r1
 8006f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f76:	f000 f8c1 	bl	80070fc <_lseek_r>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	bf15      	itete	ne
 8006f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f8a:	81a3      	strheq	r3, [r4, #12]
 8006f8c:	bf18      	it	ne
 8006f8e:	81a3      	strhne	r3, [r4, #12]
 8006f90:	bd10      	pop	{r4, pc}

08006f92 <__sclose>:
 8006f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f96:	f000 b8a1 	b.w	80070dc <_close_r>

08006f9a <__swbuf_r>:
 8006f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	b118      	cbz	r0, 8006fac <__swbuf_r+0x12>
 8006fa4:	6a03      	ldr	r3, [r0, #32]
 8006fa6:	b90b      	cbnz	r3, 8006fac <__swbuf_r+0x12>
 8006fa8:	f7ff feda 	bl	8006d60 <__sinit>
 8006fac:	69a3      	ldr	r3, [r4, #24]
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	071a      	lsls	r2, r3, #28
 8006fb4:	d501      	bpl.n	8006fba <__swbuf_r+0x20>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	b943      	cbnz	r3, 8006fcc <__swbuf_r+0x32>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 f82b 	bl	8007018 <__swsetup_r>
 8006fc2:	b118      	cbz	r0, 8006fcc <__swbuf_r+0x32>
 8006fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc8:	4638      	mov	r0, r7
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	6922      	ldr	r2, [r4, #16]
 8006fd0:	1a98      	subs	r0, r3, r2
 8006fd2:	6963      	ldr	r3, [r4, #20]
 8006fd4:	b2f6      	uxtb	r6, r6
 8006fd6:	4283      	cmp	r3, r0
 8006fd8:	4637      	mov	r7, r6
 8006fda:	dc05      	bgt.n	8006fe8 <__swbuf_r+0x4e>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f001 fe7c 	bl	8008cdc <_fflush_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d1ed      	bne.n	8006fc4 <__swbuf_r+0x2a>
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	60a3      	str	r3, [r4, #8]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	701e      	strb	r6, [r3, #0]
 8006ff6:	6962      	ldr	r2, [r4, #20]
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d004      	beq.n	8007008 <__swbuf_r+0x6e>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	07db      	lsls	r3, r3, #31
 8007002:	d5e1      	bpl.n	8006fc8 <__swbuf_r+0x2e>
 8007004:	2e0a      	cmp	r6, #10
 8007006:	d1df      	bne.n	8006fc8 <__swbuf_r+0x2e>
 8007008:	4621      	mov	r1, r4
 800700a:	4628      	mov	r0, r5
 800700c:	f001 fe66 	bl	8008cdc <_fflush_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	d0d9      	beq.n	8006fc8 <__swbuf_r+0x2e>
 8007014:	e7d6      	b.n	8006fc4 <__swbuf_r+0x2a>
	...

08007018 <__swsetup_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4b29      	ldr	r3, [pc, #164]	@ (80070c0 <__swsetup_r+0xa8>)
 800701c:	4605      	mov	r5, r0
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	460c      	mov	r4, r1
 8007022:	b118      	cbz	r0, 800702c <__swsetup_r+0x14>
 8007024:	6a03      	ldr	r3, [r0, #32]
 8007026:	b90b      	cbnz	r3, 800702c <__swsetup_r+0x14>
 8007028:	f7ff fe9a 	bl	8006d60 <__sinit>
 800702c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007030:	0719      	lsls	r1, r3, #28
 8007032:	d422      	bmi.n	800707a <__swsetup_r+0x62>
 8007034:	06da      	lsls	r2, r3, #27
 8007036:	d407      	bmi.n	8007048 <__swsetup_r+0x30>
 8007038:	2209      	movs	r2, #9
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	f04f 30ff 	mov.w	r0, #4294967295
 8007046:	e033      	b.n	80070b0 <__swsetup_r+0x98>
 8007048:	0758      	lsls	r0, r3, #29
 800704a:	d512      	bpl.n	8007072 <__swsetup_r+0x5a>
 800704c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704e:	b141      	cbz	r1, 8007062 <__swsetup_r+0x4a>
 8007050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007054:	4299      	cmp	r1, r3
 8007056:	d002      	beq.n	800705e <__swsetup_r+0x46>
 8007058:	4628      	mov	r0, r5
 800705a:	f000 fe9f 	bl	8007d9c <_free_r>
 800705e:	2300      	movs	r3, #0
 8007060:	6363      	str	r3, [r4, #52]	@ 0x34
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	2300      	movs	r3, #0
 800706c:	6063      	str	r3, [r4, #4]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f043 0308 	orr.w	r3, r3, #8
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	b94b      	cbnz	r3, 8007092 <__swsetup_r+0x7a>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007088:	d003      	beq.n	8007092 <__swsetup_r+0x7a>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f001 fe73 	bl	8008d78 <__smakebuf_r>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	f013 0201 	ands.w	r2, r3, #1
 800709a:	d00a      	beq.n	80070b2 <__swsetup_r+0x9a>
 800709c:	2200      	movs	r2, #0
 800709e:	60a2      	str	r2, [r4, #8]
 80070a0:	6962      	ldr	r2, [r4, #20]
 80070a2:	4252      	negs	r2, r2
 80070a4:	61a2      	str	r2, [r4, #24]
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	b942      	cbnz	r2, 80070bc <__swsetup_r+0xa4>
 80070aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ae:	d1c5      	bne.n	800703c <__swsetup_r+0x24>
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	0799      	lsls	r1, r3, #30
 80070b4:	bf58      	it	pl
 80070b6:	6962      	ldrpl	r2, [r4, #20]
 80070b8:	60a2      	str	r2, [r4, #8]
 80070ba:	e7f4      	b.n	80070a6 <__swsetup_r+0x8e>
 80070bc:	2000      	movs	r0, #0
 80070be:	e7f7      	b.n	80070b0 <__swsetup_r+0x98>
 80070c0:	20000024 	.word	0x20000024

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <_localeconv_r>:
 80070d4:	4800      	ldr	r0, [pc, #0]	@ (80070d8 <_localeconv_r+0x4>)
 80070d6:	4770      	bx	lr
 80070d8:	20000164 	.word	0x20000164

080070dc <_close_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d06      	ldr	r5, [pc, #24]	@ (80070f8 <_close_r+0x1c>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7fa fe7e 	bl	8001de8 <_close>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_close_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_close_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000dcc 	.word	0x20000dcc

080070fc <_lseek_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d07      	ldr	r5, [pc, #28]	@ (800711c <_lseek_r+0x20>)
 8007100:	4604      	mov	r4, r0
 8007102:	4608      	mov	r0, r1
 8007104:	4611      	mov	r1, r2
 8007106:	2200      	movs	r2, #0
 8007108:	602a      	str	r2, [r5, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	f7fa fe93 	bl	8001e36 <_lseek>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_lseek_r+0x1e>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_lseek_r+0x1e>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	20000dcc 	.word	0x20000dcc

08007120 <_read_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	@ (8007140 <_read_r+0x20>)
 8007124:	4604      	mov	r4, r0
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	2200      	movs	r2, #0
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7fa fe3d 	bl	8001dae <_read>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_read_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_read_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	20000dcc 	.word	0x20000dcc

08007144 <_write_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d07      	ldr	r5, [pc, #28]	@ (8007164 <_write_r+0x20>)
 8007148:	4604      	mov	r4, r0
 800714a:	4608      	mov	r0, r1
 800714c:	4611      	mov	r1, r2
 800714e:	2200      	movs	r2, #0
 8007150:	602a      	str	r2, [r5, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	f7fa fac6 	bl	80016e4 <_write>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_write_r+0x1e>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_write_r+0x1e>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	20000dcc 	.word	0x20000dcc

08007168 <__errno>:
 8007168:	4b01      	ldr	r3, [pc, #4]	@ (8007170 <__errno+0x8>)
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000024 	.word	0x20000024

08007174 <__libc_init_array>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4d0d      	ldr	r5, [pc, #52]	@ (80071ac <__libc_init_array+0x38>)
 8007178:	4c0d      	ldr	r4, [pc, #52]	@ (80071b0 <__libc_init_array+0x3c>)
 800717a:	1b64      	subs	r4, r4, r5
 800717c:	10a4      	asrs	r4, r4, #2
 800717e:	2600      	movs	r6, #0
 8007180:	42a6      	cmp	r6, r4
 8007182:	d109      	bne.n	8007198 <__libc_init_array+0x24>
 8007184:	4d0b      	ldr	r5, [pc, #44]	@ (80071b4 <__libc_init_array+0x40>)
 8007186:	4c0c      	ldr	r4, [pc, #48]	@ (80071b8 <__libc_init_array+0x44>)
 8007188:	f001 ff64 	bl	8009054 <_init>
 800718c:	1b64      	subs	r4, r4, r5
 800718e:	10a4      	asrs	r4, r4, #2
 8007190:	2600      	movs	r6, #0
 8007192:	42a6      	cmp	r6, r4
 8007194:	d105      	bne.n	80071a2 <__libc_init_array+0x2e>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f855 3b04 	ldr.w	r3, [r5], #4
 800719c:	4798      	blx	r3
 800719e:	3601      	adds	r6, #1
 80071a0:	e7ee      	b.n	8007180 <__libc_init_array+0xc>
 80071a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a6:	4798      	blx	r3
 80071a8:	3601      	adds	r6, #1
 80071aa:	e7f2      	b.n	8007192 <__libc_init_array+0x1e>
 80071ac:	080096a0 	.word	0x080096a0
 80071b0:	080096a0 	.word	0x080096a0
 80071b4:	080096a0 	.word	0x080096a0
 80071b8:	080096a4 	.word	0x080096a4

080071bc <__retarget_lock_init_recursive>:
 80071bc:	4770      	bx	lr

080071be <__retarget_lock_acquire_recursive>:
 80071be:	4770      	bx	lr

080071c0 <__retarget_lock_release_recursive>:
 80071c0:	4770      	bx	lr

080071c2 <memcpy>:
 80071c2:	440a      	add	r2, r1
 80071c4:	4291      	cmp	r1, r2
 80071c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ca:	d100      	bne.n	80071ce <memcpy+0xc>
 80071cc:	4770      	bx	lr
 80071ce:	b510      	push	{r4, lr}
 80071d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d8:	4291      	cmp	r1, r2
 80071da:	d1f9      	bne.n	80071d0 <memcpy+0xe>
 80071dc:	bd10      	pop	{r4, pc}

080071de <quorem>:
 80071de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e2:	6903      	ldr	r3, [r0, #16]
 80071e4:	690c      	ldr	r4, [r1, #16]
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	4607      	mov	r7, r0
 80071ea:	db7e      	blt.n	80072ea <quorem+0x10c>
 80071ec:	3c01      	subs	r4, #1
 80071ee:	f101 0814 	add.w	r8, r1, #20
 80071f2:	00a3      	lsls	r3, r4, #2
 80071f4:	f100 0514 	add.w	r5, r0, #20
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007208:	3301      	adds	r3, #1
 800720a:	429a      	cmp	r2, r3
 800720c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007210:	fbb2 f6f3 	udiv	r6, r2, r3
 8007214:	d32e      	bcc.n	8007274 <quorem+0x96>
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	46c4      	mov	ip, r8
 800721c:	46ae      	mov	lr, r5
 800721e:	46d3      	mov	fp, sl
 8007220:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007224:	b298      	uxth	r0, r3
 8007226:	fb06 a000 	mla	r0, r6, r0, sl
 800722a:	0c02      	lsrs	r2, r0, #16
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	fb06 2303 	mla	r3, r6, r3, r2
 8007232:	f8de 2000 	ldr.w	r2, [lr]
 8007236:	b280      	uxth	r0, r0
 8007238:	b292      	uxth	r2, r2
 800723a:	1a12      	subs	r2, r2, r0
 800723c:	445a      	add	r2, fp
 800723e:	f8de 0000 	ldr.w	r0, [lr]
 8007242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007246:	b29b      	uxth	r3, r3
 8007248:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800724c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007250:	b292      	uxth	r2, r2
 8007252:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007256:	45e1      	cmp	r9, ip
 8007258:	f84e 2b04 	str.w	r2, [lr], #4
 800725c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007260:	d2de      	bcs.n	8007220 <quorem+0x42>
 8007262:	9b00      	ldr	r3, [sp, #0]
 8007264:	58eb      	ldr	r3, [r5, r3]
 8007266:	b92b      	cbnz	r3, 8007274 <quorem+0x96>
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	3b04      	subs	r3, #4
 800726c:	429d      	cmp	r5, r3
 800726e:	461a      	mov	r2, r3
 8007270:	d32f      	bcc.n	80072d2 <quorem+0xf4>
 8007272:	613c      	str	r4, [r7, #16]
 8007274:	4638      	mov	r0, r7
 8007276:	f001 f90b 	bl	8008490 <__mcmp>
 800727a:	2800      	cmp	r0, #0
 800727c:	db25      	blt.n	80072ca <quorem+0xec>
 800727e:	4629      	mov	r1, r5
 8007280:	2000      	movs	r0, #0
 8007282:	f858 2b04 	ldr.w	r2, [r8], #4
 8007286:	f8d1 c000 	ldr.w	ip, [r1]
 800728a:	fa1f fe82 	uxth.w	lr, r2
 800728e:	fa1f f38c 	uxth.w	r3, ip
 8007292:	eba3 030e 	sub.w	r3, r3, lr
 8007296:	4403      	add	r3, r0
 8007298:	0c12      	lsrs	r2, r2, #16
 800729a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800729e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a8:	45c1      	cmp	r9, r8
 80072aa:	f841 3b04 	str.w	r3, [r1], #4
 80072ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072b2:	d2e6      	bcs.n	8007282 <quorem+0xa4>
 80072b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072bc:	b922      	cbnz	r2, 80072c8 <quorem+0xea>
 80072be:	3b04      	subs	r3, #4
 80072c0:	429d      	cmp	r5, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	d30b      	bcc.n	80072de <quorem+0x100>
 80072c6:	613c      	str	r4, [r7, #16]
 80072c8:	3601      	adds	r6, #1
 80072ca:	4630      	mov	r0, r6
 80072cc:	b003      	add	sp, #12
 80072ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	6812      	ldr	r2, [r2, #0]
 80072d4:	3b04      	subs	r3, #4
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d1cb      	bne.n	8007272 <quorem+0x94>
 80072da:	3c01      	subs	r4, #1
 80072dc:	e7c6      	b.n	800726c <quorem+0x8e>
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	3b04      	subs	r3, #4
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d1ef      	bne.n	80072c6 <quorem+0xe8>
 80072e6:	3c01      	subs	r4, #1
 80072e8:	e7ea      	b.n	80072c0 <quorem+0xe2>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e7ee      	b.n	80072cc <quorem+0xee>
	...

080072f0 <_dtoa_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	ed2d 8b02 	vpush	{d8}
 80072f8:	69c7      	ldr	r7, [r0, #28]
 80072fa:	b091      	sub	sp, #68	@ 0x44
 80072fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007300:	ec55 4b10 	vmov	r4, r5, d0
 8007304:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007306:	9107      	str	r1, [sp, #28]
 8007308:	4681      	mov	r9, r0
 800730a:	9209      	str	r2, [sp, #36]	@ 0x24
 800730c:	930d      	str	r3, [sp, #52]	@ 0x34
 800730e:	b97f      	cbnz	r7, 8007330 <_dtoa_r+0x40>
 8007310:	2010      	movs	r0, #16
 8007312:	f000 fd8d 	bl	8007e30 <malloc>
 8007316:	4602      	mov	r2, r0
 8007318:	f8c9 001c 	str.w	r0, [r9, #28]
 800731c:	b920      	cbnz	r0, 8007328 <_dtoa_r+0x38>
 800731e:	4ba0      	ldr	r3, [pc, #640]	@ (80075a0 <_dtoa_r+0x2b0>)
 8007320:	21ef      	movs	r1, #239	@ 0xef
 8007322:	48a0      	ldr	r0, [pc, #640]	@ (80075a4 <_dtoa_r+0x2b4>)
 8007324:	f001 fdb0 	bl	8008e88 <__assert_func>
 8007328:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800732c:	6007      	str	r7, [r0, #0]
 800732e:	60c7      	str	r7, [r0, #12]
 8007330:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007334:	6819      	ldr	r1, [r3, #0]
 8007336:	b159      	cbz	r1, 8007350 <_dtoa_r+0x60>
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	604a      	str	r2, [r1, #4]
 800733c:	2301      	movs	r3, #1
 800733e:	4093      	lsls	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
 8007342:	4648      	mov	r0, r9
 8007344:	f000 fe6a 	bl	800801c <_Bfree>
 8007348:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	1e2b      	subs	r3, r5, #0
 8007352:	bfbb      	ittet	lt
 8007354:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007358:	9303      	strlt	r3, [sp, #12]
 800735a:	2300      	movge	r3, #0
 800735c:	2201      	movlt	r2, #1
 800735e:	bfac      	ite	ge
 8007360:	6033      	strge	r3, [r6, #0]
 8007362:	6032      	strlt	r2, [r6, #0]
 8007364:	4b90      	ldr	r3, [pc, #576]	@ (80075a8 <_dtoa_r+0x2b8>)
 8007366:	9e03      	ldr	r6, [sp, #12]
 8007368:	43b3      	bics	r3, r6
 800736a:	d110      	bne.n	800738e <_dtoa_r+0x9e>
 800736c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800736e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007378:	4323      	orrs	r3, r4
 800737a:	f000 84de 	beq.w	8007d3a <_dtoa_r+0xa4a>
 800737e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007380:	4f8a      	ldr	r7, [pc, #552]	@ (80075ac <_dtoa_r+0x2bc>)
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 84e0 	beq.w	8007d48 <_dtoa_r+0xa58>
 8007388:	1cfb      	adds	r3, r7, #3
 800738a:	f000 bcdb 	b.w	8007d44 <_dtoa_r+0xa54>
 800738e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007392:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739a:	d10a      	bne.n	80073b2 <_dtoa_r+0xc2>
 800739c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800739e:	2301      	movs	r3, #1
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073a4:	b113      	cbz	r3, 80073ac <_dtoa_r+0xbc>
 80073a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80073a8:	4b81      	ldr	r3, [pc, #516]	@ (80075b0 <_dtoa_r+0x2c0>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	4f81      	ldr	r7, [pc, #516]	@ (80075b4 <_dtoa_r+0x2c4>)
 80073ae:	f000 bccb 	b.w	8007d48 <_dtoa_r+0xa58>
 80073b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80073b4:	a90f      	add	r1, sp, #60	@ 0x3c
 80073b6:	4648      	mov	r0, r9
 80073b8:	eeb0 0b48 	vmov.f64	d0, d8
 80073bc:	f001 f918 	bl	80085f0 <__d2b>
 80073c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80073c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c6:	9001      	str	r0, [sp, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d045      	beq.n	8007458 <_dtoa_r+0x168>
 80073cc:	eeb0 7b48 	vmov.f64	d7, d8
 80073d0:	ee18 1a90 	vmov	r1, s17
 80073d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80073d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80073dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80073e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80073e4:	2500      	movs	r5, #0
 80073e6:	ee07 1a90 	vmov	s15, r1
 80073ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80073ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007588 <_dtoa_r+0x298>
 80073f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80073f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007590 <_dtoa_r+0x2a0>
 80073fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80073fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007598 <_dtoa_r+0x2a8>
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800740a:	eeb0 7b46 	vmov.f64	d7, d6
 800740e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007412:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007416:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	ee16 8a90 	vmov	r8, s13
 8007422:	d508      	bpl.n	8007436 <_dtoa_r+0x146>
 8007424:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007428:	eeb4 6b47 	vcmp.f64	d6, d7
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	bf18      	it	ne
 8007432:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007436:	f1b8 0f16 	cmp.w	r8, #22
 800743a:	d82b      	bhi.n	8007494 <_dtoa_r+0x1a4>
 800743c:	495e      	ldr	r1, [pc, #376]	@ (80075b8 <_dtoa_r+0x2c8>)
 800743e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007442:	ed91 7b00 	vldr	d7, [r1]
 8007446:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800744a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744e:	d501      	bpl.n	8007454 <_dtoa_r+0x164>
 8007450:	f108 38ff 	add.w	r8, r8, #4294967295
 8007454:	2100      	movs	r1, #0
 8007456:	e01e      	b.n	8007496 <_dtoa_r+0x1a6>
 8007458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745a:	4413      	add	r3, r2
 800745c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007460:	2920      	cmp	r1, #32
 8007462:	bfc1      	itttt	gt
 8007464:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007468:	408e      	lslgt	r6, r1
 800746a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800746e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007472:	bfd6      	itet	le
 8007474:	f1c1 0120 	rsble	r1, r1, #32
 8007478:	4331      	orrgt	r1, r6
 800747a:	fa04 f101 	lslle.w	r1, r4, r1
 800747e:	ee07 1a90 	vmov	s15, r1
 8007482:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007486:	3b01      	subs	r3, #1
 8007488:	ee17 1a90 	vmov	r1, s15
 800748c:	2501      	movs	r5, #1
 800748e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007492:	e7a8      	b.n	80073e6 <_dtoa_r+0xf6>
 8007494:	2101      	movs	r1, #1
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	1e53      	subs	r3, r2, #1
 800749a:	9306      	str	r3, [sp, #24]
 800749c:	bf45      	ittet	mi
 800749e:	f1c2 0301 	rsbmi	r3, r2, #1
 80074a2:	9305      	strmi	r3, [sp, #20]
 80074a4:	2300      	movpl	r3, #0
 80074a6:	2300      	movmi	r3, #0
 80074a8:	bf4c      	ite	mi
 80074aa:	9306      	strmi	r3, [sp, #24]
 80074ac:	9305      	strpl	r3, [sp, #20]
 80074ae:	f1b8 0f00 	cmp.w	r8, #0
 80074b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80074b4:	db18      	blt.n	80074e8 <_dtoa_r+0x1f8>
 80074b6:	9b06      	ldr	r3, [sp, #24]
 80074b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80074bc:	4443      	add	r3, r8
 80074be:	9306      	str	r3, [sp, #24]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9a07      	ldr	r2, [sp, #28]
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d849      	bhi.n	800755c <_dtoa_r+0x26c>
 80074c8:	2a05      	cmp	r2, #5
 80074ca:	bfc4      	itt	gt
 80074cc:	3a04      	subgt	r2, #4
 80074ce:	9207      	strgt	r2, [sp, #28]
 80074d0:	9a07      	ldr	r2, [sp, #28]
 80074d2:	f1a2 0202 	sub.w	r2, r2, #2
 80074d6:	bfcc      	ite	gt
 80074d8:	2400      	movgt	r4, #0
 80074da:	2401      	movle	r4, #1
 80074dc:	2a03      	cmp	r2, #3
 80074de:	d848      	bhi.n	8007572 <_dtoa_r+0x282>
 80074e0:	e8df f002 	tbb	[pc, r2]
 80074e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	eba3 0308 	sub.w	r3, r3, r8
 80074f0:	9305      	str	r3, [sp, #20]
 80074f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80074f4:	f1c8 0300 	rsb	r3, r8, #0
 80074f8:	e7e3      	b.n	80074c2 <_dtoa_r+0x1d2>
 80074fa:	2200      	movs	r2, #0
 80074fc:	9208      	str	r2, [sp, #32]
 80074fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007500:	2a00      	cmp	r2, #0
 8007502:	dc39      	bgt.n	8007578 <_dtoa_r+0x288>
 8007504:	f04f 0b01 	mov.w	fp, #1
 8007508:	46da      	mov	sl, fp
 800750a:	465a      	mov	r2, fp
 800750c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007510:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007514:	2100      	movs	r1, #0
 8007516:	2004      	movs	r0, #4
 8007518:	f100 0614 	add.w	r6, r0, #20
 800751c:	4296      	cmp	r6, r2
 800751e:	d930      	bls.n	8007582 <_dtoa_r+0x292>
 8007520:	6079      	str	r1, [r7, #4]
 8007522:	4648      	mov	r0, r9
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	f000 fd39 	bl	8007f9c <_Balloc>
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	4607      	mov	r7, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d146      	bne.n	80075c0 <_dtoa_r+0x2d0>
 8007532:	4b22      	ldr	r3, [pc, #136]	@ (80075bc <_dtoa_r+0x2cc>)
 8007534:	4602      	mov	r2, r0
 8007536:	f240 11af 	movw	r1, #431	@ 0x1af
 800753a:	e6f2      	b.n	8007322 <_dtoa_r+0x32>
 800753c:	2201      	movs	r2, #1
 800753e:	e7dd      	b.n	80074fc <_dtoa_r+0x20c>
 8007540:	2200      	movs	r2, #0
 8007542:	9208      	str	r2, [sp, #32]
 8007544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007546:	eb08 0b02 	add.w	fp, r8, r2
 800754a:	f10b 0a01 	add.w	sl, fp, #1
 800754e:	4652      	mov	r2, sl
 8007550:	2a01      	cmp	r2, #1
 8007552:	bfb8      	it	lt
 8007554:	2201      	movlt	r2, #1
 8007556:	e7db      	b.n	8007510 <_dtoa_r+0x220>
 8007558:	2201      	movs	r2, #1
 800755a:	e7f2      	b.n	8007542 <_dtoa_r+0x252>
 800755c:	2401      	movs	r4, #1
 800755e:	2200      	movs	r2, #0
 8007560:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007564:	f04f 3bff 	mov.w	fp, #4294967295
 8007568:	2100      	movs	r1, #0
 800756a:	46da      	mov	sl, fp
 800756c:	2212      	movs	r2, #18
 800756e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007570:	e7ce      	b.n	8007510 <_dtoa_r+0x220>
 8007572:	2201      	movs	r2, #1
 8007574:	9208      	str	r2, [sp, #32]
 8007576:	e7f5      	b.n	8007564 <_dtoa_r+0x274>
 8007578:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800757c:	46da      	mov	sl, fp
 800757e:	465a      	mov	r2, fp
 8007580:	e7c6      	b.n	8007510 <_dtoa_r+0x220>
 8007582:	3101      	adds	r1, #1
 8007584:	0040      	lsls	r0, r0, #1
 8007586:	e7c7      	b.n	8007518 <_dtoa_r+0x228>
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	08009369 	.word	0x08009369
 80075a4:	08009380 	.word	0x08009380
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	08009365 	.word	0x08009365
 80075b0:	08009339 	.word	0x08009339
 80075b4:	08009338 	.word	0x08009338
 80075b8:	08009478 	.word	0x08009478
 80075bc:	080093d8 	.word	0x080093d8
 80075c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80075c4:	f1ba 0f0e 	cmp.w	sl, #14
 80075c8:	6010      	str	r0, [r2, #0]
 80075ca:	d86f      	bhi.n	80076ac <_dtoa_r+0x3bc>
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	d06d      	beq.n	80076ac <_dtoa_r+0x3bc>
 80075d0:	f1b8 0f00 	cmp.w	r8, #0
 80075d4:	f340 80c2 	ble.w	800775c <_dtoa_r+0x46c>
 80075d8:	4aca      	ldr	r2, [pc, #808]	@ (8007904 <_dtoa_r+0x614>)
 80075da:	f008 010f 	and.w	r1, r8, #15
 80075de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80075e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80075e6:	ed92 7b00 	vldr	d7, [r2]
 80075ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80075ee:	f000 80a9 	beq.w	8007744 <_dtoa_r+0x454>
 80075f2:	4ac5      	ldr	r2, [pc, #788]	@ (8007908 <_dtoa_r+0x618>)
 80075f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80075f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80075fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007600:	f001 010f 	and.w	r1, r1, #15
 8007604:	2203      	movs	r2, #3
 8007606:	48c0      	ldr	r0, [pc, #768]	@ (8007908 <_dtoa_r+0x618>)
 8007608:	2900      	cmp	r1, #0
 800760a:	f040 809d 	bne.w	8007748 <_dtoa_r+0x458>
 800760e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007612:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007616:	ed8d 7b02 	vstr	d7, [sp, #8]
 800761a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800761c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007620:	2900      	cmp	r1, #0
 8007622:	f000 80c1 	beq.w	80077a8 <_dtoa_r+0x4b8>
 8007626:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800762a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800762e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007632:	f140 80b9 	bpl.w	80077a8 <_dtoa_r+0x4b8>
 8007636:	f1ba 0f00 	cmp.w	sl, #0
 800763a:	f000 80b5 	beq.w	80077a8 <_dtoa_r+0x4b8>
 800763e:	f1bb 0f00 	cmp.w	fp, #0
 8007642:	dd31      	ble.n	80076a8 <_dtoa_r+0x3b8>
 8007644:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007648:	ee27 7b06 	vmul.f64	d7, d7, d6
 800764c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007650:	f108 31ff 	add.w	r1, r8, #4294967295
 8007654:	9104      	str	r1, [sp, #16]
 8007656:	3201      	adds	r2, #1
 8007658:	465c      	mov	r4, fp
 800765a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800765e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007662:	ee07 2a90 	vmov	s15, r2
 8007666:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800766a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800766e:	ee15 2a90 	vmov	r2, s11
 8007672:	ec51 0b15 	vmov	r0, r1, d5
 8007676:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800767a:	2c00      	cmp	r4, #0
 800767c:	f040 8098 	bne.w	80077b0 <_dtoa_r+0x4c0>
 8007680:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007684:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007688:	ec41 0b17 	vmov	d7, r0, r1
 800768c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007694:	f300 8261 	bgt.w	8007b5a <_dtoa_r+0x86a>
 8007698:	eeb1 7b47 	vneg.f64	d7, d7
 800769c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a4:	f100 80f5 	bmi.w	8007892 <_dtoa_r+0x5a2>
 80076a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	f2c0 812c 	blt.w	800790c <_dtoa_r+0x61c>
 80076b4:	f1b8 0f0e 	cmp.w	r8, #14
 80076b8:	f300 8128 	bgt.w	800790c <_dtoa_r+0x61c>
 80076bc:	4b91      	ldr	r3, [pc, #580]	@ (8007904 <_dtoa_r+0x614>)
 80076be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076c2:	ed93 6b00 	vldr	d6, [r3]
 80076c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da03      	bge.n	80076d4 <_dtoa_r+0x3e4>
 80076cc:	f1ba 0f00 	cmp.w	sl, #0
 80076d0:	f340 80d2 	ble.w	8007878 <_dtoa_r+0x588>
 80076d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80076d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076dc:	463e      	mov	r6, r7
 80076de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80076e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80076e6:	ee15 3a10 	vmov	r3, s10
 80076ea:	3330      	adds	r3, #48	@ 0x30
 80076ec:	f806 3b01 	strb.w	r3, [r6], #1
 80076f0:	1bf3      	subs	r3, r6, r7
 80076f2:	459a      	cmp	sl, r3
 80076f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80076f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80076fc:	f040 80f8 	bne.w	80078f0 <_dtoa_r+0x600>
 8007700:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007704:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	f300 80dd 	bgt.w	80078ca <_dtoa_r+0x5da>
 8007710:	eeb4 7b46 	vcmp.f64	d7, d6
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	d104      	bne.n	8007724 <_dtoa_r+0x434>
 800771a:	ee15 3a10 	vmov	r3, s10
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	f100 80d3 	bmi.w	80078ca <_dtoa_r+0x5da>
 8007724:	9901      	ldr	r1, [sp, #4]
 8007726:	4648      	mov	r0, r9
 8007728:	f000 fc78 	bl	800801c <_Bfree>
 800772c:	2300      	movs	r3, #0
 800772e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007730:	7033      	strb	r3, [r6, #0]
 8007732:	f108 0301 	add.w	r3, r8, #1
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8304 	beq.w	8007d48 <_dtoa_r+0xa58>
 8007740:	601e      	str	r6, [r3, #0]
 8007742:	e301      	b.n	8007d48 <_dtoa_r+0xa58>
 8007744:	2202      	movs	r2, #2
 8007746:	e75e      	b.n	8007606 <_dtoa_r+0x316>
 8007748:	07cc      	lsls	r4, r1, #31
 800774a:	d504      	bpl.n	8007756 <_dtoa_r+0x466>
 800774c:	ed90 6b00 	vldr	d6, [r0]
 8007750:	3201      	adds	r2, #1
 8007752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007756:	1049      	asrs	r1, r1, #1
 8007758:	3008      	adds	r0, #8
 800775a:	e755      	b.n	8007608 <_dtoa_r+0x318>
 800775c:	d022      	beq.n	80077a4 <_dtoa_r+0x4b4>
 800775e:	f1c8 0100 	rsb	r1, r8, #0
 8007762:	4a68      	ldr	r2, [pc, #416]	@ (8007904 <_dtoa_r+0x614>)
 8007764:	f001 000f 	and.w	r0, r1, #15
 8007768:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800776c:	ed92 7b00 	vldr	d7, [r2]
 8007770:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007778:	4863      	ldr	r0, [pc, #396]	@ (8007908 <_dtoa_r+0x618>)
 800777a:	1109      	asrs	r1, r1, #4
 800777c:	2400      	movs	r4, #0
 800777e:	2202      	movs	r2, #2
 8007780:	b929      	cbnz	r1, 800778e <_dtoa_r+0x49e>
 8007782:	2c00      	cmp	r4, #0
 8007784:	f43f af49 	beq.w	800761a <_dtoa_r+0x32a>
 8007788:	ed8d 7b02 	vstr	d7, [sp, #8]
 800778c:	e745      	b.n	800761a <_dtoa_r+0x32a>
 800778e:	07ce      	lsls	r6, r1, #31
 8007790:	d505      	bpl.n	800779e <_dtoa_r+0x4ae>
 8007792:	ed90 6b00 	vldr	d6, [r0]
 8007796:	3201      	adds	r2, #1
 8007798:	2401      	movs	r4, #1
 800779a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800779e:	1049      	asrs	r1, r1, #1
 80077a0:	3008      	adds	r0, #8
 80077a2:	e7ed      	b.n	8007780 <_dtoa_r+0x490>
 80077a4:	2202      	movs	r2, #2
 80077a6:	e738      	b.n	800761a <_dtoa_r+0x32a>
 80077a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80077ac:	4654      	mov	r4, sl
 80077ae:	e754      	b.n	800765a <_dtoa_r+0x36a>
 80077b0:	4a54      	ldr	r2, [pc, #336]	@ (8007904 <_dtoa_r+0x614>)
 80077b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80077b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80077ba:	9a08      	ldr	r2, [sp, #32]
 80077bc:	ec41 0b17 	vmov	d7, r0, r1
 80077c0:	443c      	add	r4, r7
 80077c2:	b34a      	cbz	r2, 8007818 <_dtoa_r+0x528>
 80077c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80077c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80077cc:	463e      	mov	r6, r7
 80077ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80077d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80077d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80077de:	ee14 2a90 	vmov	r2, s9
 80077e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077e6:	3230      	adds	r2, #48	@ 0x30
 80077e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f4:	f806 2b01 	strb.w	r2, [r6], #1
 80077f8:	d438      	bmi.n	800786c <_dtoa_r+0x57c>
 80077fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80077fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007806:	d462      	bmi.n	80078ce <_dtoa_r+0x5de>
 8007808:	42a6      	cmp	r6, r4
 800780a:	f43f af4d 	beq.w	80076a8 <_dtoa_r+0x3b8>
 800780e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007812:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007816:	e7e0      	b.n	80077da <_dtoa_r+0x4ea>
 8007818:	4621      	mov	r1, r4
 800781a:	463e      	mov	r6, r7
 800781c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007820:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007824:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007828:	ee14 2a90 	vmov	r2, s9
 800782c:	3230      	adds	r2, #48	@ 0x30
 800782e:	f806 2b01 	strb.w	r2, [r6], #1
 8007832:	42a6      	cmp	r6, r4
 8007834:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007838:	ee36 6b45 	vsub.f64	d6, d6, d5
 800783c:	d119      	bne.n	8007872 <_dtoa_r+0x582>
 800783e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007842:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007846:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784e:	dc3e      	bgt.n	80078ce <_dtoa_r+0x5de>
 8007850:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007854:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	f57f af24 	bpl.w	80076a8 <_dtoa_r+0x3b8>
 8007860:	460e      	mov	r6, r1
 8007862:	3901      	subs	r1, #1
 8007864:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007868:	2b30      	cmp	r3, #48	@ 0x30
 800786a:	d0f9      	beq.n	8007860 <_dtoa_r+0x570>
 800786c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007870:	e758      	b.n	8007724 <_dtoa_r+0x434>
 8007872:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007876:	e7d5      	b.n	8007824 <_dtoa_r+0x534>
 8007878:	d10b      	bne.n	8007892 <_dtoa_r+0x5a2>
 800787a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800787e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788e:	f2c0 8161 	blt.w	8007b54 <_dtoa_r+0x864>
 8007892:	2400      	movs	r4, #0
 8007894:	4625      	mov	r5, r4
 8007896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007898:	43db      	mvns	r3, r3
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	463e      	mov	r6, r7
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	4621      	mov	r1, r4
 80078a4:	4648      	mov	r0, r9
 80078a6:	f000 fbb9 	bl	800801c <_Bfree>
 80078aa:	2d00      	cmp	r5, #0
 80078ac:	d0de      	beq.n	800786c <_dtoa_r+0x57c>
 80078ae:	f1b8 0f00 	cmp.w	r8, #0
 80078b2:	d005      	beq.n	80078c0 <_dtoa_r+0x5d0>
 80078b4:	45a8      	cmp	r8, r5
 80078b6:	d003      	beq.n	80078c0 <_dtoa_r+0x5d0>
 80078b8:	4641      	mov	r1, r8
 80078ba:	4648      	mov	r0, r9
 80078bc:	f000 fbae 	bl	800801c <_Bfree>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4648      	mov	r0, r9
 80078c4:	f000 fbaa 	bl	800801c <_Bfree>
 80078c8:	e7d0      	b.n	800786c <_dtoa_r+0x57c>
 80078ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80078ce:	4633      	mov	r3, r6
 80078d0:	461e      	mov	r6, r3
 80078d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d6:	2a39      	cmp	r2, #57	@ 0x39
 80078d8:	d106      	bne.n	80078e8 <_dtoa_r+0x5f8>
 80078da:	429f      	cmp	r7, r3
 80078dc:	d1f8      	bne.n	80078d0 <_dtoa_r+0x5e0>
 80078de:	9a04      	ldr	r2, [sp, #16]
 80078e0:	3201      	adds	r2, #1
 80078e2:	9204      	str	r2, [sp, #16]
 80078e4:	2230      	movs	r2, #48	@ 0x30
 80078e6:	703a      	strb	r2, [r7, #0]
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	3201      	adds	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e7bd      	b.n	800786c <_dtoa_r+0x57c>
 80078f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	f47f aeef 	bne.w	80076de <_dtoa_r+0x3ee>
 8007900:	e710      	b.n	8007724 <_dtoa_r+0x434>
 8007902:	bf00      	nop
 8007904:	08009478 	.word	0x08009478
 8007908:	08009450 	.word	0x08009450
 800790c:	9908      	ldr	r1, [sp, #32]
 800790e:	2900      	cmp	r1, #0
 8007910:	f000 80e3 	beq.w	8007ada <_dtoa_r+0x7ea>
 8007914:	9907      	ldr	r1, [sp, #28]
 8007916:	2901      	cmp	r1, #1
 8007918:	f300 80c8 	bgt.w	8007aac <_dtoa_r+0x7bc>
 800791c:	2d00      	cmp	r5, #0
 800791e:	f000 80c1 	beq.w	8007aa4 <_dtoa_r+0x7b4>
 8007922:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007926:	9e05      	ldr	r6, [sp, #20]
 8007928:	461c      	mov	r4, r3
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	4413      	add	r3, r2
 8007930:	9305      	str	r3, [sp, #20]
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	2101      	movs	r1, #1
 8007936:	4413      	add	r3, r2
 8007938:	4648      	mov	r0, r9
 800793a:	9306      	str	r3, [sp, #24]
 800793c:	f000 fc22 	bl	8008184 <__i2b>
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	4605      	mov	r5, r0
 8007944:	b166      	cbz	r6, 8007960 <_dtoa_r+0x670>
 8007946:	9a06      	ldr	r2, [sp, #24]
 8007948:	2a00      	cmp	r2, #0
 800794a:	dd09      	ble.n	8007960 <_dtoa_r+0x670>
 800794c:	42b2      	cmp	r2, r6
 800794e:	9905      	ldr	r1, [sp, #20]
 8007950:	bfa8      	it	ge
 8007952:	4632      	movge	r2, r6
 8007954:	1a89      	subs	r1, r1, r2
 8007956:	9105      	str	r1, [sp, #20]
 8007958:	9906      	ldr	r1, [sp, #24]
 800795a:	1ab6      	subs	r6, r6, r2
 800795c:	1a8a      	subs	r2, r1, r2
 800795e:	9206      	str	r2, [sp, #24]
 8007960:	b1fb      	cbz	r3, 80079a2 <_dtoa_r+0x6b2>
 8007962:	9a08      	ldr	r2, [sp, #32]
 8007964:	2a00      	cmp	r2, #0
 8007966:	f000 80bc 	beq.w	8007ae2 <_dtoa_r+0x7f2>
 800796a:	b19c      	cbz	r4, 8007994 <_dtoa_r+0x6a4>
 800796c:	4629      	mov	r1, r5
 800796e:	4622      	mov	r2, r4
 8007970:	4648      	mov	r0, r9
 8007972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007974:	f000 fcc6 	bl	8008304 <__pow5mult>
 8007978:	9a01      	ldr	r2, [sp, #4]
 800797a:	4601      	mov	r1, r0
 800797c:	4605      	mov	r5, r0
 800797e:	4648      	mov	r0, r9
 8007980:	f000 fc16 	bl	80081b0 <__multiply>
 8007984:	9901      	ldr	r1, [sp, #4]
 8007986:	9004      	str	r0, [sp, #16]
 8007988:	4648      	mov	r0, r9
 800798a:	f000 fb47 	bl	800801c <_Bfree>
 800798e:	9a04      	ldr	r2, [sp, #16]
 8007990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007992:	9201      	str	r2, [sp, #4]
 8007994:	1b1a      	subs	r2, r3, r4
 8007996:	d004      	beq.n	80079a2 <_dtoa_r+0x6b2>
 8007998:	9901      	ldr	r1, [sp, #4]
 800799a:	4648      	mov	r0, r9
 800799c:	f000 fcb2 	bl	8008304 <__pow5mult>
 80079a0:	9001      	str	r0, [sp, #4]
 80079a2:	2101      	movs	r1, #1
 80079a4:	4648      	mov	r0, r9
 80079a6:	f000 fbed 	bl	8008184 <__i2b>
 80079aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ac:	4604      	mov	r4, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 81d0 	beq.w	8007d54 <_dtoa_r+0xa64>
 80079b4:	461a      	mov	r2, r3
 80079b6:	4601      	mov	r1, r0
 80079b8:	4648      	mov	r0, r9
 80079ba:	f000 fca3 	bl	8008304 <__pow5mult>
 80079be:	9b07      	ldr	r3, [sp, #28]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	4604      	mov	r4, r0
 80079c4:	f300 8095 	bgt.w	8007af2 <_dtoa_r+0x802>
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 808b 	bne.w	8007ae6 <_dtoa_r+0x7f6>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	f040 8087 	bne.w	8007aea <_dtoa_r+0x7fa>
 80079dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80079e0:	0d12      	lsrs	r2, r2, #20
 80079e2:	0512      	lsls	r2, r2, #20
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	f000 8082 	beq.w	8007aee <_dtoa_r+0x7fe>
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	3301      	adds	r3, #1
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	9b06      	ldr	r3, [sp, #24]
 80079f2:	3301      	adds	r3, #1
 80079f4:	9306      	str	r3, [sp, #24]
 80079f6:	2301      	movs	r3, #1
 80079f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 81af 	beq.w	8007d60 <_dtoa_r+0xa70>
 8007a02:	6922      	ldr	r2, [r4, #16]
 8007a04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007a08:	6910      	ldr	r0, [r2, #16]
 8007a0a:	f000 fb6f 	bl	80080ec <__hi0bits>
 8007a0e:	f1c0 0020 	rsb	r0, r0, #32
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	4418      	add	r0, r3
 8007a16:	f010 001f 	ands.w	r0, r0, #31
 8007a1a:	d076      	beq.n	8007b0a <_dtoa_r+0x81a>
 8007a1c:	f1c0 0220 	rsb	r2, r0, #32
 8007a20:	2a04      	cmp	r2, #4
 8007a22:	dd69      	ble.n	8007af8 <_dtoa_r+0x808>
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	f1c0 001c 	rsb	r0, r0, #28
 8007a2a:	4403      	add	r3, r0
 8007a2c:	9305      	str	r3, [sp, #20]
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	4406      	add	r6, r0
 8007a32:	4403      	add	r3, r0
 8007a34:	9306      	str	r3, [sp, #24]
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dd05      	ble.n	8007a48 <_dtoa_r+0x758>
 8007a3c:	9901      	ldr	r1, [sp, #4]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4648      	mov	r0, r9
 8007a42:	f000 fcb9 	bl	80083b8 <__lshift>
 8007a46:	9001      	str	r0, [sp, #4]
 8007a48:	9b06      	ldr	r3, [sp, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd05      	ble.n	8007a5a <_dtoa_r+0x76a>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	461a      	mov	r2, r3
 8007a52:	4648      	mov	r0, r9
 8007a54:	f000 fcb0 	bl	80083b8 <__lshift>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d056      	beq.n	8007b0e <_dtoa_r+0x81e>
 8007a60:	9801      	ldr	r0, [sp, #4]
 8007a62:	4621      	mov	r1, r4
 8007a64:	f000 fd14 	bl	8008490 <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	da50      	bge.n	8007b0e <_dtoa_r+0x81e>
 8007a6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	9901      	ldr	r1, [sp, #4]
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4648      	mov	r0, r9
 8007a7a:	f000 faf1 	bl	8008060 <__multadd>
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	9001      	str	r0, [sp, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 816e 	beq.w	8007d64 <_dtoa_r+0xa74>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	4648      	mov	r0, r9
 8007a90:	f000 fae6 	bl	8008060 <__multadd>
 8007a94:	f1bb 0f00 	cmp.w	fp, #0
 8007a98:	4605      	mov	r5, r0
 8007a9a:	dc64      	bgt.n	8007b66 <_dtoa_r+0x876>
 8007a9c:	9b07      	ldr	r3, [sp, #28]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dc3e      	bgt.n	8007b20 <_dtoa_r+0x830>
 8007aa2:	e060      	b.n	8007b66 <_dtoa_r+0x876>
 8007aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aa6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007aaa:	e73c      	b.n	8007926 <_dtoa_r+0x636>
 8007aac:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	bfbf      	itttt	lt
 8007ab4:	1ae2      	sublt	r2, r4, r3
 8007ab6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ab8:	189b      	addlt	r3, r3, r2
 8007aba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007abc:	bfae      	itee	ge
 8007abe:	1b1c      	subge	r4, r3, r4
 8007ac0:	4623      	movlt	r3, r4
 8007ac2:	2400      	movlt	r4, #0
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	bfb5      	itete	lt
 8007aca:	9a05      	ldrlt	r2, [sp, #20]
 8007acc:	9e05      	ldrge	r6, [sp, #20]
 8007ace:	eba2 060a 	sublt.w	r6, r2, sl
 8007ad2:	4652      	movge	r2, sl
 8007ad4:	bfb8      	it	lt
 8007ad6:	2200      	movlt	r2, #0
 8007ad8:	e727      	b.n	800792a <_dtoa_r+0x63a>
 8007ada:	9e05      	ldr	r6, [sp, #20]
 8007adc:	9d08      	ldr	r5, [sp, #32]
 8007ade:	461c      	mov	r4, r3
 8007ae0:	e730      	b.n	8007944 <_dtoa_r+0x654>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	e758      	b.n	8007998 <_dtoa_r+0x6a8>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e786      	b.n	80079f8 <_dtoa_r+0x708>
 8007aea:	9b02      	ldr	r3, [sp, #8]
 8007aec:	e784      	b.n	80079f8 <_dtoa_r+0x708>
 8007aee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007af0:	e783      	b.n	80079fa <_dtoa_r+0x70a>
 8007af2:	2300      	movs	r3, #0
 8007af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af6:	e784      	b.n	8007a02 <_dtoa_r+0x712>
 8007af8:	d09d      	beq.n	8007a36 <_dtoa_r+0x746>
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	321c      	adds	r2, #28
 8007afe:	4413      	add	r3, r2
 8007b00:	9305      	str	r3, [sp, #20]
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	4416      	add	r6, r2
 8007b06:	4413      	add	r3, r2
 8007b08:	e794      	b.n	8007a34 <_dtoa_r+0x744>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	e7f5      	b.n	8007afa <_dtoa_r+0x80a>
 8007b0e:	f1ba 0f00 	cmp.w	sl, #0
 8007b12:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b16:	46d3      	mov	fp, sl
 8007b18:	dc21      	bgt.n	8007b5e <_dtoa_r+0x86e>
 8007b1a:	9b07      	ldr	r3, [sp, #28]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	dd1e      	ble.n	8007b5e <_dtoa_r+0x86e>
 8007b20:	f1bb 0f00 	cmp.w	fp, #0
 8007b24:	f47f aeb7 	bne.w	8007896 <_dtoa_r+0x5a6>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	4648      	mov	r0, r9
 8007b30:	f000 fa96 	bl	8008060 <__multadd>
 8007b34:	4601      	mov	r1, r0
 8007b36:	4604      	mov	r4, r0
 8007b38:	9801      	ldr	r0, [sp, #4]
 8007b3a:	f000 fca9 	bl	8008490 <__mcmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f77f aea9 	ble.w	8007896 <_dtoa_r+0x5a6>
 8007b44:	463e      	mov	r6, r7
 8007b46:	2331      	movs	r3, #49	@ 0x31
 8007b48:	f806 3b01 	strb.w	r3, [r6], #1
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	e6a4      	b.n	800789e <_dtoa_r+0x5ae>
 8007b54:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b58:	4654      	mov	r4, sl
 8007b5a:	4625      	mov	r5, r4
 8007b5c:	e7f2      	b.n	8007b44 <_dtoa_r+0x854>
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8103 	beq.w	8007d6c <_dtoa_r+0xa7c>
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	dd05      	ble.n	8007b76 <_dtoa_r+0x886>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 fc22 	bl	80083b8 <__lshift>
 8007b74:	4605      	mov	r5, r0
 8007b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d058      	beq.n	8007c2e <_dtoa_r+0x93e>
 8007b7c:	6869      	ldr	r1, [r5, #4]
 8007b7e:	4648      	mov	r0, r9
 8007b80:	f000 fa0c 	bl	8007f9c <_Balloc>
 8007b84:	4606      	mov	r6, r0
 8007b86:	b928      	cbnz	r0, 8007b94 <_dtoa_r+0x8a4>
 8007b88:	4b82      	ldr	r3, [pc, #520]	@ (8007d94 <_dtoa_r+0xaa4>)
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b90:	f7ff bbc7 	b.w	8007322 <_dtoa_r+0x32>
 8007b94:	692a      	ldr	r2, [r5, #16]
 8007b96:	3202      	adds	r2, #2
 8007b98:	0092      	lsls	r2, r2, #2
 8007b9a:	f105 010c 	add.w	r1, r5, #12
 8007b9e:	300c      	adds	r0, #12
 8007ba0:	f7ff fb0f 	bl	80071c2 <memcpy>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4648      	mov	r0, r9
 8007baa:	f000 fc05 	bl	80083b8 <__lshift>
 8007bae:	1c7b      	adds	r3, r7, #1
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	eb07 030b 	add.w	r3, r7, fp
 8007bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	46a8      	mov	r8, r5
 8007bc0:	9308      	str	r3, [sp, #32]
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	9801      	ldr	r0, [sp, #4]
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f103 3bff 	add.w	fp, r3, #4294967295
 8007bce:	f7ff fb06 	bl	80071de <quorem>
 8007bd2:	4641      	mov	r1, r8
 8007bd4:	9002      	str	r0, [sp, #8]
 8007bd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007bda:	9801      	ldr	r0, [sp, #4]
 8007bdc:	f000 fc58 	bl	8008490 <__mcmp>
 8007be0:	462a      	mov	r2, r5
 8007be2:	9006      	str	r0, [sp, #24]
 8007be4:	4621      	mov	r1, r4
 8007be6:	4648      	mov	r0, r9
 8007be8:	f000 fc6e 	bl	80084c8 <__mdiff>
 8007bec:	68c2      	ldr	r2, [r0, #12]
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b9fa      	cbnz	r2, 8007c32 <_dtoa_r+0x942>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	9801      	ldr	r0, [sp, #4]
 8007bf6:	f000 fc4b 	bl	8008490 <__mcmp>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4648      	mov	r0, r9
 8007c00:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c02:	f000 fa0b 	bl	800801c <_Bfree>
 8007c06:	9b07      	ldr	r3, [sp, #28]
 8007c08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c0a:	9e05      	ldr	r6, [sp, #20]
 8007c0c:	ea43 0102 	orr.w	r1, r3, r2
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	4319      	orrs	r1, r3
 8007c14:	d10f      	bne.n	8007c36 <_dtoa_r+0x946>
 8007c16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c1a:	d028      	beq.n	8007c6e <_dtoa_r+0x97e>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd02      	ble.n	8007c28 <_dtoa_r+0x938>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007c28:	f88b a000 	strb.w	sl, [fp]
 8007c2c:	e639      	b.n	80078a2 <_dtoa_r+0x5b2>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	e7bd      	b.n	8007bae <_dtoa_r+0x8be>
 8007c32:	2201      	movs	r2, #1
 8007c34:	e7e2      	b.n	8007bfc <_dtoa_r+0x90c>
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	db04      	blt.n	8007c46 <_dtoa_r+0x956>
 8007c3c:	9907      	ldr	r1, [sp, #28]
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	9908      	ldr	r1, [sp, #32]
 8007c42:	430b      	orrs	r3, r1
 8007c44:	d120      	bne.n	8007c88 <_dtoa_r+0x998>
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	ddee      	ble.n	8007c28 <_dtoa_r+0x938>
 8007c4a:	9901      	ldr	r1, [sp, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4648      	mov	r0, r9
 8007c50:	f000 fbb2 	bl	80083b8 <__lshift>
 8007c54:	4621      	mov	r1, r4
 8007c56:	9001      	str	r0, [sp, #4]
 8007c58:	f000 fc1a 	bl	8008490 <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	dc03      	bgt.n	8007c68 <_dtoa_r+0x978>
 8007c60:	d1e2      	bne.n	8007c28 <_dtoa_r+0x938>
 8007c62:	f01a 0f01 	tst.w	sl, #1
 8007c66:	d0df      	beq.n	8007c28 <_dtoa_r+0x938>
 8007c68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c6c:	d1d9      	bne.n	8007c22 <_dtoa_r+0x932>
 8007c6e:	2339      	movs	r3, #57	@ 0x39
 8007c70:	f88b 3000 	strb.w	r3, [fp]
 8007c74:	4633      	mov	r3, r6
 8007c76:	461e      	mov	r6, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c7e:	2a39      	cmp	r2, #57	@ 0x39
 8007c80:	d053      	beq.n	8007d2a <_dtoa_r+0xa3a>
 8007c82:	3201      	adds	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e60c      	b.n	80078a2 <_dtoa_r+0x5b2>
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	dd07      	ble.n	8007c9c <_dtoa_r+0x9ac>
 8007c8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007c90:	d0ed      	beq.n	8007c6e <_dtoa_r+0x97e>
 8007c92:	f10a 0301 	add.w	r3, sl, #1
 8007c96:	f88b 3000 	strb.w	r3, [fp]
 8007c9a:	e602      	b.n	80078a2 <_dtoa_r+0x5b2>
 8007c9c:	9b05      	ldr	r3, [sp, #20]
 8007c9e:	9a05      	ldr	r2, [sp, #20]
 8007ca0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d029      	beq.n	8007cfe <_dtoa_r+0xa0e>
 8007caa:	9901      	ldr	r1, [sp, #4]
 8007cac:	2300      	movs	r3, #0
 8007cae:	220a      	movs	r2, #10
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f000 f9d5 	bl	8008060 <__multadd>
 8007cb6:	45a8      	cmp	r8, r5
 8007cb8:	9001      	str	r0, [sp, #4]
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	f04f 020a 	mov.w	r2, #10
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	4648      	mov	r0, r9
 8007cc6:	d107      	bne.n	8007cd8 <_dtoa_r+0x9e8>
 8007cc8:	f000 f9ca 	bl	8008060 <__multadd>
 8007ccc:	4680      	mov	r8, r0
 8007cce:	4605      	mov	r5, r0
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	e775      	b.n	8007bc4 <_dtoa_r+0x8d4>
 8007cd8:	f000 f9c2 	bl	8008060 <__multadd>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4680      	mov	r8, r0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	220a      	movs	r2, #10
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	f000 f9bb 	bl	8008060 <__multadd>
 8007cea:	4605      	mov	r5, r0
 8007cec:	e7f0      	b.n	8007cd0 <_dtoa_r+0x9e0>
 8007cee:	f1bb 0f00 	cmp.w	fp, #0
 8007cf2:	bfcc      	ite	gt
 8007cf4:	465e      	movgt	r6, fp
 8007cf6:	2601      	movle	r6, #1
 8007cf8:	443e      	add	r6, r7
 8007cfa:	f04f 0800 	mov.w	r8, #0
 8007cfe:	9901      	ldr	r1, [sp, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	4648      	mov	r0, r9
 8007d04:	f000 fb58 	bl	80083b8 <__lshift>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	9001      	str	r0, [sp, #4]
 8007d0c:	f000 fbc0 	bl	8008490 <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	dcaf      	bgt.n	8007c74 <_dtoa_r+0x984>
 8007d14:	d102      	bne.n	8007d1c <_dtoa_r+0xa2c>
 8007d16:	f01a 0f01 	tst.w	sl, #1
 8007d1a:	d1ab      	bne.n	8007c74 <_dtoa_r+0x984>
 8007d1c:	4633      	mov	r3, r6
 8007d1e:	461e      	mov	r6, r3
 8007d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d24:	2a30      	cmp	r2, #48	@ 0x30
 8007d26:	d0fa      	beq.n	8007d1e <_dtoa_r+0xa2e>
 8007d28:	e5bb      	b.n	80078a2 <_dtoa_r+0x5b2>
 8007d2a:	429f      	cmp	r7, r3
 8007d2c:	d1a3      	bne.n	8007c76 <_dtoa_r+0x986>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	2331      	movs	r3, #49	@ 0x31
 8007d36:	703b      	strb	r3, [r7, #0]
 8007d38:	e5b3      	b.n	80078a2 <_dtoa_r+0x5b2>
 8007d3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007d3c:	4f16      	ldr	r7, [pc, #88]	@ (8007d98 <_dtoa_r+0xaa8>)
 8007d3e:	b11b      	cbz	r3, 8007d48 <_dtoa_r+0xa58>
 8007d40:	f107 0308 	add.w	r3, r7, #8
 8007d44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	4638      	mov	r0, r7
 8007d4a:	b011      	add	sp, #68	@ 0x44
 8007d4c:	ecbd 8b02 	vpop	{d8}
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	f77f ae36 	ble.w	80079c8 <_dtoa_r+0x6d8>
 8007d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d60:	2001      	movs	r0, #1
 8007d62:	e656      	b.n	8007a12 <_dtoa_r+0x722>
 8007d64:	f1bb 0f00 	cmp.w	fp, #0
 8007d68:	f77f aed7 	ble.w	8007b1a <_dtoa_r+0x82a>
 8007d6c:	463e      	mov	r6, r7
 8007d6e:	9801      	ldr	r0, [sp, #4]
 8007d70:	4621      	mov	r1, r4
 8007d72:	f7ff fa34 	bl	80071de <quorem>
 8007d76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007d7a:	f806 ab01 	strb.w	sl, [r6], #1
 8007d7e:	1bf2      	subs	r2, r6, r7
 8007d80:	4593      	cmp	fp, r2
 8007d82:	ddb4      	ble.n	8007cee <_dtoa_r+0x9fe>
 8007d84:	9901      	ldr	r1, [sp, #4]
 8007d86:	2300      	movs	r3, #0
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f000 f968 	bl	8008060 <__multadd>
 8007d90:	9001      	str	r0, [sp, #4]
 8007d92:	e7ec      	b.n	8007d6e <_dtoa_r+0xa7e>
 8007d94:	080093d8 	.word	0x080093d8
 8007d98:	0800935c 	.word	0x0800935c

08007d9c <_free_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4605      	mov	r5, r0
 8007da0:	2900      	cmp	r1, #0
 8007da2:	d041      	beq.n	8007e28 <_free_r+0x8c>
 8007da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da8:	1f0c      	subs	r4, r1, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bfb8      	it	lt
 8007dae:	18e4      	addlt	r4, r4, r3
 8007db0:	f000 f8e8 	bl	8007f84 <__malloc_lock>
 8007db4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e2c <_free_r+0x90>)
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	b933      	cbnz	r3, 8007dc8 <_free_r+0x2c>
 8007dba:	6063      	str	r3, [r4, #4]
 8007dbc:	6014      	str	r4, [r2, #0]
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc4:	f000 b8e4 	b.w	8007f90 <__malloc_unlock>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d908      	bls.n	8007dde <_free_r+0x42>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	1821      	adds	r1, r4, r0
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf01      	itttt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	1809      	addeq	r1, r1, r0
 8007dda:	6021      	streq	r1, [r4, #0]
 8007ddc:	e7ed      	b.n	8007dba <_free_r+0x1e>
 8007dde:	461a      	mov	r2, r3
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	b10b      	cbz	r3, 8007de8 <_free_r+0x4c>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d9fa      	bls.n	8007dde <_free_r+0x42>
 8007de8:	6811      	ldr	r1, [r2, #0]
 8007dea:	1850      	adds	r0, r2, r1
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d10b      	bne.n	8007e08 <_free_r+0x6c>
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	4401      	add	r1, r0
 8007df4:	1850      	adds	r0, r2, r1
 8007df6:	4283      	cmp	r3, r0
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	d1e0      	bne.n	8007dbe <_free_r+0x22>
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	4408      	add	r0, r1
 8007e04:	6010      	str	r0, [r2, #0]
 8007e06:	e7da      	b.n	8007dbe <_free_r+0x22>
 8007e08:	d902      	bls.n	8007e10 <_free_r+0x74>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	e7d6      	b.n	8007dbe <_free_r+0x22>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	1821      	adds	r1, r4, r0
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf04      	itt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	bf04      	itt	eq
 8007e20:	1809      	addeq	r1, r1, r0
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	6054      	str	r4, [r2, #4]
 8007e26:	e7ca      	b.n	8007dbe <_free_r+0x22>
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000dd8 	.word	0x20000dd8

08007e30 <malloc>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	@ (8007e3c <malloc+0xc>)
 8007e32:	4601      	mov	r1, r0
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f000 b825 	b.w	8007e84 <_malloc_r>
 8007e3a:	bf00      	nop
 8007e3c:	20000024 	.word	0x20000024

08007e40 <sbrk_aligned>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4e0f      	ldr	r6, [pc, #60]	@ (8007e80 <sbrk_aligned+0x40>)
 8007e44:	460c      	mov	r4, r1
 8007e46:	6831      	ldr	r1, [r6, #0]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	b911      	cbnz	r1, 8007e52 <sbrk_aligned+0x12>
 8007e4c:	f001 f80c 	bl	8008e68 <_sbrk_r>
 8007e50:	6030      	str	r0, [r6, #0]
 8007e52:	4621      	mov	r1, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f001 f807 	bl	8008e68 <_sbrk_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d103      	bne.n	8007e66 <sbrk_aligned+0x26>
 8007e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8007e62:	4620      	mov	r0, r4
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	1cc4      	adds	r4, r0, #3
 8007e68:	f024 0403 	bic.w	r4, r4, #3
 8007e6c:	42a0      	cmp	r0, r4
 8007e6e:	d0f8      	beq.n	8007e62 <sbrk_aligned+0x22>
 8007e70:	1a21      	subs	r1, r4, r0
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fff8 	bl	8008e68 <_sbrk_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d1f2      	bne.n	8007e62 <sbrk_aligned+0x22>
 8007e7c:	e7ef      	b.n	8007e5e <sbrk_aligned+0x1e>
 8007e7e:	bf00      	nop
 8007e80:	20000dd4 	.word	0x20000dd4

08007e84 <_malloc_r>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	1ccd      	adds	r5, r1, #3
 8007e8a:	f025 0503 	bic.w	r5, r5, #3
 8007e8e:	3508      	adds	r5, #8
 8007e90:	2d0c      	cmp	r5, #12
 8007e92:	bf38      	it	cc
 8007e94:	250c      	movcc	r5, #12
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	4606      	mov	r6, r0
 8007e9a:	db01      	blt.n	8007ea0 <_malloc_r+0x1c>
 8007e9c:	42a9      	cmp	r1, r5
 8007e9e:	d904      	bls.n	8007eaa <_malloc_r+0x26>
 8007ea0:	230c      	movs	r3, #12
 8007ea2:	6033      	str	r3, [r6, #0]
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f80 <_malloc_r+0xfc>
 8007eae:	f000 f869 	bl	8007f84 <__malloc_lock>
 8007eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb6:	461c      	mov	r4, r3
 8007eb8:	bb44      	cbnz	r4, 8007f0c <_malloc_r+0x88>
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff ffbf 	bl	8007e40 <sbrk_aligned>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	d158      	bne.n	8007f7a <_malloc_r+0xf6>
 8007ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8007ecc:	4627      	mov	r7, r4
 8007ece:	2f00      	cmp	r7, #0
 8007ed0:	d143      	bne.n	8007f5a <_malloc_r+0xd6>
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	d04b      	beq.n	8007f6e <_malloc_r+0xea>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4630      	mov	r0, r6
 8007edc:	eb04 0903 	add.w	r9, r4, r3
 8007ee0:	f000 ffc2 	bl	8008e68 <_sbrk_r>
 8007ee4:	4581      	cmp	r9, r0
 8007ee6:	d142      	bne.n	8007f6e <_malloc_r+0xea>
 8007ee8:	6821      	ldr	r1, [r4, #0]
 8007eea:	1a6d      	subs	r5, r5, r1
 8007eec:	4629      	mov	r1, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7ff ffa6 	bl	8007e40 <sbrk_aligned>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d03a      	beq.n	8007f6e <_malloc_r+0xea>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	442b      	add	r3, r5
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	f8d8 3000 	ldr.w	r3, [r8]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	bb62      	cbnz	r2, 8007f60 <_malloc_r+0xdc>
 8007f06:	f8c8 7000 	str.w	r7, [r8]
 8007f0a:	e00f      	b.n	8007f2c <_malloc_r+0xa8>
 8007f0c:	6822      	ldr	r2, [r4, #0]
 8007f0e:	1b52      	subs	r2, r2, r5
 8007f10:	d420      	bmi.n	8007f54 <_malloc_r+0xd0>
 8007f12:	2a0b      	cmp	r2, #11
 8007f14:	d917      	bls.n	8007f46 <_malloc_r+0xc2>
 8007f16:	1961      	adds	r1, r4, r5
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	6025      	str	r5, [r4, #0]
 8007f1c:	bf18      	it	ne
 8007f1e:	6059      	strne	r1, [r3, #4]
 8007f20:	6863      	ldr	r3, [r4, #4]
 8007f22:	bf08      	it	eq
 8007f24:	f8c8 1000 	streq.w	r1, [r8]
 8007f28:	5162      	str	r2, [r4, r5]
 8007f2a:	604b      	str	r3, [r1, #4]
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f000 f82f 	bl	8007f90 <__malloc_unlock>
 8007f32:	f104 000b 	add.w	r0, r4, #11
 8007f36:	1d23      	adds	r3, r4, #4
 8007f38:	f020 0007 	bic.w	r0, r0, #7
 8007f3c:	1ac2      	subs	r2, r0, r3
 8007f3e:	bf1c      	itt	ne
 8007f40:	1a1b      	subne	r3, r3, r0
 8007f42:	50a3      	strne	r3, [r4, r2]
 8007f44:	e7af      	b.n	8007ea6 <_malloc_r+0x22>
 8007f46:	6862      	ldr	r2, [r4, #4]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	bf0c      	ite	eq
 8007f4c:	f8c8 2000 	streq.w	r2, [r8]
 8007f50:	605a      	strne	r2, [r3, #4]
 8007f52:	e7eb      	b.n	8007f2c <_malloc_r+0xa8>
 8007f54:	4623      	mov	r3, r4
 8007f56:	6864      	ldr	r4, [r4, #4]
 8007f58:	e7ae      	b.n	8007eb8 <_malloc_r+0x34>
 8007f5a:	463c      	mov	r4, r7
 8007f5c:	687f      	ldr	r7, [r7, #4]
 8007f5e:	e7b6      	b.n	8007ece <_malloc_r+0x4a>
 8007f60:	461a      	mov	r2, r3
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d1fb      	bne.n	8007f60 <_malloc_r+0xdc>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6053      	str	r3, [r2, #4]
 8007f6c:	e7de      	b.n	8007f2c <_malloc_r+0xa8>
 8007f6e:	230c      	movs	r3, #12
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	4630      	mov	r0, r6
 8007f74:	f000 f80c 	bl	8007f90 <__malloc_unlock>
 8007f78:	e794      	b.n	8007ea4 <_malloc_r+0x20>
 8007f7a:	6005      	str	r5, [r0, #0]
 8007f7c:	e7d6      	b.n	8007f2c <_malloc_r+0xa8>
 8007f7e:	bf00      	nop
 8007f80:	20000dd8 	.word	0x20000dd8

08007f84 <__malloc_lock>:
 8007f84:	4801      	ldr	r0, [pc, #4]	@ (8007f8c <__malloc_lock+0x8>)
 8007f86:	f7ff b91a 	b.w	80071be <__retarget_lock_acquire_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	20000dd0 	.word	0x20000dd0

08007f90 <__malloc_unlock>:
 8007f90:	4801      	ldr	r0, [pc, #4]	@ (8007f98 <__malloc_unlock+0x8>)
 8007f92:	f7ff b915 	b.w	80071c0 <__retarget_lock_release_recursive>
 8007f96:	bf00      	nop
 8007f98:	20000dd0 	.word	0x20000dd0

08007f9c <_Balloc>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	69c6      	ldr	r6, [r0, #28]
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	b976      	cbnz	r6, 8007fc4 <_Balloc+0x28>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f7ff ff42 	bl	8007e30 <malloc>
 8007fac:	4602      	mov	r2, r0
 8007fae:	61e0      	str	r0, [r4, #28]
 8007fb0:	b920      	cbnz	r0, 8007fbc <_Balloc+0x20>
 8007fb2:	4b18      	ldr	r3, [pc, #96]	@ (8008014 <_Balloc+0x78>)
 8007fb4:	4818      	ldr	r0, [pc, #96]	@ (8008018 <_Balloc+0x7c>)
 8007fb6:	216b      	movs	r1, #107	@ 0x6b
 8007fb8:	f000 ff66 	bl	8008e88 <__assert_func>
 8007fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc0:	6006      	str	r6, [r0, #0]
 8007fc2:	60c6      	str	r6, [r0, #12]
 8007fc4:	69e6      	ldr	r6, [r4, #28]
 8007fc6:	68f3      	ldr	r3, [r6, #12]
 8007fc8:	b183      	cbz	r3, 8007fec <_Balloc+0x50>
 8007fca:	69e3      	ldr	r3, [r4, #28]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fd2:	b9b8      	cbnz	r0, 8008004 <_Balloc+0x68>
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8007fda:	1d72      	adds	r2, r6, #5
 8007fdc:	0092      	lsls	r2, r2, #2
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 ff70 	bl	8008ec4 <_calloc_r>
 8007fe4:	b160      	cbz	r0, 8008000 <_Balloc+0x64>
 8007fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fea:	e00e      	b.n	800800a <_Balloc+0x6e>
 8007fec:	2221      	movs	r2, #33	@ 0x21
 8007fee:	2104      	movs	r1, #4
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 ff67 	bl	8008ec4 <_calloc_r>
 8007ff6:	69e3      	ldr	r3, [r4, #28]
 8007ff8:	60f0      	str	r0, [r6, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e4      	bne.n	8007fca <_Balloc+0x2e>
 8008000:	2000      	movs	r0, #0
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	6802      	ldr	r2, [r0, #0]
 8008006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800800a:	2300      	movs	r3, #0
 800800c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008010:	e7f7      	b.n	8008002 <_Balloc+0x66>
 8008012:	bf00      	nop
 8008014:	08009369 	.word	0x08009369
 8008018:	080093e9 	.word	0x080093e9

0800801c <_Bfree>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	69c6      	ldr	r6, [r0, #28]
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	b976      	cbnz	r6, 8008044 <_Bfree+0x28>
 8008026:	2010      	movs	r0, #16
 8008028:	f7ff ff02 	bl	8007e30 <malloc>
 800802c:	4602      	mov	r2, r0
 800802e:	61e8      	str	r0, [r5, #28]
 8008030:	b920      	cbnz	r0, 800803c <_Bfree+0x20>
 8008032:	4b09      	ldr	r3, [pc, #36]	@ (8008058 <_Bfree+0x3c>)
 8008034:	4809      	ldr	r0, [pc, #36]	@ (800805c <_Bfree+0x40>)
 8008036:	218f      	movs	r1, #143	@ 0x8f
 8008038:	f000 ff26 	bl	8008e88 <__assert_func>
 800803c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008040:	6006      	str	r6, [r0, #0]
 8008042:	60c6      	str	r6, [r0, #12]
 8008044:	b13c      	cbz	r4, 8008056 <_Bfree+0x3a>
 8008046:	69eb      	ldr	r3, [r5, #28]
 8008048:	6862      	ldr	r2, [r4, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008050:	6021      	str	r1, [r4, #0]
 8008052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	08009369 	.word	0x08009369
 800805c:	080093e9 	.word	0x080093e9

08008060 <__multadd>:
 8008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008064:	690d      	ldr	r5, [r1, #16]
 8008066:	4607      	mov	r7, r0
 8008068:	460c      	mov	r4, r1
 800806a:	461e      	mov	r6, r3
 800806c:	f101 0c14 	add.w	ip, r1, #20
 8008070:	2000      	movs	r0, #0
 8008072:	f8dc 3000 	ldr.w	r3, [ip]
 8008076:	b299      	uxth	r1, r3
 8008078:	fb02 6101 	mla	r1, r2, r1, r6
 800807c:	0c1e      	lsrs	r6, r3, #16
 800807e:	0c0b      	lsrs	r3, r1, #16
 8008080:	fb02 3306 	mla	r3, r2, r6, r3
 8008084:	b289      	uxth	r1, r1
 8008086:	3001      	adds	r0, #1
 8008088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800808c:	4285      	cmp	r5, r0
 800808e:	f84c 1b04 	str.w	r1, [ip], #4
 8008092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008096:	dcec      	bgt.n	8008072 <__multadd+0x12>
 8008098:	b30e      	cbz	r6, 80080de <__multadd+0x7e>
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	42ab      	cmp	r3, r5
 800809e:	dc19      	bgt.n	80080d4 <__multadd+0x74>
 80080a0:	6861      	ldr	r1, [r4, #4]
 80080a2:	4638      	mov	r0, r7
 80080a4:	3101      	adds	r1, #1
 80080a6:	f7ff ff79 	bl	8007f9c <_Balloc>
 80080aa:	4680      	mov	r8, r0
 80080ac:	b928      	cbnz	r0, 80080ba <__multadd+0x5a>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <__multadd+0x84>)
 80080b2:	480d      	ldr	r0, [pc, #52]	@ (80080e8 <__multadd+0x88>)
 80080b4:	21ba      	movs	r1, #186	@ 0xba
 80080b6:	f000 fee7 	bl	8008e88 <__assert_func>
 80080ba:	6922      	ldr	r2, [r4, #16]
 80080bc:	3202      	adds	r2, #2
 80080be:	f104 010c 	add.w	r1, r4, #12
 80080c2:	0092      	lsls	r2, r2, #2
 80080c4:	300c      	adds	r0, #12
 80080c6:	f7ff f87c 	bl	80071c2 <memcpy>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff ffa5 	bl	800801c <_Bfree>
 80080d2:	4644      	mov	r4, r8
 80080d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080d8:	3501      	adds	r5, #1
 80080da:	615e      	str	r6, [r3, #20]
 80080dc:	6125      	str	r5, [r4, #16]
 80080de:	4620      	mov	r0, r4
 80080e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e4:	080093d8 	.word	0x080093d8
 80080e8:	080093e9 	.word	0x080093e9

080080ec <__hi0bits>:
 80080ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080f0:	4603      	mov	r3, r0
 80080f2:	bf36      	itet	cc
 80080f4:	0403      	lslcc	r3, r0, #16
 80080f6:	2000      	movcs	r0, #0
 80080f8:	2010      	movcc	r0, #16
 80080fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080fe:	bf3c      	itt	cc
 8008100:	021b      	lslcc	r3, r3, #8
 8008102:	3008      	addcc	r0, #8
 8008104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008108:	bf3c      	itt	cc
 800810a:	011b      	lslcc	r3, r3, #4
 800810c:	3004      	addcc	r0, #4
 800810e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008112:	bf3c      	itt	cc
 8008114:	009b      	lslcc	r3, r3, #2
 8008116:	3002      	addcc	r0, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	db05      	blt.n	8008128 <__hi0bits+0x3c>
 800811c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008120:	f100 0001 	add.w	r0, r0, #1
 8008124:	bf08      	it	eq
 8008126:	2020      	moveq	r0, #32
 8008128:	4770      	bx	lr

0800812a <__lo0bits>:
 800812a:	6803      	ldr	r3, [r0, #0]
 800812c:	4602      	mov	r2, r0
 800812e:	f013 0007 	ands.w	r0, r3, #7
 8008132:	d00b      	beq.n	800814c <__lo0bits+0x22>
 8008134:	07d9      	lsls	r1, r3, #31
 8008136:	d421      	bmi.n	800817c <__lo0bits+0x52>
 8008138:	0798      	lsls	r0, r3, #30
 800813a:	bf49      	itett	mi
 800813c:	085b      	lsrmi	r3, r3, #1
 800813e:	089b      	lsrpl	r3, r3, #2
 8008140:	2001      	movmi	r0, #1
 8008142:	6013      	strmi	r3, [r2, #0]
 8008144:	bf5c      	itt	pl
 8008146:	6013      	strpl	r3, [r2, #0]
 8008148:	2002      	movpl	r0, #2
 800814a:	4770      	bx	lr
 800814c:	b299      	uxth	r1, r3
 800814e:	b909      	cbnz	r1, 8008154 <__lo0bits+0x2a>
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	2010      	movs	r0, #16
 8008154:	b2d9      	uxtb	r1, r3
 8008156:	b909      	cbnz	r1, 800815c <__lo0bits+0x32>
 8008158:	3008      	adds	r0, #8
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	0719      	lsls	r1, r3, #28
 800815e:	bf04      	itt	eq
 8008160:	091b      	lsreq	r3, r3, #4
 8008162:	3004      	addeq	r0, #4
 8008164:	0799      	lsls	r1, r3, #30
 8008166:	bf04      	itt	eq
 8008168:	089b      	lsreq	r3, r3, #2
 800816a:	3002      	addeq	r0, #2
 800816c:	07d9      	lsls	r1, r3, #31
 800816e:	d403      	bmi.n	8008178 <__lo0bits+0x4e>
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	f100 0001 	add.w	r0, r0, #1
 8008176:	d003      	beq.n	8008180 <__lo0bits+0x56>
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	4770      	bx	lr
 800817c:	2000      	movs	r0, #0
 800817e:	4770      	bx	lr
 8008180:	2020      	movs	r0, #32
 8008182:	4770      	bx	lr

08008184 <__i2b>:
 8008184:	b510      	push	{r4, lr}
 8008186:	460c      	mov	r4, r1
 8008188:	2101      	movs	r1, #1
 800818a:	f7ff ff07 	bl	8007f9c <_Balloc>
 800818e:	4602      	mov	r2, r0
 8008190:	b928      	cbnz	r0, 800819e <__i2b+0x1a>
 8008192:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <__i2b+0x24>)
 8008194:	4805      	ldr	r0, [pc, #20]	@ (80081ac <__i2b+0x28>)
 8008196:	f240 1145 	movw	r1, #325	@ 0x145
 800819a:	f000 fe75 	bl	8008e88 <__assert_func>
 800819e:	2301      	movs	r3, #1
 80081a0:	6144      	str	r4, [r0, #20]
 80081a2:	6103      	str	r3, [r0, #16]
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	bf00      	nop
 80081a8:	080093d8 	.word	0x080093d8
 80081ac:	080093e9 	.word	0x080093e9

080081b0 <__multiply>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	4614      	mov	r4, r2
 80081b6:	690a      	ldr	r2, [r1, #16]
 80081b8:	6923      	ldr	r3, [r4, #16]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	bfa8      	it	ge
 80081be:	4623      	movge	r3, r4
 80081c0:	460f      	mov	r7, r1
 80081c2:	bfa4      	itt	ge
 80081c4:	460c      	movge	r4, r1
 80081c6:	461f      	movge	r7, r3
 80081c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	6861      	ldr	r1, [r4, #4]
 80081d4:	eb0a 0609 	add.w	r6, sl, r9
 80081d8:	42b3      	cmp	r3, r6
 80081da:	b085      	sub	sp, #20
 80081dc:	bfb8      	it	lt
 80081de:	3101      	addlt	r1, #1
 80081e0:	f7ff fedc 	bl	8007f9c <_Balloc>
 80081e4:	b930      	cbnz	r0, 80081f4 <__multiply+0x44>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b44      	ldr	r3, [pc, #272]	@ (80082fc <__multiply+0x14c>)
 80081ea:	4845      	ldr	r0, [pc, #276]	@ (8008300 <__multiply+0x150>)
 80081ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081f0:	f000 fe4a 	bl	8008e88 <__assert_func>
 80081f4:	f100 0514 	add.w	r5, r0, #20
 80081f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081fc:	462b      	mov	r3, r5
 80081fe:	2200      	movs	r2, #0
 8008200:	4543      	cmp	r3, r8
 8008202:	d321      	bcc.n	8008248 <__multiply+0x98>
 8008204:	f107 0114 	add.w	r1, r7, #20
 8008208:	f104 0214 	add.w	r2, r4, #20
 800820c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008210:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	1b13      	subs	r3, r2, r4
 8008218:	3b15      	subs	r3, #21
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	3304      	adds	r3, #4
 8008220:	f104 0715 	add.w	r7, r4, #21
 8008224:	42ba      	cmp	r2, r7
 8008226:	bf38      	it	cc
 8008228:	2304      	movcc	r3, #4
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	9b02      	ldr	r3, [sp, #8]
 800822e:	9103      	str	r1, [sp, #12]
 8008230:	428b      	cmp	r3, r1
 8008232:	d80c      	bhi.n	800824e <__multiply+0x9e>
 8008234:	2e00      	cmp	r6, #0
 8008236:	dd03      	ble.n	8008240 <__multiply+0x90>
 8008238:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05b      	beq.n	80082f8 <__multiply+0x148>
 8008240:	6106      	str	r6, [r0, #16]
 8008242:	b005      	add	sp, #20
 8008244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	f843 2b04 	str.w	r2, [r3], #4
 800824c:	e7d8      	b.n	8008200 <__multiply+0x50>
 800824e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008252:	f1ba 0f00 	cmp.w	sl, #0
 8008256:	d024      	beq.n	80082a2 <__multiply+0xf2>
 8008258:	f104 0e14 	add.w	lr, r4, #20
 800825c:	46a9      	mov	r9, r5
 800825e:	f04f 0c00 	mov.w	ip, #0
 8008262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008266:	f8d9 3000 	ldr.w	r3, [r9]
 800826a:	fa1f fb87 	uxth.w	fp, r7
 800826e:	b29b      	uxth	r3, r3
 8008270:	fb0a 330b 	mla	r3, sl, fp, r3
 8008274:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008278:	f8d9 7000 	ldr.w	r7, [r9]
 800827c:	4463      	add	r3, ip
 800827e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008282:	fb0a c70b 	mla	r7, sl, fp, ip
 8008286:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008290:	4572      	cmp	r2, lr
 8008292:	f849 3b04 	str.w	r3, [r9], #4
 8008296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800829a:	d8e2      	bhi.n	8008262 <__multiply+0xb2>
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	f845 c003 	str.w	ip, [r5, r3]
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082a8:	3104      	adds	r1, #4
 80082aa:	f1b9 0f00 	cmp.w	r9, #0
 80082ae:	d021      	beq.n	80082f4 <__multiply+0x144>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	f104 0c14 	add.w	ip, r4, #20
 80082b6:	46ae      	mov	lr, r5
 80082b8:	f04f 0a00 	mov.w	sl, #0
 80082bc:	f8bc b000 	ldrh.w	fp, [ip]
 80082c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082c4:	fb09 770b 	mla	r7, r9, fp, r7
 80082c8:	4457      	add	r7, sl
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082d0:	f84e 3b04 	str.w	r3, [lr], #4
 80082d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082dc:	f8be 3000 	ldrh.w	r3, [lr]
 80082e0:	fb09 330a 	mla	r3, r9, sl, r3
 80082e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082e8:	4562      	cmp	r2, ip
 80082ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082ee:	d8e5      	bhi.n	80082bc <__multiply+0x10c>
 80082f0:	9f01      	ldr	r7, [sp, #4]
 80082f2:	51eb      	str	r3, [r5, r7]
 80082f4:	3504      	adds	r5, #4
 80082f6:	e799      	b.n	800822c <__multiply+0x7c>
 80082f8:	3e01      	subs	r6, #1
 80082fa:	e79b      	b.n	8008234 <__multiply+0x84>
 80082fc:	080093d8 	.word	0x080093d8
 8008300:	080093e9 	.word	0x080093e9

08008304 <__pow5mult>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	4615      	mov	r5, r2
 800830a:	f012 0203 	ands.w	r2, r2, #3
 800830e:	4607      	mov	r7, r0
 8008310:	460e      	mov	r6, r1
 8008312:	d007      	beq.n	8008324 <__pow5mult+0x20>
 8008314:	4c25      	ldr	r4, [pc, #148]	@ (80083ac <__pow5mult+0xa8>)
 8008316:	3a01      	subs	r2, #1
 8008318:	2300      	movs	r3, #0
 800831a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800831e:	f7ff fe9f 	bl	8008060 <__multadd>
 8008322:	4606      	mov	r6, r0
 8008324:	10ad      	asrs	r5, r5, #2
 8008326:	d03d      	beq.n	80083a4 <__pow5mult+0xa0>
 8008328:	69fc      	ldr	r4, [r7, #28]
 800832a:	b97c      	cbnz	r4, 800834c <__pow5mult+0x48>
 800832c:	2010      	movs	r0, #16
 800832e:	f7ff fd7f 	bl	8007e30 <malloc>
 8008332:	4602      	mov	r2, r0
 8008334:	61f8      	str	r0, [r7, #28]
 8008336:	b928      	cbnz	r0, 8008344 <__pow5mult+0x40>
 8008338:	4b1d      	ldr	r3, [pc, #116]	@ (80083b0 <__pow5mult+0xac>)
 800833a:	481e      	ldr	r0, [pc, #120]	@ (80083b4 <__pow5mult+0xb0>)
 800833c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008340:	f000 fda2 	bl	8008e88 <__assert_func>
 8008344:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008348:	6004      	str	r4, [r0, #0]
 800834a:	60c4      	str	r4, [r0, #12]
 800834c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008350:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008354:	b94c      	cbnz	r4, 800836a <__pow5mult+0x66>
 8008356:	f240 2171 	movw	r1, #625	@ 0x271
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff ff12 	bl	8008184 <__i2b>
 8008360:	2300      	movs	r3, #0
 8008362:	f8c8 0008 	str.w	r0, [r8, #8]
 8008366:	4604      	mov	r4, r0
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	f04f 0900 	mov.w	r9, #0
 800836e:	07eb      	lsls	r3, r5, #31
 8008370:	d50a      	bpl.n	8008388 <__pow5mult+0x84>
 8008372:	4631      	mov	r1, r6
 8008374:	4622      	mov	r2, r4
 8008376:	4638      	mov	r0, r7
 8008378:	f7ff ff1a 	bl	80081b0 <__multiply>
 800837c:	4631      	mov	r1, r6
 800837e:	4680      	mov	r8, r0
 8008380:	4638      	mov	r0, r7
 8008382:	f7ff fe4b 	bl	800801c <_Bfree>
 8008386:	4646      	mov	r6, r8
 8008388:	106d      	asrs	r5, r5, #1
 800838a:	d00b      	beq.n	80083a4 <__pow5mult+0xa0>
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	b938      	cbnz	r0, 80083a0 <__pow5mult+0x9c>
 8008390:	4622      	mov	r2, r4
 8008392:	4621      	mov	r1, r4
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff ff0b 	bl	80081b0 <__multiply>
 800839a:	6020      	str	r0, [r4, #0]
 800839c:	f8c0 9000 	str.w	r9, [r0]
 80083a0:	4604      	mov	r4, r0
 80083a2:	e7e4      	b.n	800836e <__pow5mult+0x6a>
 80083a4:	4630      	mov	r0, r6
 80083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083aa:	bf00      	nop
 80083ac:	08009444 	.word	0x08009444
 80083b0:	08009369 	.word	0x08009369
 80083b4:	080093e9 	.word	0x080093e9

080083b8 <__lshift>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	6849      	ldr	r1, [r1, #4]
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083c6:	68a3      	ldr	r3, [r4, #8]
 80083c8:	4607      	mov	r7, r0
 80083ca:	4691      	mov	r9, r2
 80083cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083d0:	f108 0601 	add.w	r6, r8, #1
 80083d4:	42b3      	cmp	r3, r6
 80083d6:	db0b      	blt.n	80083f0 <__lshift+0x38>
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff fddf 	bl	8007f9c <_Balloc>
 80083de:	4605      	mov	r5, r0
 80083e0:	b948      	cbnz	r0, 80083f6 <__lshift+0x3e>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4b28      	ldr	r3, [pc, #160]	@ (8008488 <__lshift+0xd0>)
 80083e6:	4829      	ldr	r0, [pc, #164]	@ (800848c <__lshift+0xd4>)
 80083e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083ec:	f000 fd4c 	bl	8008e88 <__assert_func>
 80083f0:	3101      	adds	r1, #1
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	e7ee      	b.n	80083d4 <__lshift+0x1c>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f100 0114 	add.w	r1, r0, #20
 80083fc:	f100 0210 	add.w	r2, r0, #16
 8008400:	4618      	mov	r0, r3
 8008402:	4553      	cmp	r3, sl
 8008404:	db33      	blt.n	800846e <__lshift+0xb6>
 8008406:	6920      	ldr	r0, [r4, #16]
 8008408:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800840c:	f104 0314 	add.w	r3, r4, #20
 8008410:	f019 091f 	ands.w	r9, r9, #31
 8008414:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008418:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800841c:	d02b      	beq.n	8008476 <__lshift+0xbe>
 800841e:	f1c9 0e20 	rsb	lr, r9, #32
 8008422:	468a      	mov	sl, r1
 8008424:	2200      	movs	r2, #0
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	fa00 f009 	lsl.w	r0, r0, r9
 800842c:	4310      	orrs	r0, r2
 800842e:	f84a 0b04 	str.w	r0, [sl], #4
 8008432:	f853 2b04 	ldr.w	r2, [r3], #4
 8008436:	459c      	cmp	ip, r3
 8008438:	fa22 f20e 	lsr.w	r2, r2, lr
 800843c:	d8f3      	bhi.n	8008426 <__lshift+0x6e>
 800843e:	ebac 0304 	sub.w	r3, ip, r4
 8008442:	3b15      	subs	r3, #21
 8008444:	f023 0303 	bic.w	r3, r3, #3
 8008448:	3304      	adds	r3, #4
 800844a:	f104 0015 	add.w	r0, r4, #21
 800844e:	4584      	cmp	ip, r0
 8008450:	bf38      	it	cc
 8008452:	2304      	movcc	r3, #4
 8008454:	50ca      	str	r2, [r1, r3]
 8008456:	b10a      	cbz	r2, 800845c <__lshift+0xa4>
 8008458:	f108 0602 	add.w	r6, r8, #2
 800845c:	3e01      	subs	r6, #1
 800845e:	4638      	mov	r0, r7
 8008460:	612e      	str	r6, [r5, #16]
 8008462:	4621      	mov	r1, r4
 8008464:	f7ff fdda 	bl	800801c <_Bfree>
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008472:	3301      	adds	r3, #1
 8008474:	e7c5      	b.n	8008402 <__lshift+0x4a>
 8008476:	3904      	subs	r1, #4
 8008478:	f853 2b04 	ldr.w	r2, [r3], #4
 800847c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008480:	459c      	cmp	ip, r3
 8008482:	d8f9      	bhi.n	8008478 <__lshift+0xc0>
 8008484:	e7ea      	b.n	800845c <__lshift+0xa4>
 8008486:	bf00      	nop
 8008488:	080093d8 	.word	0x080093d8
 800848c:	080093e9 	.word	0x080093e9

08008490 <__mcmp>:
 8008490:	690a      	ldr	r2, [r1, #16]
 8008492:	4603      	mov	r3, r0
 8008494:	6900      	ldr	r0, [r0, #16]
 8008496:	1a80      	subs	r0, r0, r2
 8008498:	b530      	push	{r4, r5, lr}
 800849a:	d10e      	bne.n	80084ba <__mcmp+0x2a>
 800849c:	3314      	adds	r3, #20
 800849e:	3114      	adds	r1, #20
 80084a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084b0:	4295      	cmp	r5, r2
 80084b2:	d003      	beq.n	80084bc <__mcmp+0x2c>
 80084b4:	d205      	bcs.n	80084c2 <__mcmp+0x32>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	bd30      	pop	{r4, r5, pc}
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d3f3      	bcc.n	80084a8 <__mcmp+0x18>
 80084c0:	e7fb      	b.n	80084ba <__mcmp+0x2a>
 80084c2:	2001      	movs	r0, #1
 80084c4:	e7f9      	b.n	80084ba <__mcmp+0x2a>
	...

080084c8 <__mdiff>:
 80084c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4689      	mov	r9, r1
 80084ce:	4606      	mov	r6, r0
 80084d0:	4611      	mov	r1, r2
 80084d2:	4648      	mov	r0, r9
 80084d4:	4614      	mov	r4, r2
 80084d6:	f7ff ffdb 	bl	8008490 <__mcmp>
 80084da:	1e05      	subs	r5, r0, #0
 80084dc:	d112      	bne.n	8008504 <__mdiff+0x3c>
 80084de:	4629      	mov	r1, r5
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff fd5b 	bl	8007f9c <_Balloc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <__mdiff+0x2e>
 80084ea:	4b3f      	ldr	r3, [pc, #252]	@ (80085e8 <__mdiff+0x120>)
 80084ec:	f240 2137 	movw	r1, #567	@ 0x237
 80084f0:	483e      	ldr	r0, [pc, #248]	@ (80085ec <__mdiff+0x124>)
 80084f2:	f000 fcc9 	bl	8008e88 <__assert_func>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084fc:	4610      	mov	r0, r2
 80084fe:	b003      	add	sp, #12
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008504:	bfbc      	itt	lt
 8008506:	464b      	movlt	r3, r9
 8008508:	46a1      	movlt	r9, r4
 800850a:	4630      	mov	r0, r6
 800850c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008510:	bfba      	itte	lt
 8008512:	461c      	movlt	r4, r3
 8008514:	2501      	movlt	r5, #1
 8008516:	2500      	movge	r5, #0
 8008518:	f7ff fd40 	bl	8007f9c <_Balloc>
 800851c:	4602      	mov	r2, r0
 800851e:	b918      	cbnz	r0, 8008528 <__mdiff+0x60>
 8008520:	4b31      	ldr	r3, [pc, #196]	@ (80085e8 <__mdiff+0x120>)
 8008522:	f240 2145 	movw	r1, #581	@ 0x245
 8008526:	e7e3      	b.n	80084f0 <__mdiff+0x28>
 8008528:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800852c:	6926      	ldr	r6, [r4, #16]
 800852e:	60c5      	str	r5, [r0, #12]
 8008530:	f109 0310 	add.w	r3, r9, #16
 8008534:	f109 0514 	add.w	r5, r9, #20
 8008538:	f104 0e14 	add.w	lr, r4, #20
 800853c:	f100 0b14 	add.w	fp, r0, #20
 8008540:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008544:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	46d9      	mov	r9, fp
 800854c:	f04f 0c00 	mov.w	ip, #0
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008556:	f853 af04 	ldr.w	sl, [r3, #4]!
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	fa1f f38a 	uxth.w	r3, sl
 8008560:	4619      	mov	r1, r3
 8008562:	b283      	uxth	r3, r0
 8008564:	1acb      	subs	r3, r1, r3
 8008566:	0c00      	lsrs	r0, r0, #16
 8008568:	4463      	add	r3, ip
 800856a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800856e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008572:	b29b      	uxth	r3, r3
 8008574:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008578:	4576      	cmp	r6, lr
 800857a:	f849 3b04 	str.w	r3, [r9], #4
 800857e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008582:	d8e5      	bhi.n	8008550 <__mdiff+0x88>
 8008584:	1b33      	subs	r3, r6, r4
 8008586:	3b15      	subs	r3, #21
 8008588:	f023 0303 	bic.w	r3, r3, #3
 800858c:	3415      	adds	r4, #21
 800858e:	3304      	adds	r3, #4
 8008590:	42a6      	cmp	r6, r4
 8008592:	bf38      	it	cc
 8008594:	2304      	movcc	r3, #4
 8008596:	441d      	add	r5, r3
 8008598:	445b      	add	r3, fp
 800859a:	461e      	mov	r6, r3
 800859c:	462c      	mov	r4, r5
 800859e:	4544      	cmp	r4, r8
 80085a0:	d30e      	bcc.n	80085c0 <__mdiff+0xf8>
 80085a2:	f108 0103 	add.w	r1, r8, #3
 80085a6:	1b49      	subs	r1, r1, r5
 80085a8:	f021 0103 	bic.w	r1, r1, #3
 80085ac:	3d03      	subs	r5, #3
 80085ae:	45a8      	cmp	r8, r5
 80085b0:	bf38      	it	cc
 80085b2:	2100      	movcc	r1, #0
 80085b4:	440b      	add	r3, r1
 80085b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085ba:	b191      	cbz	r1, 80085e2 <__mdiff+0x11a>
 80085bc:	6117      	str	r7, [r2, #16]
 80085be:	e79d      	b.n	80084fc <__mdiff+0x34>
 80085c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085c4:	46e6      	mov	lr, ip
 80085c6:	0c08      	lsrs	r0, r1, #16
 80085c8:	fa1c fc81 	uxtah	ip, ip, r1
 80085cc:	4471      	add	r1, lr
 80085ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085d2:	b289      	uxth	r1, r1
 80085d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085d8:	f846 1b04 	str.w	r1, [r6], #4
 80085dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085e0:	e7dd      	b.n	800859e <__mdiff+0xd6>
 80085e2:	3f01      	subs	r7, #1
 80085e4:	e7e7      	b.n	80085b6 <__mdiff+0xee>
 80085e6:	bf00      	nop
 80085e8:	080093d8 	.word	0x080093d8
 80085ec:	080093e9 	.word	0x080093e9

080085f0 <__d2b>:
 80085f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	460f      	mov	r7, r1
 80085f6:	2101      	movs	r1, #1
 80085f8:	ec59 8b10 	vmov	r8, r9, d0
 80085fc:	4616      	mov	r6, r2
 80085fe:	f7ff fccd 	bl	8007f9c <_Balloc>
 8008602:	4604      	mov	r4, r0
 8008604:	b930      	cbnz	r0, 8008614 <__d2b+0x24>
 8008606:	4602      	mov	r2, r0
 8008608:	4b23      	ldr	r3, [pc, #140]	@ (8008698 <__d2b+0xa8>)
 800860a:	4824      	ldr	r0, [pc, #144]	@ (800869c <__d2b+0xac>)
 800860c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008610:	f000 fc3a 	bl	8008e88 <__assert_func>
 8008614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800861c:	b10d      	cbz	r5, 8008622 <__d2b+0x32>
 800861e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	f1b8 0300 	subs.w	r3, r8, #0
 8008628:	d023      	beq.n	8008672 <__d2b+0x82>
 800862a:	4668      	mov	r0, sp
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	f7ff fd7c 	bl	800812a <__lo0bits>
 8008632:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008636:	b1d0      	cbz	r0, 800866e <__d2b+0x7e>
 8008638:	f1c0 0320 	rsb	r3, r0, #32
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	430b      	orrs	r3, r1
 8008642:	40c2      	lsrs	r2, r0
 8008644:	6163      	str	r3, [r4, #20]
 8008646:	9201      	str	r2, [sp, #4]
 8008648:	9b01      	ldr	r3, [sp, #4]
 800864a:	61a3      	str	r3, [r4, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf0c      	ite	eq
 8008650:	2201      	moveq	r2, #1
 8008652:	2202      	movne	r2, #2
 8008654:	6122      	str	r2, [r4, #16]
 8008656:	b1a5      	cbz	r5, 8008682 <__d2b+0x92>
 8008658:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800865c:	4405      	add	r5, r0
 800865e:	603d      	str	r5, [r7, #0]
 8008660:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008664:	6030      	str	r0, [r6, #0]
 8008666:	4620      	mov	r0, r4
 8008668:	b003      	add	sp, #12
 800866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800866e:	6161      	str	r1, [r4, #20]
 8008670:	e7ea      	b.n	8008648 <__d2b+0x58>
 8008672:	a801      	add	r0, sp, #4
 8008674:	f7ff fd59 	bl	800812a <__lo0bits>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	6163      	str	r3, [r4, #20]
 800867c:	3020      	adds	r0, #32
 800867e:	2201      	movs	r2, #1
 8008680:	e7e8      	b.n	8008654 <__d2b+0x64>
 8008682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800868a:	6038      	str	r0, [r7, #0]
 800868c:	6918      	ldr	r0, [r3, #16]
 800868e:	f7ff fd2d 	bl	80080ec <__hi0bits>
 8008692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008696:	e7e5      	b.n	8008664 <__d2b+0x74>
 8008698:	080093d8 	.word	0x080093d8
 800869c:	080093e9 	.word	0x080093e9

080086a0 <__ssputs_r>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	688e      	ldr	r6, [r1, #8]
 80086a6:	461f      	mov	r7, r3
 80086a8:	42be      	cmp	r6, r7
 80086aa:	680b      	ldr	r3, [r1, #0]
 80086ac:	4682      	mov	sl, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4690      	mov	r8, r2
 80086b2:	d82d      	bhi.n	8008710 <__ssputs_r+0x70>
 80086b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086bc:	d026      	beq.n	800870c <__ssputs_r+0x6c>
 80086be:	6965      	ldr	r5, [r4, #20]
 80086c0:	6909      	ldr	r1, [r1, #16]
 80086c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086c6:	eba3 0901 	sub.w	r9, r3, r1
 80086ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086ce:	1c7b      	adds	r3, r7, #1
 80086d0:	444b      	add	r3, r9
 80086d2:	106d      	asrs	r5, r5, #1
 80086d4:	429d      	cmp	r5, r3
 80086d6:	bf38      	it	cc
 80086d8:	461d      	movcc	r5, r3
 80086da:	0553      	lsls	r3, r2, #21
 80086dc:	d527      	bpl.n	800872e <__ssputs_r+0x8e>
 80086de:	4629      	mov	r1, r5
 80086e0:	f7ff fbd0 	bl	8007e84 <_malloc_r>
 80086e4:	4606      	mov	r6, r0
 80086e6:	b360      	cbz	r0, 8008742 <__ssputs_r+0xa2>
 80086e8:	6921      	ldr	r1, [r4, #16]
 80086ea:	464a      	mov	r2, r9
 80086ec:	f7fe fd69 	bl	80071c2 <memcpy>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	6126      	str	r6, [r4, #16]
 80086fe:	6165      	str	r5, [r4, #20]
 8008700:	444e      	add	r6, r9
 8008702:	eba5 0509 	sub.w	r5, r5, r9
 8008706:	6026      	str	r6, [r4, #0]
 8008708:	60a5      	str	r5, [r4, #8]
 800870a:	463e      	mov	r6, r7
 800870c:	42be      	cmp	r6, r7
 800870e:	d900      	bls.n	8008712 <__ssputs_r+0x72>
 8008710:	463e      	mov	r6, r7
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	4632      	mov	r2, r6
 8008716:	4641      	mov	r1, r8
 8008718:	f000 fb6a 	bl	8008df0 <memmove>
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	1b9b      	subs	r3, r3, r6
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4433      	add	r3, r6
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	2000      	movs	r0, #0
 800872a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872e:	462a      	mov	r2, r5
 8008730:	f000 fbee 	bl	8008f10 <_realloc_r>
 8008734:	4606      	mov	r6, r0
 8008736:	2800      	cmp	r0, #0
 8008738:	d1e0      	bne.n	80086fc <__ssputs_r+0x5c>
 800873a:	6921      	ldr	r1, [r4, #16]
 800873c:	4650      	mov	r0, sl
 800873e:	f7ff fb2d 	bl	8007d9c <_free_r>
 8008742:	230c      	movs	r3, #12
 8008744:	f8ca 3000 	str.w	r3, [sl]
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e7e9      	b.n	800872a <__ssputs_r+0x8a>
	...

08008758 <_svfiprintf_r>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4698      	mov	r8, r3
 800875e:	898b      	ldrh	r3, [r1, #12]
 8008760:	061b      	lsls	r3, r3, #24
 8008762:	b09d      	sub	sp, #116	@ 0x74
 8008764:	4607      	mov	r7, r0
 8008766:	460d      	mov	r5, r1
 8008768:	4614      	mov	r4, r2
 800876a:	d510      	bpl.n	800878e <_svfiprintf_r+0x36>
 800876c:	690b      	ldr	r3, [r1, #16]
 800876e:	b973      	cbnz	r3, 800878e <_svfiprintf_r+0x36>
 8008770:	2140      	movs	r1, #64	@ 0x40
 8008772:	f7ff fb87 	bl	8007e84 <_malloc_r>
 8008776:	6028      	str	r0, [r5, #0]
 8008778:	6128      	str	r0, [r5, #16]
 800877a:	b930      	cbnz	r0, 800878a <_svfiprintf_r+0x32>
 800877c:	230c      	movs	r3, #12
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	b01d      	add	sp, #116	@ 0x74
 8008786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878a:	2340      	movs	r3, #64	@ 0x40
 800878c:	616b      	str	r3, [r5, #20]
 800878e:	2300      	movs	r3, #0
 8008790:	9309      	str	r3, [sp, #36]	@ 0x24
 8008792:	2320      	movs	r3, #32
 8008794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008798:	f8cd 800c 	str.w	r8, [sp, #12]
 800879c:	2330      	movs	r3, #48	@ 0x30
 800879e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800893c <_svfiprintf_r+0x1e4>
 80087a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	4623      	mov	r3, r4
 80087ac:	469a      	mov	sl, r3
 80087ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b2:	b10a      	cbz	r2, 80087b8 <_svfiprintf_r+0x60>
 80087b4:	2a25      	cmp	r2, #37	@ 0x25
 80087b6:	d1f9      	bne.n	80087ac <_svfiprintf_r+0x54>
 80087b8:	ebba 0b04 	subs.w	fp, sl, r4
 80087bc:	d00b      	beq.n	80087d6 <_svfiprintf_r+0x7e>
 80087be:	465b      	mov	r3, fp
 80087c0:	4622      	mov	r2, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ff6b 	bl	80086a0 <__ssputs_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	f000 80a7 	beq.w	800891e <_svfiprintf_r+0x1c6>
 80087d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d2:	445a      	add	r2, fp
 80087d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80087d6:	f89a 3000 	ldrb.w	r3, [sl]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 809f 	beq.w	800891e <_svfiprintf_r+0x1c6>
 80087e0:	2300      	movs	r3, #0
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ea:	f10a 0a01 	add.w	sl, sl, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80087f8:	4654      	mov	r4, sl
 80087fa:	2205      	movs	r2, #5
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	484e      	ldr	r0, [pc, #312]	@ (800893c <_svfiprintf_r+0x1e4>)
 8008802:	f7f7 fd1d 	bl	8000240 <memchr>
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	b9d8      	cbnz	r0, 8008842 <_svfiprintf_r+0xea>
 800880a:	06d0      	lsls	r0, r2, #27
 800880c:	bf44      	itt	mi
 800880e:	2320      	movmi	r3, #32
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008814:	0711      	lsls	r1, r2, #28
 8008816:	bf44      	itt	mi
 8008818:	232b      	movmi	r3, #43	@ 0x2b
 800881a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800881e:	f89a 3000 	ldrb.w	r3, [sl]
 8008822:	2b2a      	cmp	r3, #42	@ 0x2a
 8008824:	d015      	beq.n	8008852 <_svfiprintf_r+0xfa>
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4654      	mov	r4, sl
 800882a:	2000      	movs	r0, #0
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4621      	mov	r1, r4
 8008832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008836:	3b30      	subs	r3, #48	@ 0x30
 8008838:	2b09      	cmp	r3, #9
 800883a:	d94b      	bls.n	80088d4 <_svfiprintf_r+0x17c>
 800883c:	b1b0      	cbz	r0, 800886c <_svfiprintf_r+0x114>
 800883e:	9207      	str	r2, [sp, #28]
 8008840:	e014      	b.n	800886c <_svfiprintf_r+0x114>
 8008842:	eba0 0308 	sub.w	r3, r0, r8
 8008846:	fa09 f303 	lsl.w	r3, r9, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	46a2      	mov	sl, r4
 8008850:	e7d2      	b.n	80087f8 <_svfiprintf_r+0xa0>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9103      	str	r1, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfbb      	ittet	lt
 800885e:	425b      	neglt	r3, r3
 8008860:	f042 0202 	orrlt.w	r2, r2, #2
 8008864:	9307      	strge	r3, [sp, #28]
 8008866:	9307      	strlt	r3, [sp, #28]
 8008868:	bfb8      	it	lt
 800886a:	9204      	strlt	r2, [sp, #16]
 800886c:	7823      	ldrb	r3, [r4, #0]
 800886e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008870:	d10a      	bne.n	8008888 <_svfiprintf_r+0x130>
 8008872:	7863      	ldrb	r3, [r4, #1]
 8008874:	2b2a      	cmp	r3, #42	@ 0x2a
 8008876:	d132      	bne.n	80088de <_svfiprintf_r+0x186>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9203      	str	r2, [sp, #12]
 8008880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008884:	3402      	adds	r4, #2
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800894c <_svfiprintf_r+0x1f4>
 800888c:	7821      	ldrb	r1, [r4, #0]
 800888e:	2203      	movs	r2, #3
 8008890:	4650      	mov	r0, sl
 8008892:	f7f7 fcd5 	bl	8000240 <memchr>
 8008896:	b138      	cbz	r0, 80088a8 <_svfiprintf_r+0x150>
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	eba0 000a 	sub.w	r0, r0, sl
 800889e:	2240      	movs	r2, #64	@ 0x40
 80088a0:	4082      	lsls	r2, r0
 80088a2:	4313      	orrs	r3, r2
 80088a4:	3401      	adds	r4, #1
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ac:	4824      	ldr	r0, [pc, #144]	@ (8008940 <_svfiprintf_r+0x1e8>)
 80088ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088b2:	2206      	movs	r2, #6
 80088b4:	f7f7 fcc4 	bl	8000240 <memchr>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d036      	beq.n	800892a <_svfiprintf_r+0x1d2>
 80088bc:	4b21      	ldr	r3, [pc, #132]	@ (8008944 <_svfiprintf_r+0x1ec>)
 80088be:	bb1b      	cbnz	r3, 8008908 <_svfiprintf_r+0x1b0>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	3307      	adds	r3, #7
 80088c4:	f023 0307 	bic.w	r3, r3, #7
 80088c8:	3308      	adds	r3, #8
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ce:	4433      	add	r3, r6
 80088d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d2:	e76a      	b.n	80087aa <_svfiprintf_r+0x52>
 80088d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d8:	460c      	mov	r4, r1
 80088da:	2001      	movs	r0, #1
 80088dc:	e7a8      	b.n	8008830 <_svfiprintf_r+0xd8>
 80088de:	2300      	movs	r3, #0
 80088e0:	3401      	adds	r4, #1
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	4619      	mov	r1, r3
 80088e6:	f04f 0c0a 	mov.w	ip, #10
 80088ea:	4620      	mov	r0, r4
 80088ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f0:	3a30      	subs	r2, #48	@ 0x30
 80088f2:	2a09      	cmp	r2, #9
 80088f4:	d903      	bls.n	80088fe <_svfiprintf_r+0x1a6>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0c6      	beq.n	8008888 <_svfiprintf_r+0x130>
 80088fa:	9105      	str	r1, [sp, #20]
 80088fc:	e7c4      	b.n	8008888 <_svfiprintf_r+0x130>
 80088fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008902:	4604      	mov	r4, r0
 8008904:	2301      	movs	r3, #1
 8008906:	e7f0      	b.n	80088ea <_svfiprintf_r+0x192>
 8008908:	ab03      	add	r3, sp, #12
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	462a      	mov	r2, r5
 800890e:	4b0e      	ldr	r3, [pc, #56]	@ (8008948 <_svfiprintf_r+0x1f0>)
 8008910:	a904      	add	r1, sp, #16
 8008912:	4638      	mov	r0, r7
 8008914:	f7fd fdf0 	bl	80064f8 <_printf_float>
 8008918:	1c42      	adds	r2, r0, #1
 800891a:	4606      	mov	r6, r0
 800891c:	d1d6      	bne.n	80088cc <_svfiprintf_r+0x174>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	065b      	lsls	r3, r3, #25
 8008922:	f53f af2d 	bmi.w	8008780 <_svfiprintf_r+0x28>
 8008926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008928:	e72c      	b.n	8008784 <_svfiprintf_r+0x2c>
 800892a:	ab03      	add	r3, sp, #12
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	462a      	mov	r2, r5
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <_svfiprintf_r+0x1f0>)
 8008932:	a904      	add	r1, sp, #16
 8008934:	4638      	mov	r0, r7
 8008936:	f7fe f867 	bl	8006a08 <_printf_i>
 800893a:	e7ed      	b.n	8008918 <_svfiprintf_r+0x1c0>
 800893c:	08009540 	.word	0x08009540
 8008940:	0800954a 	.word	0x0800954a
 8008944:	080064f9 	.word	0x080064f9
 8008948:	080086a1 	.word	0x080086a1
 800894c:	08009546 	.word	0x08009546

08008950 <__sfputc_r>:
 8008950:	6893      	ldr	r3, [r2, #8]
 8008952:	3b01      	subs	r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	b410      	push	{r4}
 8008958:	6093      	str	r3, [r2, #8]
 800895a:	da08      	bge.n	800896e <__sfputc_r+0x1e>
 800895c:	6994      	ldr	r4, [r2, #24]
 800895e:	42a3      	cmp	r3, r4
 8008960:	db01      	blt.n	8008966 <__sfputc_r+0x16>
 8008962:	290a      	cmp	r1, #10
 8008964:	d103      	bne.n	800896e <__sfputc_r+0x1e>
 8008966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800896a:	f7fe bb16 	b.w	8006f9a <__swbuf_r>
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	1c58      	adds	r0, r3, #1
 8008972:	6010      	str	r0, [r2, #0]
 8008974:	7019      	strb	r1, [r3, #0]
 8008976:	4608      	mov	r0, r1
 8008978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800897c:	4770      	bx	lr

0800897e <__sfputs_r>:
 800897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4614      	mov	r4, r2
 8008986:	18d5      	adds	r5, r2, r3
 8008988:	42ac      	cmp	r4, r5
 800898a:	d101      	bne.n	8008990 <__sfputs_r+0x12>
 800898c:	2000      	movs	r0, #0
 800898e:	e007      	b.n	80089a0 <__sfputs_r+0x22>
 8008990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008994:	463a      	mov	r2, r7
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ffda 	bl	8008950 <__sfputc_r>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d1f3      	bne.n	8008988 <__sfputs_r+0xa>
 80089a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089a4 <_vfiprintf_r>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	460d      	mov	r5, r1
 80089aa:	b09d      	sub	sp, #116	@ 0x74
 80089ac:	4614      	mov	r4, r2
 80089ae:	4698      	mov	r8, r3
 80089b0:	4606      	mov	r6, r0
 80089b2:	b118      	cbz	r0, 80089bc <_vfiprintf_r+0x18>
 80089b4:	6a03      	ldr	r3, [r0, #32]
 80089b6:	b90b      	cbnz	r3, 80089bc <_vfiprintf_r+0x18>
 80089b8:	f7fe f9d2 	bl	8006d60 <__sinit>
 80089bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089be:	07d9      	lsls	r1, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_vfiprintf_r+0x2a>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	059a      	lsls	r2, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_vfiprintf_r+0x2a>
 80089c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089ca:	f7fe fbf8 	bl	80071be <__retarget_lock_acquire_recursive>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	071b      	lsls	r3, r3, #28
 80089d2:	d501      	bpl.n	80089d8 <_vfiprintf_r+0x34>
 80089d4:	692b      	ldr	r3, [r5, #16]
 80089d6:	b99b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x5c>
 80089d8:	4629      	mov	r1, r5
 80089da:	4630      	mov	r0, r6
 80089dc:	f7fe fb1c 	bl	8007018 <__swsetup_r>
 80089e0:	b170      	cbz	r0, 8008a00 <_vfiprintf_r+0x5c>
 80089e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089e4:	07dc      	lsls	r4, r3, #31
 80089e6:	d504      	bpl.n	80089f2 <_vfiprintf_r+0x4e>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b01d      	add	sp, #116	@ 0x74
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	0598      	lsls	r0, r3, #22
 80089f6:	d4f7      	bmi.n	80089e8 <_vfiprintf_r+0x44>
 80089f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089fa:	f7fe fbe1 	bl	80071c0 <__retarget_lock_release_recursive>
 80089fe:	e7f3      	b.n	80089e8 <_vfiprintf_r+0x44>
 8008a00:	2300      	movs	r3, #0
 8008a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a04:	2320      	movs	r3, #32
 8008a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a0e:	2330      	movs	r3, #48	@ 0x30
 8008a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bc0 <_vfiprintf_r+0x21c>
 8008a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a18:	f04f 0901 	mov.w	r9, #1
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	469a      	mov	sl, r3
 8008a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a24:	b10a      	cbz	r2, 8008a2a <_vfiprintf_r+0x86>
 8008a26:	2a25      	cmp	r2, #37	@ 0x25
 8008a28:	d1f9      	bne.n	8008a1e <_vfiprintf_r+0x7a>
 8008a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a2e:	d00b      	beq.n	8008a48 <_vfiprintf_r+0xa4>
 8008a30:	465b      	mov	r3, fp
 8008a32:	4622      	mov	r2, r4
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff ffa1 	bl	800897e <__sfputs_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f000 80a7 	beq.w	8008b90 <_vfiprintf_r+0x1ec>
 8008a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a44:	445a      	add	r2, fp
 8008a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a48:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 809f 	beq.w	8008b90 <_vfiprintf_r+0x1ec>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5c:	f10a 0a01 	add.w	sl, sl, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	9307      	str	r3, [sp, #28]
 8008a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a6a:	4654      	mov	r4, sl
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a72:	4853      	ldr	r0, [pc, #332]	@ (8008bc0 <_vfiprintf_r+0x21c>)
 8008a74:	f7f7 fbe4 	bl	8000240 <memchr>
 8008a78:	9a04      	ldr	r2, [sp, #16]
 8008a7a:	b9d8      	cbnz	r0, 8008ab4 <_vfiprintf_r+0x110>
 8008a7c:	06d1      	lsls	r1, r2, #27
 8008a7e:	bf44      	itt	mi
 8008a80:	2320      	movmi	r3, #32
 8008a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a86:	0713      	lsls	r3, r2, #28
 8008a88:	bf44      	itt	mi
 8008a8a:	232b      	movmi	r3, #43	@ 0x2b
 8008a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a90:	f89a 3000 	ldrb.w	r3, [sl]
 8008a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a96:	d015      	beq.n	8008ac4 <_vfiprintf_r+0x120>
 8008a98:	9a07      	ldr	r2, [sp, #28]
 8008a9a:	4654      	mov	r4, sl
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f04f 0c0a 	mov.w	ip, #10
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa8:	3b30      	subs	r3, #48	@ 0x30
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d94b      	bls.n	8008b46 <_vfiprintf_r+0x1a2>
 8008aae:	b1b0      	cbz	r0, 8008ade <_vfiprintf_r+0x13a>
 8008ab0:	9207      	str	r2, [sp, #28]
 8008ab2:	e014      	b.n	8008ade <_vfiprintf_r+0x13a>
 8008ab4:	eba0 0308 	sub.w	r3, r0, r8
 8008ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8008abc:	4313      	orrs	r3, r2
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	46a2      	mov	sl, r4
 8008ac2:	e7d2      	b.n	8008a6a <_vfiprintf_r+0xc6>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	1d19      	adds	r1, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	9103      	str	r1, [sp, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfbb      	ittet	lt
 8008ad0:	425b      	neglt	r3, r3
 8008ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad6:	9307      	strge	r3, [sp, #28]
 8008ad8:	9307      	strlt	r3, [sp, #28]
 8008ada:	bfb8      	it	lt
 8008adc:	9204      	strlt	r2, [sp, #16]
 8008ade:	7823      	ldrb	r3, [r4, #0]
 8008ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ae2:	d10a      	bne.n	8008afa <_vfiprintf_r+0x156>
 8008ae4:	7863      	ldrb	r3, [r4, #1]
 8008ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae8:	d132      	bne.n	8008b50 <_vfiprintf_r+0x1ac>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	1d1a      	adds	r2, r3, #4
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	9203      	str	r2, [sp, #12]
 8008af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008af6:	3402      	adds	r4, #2
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bd0 <_vfiprintf_r+0x22c>
 8008afe:	7821      	ldrb	r1, [r4, #0]
 8008b00:	2203      	movs	r2, #3
 8008b02:	4650      	mov	r0, sl
 8008b04:	f7f7 fb9c 	bl	8000240 <memchr>
 8008b08:	b138      	cbz	r0, 8008b1a <_vfiprintf_r+0x176>
 8008b0a:	9b04      	ldr	r3, [sp, #16]
 8008b0c:	eba0 000a 	sub.w	r0, r0, sl
 8008b10:	2240      	movs	r2, #64	@ 0x40
 8008b12:	4082      	lsls	r2, r0
 8008b14:	4313      	orrs	r3, r2
 8008b16:	3401      	adds	r4, #1
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b1e:	4829      	ldr	r0, [pc, #164]	@ (8008bc4 <_vfiprintf_r+0x220>)
 8008b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b24:	2206      	movs	r2, #6
 8008b26:	f7f7 fb8b 	bl	8000240 <memchr>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d03f      	beq.n	8008bae <_vfiprintf_r+0x20a>
 8008b2e:	4b26      	ldr	r3, [pc, #152]	@ (8008bc8 <_vfiprintf_r+0x224>)
 8008b30:	bb1b      	cbnz	r3, 8008b7a <_vfiprintf_r+0x1d6>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	3307      	adds	r3, #7
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	9303      	str	r3, [sp, #12]
 8008b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b40:	443b      	add	r3, r7
 8008b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b44:	e76a      	b.n	8008a1c <_vfiprintf_r+0x78>
 8008b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	e7a8      	b.n	8008aa2 <_vfiprintf_r+0xfe>
 8008b50:	2300      	movs	r3, #0
 8008b52:	3401      	adds	r4, #1
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	4619      	mov	r1, r3
 8008b58:	f04f 0c0a 	mov.w	ip, #10
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b62:	3a30      	subs	r2, #48	@ 0x30
 8008b64:	2a09      	cmp	r2, #9
 8008b66:	d903      	bls.n	8008b70 <_vfiprintf_r+0x1cc>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0c6      	beq.n	8008afa <_vfiprintf_r+0x156>
 8008b6c:	9105      	str	r1, [sp, #20]
 8008b6e:	e7c4      	b.n	8008afa <_vfiprintf_r+0x156>
 8008b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b74:	4604      	mov	r4, r0
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7f0      	b.n	8008b5c <_vfiprintf_r+0x1b8>
 8008b7a:	ab03      	add	r3, sp, #12
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4b12      	ldr	r3, [pc, #72]	@ (8008bcc <_vfiprintf_r+0x228>)
 8008b82:	a904      	add	r1, sp, #16
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7fd fcb7 	bl	80064f8 <_printf_float>
 8008b8a:	4607      	mov	r7, r0
 8008b8c:	1c78      	adds	r0, r7, #1
 8008b8e:	d1d6      	bne.n	8008b3e <_vfiprintf_r+0x19a>
 8008b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	d405      	bmi.n	8008ba2 <_vfiprintf_r+0x1fe>
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	059a      	lsls	r2, r3, #22
 8008b9a:	d402      	bmi.n	8008ba2 <_vfiprintf_r+0x1fe>
 8008b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b9e:	f7fe fb0f 	bl	80071c0 <__retarget_lock_release_recursive>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	065b      	lsls	r3, r3, #25
 8008ba6:	f53f af1f 	bmi.w	80089e8 <_vfiprintf_r+0x44>
 8008baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bac:	e71e      	b.n	80089ec <_vfiprintf_r+0x48>
 8008bae:	ab03      	add	r3, sp, #12
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <_vfiprintf_r+0x228>)
 8008bb6:	a904      	add	r1, sp, #16
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7fd ff25 	bl	8006a08 <_printf_i>
 8008bbe:	e7e4      	b.n	8008b8a <_vfiprintf_r+0x1e6>
 8008bc0:	08009540 	.word	0x08009540
 8008bc4:	0800954a 	.word	0x0800954a
 8008bc8:	080064f9 	.word	0x080064f9
 8008bcc:	0800897f 	.word	0x0800897f
 8008bd0:	08009546 	.word	0x08009546

08008bd4 <__sflush_r>:
 8008bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	0716      	lsls	r6, r2, #28
 8008bde:	4605      	mov	r5, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	d454      	bmi.n	8008c8e <__sflush_r+0xba>
 8008be4:	684b      	ldr	r3, [r1, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dc02      	bgt.n	8008bf0 <__sflush_r+0x1c>
 8008bea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd48      	ble.n	8008c82 <__sflush_r+0xae>
 8008bf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bf2:	2e00      	cmp	r6, #0
 8008bf4:	d045      	beq.n	8008c82 <__sflush_r+0xae>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bfc:	682f      	ldr	r7, [r5, #0]
 8008bfe:	6a21      	ldr	r1, [r4, #32]
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	d030      	beq.n	8008c66 <__sflush_r+0x92>
 8008c04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	0759      	lsls	r1, r3, #29
 8008c0a:	d505      	bpl.n	8008c18 <__sflush_r+0x44>
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c12:	b10b      	cbz	r3, 8008c18 <__sflush_r+0x44>
 8008c14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c1c:	6a21      	ldr	r1, [r4, #32]
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b0      	blx	r6
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	d106      	bne.n	8008c36 <__sflush_r+0x62>
 8008c28:	6829      	ldr	r1, [r5, #0]
 8008c2a:	291d      	cmp	r1, #29
 8008c2c:	d82b      	bhi.n	8008c86 <__sflush_r+0xb2>
 8008c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd8 <__sflush_r+0x104>)
 8008c30:	410a      	asrs	r2, r1
 8008c32:	07d6      	lsls	r6, r2, #31
 8008c34:	d427      	bmi.n	8008c86 <__sflush_r+0xb2>
 8008c36:	2200      	movs	r2, #0
 8008c38:	6062      	str	r2, [r4, #4]
 8008c3a:	04d9      	lsls	r1, r3, #19
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	6022      	str	r2, [r4, #0]
 8008c40:	d504      	bpl.n	8008c4c <__sflush_r+0x78>
 8008c42:	1c42      	adds	r2, r0, #1
 8008c44:	d101      	bne.n	8008c4a <__sflush_r+0x76>
 8008c46:	682b      	ldr	r3, [r5, #0]
 8008c48:	b903      	cbnz	r3, 8008c4c <__sflush_r+0x78>
 8008c4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c4e:	602f      	str	r7, [r5, #0]
 8008c50:	b1b9      	cbz	r1, 8008c82 <__sflush_r+0xae>
 8008c52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c56:	4299      	cmp	r1, r3
 8008c58:	d002      	beq.n	8008c60 <__sflush_r+0x8c>
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7ff f89e 	bl	8007d9c <_free_r>
 8008c60:	2300      	movs	r3, #0
 8008c62:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c64:	e00d      	b.n	8008c82 <__sflush_r+0xae>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b0      	blx	r6
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	1c50      	adds	r0, r2, #1
 8008c70:	d1c9      	bne.n	8008c06 <__sflush_r+0x32>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0c6      	beq.n	8008c06 <__sflush_r+0x32>
 8008c78:	2b1d      	cmp	r3, #29
 8008c7a:	d001      	beq.n	8008c80 <__sflush_r+0xac>
 8008c7c:	2b16      	cmp	r3, #22
 8008c7e:	d11e      	bne.n	8008cbe <__sflush_r+0xea>
 8008c80:	602f      	str	r7, [r5, #0]
 8008c82:	2000      	movs	r0, #0
 8008c84:	e022      	b.n	8008ccc <__sflush_r+0xf8>
 8008c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c8a:	b21b      	sxth	r3, r3
 8008c8c:	e01b      	b.n	8008cc6 <__sflush_r+0xf2>
 8008c8e:	690f      	ldr	r7, [r1, #16]
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	d0f6      	beq.n	8008c82 <__sflush_r+0xae>
 8008c94:	0793      	lsls	r3, r2, #30
 8008c96:	680e      	ldr	r6, [r1, #0]
 8008c98:	bf08      	it	eq
 8008c9a:	694b      	ldreq	r3, [r1, #20]
 8008c9c:	600f      	str	r7, [r1, #0]
 8008c9e:	bf18      	it	ne
 8008ca0:	2300      	movne	r3, #0
 8008ca2:	eba6 0807 	sub.w	r8, r6, r7
 8008ca6:	608b      	str	r3, [r1, #8]
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	dde9      	ble.n	8008c82 <__sflush_r+0xae>
 8008cae:	6a21      	ldr	r1, [r4, #32]
 8008cb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cb2:	4643      	mov	r3, r8
 8008cb4:	463a      	mov	r2, r7
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	47b0      	blx	r6
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	dc08      	bgt.n	8008cd0 <__sflush_r+0xfc>
 8008cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd0:	4407      	add	r7, r0
 8008cd2:	eba8 0800 	sub.w	r8, r8, r0
 8008cd6:	e7e7      	b.n	8008ca8 <__sflush_r+0xd4>
 8008cd8:	dfbffffe 	.word	0xdfbffffe

08008cdc <_fflush_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	690b      	ldr	r3, [r1, #16]
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	b913      	cbnz	r3, 8008cec <_fflush_r+0x10>
 8008ce6:	2500      	movs	r5, #0
 8008ce8:	4628      	mov	r0, r5
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	b118      	cbz	r0, 8008cf6 <_fflush_r+0x1a>
 8008cee:	6a03      	ldr	r3, [r0, #32]
 8008cf0:	b90b      	cbnz	r3, 8008cf6 <_fflush_r+0x1a>
 8008cf2:	f7fe f835 	bl	8006d60 <__sinit>
 8008cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f3      	beq.n	8008ce6 <_fflush_r+0xa>
 8008cfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d00:	07d0      	lsls	r0, r2, #31
 8008d02:	d404      	bmi.n	8008d0e <_fflush_r+0x32>
 8008d04:	0599      	lsls	r1, r3, #22
 8008d06:	d402      	bmi.n	8008d0e <_fflush_r+0x32>
 8008d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d0a:	f7fe fa58 	bl	80071be <__retarget_lock_acquire_recursive>
 8008d0e:	4628      	mov	r0, r5
 8008d10:	4621      	mov	r1, r4
 8008d12:	f7ff ff5f 	bl	8008bd4 <__sflush_r>
 8008d16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d18:	07da      	lsls	r2, r3, #31
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	d4e4      	bmi.n	8008ce8 <_fflush_r+0xc>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	059b      	lsls	r3, r3, #22
 8008d22:	d4e1      	bmi.n	8008ce8 <_fflush_r+0xc>
 8008d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d26:	f7fe fa4b 	bl	80071c0 <__retarget_lock_release_recursive>
 8008d2a:	e7dd      	b.n	8008ce8 <_fflush_r+0xc>

08008d2c <__swhatbuf_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	460c      	mov	r4, r1
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	2900      	cmp	r1, #0
 8008d36:	b096      	sub	sp, #88	@ 0x58
 8008d38:	4615      	mov	r5, r2
 8008d3a:	461e      	mov	r6, r3
 8008d3c:	da0d      	bge.n	8008d5a <__swhatbuf_r+0x2e>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d44:	f04f 0100 	mov.w	r1, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2340      	movne	r3, #64	@ 0x40
 8008d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d50:	2000      	movs	r0, #0
 8008d52:	6031      	str	r1, [r6, #0]
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	b016      	add	sp, #88	@ 0x58
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	466a      	mov	r2, sp
 8008d5c:	f000 f862 	bl	8008e24 <_fstat_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dbec      	blt.n	8008d3e <__swhatbuf_r+0x12>
 8008d64:	9901      	ldr	r1, [sp, #4]
 8008d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d6e:	4259      	negs	r1, r3
 8008d70:	4159      	adcs	r1, r3
 8008d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d76:	e7eb      	b.n	8008d50 <__swhatbuf_r+0x24>

08008d78 <__smakebuf_r>:
 8008d78:	898b      	ldrh	r3, [r1, #12]
 8008d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7c:	079d      	lsls	r5, r3, #30
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	d507      	bpl.n	8008d94 <__smakebuf_r+0x1c>
 8008d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	b003      	add	sp, #12
 8008d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d94:	ab01      	add	r3, sp, #4
 8008d96:	466a      	mov	r2, sp
 8008d98:	f7ff ffc8 	bl	8008d2c <__swhatbuf_r>
 8008d9c:	9f00      	ldr	r7, [sp, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	4639      	mov	r1, r7
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff f86e 	bl	8007e84 <_malloc_r>
 8008da8:	b948      	cbnz	r0, 8008dbe <__smakebuf_r+0x46>
 8008daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dae:	059a      	lsls	r2, r3, #22
 8008db0:	d4ee      	bmi.n	8008d90 <__smakebuf_r+0x18>
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	e7e2      	b.n	8008d84 <__smakebuf_r+0xc>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	6020      	str	r0, [r4, #0]
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dce:	b15b      	cbz	r3, 8008de8 <__smakebuf_r+0x70>
 8008dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f837 	bl	8008e48 <_isatty_r>
 8008dda:	b128      	cbz	r0, 8008de8 <__smakebuf_r+0x70>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	431d      	orrs	r5, r3
 8008dec:	81a5      	strh	r5, [r4, #12]
 8008dee:	e7cf      	b.n	8008d90 <__smakebuf_r+0x18>

08008df0 <memmove>:
 8008df0:	4288      	cmp	r0, r1
 8008df2:	b510      	push	{r4, lr}
 8008df4:	eb01 0402 	add.w	r4, r1, r2
 8008df8:	d902      	bls.n	8008e00 <memmove+0x10>
 8008dfa:	4284      	cmp	r4, r0
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	d807      	bhi.n	8008e10 <memmove+0x20>
 8008e00:	1e43      	subs	r3, r0, #1
 8008e02:	42a1      	cmp	r1, r4
 8008e04:	d008      	beq.n	8008e18 <memmove+0x28>
 8008e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e0e:	e7f8      	b.n	8008e02 <memmove+0x12>
 8008e10:	4402      	add	r2, r0
 8008e12:	4601      	mov	r1, r0
 8008e14:	428a      	cmp	r2, r1
 8008e16:	d100      	bne.n	8008e1a <memmove+0x2a>
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e22:	e7f7      	b.n	8008e14 <memmove+0x24>

08008e24 <_fstat_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	@ (8008e44 <_fstat_r+0x20>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	f7f8 ffe5 	bl	8001e00 <_fstat>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	d102      	bne.n	8008e40 <_fstat_r+0x1c>
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	b103      	cbz	r3, 8008e40 <_fstat_r+0x1c>
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	20000dcc 	.word	0x20000dcc

08008e48 <_isatty_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d06      	ldr	r5, [pc, #24]	@ (8008e64 <_isatty_r+0x1c>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	f7f8 ffe4 	bl	8001e20 <_isatty>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_isatty_r+0x1a>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_isatty_r+0x1a>
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	20000dcc 	.word	0x20000dcc

08008e68 <_sbrk_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d06      	ldr	r5, [pc, #24]	@ (8008e84 <_sbrk_r+0x1c>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f8 ffec 	bl	8001e50 <_sbrk>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_sbrk_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_sbrk_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000dcc 	.word	0x20000dcc

08008e88 <__assert_func>:
 8008e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b09      	ldr	r3, [pc, #36]	@ (8008eb4 <__assert_func+0x2c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4605      	mov	r5, r0
 8008e94:	68d8      	ldr	r0, [r3, #12]
 8008e96:	b954      	cbnz	r4, 8008eae <__assert_func+0x26>
 8008e98:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <__assert_func+0x30>)
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea0:	9100      	str	r1, [sp, #0]
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	4905      	ldr	r1, [pc, #20]	@ (8008ebc <__assert_func+0x34>)
 8008ea6:	f000 f86f 	bl	8008f88 <fiprintf>
 8008eaa:	f000 f87f 	bl	8008fac <abort>
 8008eae:	4b04      	ldr	r3, [pc, #16]	@ (8008ec0 <__assert_func+0x38>)
 8008eb0:	e7f4      	b.n	8008e9c <__assert_func+0x14>
 8008eb2:	bf00      	nop
 8008eb4:	20000024 	.word	0x20000024
 8008eb8:	08009596 	.word	0x08009596
 8008ebc:	08009568 	.word	0x08009568
 8008ec0:	0800955b 	.word	0x0800955b

08008ec4 <_calloc_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	fba1 5402 	umull	r5, r4, r1, r2
 8008eca:	b93c      	cbnz	r4, 8008edc <_calloc_r+0x18>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7fe ffd9 	bl	8007e84 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <_calloc_r+0x1e>
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	4630      	mov	r0, r6
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	220c      	movs	r2, #12
 8008ede:	6002      	str	r2, [r0, #0]
 8008ee0:	e7f9      	b.n	8008ed6 <_calloc_r+0x12>
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7fe f8ed 	bl	80070c4 <memset>
 8008eea:	e7f5      	b.n	8008ed8 <_calloc_r+0x14>

08008eec <__ascii_mbtowc>:
 8008eec:	b082      	sub	sp, #8
 8008eee:	b901      	cbnz	r1, 8008ef2 <__ascii_mbtowc+0x6>
 8008ef0:	a901      	add	r1, sp, #4
 8008ef2:	b142      	cbz	r2, 8008f06 <__ascii_mbtowc+0x1a>
 8008ef4:	b14b      	cbz	r3, 8008f0a <__ascii_mbtowc+0x1e>
 8008ef6:	7813      	ldrb	r3, [r2, #0]
 8008ef8:	600b      	str	r3, [r1, #0]
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	1e10      	subs	r0, r2, #0
 8008efe:	bf18      	it	ne
 8008f00:	2001      	movne	r0, #1
 8008f02:	b002      	add	sp, #8
 8008f04:	4770      	bx	lr
 8008f06:	4610      	mov	r0, r2
 8008f08:	e7fb      	b.n	8008f02 <__ascii_mbtowc+0x16>
 8008f0a:	f06f 0001 	mvn.w	r0, #1
 8008f0e:	e7f8      	b.n	8008f02 <__ascii_mbtowc+0x16>

08008f10 <_realloc_r>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	4680      	mov	r8, r0
 8008f16:	4615      	mov	r5, r2
 8008f18:	460c      	mov	r4, r1
 8008f1a:	b921      	cbnz	r1, 8008f26 <_realloc_r+0x16>
 8008f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	4611      	mov	r1, r2
 8008f22:	f7fe bfaf 	b.w	8007e84 <_malloc_r>
 8008f26:	b92a      	cbnz	r2, 8008f34 <_realloc_r+0x24>
 8008f28:	f7fe ff38 	bl	8007d9c <_free_r>
 8008f2c:	2400      	movs	r4, #0
 8008f2e:	4620      	mov	r0, r4
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	f000 f841 	bl	8008fba <_malloc_usable_size_r>
 8008f38:	4285      	cmp	r5, r0
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	d802      	bhi.n	8008f44 <_realloc_r+0x34>
 8008f3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f42:	d8f4      	bhi.n	8008f2e <_realloc_r+0x1e>
 8008f44:	4629      	mov	r1, r5
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7fe ff9c 	bl	8007e84 <_malloc_r>
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d0ec      	beq.n	8008f2c <_realloc_r+0x1c>
 8008f52:	42b5      	cmp	r5, r6
 8008f54:	462a      	mov	r2, r5
 8008f56:	4621      	mov	r1, r4
 8008f58:	bf28      	it	cs
 8008f5a:	4632      	movcs	r2, r6
 8008f5c:	f7fe f931 	bl	80071c2 <memcpy>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4640      	mov	r0, r8
 8008f64:	f7fe ff1a 	bl	8007d9c <_free_r>
 8008f68:	463c      	mov	r4, r7
 8008f6a:	e7e0      	b.n	8008f2e <_realloc_r+0x1e>

08008f6c <__ascii_wctomb>:
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	b141      	cbz	r1, 8008f84 <__ascii_wctomb+0x18>
 8008f72:	2aff      	cmp	r2, #255	@ 0xff
 8008f74:	d904      	bls.n	8008f80 <__ascii_wctomb+0x14>
 8008f76:	228a      	movs	r2, #138	@ 0x8a
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	4770      	bx	lr
 8008f80:	700a      	strb	r2, [r1, #0]
 8008f82:	2001      	movs	r0, #1
 8008f84:	4770      	bx	lr
	...

08008f88 <fiprintf>:
 8008f88:	b40e      	push	{r1, r2, r3}
 8008f8a:	b503      	push	{r0, r1, lr}
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	4805      	ldr	r0, [pc, #20]	@ (8008fa8 <fiprintf+0x20>)
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	6800      	ldr	r0, [r0, #0]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	f7ff fd03 	bl	80089a4 <_vfiprintf_r>
 8008f9e:	b002      	add	sp, #8
 8008fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa4:	b003      	add	sp, #12
 8008fa6:	4770      	bx	lr
 8008fa8:	20000024 	.word	0x20000024

08008fac <abort>:
 8008fac:	b508      	push	{r3, lr}
 8008fae:	2006      	movs	r0, #6
 8008fb0:	f000 f834 	bl	800901c <raise>
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7f8 feef 	bl	8001d98 <_exit>

08008fba <_malloc_usable_size_r>:
 8008fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbe:	1f18      	subs	r0, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfbc      	itt	lt
 8008fc4:	580b      	ldrlt	r3, [r1, r0]
 8008fc6:	18c0      	addlt	r0, r0, r3
 8008fc8:	4770      	bx	lr

08008fca <_raise_r>:
 8008fca:	291f      	cmp	r1, #31
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4605      	mov	r5, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	d904      	bls.n	8008fde <_raise_r+0x14>
 8008fd4:	2316      	movs	r3, #22
 8008fd6:	6003      	str	r3, [r0, #0]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fe0:	b112      	cbz	r2, 8008fe8 <_raise_r+0x1e>
 8008fe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe6:	b94b      	cbnz	r3, 8008ffc <_raise_r+0x32>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f831 	bl	8009050 <_getpid_r>
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4601      	mov	r1, r0
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff8:	f000 b818 	b.w	800902c <_kill_r>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d00a      	beq.n	8009016 <_raise_r+0x4c>
 8009000:	1c59      	adds	r1, r3, #1
 8009002:	d103      	bne.n	800900c <_raise_r+0x42>
 8009004:	2316      	movs	r3, #22
 8009006:	6003      	str	r3, [r0, #0]
 8009008:	2001      	movs	r0, #1
 800900a:	e7e7      	b.n	8008fdc <_raise_r+0x12>
 800900c:	2100      	movs	r1, #0
 800900e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009012:	4620      	mov	r0, r4
 8009014:	4798      	blx	r3
 8009016:	2000      	movs	r0, #0
 8009018:	e7e0      	b.n	8008fdc <_raise_r+0x12>
	...

0800901c <raise>:
 800901c:	4b02      	ldr	r3, [pc, #8]	@ (8009028 <raise+0xc>)
 800901e:	4601      	mov	r1, r0
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f7ff bfd2 	b.w	8008fca <_raise_r>
 8009026:	bf00      	nop
 8009028:	20000024 	.word	0x20000024

0800902c <_kill_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d07      	ldr	r5, [pc, #28]	@ (800904c <_kill_r+0x20>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	4611      	mov	r1, r2
 8009038:	602b      	str	r3, [r5, #0]
 800903a:	f7f8 fe9d 	bl	8001d78 <_kill>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	d102      	bne.n	8009048 <_kill_r+0x1c>
 8009042:	682b      	ldr	r3, [r5, #0]
 8009044:	b103      	cbz	r3, 8009048 <_kill_r+0x1c>
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	bd38      	pop	{r3, r4, r5, pc}
 800904a:	bf00      	nop
 800904c:	20000dcc 	.word	0x20000dcc

08009050 <_getpid_r>:
 8009050:	f7f8 be8a 	b.w	8001d68 <_getpid>

08009054 <_init>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr

08009060 <_fini>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr
